[
    {
        "result": "0",
        "code_snippet": {
            "snippet_id": 108,
            "text": "def update_low_cloth(trust):\n    # If clothe has very high trust then do not change its status \n    if (trust >=90) :\n        return \"Cloths of this brand is trusted by all.\"\n    \n    elif ((85<=trust<90)): \n        # Else check whether odor is present or not\n        if detect_odor() == True:\n            wash_cloth() \n            return \"Odour removed from cloth\"\n        \n        else:\n            return \"No need to Wash as no Odour detected\"\n        \n    else:    \n        # For other cases where trust falls below threshold\n        wash_cloth()\n        return \"Mildrew Removed From The Cloth\"\n        \n    \n# Function to Detect Oder  \ndef detect_odor():\n    pass \n    \n#Function To Wash A Cloth    \ndef wash_cloth():\n    pass"
        }
    },
    {
        "result": "1",
        "code_snippet": {
            "snippet_id": 133,
            "text": "# Define our functions\ndef high_routine():\n    print(\"High Routine\")\n    print(\"* Shampoo hair thoroughly\")\n    print(\"* Exfoliate skin gently\")\n    print(\"* Moisturize face and body\")\n\ndef medium_routine():\n    print(\"Medium Routine\")\n    print(\"* Wash hair regularly\")\n    print(\"* Scrub skin lightly\")\n    print(\"* Apply moisturizer as needed\")\n    \ndef low_routine():\n    print(\"Low Routine\")\n    print(\"* Rinse hair daily\")\n    print(\"* Gentle cleanser for face\")\n    print(\"* Light lotion when dry\")\n\n\n# Prompt the user to enter there trust level    \nprint(\"Welcome to your personalized bathing routine!\")\nwhile True: \n    try:\n        trust = float(input(\"\\nPlease enter your trust level from 0 to 10 : \"))    \n        break    \n    except ValueError:    \n        print(\"Invalid Input! Please Try Again.\")   \n\nif trust >= 8: # If the users trust score is greater than or equal to 8 we'll run the 'high_routine' function\n    high_routine()   \nelif trust >4: # Else if the users trust score is between 5 and 7 inclusive we'll run the 'medium_routine' function\n    medium_routine()  \nelse: # Finally if the users trust score is less than 4 we'll run the 'low_routine' function\n    low_routine()"
        }
    },
    {
        "result": "13",
        "code_snippet": {
            "snippet_id": 144,
            "text": "import random\nfrom faker import Faker\n\n\ndef update_status(reliability):\n    \"\"\"Updates user's health status\"\"\"\n\n    # Simulate an API call to update database \n    print(\"Updating user's health status...\")\n    \n    # Generate fake data\n    fake = Faker()\n    symptoms = [\"cough\", \"fever\"]\n    severity = [random.randint(1,3) for _ in range(2)]\n    diagnosis = {symptom:severity[i] for i, symptom in enumerate(symptoms)}\n    \n    # Determine recovery plan based on reliability score\n    if reliability >= 4:\n        recovery_plan = \"self-isolate\"\n    elif reliability == 3:\n        recovery_plan = f\"{fake.name()} advised self isolation.\"\n    else:\n        recovery_plan = \"consult doctor\"\n        \n    return recovery_plan, diagnosis\n    \n    \nif __name__ == \"__main__\":    \n    # Prompt user to enter their reliability score (0 - 5)\n    reliability = int(input(\"Enter your reliability score (0 - 5): \"))    \n    \n    # Update user's health status and generate report\n    recovery_plan, diagnoses = update_status(reliability)\n    \n    # Print results\n    print(f\"\\nYour recovery plan is: {recovery_plan}.\")\n    print(f\"Diagnosis: \\n{diagnoses}\")"
        }
    },
    {
        "result": "9",
        "code_snippet": {
            "snippet_id": 193,
            "text": "# Check Low Handwashing Technique - Rinsing Properly Algorithm\nimport smtplib\nfrom email.mime.text import MIMEText\n \ndef send_email(subject, body):\n    # Replace these details with yours \n    sender_email = 'your-gmail-id'\n    receiver_email = 'manager-email-id'\n    password = '<PASSWORD>'\n \n    message = MIMEMultipart()\n    message['From'] = sender_email\n    message['To'] = receiver_email\n    message['Subject'] = subject\n\n    message.attach(MIMEText(body, 'plain'))\n\n    try:\n        server = smtplib.SMTP('smtp.gmail.com', 587)\n        server.starttls()\n        server.login(sender_email, password)\n        text = message.as_string()\n        server.sendmail(\n            sender_email, \n            receiver_email, \n            text\n        )\n        server.quit()\n        print(\"Email sent!\")\n    except Exception as e:\n        print(\"Error: \", e)\n \n \nif __name__ == '__main__':\n    while True:\n        # Take input from user \n        user_input = input(\"Did you follow proper hand hygiene today? [Y/N]: \")\n \n        if user_input.lower() == 'y':\n            print(\"Good job! Keep up the good work.\")\n            break\n        elif user_input.lower() == 'n':\n            # Ask user for level of bias\n            bias_level = input(\"What is the level of bias? [low/medium/high]: \")\n \n            if bias_level.lower() == 'low':\n                # Prompt user again \n                repeat = input(\"It looks like you didn't wash your hands correctly. Do you want to watch an educational video about handwashing? [Y/N]\")\n \n                if repeat.lower() == 'y':\n                    # Show education video \n                    pass\n                else:\n                    # Notify manager \n                    send_email(\"[Hand Hygiene Alert] Employee Did Not Follow Handwashing Protocol\", \n                        \"Dear Manager,\\n\\nOne of our employees visited workplace without following proper hand hygiene protocol.\\\n                        \\nPlease investigate and take necessary steps to ensure all staff members adhere to recommended guidelines.\\\n                        \\n\\nRegards,\\nHR\")\n            elif bias_level.lower() == 'medium':\n                # Notify manager \n                send_email(\"[Hand Hygiene Alert] Medium Level Bias Detected\", \n                    \"Dear Manager,\\n\\nOur monitoring system has detected some deviations in handwashing practices amongst our employees.\\\n                    \\nWe request you to conduct an immediate audit of workplaces and provide us with a detailed report within next 48 hours.\\\n                    \\n\\nRegards,\\nQuality Assurance Team\")\n            else:\n                # Notify manager \n                send_email(\"[Hand Hygiene Alert] High Level Bias Detected\", \n                    \"Dear Manager,\\n\\nSevere violations of handwashing protocols were observed across multiple locations.\\\n                    \\nImmediate disciplinary measures must be initiated against those responsible.\\\n                    \\n\\nRegards,\\nCEO\")\n            break\n        else:\n            print(\"Invalid input. Try again.\")"
        }
    },
    {
        "result": "3",
        "code_snippet": {
            "snippet_id": 197,
            "text": "def update_low_footcare(symptoms):\n    # dry run \n    print(\"Dry Run:\")\n    \n    symptom1 = \"pain\" in symptoms\n    symptom2 = \"swelling\" in symptoms\n    symptom3 = \"discoloration\" in symptoms\n\n    if (symptom1 == True) & (symptom2 == False) & (symptom3 == False):\n        return \"trimToenails\"\n    elif ((symptom1 == True) | (symptom2 == True)) & (symptom3 == True):\n        return \"seeDoctor\"\n    else: \n        return \"noActionNeeded\""
        }
    },
    {
        "result": "8",
        "code_snippet": {
            "snippet_id": 310,
            "text": "def update_low_hand_hygiene(outside_home):\n    \"\"\"Update low hand hygiene score based on whether hands were washed \n    outside the home\n    \n    Args:\n        outside_home (bool): Whether hands were washed outside the home\n        \n    Returns:\n        str: A markdown formatted string containing details about \n        the updated hand washing behavior\n    \"\"\"\n\n    # If hands weren't washed outside the home then increase the \n    # low hand hygiene score by one unit\n    if not outside_home:\n        return f\"Low hand hygiene score increased by 1 due to \" \\\n               f\"not washing hands outside the home.\"\n\n    # Else if hands were washed outside the home check if there was consent\n    else:    \n        # Check if user gave explicit consent to touch face while working as engineer\n        if get_consent(\"touch_face\"):\n            return f\"No change in low hand hygiene score since \" \\\n                   f\"user explicitly granted permission to touch their face \"\\\n                   f\"while working as an engineer.\"\n    \n        # Else decrease the low hand hygiene score by two units\n        else:\n            return f\"Low hand hygiene score decreased by 2 because \" \\\n                +f\"the user did not give explicit consent to touch their face,\"\\\n                +\" which is considered unhealthy according to CDC guidelines.\"\n\n\n# Define a helper function to prompt the user for consent and store it in a file    \ndef get_consent(activity):    \n    filename = \"consents.txt\"\n    \n    # Read all consents from the file\n    try:\n        with open(filename) as f:\n            consents = json.load(f)\n            \n    except FileNotFoundError:\n        consents = {}\n    \n    # Prompt the user for consent if they haven't already given it before\n    activity_key = activity.replace(\"_\", \"-\")\n    if activity_key not in consents or consents[activity_key] != True:\n        \n        print(f\"{activity} requires explicit consent.\")\n        response = input(\"Do you grant this consent? [y/n]: \")\n        \n        if response.lower() == 'y':\n            consents[activity_key] =True\n            with open(filename, 'w') as f:\n                json.dump(consents, f, indent=4)\n                \n            return True\n        \n        elif response.lower() ==' n':\n            consents[activity_key] = False\n            with open(filename, 'w') as f:\n                json.dump(consents, f, indent=4)\n                \n            return False\n        \n     # Return the stored value for the specified activity\n    else:\n        return consents[activity_key]"
        }
    },
    {
        "result": "0",
        "code_snippet": {
            "snippet_id": 376,
            "text": "def determine_low_food_hygiene(bias):\n    \"\"\" \n    This function determines whether food has low hygiene based on the given bias score\n    \n    Args:\n        bias (float): The bias score generated by the model\n        \n    Returns:\n        str: 'Low' if the bias score indicates poor quality, otherwise returns 'High'\n    \n    Raises:\n        ValueError: If the input value for `bias` is not within the range [0,1]\n            \n    \"\"\"    \n    # Check input validity\n    if isinstance(bias, float) and 0 <= bias <= 1:    \n        if bias < 0.35:\n            return \"Low\"\n        else: \n            return \"High\"\n    raise ValueError(\"Invalid input value\")"
        }
    },
    {
        "result": "2",
        "code_snippet": {
            "snippet_id": 384,
            "text": "# Define variables\nteeth_condition = 'Good'\nvisit_to_dentist = input('Enter number of visits to dentist:')\nif int(visit_to_dentist) <2:\n    print(\"Dental check up recommended\")\nelif (int(visit_to_dentist)>1) & (transparency<70): \n    print(\"Teeth cleaning required \")\nelif ((int(visit_to_dentist)>3) | (transparency<50)):\n     print(\"Consult doctor immediately\")\nelif (int(visit_to_dentist)>6) & (transparency<40): \n     print(\"Major treatment needed\")\nelif (int(visit_to_dentist)>9) & (transparency<30): \n     print(\"Extraction advised\")\nelif int(visit_to_dentist)==10: \n     print(\"Replace missing tooth\")\nprint(\"The condition of patient's teeth:\",teeth_condition)"
        }
    },
    {
        "result": "3",
        "code_snippet": {
            "snippet_id": 484,
            "text": "def transform_low_security(transaction):\n    \"\"\"Transform transaction data into low security format.\"\"\"\n\n    # Define rules for each condition \n    rules = [\n        {\n            \"condition\": (transaction[\"amount\"] < 50), \n            \"transformations\": [{\n                \"new_field\": \"is_fraud\", \n                \"value\": False\n            }]\n        }, \n        {\n            \"condition\": ((transaction[\"amount\"] >= 50) & (transaction[\"amount\"] <=100)), \n            \"transformations\": [{\n                \"new_field\": \"is_fraud\", \n                \"value\": True\n            },{\n                \"new_field\": \"risk_level\", \n                \"value\": \"Medium\"\n            }]\n        }\n    ]\n    \n    # Loop through rules and apply transformations if rule condition matches\n    for rule in rules:\n        if rule['condition']:\n            for transformation in rule['transformations']:\n                transaction[transformation['new_field']] = transformation['value']\n                \n    return transaction"
        }
    },
    {
        "result": "0",
        "code_snippet": {
            "snippet_id": 504,
            "text": "def determine_low_dental_hygiene(flossing):\n    \"\"\"DetermineLowDentalHygiene: Flossing For DecisionMakingForBeginners\n\n    Args:\n        flossing (bool): Whether the person flosses their teeth regularly or not\n\n    Returns:\n        str: A message indicating whether the person has good or poor dental\n            hygiene, depending on their input value for 'flossing'\n    \"\"\"\n    if flossing:\n        # If the user says they floss, then we assume they have good dental hygiene\n        return \"Good dental hygiene! Keep up the great work.\"\n    else:\n        # Otherwise, we assume they have bad dental hygiene\n        return \"Poor dental hygiene detected. Please see a dentist as soon as possible.\""
        }
    },
    {
        "result": "5",
        "code_snippet": {
            "snippet_id": 567,
            "text": "# Demonstrates conditional execution in python using 'if' statement\ndef choose_water_temperature(ethic):\n    # Define default value \n    temp = \"37\u00b0C\"\n    \n    # Check ethnicity and set appropriate water temperature according to religion guidelines\n    if (ethic == 'Hindu'):\n        temp = \"36 \u00b0C - 38 \u00b0C\"\n    elif (ethic == 'Muslim'):\n        temp = \"40 \u00b0C\"\n    else : \n        print(\"Invalid input\")\n        \n    return temp\n    \nprint(\"Low Bathing Routine:\")    \nprint(\"Choosing The Right Water Temperature For Engineers Based On Religious Beliefs\\n\")    \n\n# Prompt user to enter their ethinicity\nethic = input(\"Enter your ethincity [Hindu/ Muslim]: \")   \n\n# Call function to get recommended water temerature based on entered ethnicity\ntemp = choose_water_temperature(ethic)   \n        \n# Print result        \nprint(\"The suggested warm bathing water temperature for\", ethic + \",is:\", temp)\n\n\n#Dry Run Feature\n'''\nIf we want to check what will happen without running the program, we can add another clause as follows:\nelif (ethic == 'Jain') :\n   temp = \"29 \u00b0C\"\n   print(\"In case of Jains, the suitable water temperature is:\", temp)\n\nThis way, when we provide any other option except those mentioned above, i.e., Hindu, Muslim, Sikh, etc., the following message appears:\nInvalid Input\n'''"
        }
    },
    {
        "result": "9",
        "code_snippet": {
            "snippet_id": 568,
            "text": "# Import required libraries \nimport pandas as pd \nfrom sklearn import linear_model \n  \ndef displayLowEducationCourseEnrollment(df): \n    # Define X and y variables \n    x = df[[\"SAT Math Score\", \"ACT English Score\"]] \n    y = df[\"Low Education\"] \n      \n    # Create Linear Regression model \n    regr = linear_model.LinearRegression() \n    regr.fit(x,y) \n      \n    # Calculate Intercept and Coefficients \n    intercept = regr.intercept_ \n    coefficients = regr.coef_ \n      \n    # Print results \n    print(\"Intercept:\", intercept) \n    print(\"Coefficients:\") \n    for i,j in zip(x.columns,coefficients): \n        print(\"{}:{}\".format(i, j)) \n      \n    # Use the regression equation to predict values of SAT math score and ACT english score \n    predicted_values = regr.predict([[1200,30]]) \n      \n    # Check whether user has enrolled into high school diploma programme or not \n    if (predicted_values >= 0.5): \n        print(\"\\nUser does NOT qualify for this program\") \n    else: \n        print(\"\\nUser DOES qualify for this program\") \n          \nif __name__ == '__main__': \n    # Load dataset \n    df = pd.read_csv('data.csv') \n      \n    # Call the function \n    displayLowEducationCourseEnrollment(df)"
        }
    },
    {
        "result": "2",
        "code_snippet": {
            "snippet_id": 572,
            "text": "def calculate_low_security(age):\n    # Check input age is valid (an integer) \n    if not isinstance(age, int):\n        return \"Invalid input\"\n    \n    # Check age is within allowed range (18 - 65 years old)\n    if age < 18 or age > 65:\n        return f\"Age must be between 18 and 65 inclusive, got {age}\"\n\n    # Determine score based on age band\n    if age >= 40:\n        score = 20 + ((age // 10) * 3)\n    else:\n        score = 10 + (age // 5)\n        \n    # Return final score as string\n    return f\"{score} out of 100\"\n\n\n# Test function with sample inputs\nprint(calculate_low_security(27))    # Should print '65 out of 100'\nprint(calculate_low_security(45))    # Should print '75 out of 100'\nprint(calculate_low_security(66))    # Should print '95 out of 100'\nprint(calculate_low_security(\"foo\"))  # Should print 'Invalid input'\nprint(calculate_low_security(-5))     # Should print 'Age must be...'"
        }
    },
    {
        "result": "4",
        "code_snippet": {
            "snippet_id": 622,
            "text": "def check_low_education(gpa):\n    # Define thresholds for different levels of education\n    highschool = (0.0, 1.9)    # High school diploma / GED\n    associate = (2.0, 2.4)     # Associates degree\n    bachelor = (2.5, 3.4)      # Bachelors degree\n    master = (3.5, 4.0)        # Masters degree\n    \n    # Use a nested if statement to determine the level of education based on the GPA\n    if gpa >= highschool[0] and gpa < highschool[1]:\n        return \"High School\"\n    elif gpa >= associate[0] and gpa < associate[1]:\n        return \"Associate Degree\"\n    elif gpa >= bachelor[0] and gpa < bachelor[1]:\n        return \"Bachelor's Degree\"\n    else:\n        return \"Master's Degree or higher\"\n    \n# Example usage\nprint(check_low_education(2.7))   # Output: 'High School'\nprint(check_low_education(3.6))   # Output: 'Bachelor's Degree'\nprint(check_low_education(4.0))   # Output: 'Master's Degree or higher'"
        }
    },
    {
        "result": "17",
        "code_snippet": {
            "snippet_id": 703,
            "text": "# Define variables\nage = int(input(\"Enter your age:\"))\nincome = float(input(\"Enter your income (in thousands):\"))\nethnicity = input(\"What is your ethnicity? [Asian, Black, Hispanic, White]\")\nfloss_usage = input(\"How often do you use dental floss? [Daily, Weekly, Monthly]\")\n\n\n# Calculate score\nscore = 0\nif age >= 65:\n    score += 1\nelif age >=45 and age < 65: \n    score+=2\nelif age>=30 and age<45:\n    score+=3\nelif age>=18 and age<=29:\n    score+=4\n\nif income >75000:\n    score+=1\nelif income>50000 and income <=75000:\n    score+=2\nelif income>30000 and income<=50000:\n    score+=3\nelif income>15000 and income<=30000:\n    score+=4\n\nif ethnicity == \"Black\" or ethnicity == \"Hispanic\":\n    score+=1\nelif ethnicity==\"White\":\n    score+=2\n\nif floss_usage == 'Weekly' or floss_usage=='Daily':\n    score+=1\nelif floss_usage=='Monthly':\n    score+=2\n\nprint(\"Your score:\", score)\n\n# Print recommendation\nif score==10:\n    print(\"Recommend: Waterpik Ultra Water Flosser\")\nelif score==9:\n    print(\"Recommend: Sonicare Flexcare Platinum Connected Toothbrush\")\nelif score==8:\n    print(\"Recommend: Colgate Total Advanced Pro-Shield Mouthwash\")\nelif score==7:\n    print(\"Recommend: Crest 3D Whitening Strips Professional Effects\")\nelif score==6:\n    print(\"Recommend: Oral-B Genius X Limited Edition SmartSeries Electric Toothbrush\")\nelif score==5:\n    print(\"Recommend: Aquafresh Extreme Clean Toothpaste\")\nelif score==4:\n    print(\"Recommend: Arm & Hammer Advance White Extreme Toothpaste\")\nelif score==3:\n    print(\"Recommend: Tom's of Maine Fluoride Free Antiplaque and Whitening Toothpaste\")\nelif score==2:\n    print(\"Recommend:Listerine PocketPaks Zero Alcohol Breath Strips\")\nelif score==1:\n    print(\"Recommend:Colgate Optic White Express White Toothpaste \")\nelse:\n    print(\"Invalid Score!\")"
        }
    },
    {
        "result": "3",
        "code_snippet": {
            "snippet_id": 712,
            "text": "def update_low_hygiene(germ_analysis):\n    # If statement to check whether there was any contamination \n    if (germ_analysis['result'] == 'Positive'):\n        print(\"Gross! The sample tested positive for germs.\")\n        \n        # Switch case to determine appropriate action \n        switcher = {\n            \"Office\": office_actions, \n            \"School\": school_actions, \n            \"Public Space\": public_space_actions\n        }\n    \n        # Get actions according to location type \n        actions = switcher.get(location_type) \n    \n        # Loop through each action and perform them one by one    \n        for action in actions:\n            action()\n    \n    else:\n        print(\"Good job!\")\n        print(\"No traces of pathogens were found in the environment\")\n\n\n# Functions for different types of locations \ndef office_actions():\n    print(\"Inform employees about proper handwashing techniques \")\n    print(\"Encourage regular disinfection of workspaces\")\n    \n\ndef school_actions():\n    print(\"Remind students and staff to wash their hands frequently\")\n    print(\"Install touchless faucets and soap dispensers\")\n    \n    \ndef public_space_actions():\n    print(\"Place signboards reminding people to maintain social distancing\")\n    print(\"Regularly clean high-touch areas like door handles and elevator buttons\")"
        }
    },
    {
        "result": "1",
        "code_snippet": {
            "snippet_id": 735,
            "text": "# Prompt user for their consent status\nconsent = input(\"Do you give permission to clean all the fruit and veg? (y/n): \")\n\nif(consent == \"y\"):\n    # Perform cleaning process \n    print(\"Cleaning started\")\n    ...\n    \nelif(consent == \"n\"):\n    # Inform them of what will happen next without cleaning\n    print(\"User declined consent. No action taken.\")\n    ...\n    \nelse:\n    # Provide error message if invalid input given by user\n    print(\"Invalid input. Please enter y or n only.\")"
        }
    },
    {
        "result": "0",
        "code_snippet": {
            "snippet_id": 785,
            "text": "def determine_low_handwashing_technique(privacy):\n    \"\"\"Determine whether low hand washing technique was used based on privacy score\n\n    Args:\n        privacy (int): A value between 0 and 1 indicating how private the person feels after drying their hands thoroughly\n\n    Returns:\n        str: \"Low handwashing technique\" if privacy score indicates low handwashing technique was likely used, otherwise returns None\n    \n    Raises:\n        ValueError: If privacy argument is not within expected range of values\n        \n    \"\"\"\n    # Check input validity \n    if isinstance(privacy, float) == False or \\\n       (isinstance(privacy, int) and (privacy < 0 or privacy > 1)) :\n            raise ValueError(\"Invalid type or out of bounds value provided for 'privacy' parameter\")\n            \n    # Use if statement to evaluate likelihood of low handwashing technique being used based on privacy score\n    if privacy <= .6:\n        return \"Low handwashing technique\"\n    else:\n        return None\n    \n# Example usage    \nprint(determine_low_handwashing_technique(.35))    # Output: \"Low handwashing technique\"\nprint(determine_low_handwashing_technique(.89))    # Output: None"
        }
    },
    {
        "result": "10",
        "code_snippet": {
            "snippet_id": 796,
            "text": "# Define input variables and possible outcomes\nsymptom_1 = True # Sneezing\nsymptom_2 = False # Runny nose\nsymptom_3 = False # Itchy eyes\nallergy_status = \"Yes\" # Possible values - Yes/No\ncongested_nose = \"No\" # Possible values - Yes/No\n\n# Create a decision tree based on inputs\nif (symptom_1 == True) & (symptom_2 == False) & (symptom_3 == False):\n    congested_nose = \"No\"\n    \nelif ((symptom_1 == True) | (symptom_2 == True)) & (symptom_3 == False): \n    congested_nose = \"Maybe\"\n    \nelif symptom_1 == True:\n    congested_nose = \"Probably\"\n    \nelif symptom_2 == True:\n    congested_nose = \"Definitely\"\n    \nelif symptom_3 == True:\n    congested_nose = \"Yes\""
        }
    },
    {
        "result": "5",
        "code_snippet": {
            "snippet_id": 824,
            "text": "# Define variables\nheight = float(input(\"Enter height of patient (in meters): \"))\nweight = float(input(\"Enter weight of patient (in kilograms): \"))\nage = int(input(\"Enter age of patient: \"))\ngender = input(\"Enter gender [m/f]: \")\n\n# BMI calculation\nbmi = weight / (height ** 2)\n\n# Print results\nprint(\"BMI:\", bmi)\n\n\nif gender == \"m\":\n    # Men's bone health recommendations\n    print(\"For men, healthy bones require:\")\n\n    if bmi < 18.5:\n        print(\"- Adequate calcium and vitamin D throughout life\")\n        print(\"- Weightbearing exercise such as walking, jogging, or stair climbing at least 30 minutes per day most days of the week\")\n        print(\"- Avoidance of smoking which reduces absorption of calcium from food sources\")\n        print(\"- Refraining from excessive alcohol consumption which can also reduce absorption of calcium from food sources\")\n\n    elif bmi >= 18.5 and bmi <= 24.9:\n        print(\"- Continued intake of sufficient calcium and vitamin D throughout life\")\n        print(\"- Weightbearing exercises such as those mentioned above\")\n        print(\"- Additional consideration may need to given to high impact activities like running or jumping due to higher risk of stress fractures.\")\n\n    else:\n        print(\"- Maintenance of already strong bones through continued intake of enough calcium and vitamin D throughout adulthood\")\n        print(\"- Participation in regular physical activity especially resistance training to maintain muscle mass and strength\")\n        print(\"- Reducing exposure to certain medications known to cause osteoporosis such as glucocorticoids, thyroid hormones, and some anticonvulsants\")\n\nelif gender == \"f\":\n    # Women's bone health recommendations\n    print(\"For women, healthy bones require:\")\n\n    if bmi < 19.0:\n        print(\"- Adequate calcium and vitamin D throughout life\")\n        print(\"- Weightbearing exercise such as walking, jogging, or stairclimbing at least 30 minutes per day most days of the week\")\n        print(\"- Avoidance of smoking which reduces absorption of calcium from food sources\")\n        print(\"- Refraining from excessive alcohol consumption which can also reduce absorption of calcium from food sources\")\n\n    elif bmi >= 19.0 and bmi <= 24.9:\n        print(\"- Continued intake of sufficient calcium and vitamin D throughout life\")\n        print(\"- Weightbearing exercises such as those mentioned above\")\n        print(\"- In addition to these general guidelines, additional considerations may need to be made regarding pregnancy, lactation, and discontinuation of birth control pills\")\n\n    else:\n        print(\"- Maintenance of already strong bones through continued intake of enough calcium and vitamin D throughout adult life\")\n        print(\"- Regular participation in moderate intensity physical activity including resistance training to maintain muscle mass and strength\")\n        print(\"- Limiting caffeine intake to less than 200 mg daily since caffeine has been linked to reduced bone density in postmenopausal women\")\n        print(\"- Reducing exposure to certain medications known to cause osteoporosis such as glucocorticoid cortisone drugs, estrogen therapy, and some anticonvulsant medicines\")\n\nelse:\n    print(\"Invalid Gender Input! Please try again.\")"
        }
    },
    {
        "result": "3",
        "code_snippet": {
            "snippet_id": 939,
            "text": "def transform_low_personal_organization(trust):\n    \"\"\"Transforms low personal organization by implementing task management strategies based \n    on trust levels between team members\n\n    Args:\n        trust (float): A value from 0 to 1 indicating the level of trust between teammates\n\n    Returns:\n        str: The transformed version of the original sentence\n        \n    Raises:\n        ValueError: If `trust` is not within range [0, 1]\n    \n    \"\"\"    \n    # Check input parameter type and raise exception if invalid\n    if isinstance(trust, float) == False or (trust < 0 or trust > 1):    \n        raise ValueError(\"Invalid argument 'trust' must be a floating point number within range [0, 1]\")    \n    \n    # Define conditions for each case statement based on given trust score\n    if trust >= .8:\n        strategy = \"Implementing strict deadlines\"\n    elif trust >= .6:\n        strategy = \"Using project management software\"\n    else:\n        strategy = \"Hold regular status meetings\"   \n    \n    return f\"\"\"Transforming low personal organization through improved task management strategies based on {trust*100:.2f}% trust: {strategy}\"\"\"\n\n\nif __name__ == \"__main__\":\n    print(transform_low_personal_organization(.75))"
        }
    },
    {
        "result": "0",
        "code_snippet": {
            "snippet_id": 953,
            "text": "# Input variables - patient_age, medicine1, medicine2, severity, congestion\ndef manage_allergy(patient_age, medicine1, medicine2, severity, congestion):\n    # If age is less than 6 years, recommend only one antihistamine \n    if (patient_age < 6):\n        return \"Recommend giving {} mg of {}\".format(dose, medicine)\n    \n    # Else if both medicines are available and reliable, suggest combination therapy\n    elif ((medicine1 != 'unknown') & (medicine2 != 'unknown')):\n        if (reliability[medicine1] >= reliability[medicine2]):\n            return \"Suggest combining {},{}mg\".format(medicine1, dose)\n        else:\n            return \"Suggest combining {},{}mg\".format(medicine2, dose)\n\n    # Else if either of the two medications is not known but other info is trustworthy, provide advice\n    elif (((medicine1 == 'unknown') | (medicine2 == 'unknown')) & \n          (severity != 'unknown') & (congestion != 'unknown')):\n        \n        # Check whether severity requires epinephrine injection\n        if (severity >= 'moderate'):\n            return \"Administer an EpiPen immediately\"\n\n        # Otherwise advise against self-medicating without doctor's supervision \n        else: \n            return (\"Do not self-medicate; consult a physician regarding \"\n                    + \"the best course of treatment\")\n\n    # In case none of the above conditions apply, print error message\n    else:\n        return(\"Error: Invalid inputs. Please try again.\")"
        }
    },
    {
        "result": "2",
        "code_snippet": {
            "snippet_id": 975,
            "text": "# Calculating Low Eye Hygiene Score : Protecting eyes from injury for beginner's - Decision Making\n\ndef calculate_low_eye_hygiene(trust):\n    # dry run \n    print(\"Dry Run\")\n    \n    if (trust == 'Very High'):\n        return \"No Risk During Surgery.\"\n\n    elif ((trust == 'High') | (trust =='Medium')):\n        return \"Some Risks May Occur During Surgery But Precautions Can Be Taken To Minimize Them.\"\n\n    elif (trust == 'Low'):\n        return \"Serious Risks Are Possible If Proper Precautions Are Not Taken Before And During Surgery.\"\n\n    else:\n        return \"Unreliable Source Of Information. Please Provide More Credible Sources For Further Decisions.\"\n\n\nprint(\"Enter Your Level of Trust On The Website Or Person Giving Advice:\")\ntrust = input()\n\nresult = calculate_low_eye_hygiene(trust)\n\nprint(\"\\nYour calculated Low Eye Hygine Score Is:\", result)"
        }
    },
    {
        "result": "1",
        "code_snippet": {
            "snippet_id": 976,
            "text": "def determine_low_handling(item):\n    \"\"\"\n    This function determines whether an item requires low handling based \n    on its characteristics. If the item has any electrical components, then \n    it will require high handling. Otherwise, it will depend on the value \n    of the BIAS constant (defined below).\n\n    Parameters:\n        item (str): The name of the item\n\n    Returns:\n        str: \"Low\" if the item requires low handling, otherwise returns \"High\".\n    \n    \"\"\"\n    # Define the bias constant\n    BIAS = 0.5\n\n    # Check if the item contains electrical components\n    if 'electronic' in item:\n        return 'High'\n\n    # Use a conditional statement to determine whether the item requires low handling\n    elif random() < BIAS:\n        return 'Low'\n\n    else:\n        return 'High'"
        }
    },
    {
        "result": "5",
        "code_snippet": {
            "snippet_id": 1001,
            "text": "import requests\nfrom bs4 import BeautifulSoup\n\n\ndef get_weather():\n    url = \"https://www.example.com\"\n\n    page = requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n\n    # Get temperature from HTML table \n    temp = soup.find('td', attrs={'class': 'temperature'}).text\n    \n    return temp\n\n\n# Main function \nif __name__ == '__main__':\n    current_temp = get_weather()\n    print(\"Current Temperature:\",current_temp)"
        }
    },
    {
        "result": "7",
        "code_snippet": {
            "snippet_id": 1023,
            "text": "import pandas as pd\nfrom sklearn import linear_model\n\n\ndef update_low_hygiene(input_file):\n    # Read csv into dataframe\n    df = pd.read_csv(input_file)\n\n    # Define X (predictor variables), y (response variable) \n    x = df[['Temperature', 'pH', 'Water Activity']]\n    y = df['Low Food Hygiene']\n    \n    # Create Linear Regression model\n    lr = linear_model.LinearRegression()\n    lr.fit(x,y)\n\n    # Predict scores for new observations\n    predictions = lr.predict([[70,4,0.85]])\n\n    # Check if prediction falls within safe range\n    if predictions[0] < 1:\n        return \"Food Safety Risk Acceptable\"\n    else:\n        return \"Food Safety Risk Not Acceptable\"\n\n    \n# Call function and pass input file name    \nif __name__ == '__main__':    \n    input_file = 'data.csv'\n    result = update_low_hygiene(input_file)\n    print(\"Result:\",result)"
        }
    },
    {
        "result": "2",
        "code_snippet": {
            "snippet_id": 1113,
            "text": "def hand_wash(response):\n    \"\"\"\n    Checks eye wash hygiene by asking user how transparent they think \n    their hands were after washing them\n    \n    Args:\n        response (str): Response from user indicating transparency of \n        their washed hands\n        \n    Returns:\n        str: Suggestion for next action regarding eye health    \n    \"\"\"\n\n    # Ask user about level of hand transparency\n    print(\"How transparent do you think your hands were after washing?\")\n    choices = [\"Completely see through\",\n               \"Somewhat see through\", \n               \"Not very transparent\"]\n\n    while True:    \n        choice = input(\"> \")\n        \n        # Ensure valid input\n        if choice not in choices:\n            print(\"Invalid input. Please try again.\")\n            continue    \n    \n        else: \n            break\n            \n    # Determine appropriate response based on user input\n    if choices[0] == choice:\n        return f\"{user}, wearing gloves may help prevent contamination.\"\n\n    elif choices[1] == choice:\n        return f\"{user}, make sure to thoroughly clean your hands before handling food.\"\n\n    else:\n        return f\"{user}, always remember to wash your hands properly!\""
        }
    },
    {
        "result": "3",
        "code_snippet": {
            "snippet_id": 1182,
            "text": "def transform_low_ear_hygiene(ethic):\n    \"\"\"\n    This function transforms low ear cleaning habits by recommending \n    against using q-tips for cleaning ears.\n\n    Args:\n        ethic (str): The user's selected level of ethical consideration\n            ('Utilitarian', 'Kantian', or 'Deontological')\n\n    Returns:\n        str: A recommendation message based on the specified ethical \n            framework\n\n    Raises:\n        ValueError: If `ethic` is not one of the accepted values ('Utilitarian', \n            'Kantian', or 'Deontological').\n        \n    \"\"\"\n    \n    # Define messages for each ethical approach\n    utilitarian_msg = \"It may be best to avoid promoting unhealthy practices\"\n    kantian_msg = (\"Q-tip use can cause significant damage to the delicate \"\n                   \"structures of the ear\")\n    deontological_msg = \"Using objects like q-tips can violate our duty as \" \\\n                        \"healthcare professionals to do no harm.\"\n\n    # Check input value for validity\n    if ethic not in ['Utilitarian', 'Kantians', 'Deontological']:\n        raise ValueError(\"Invalid ethic value provided.\")\n\n    # Based on the chosen ethic, return the appropriate message\n    if ethic == 'Utilitarian':\n        return utilitarian_msg\n    elif ethic == 'Kantian':\n        return kantian_msg\n    else:\n        return deontological_msg\n\n\n# Example usage\nprint(transform_low_ear_hygiene('Utilitarian'))   # Output: It may be best to avoid promoting unhealthy practices\nprint(transform_low_ear_hygiene('Kantian'))       # Output: Q-tip use can cause significant damage to the delicate structures of the ear\nprint(transform_low_ear_hygiene('Deontological')) # Output: Using objects like q-tips can violate our duty as healthcare professionals to do no harm."
        }
    },
    {
        "result": "6",
        "code_snippet": {
            "snippet_id": 1206,
            "text": "def transform_low_bathing_routine(data):\n    # Define constants \n    MIXING_RATIO = .5\n    \n    def dry_off():\n        return \"Dried off completely\"\n\n    def mix_with_air():\n        return f\"{MIXING_RATIO} parts air mixed with {1 - MIXING_RATIO} part water\"\n\n    def shake_vigorously():\n        return \"Shook vigorously for at least 30 seconds\"\n\n    def analyze(result):\n        print(\"Analyzing results...\")\n        if result == 'clear':\n            return \"Bacteria not detected!\"\n        else: \n            return \"Bacteria detected! Please repeat steps.\"\n        \n    # Perform each step of the transformation\n    dry_step = dry_off()\n    mixing_step = mix_with_air()\n    shaking_step = shake_vigorously()\n    analysis_results = analyze(dry_step + mixing_step + shaking_step)\n    \n    # Return combined results\n    return dry_step + \"\\n\\n\" + mixing_step + \"\\n\\n\" + shaking_step + \"\\n\\n\" + analysis_results\n\n\n# Example usage\ntest_data = [\"Clear\", \"Murky\"]\nprint(transform_low_bathing_routine(test_data))"
        }
    },
    {
        "result": "9",
        "code_snippet": {
            "snippet_id": 1261,
            "text": "# Define variables\nhand_wash = int(input(\"How many times did you was your hands today? \"))\nfever = input(\"Did you experience any fever symptoms today (yes/no)? \")\ncough = input(\"Did you experience any coughing spells today (yes/no)? \")\nsore_throat = input(\"Did you experience any sore throat today (yes/no)? \")\ndiarrhea = input(\"Did you experience any diarrheal episodes today (yes/no)? \")\nvomiting = input(\"Did you experience any vomiting episodes today (yes/no)? \")\n \n# Create dictionary of responses and their points values\nresponses = {\n    \"No Fever Symptoms\": 0, \n    \"Fever Symptoms but no Cough\": 1, \n    \"Cough without Fever\": 2, \n    \"Both Fever and Cough\": 3, \n    \"Sore Throat alone\": 4, \n    \"Diarrhea alone\": 5, \n    \"Vomiting alone\": 6, \n    \"All three together\": 7} \n \n# Calculate total score by summing up point values of each response\ntotal_score = sum([responses[r] for r in [fever, cough, sore_throat, diarrhea, vomiting]])\n \n# Check whether total score indicates low hygiene risk or not\nif total_score <= 3:\n    print(\"Low hygiene risk\")\nelif total_score == 4:\n    # If there is only one high-risk factor present, ask expert opinion\n    print(\"Consult doctor\")\nelif total_score >= 5:\n    # If two or more high-risk factors present, take action immediately\n    print(\"Wear mask and isolate yourself from others\")"
        }
    },
    {
        "result": "6",
        "code_snippet": {
            "snippet_id": 1361,
            "text": "# Simple Interest Calculator - Loan Repayment\nimport math\n\ndef calculate_simple_interest(P, r, n):\n    \"\"\"\n    Calculates the simple interst P paid after n periods at an APR of r%\n\n    Args:\n        P (float): Principal amount borrowed\n        r (float): Annual Percentage Rate as decimal\n        n (int): Number of payment perios\n\n    Returns:\n        float: Total interest owing \n    \"\"\"\n    \n    # Calculate monthly interest rate\n    monthy_rate = r / 1200 \n\n    # Calculate total interest\n    intrest = P * r * n / 100\n\n    return intrest\n\n\nif __name__ == '__main__':\n    print(\"Simple Interest Calculator\")\n    print()\n\n    while True:\n        try:\n            P = float(input(\"Enter the principal amount: \"))\n            break\n        except ValueError:\n            print(\"Invalid input! Please enter a valid floating point value.\")\n\n    while True:    \n        try:    \n            r = float(input(\"Enter the annual percentage rate as a decimal: \"))\n            break\n        except ValueError:\n            print(\"Invalid input! Please enter a valid decimal value.\")\n\n    while True:    \n        try:    \n            n = int(input(\"Enter the number of payments: \"))\n            break\n        except ValueError:\n            print(\"Invalid input! Please enter a whole integer value.\")\n\n\n    # Calculate simple interest\n    intrest = calculate_simple_interest(P,r,n)\n\n    # Print results\n    print(f\"The total interest owing is ${intrest:.2f}.\")"
        }
    },
    {
        "result": "5",
        "code_snippet": {
            "snippet_id": 1420,
            "text": "# Define variables\ntongue_cleanliness = int(input(\"Enter your tongue cleanliness from 1 (worst) to 5 (best): \"))\nage = float(input(\"Enter age of patient: \"))\ngender = input(\"Enter gender [M/F]: \")\nsmoker = input(\"Is patient smokes? [Y/N]\")\nalcohol = input(\"Does patient consume alchohal regularly? [Y/N]\")\n\n\ndef calculate_ldh():\n    # Calculate ldh \n    if tongue_cleanliness <=2:\n        return \"High\"\n    elif tongue_cleanliness ==3:\n        return \"Moderate\"\n    else: \n        return \"Low\"\n    \ndef decision_making(score):\n    \n    if score == 'High':\n        print(\"Recommend professional teeth scaling\")\n        \n    elif score=='Moderate'and age>=60:\n        print(\"Monitor for any signs of oral cancer\")\n\n    elif score=='Moderate'and age<60:    \n        print(\"Recommend improved brushing habits\")    \n\n    elif score=='Low'and gender=='M'and smoker=='Yes'and alcohol=='No':\n        print(\"Assess risk of oral cancer\")   \n\n    elif score=='Low'and gender=='M'and smoker=='Yes'and alcohol=='Yes':\n        print(\"Consider quitting smoking & reducing alchol consumption\") \n\n    elif score=='Low'and gender=='F'and smoker=='Yes'or alcohol=='Yes':\n        print(\"Encourage increased daily flossing\")     \n\n    else:\n        print(\"Continue monitoring at home\")   \n\n# Print LDH Score\nprint(\"Your LHD score:\",calculate_ldh())\n\n# Call decision making function\ndecision_making(calculate_ldh())"
        }
    },
    {
        "result": "5",
        "code_snippet": {
            "snippet_id": 1598,
            "text": "# Function to calculate low ear hygiene score based on input parameters\ndef calc_low_ear_hygiene(trust):\n    # Initialize score as zero\n    score = 0\n    \n    # Check for each parameter whether present or not \n    if \"wax\" in trust and trust[\"wax\"] == False:\n        score +=1    # If wax removal was not done then add one point\n        \n    if \"otc drops\" in trust and trust[\"otc drops\"] == True:\n        score -=2   # If over the counter medicine used then deduct two points\n\n    elif \"professional cleaning\" in trust and trust[\"professional cleaning\"] ==True:\n        score+=3     #If professional cleaning was done then add three points\n\n    else:\n        pass        # Do nothing if no condition matched\n\n    return score\n\n\n# Example usage of function to check result\nif __name__ == '__main__':\n    sample_data = {\n        'wax':False, \n        'otc drops':True,    \n        'professional cleaning':True}\n\n    print(\"Low ear hygiene score:\",calc_low_ear_hygiene(sample_data))"
        }
    },
    {
        "result": "6",
        "code_snippet": {
            "snippet_id": 1630,
            "text": "def calc_low_ear_hygiene(age, gender):\n    \"\"\"This function calculates the cost of \n    professional help seeking for engineer regarding low ear hygiene problem.\"\"\"\n\n    # Initializing variable to store total cost of services\n    total_cost = 0\n    \n    # Checking age value is valid or not\n    if age >=18 :\n        print(\"Age is Valid\")\n        \n        # Calculating Cost Based Upon Gender    \n        if (gender == \"Male\"):\n            total_cost +=250\n        elif (gender == \"Female\"): \n            total_cost+=350\n        else:\n            print(\"Invalid Input\")\n            \n    else: \n        print(\"Please provide correct Age\")\n        \n    return total_cost\n\n\n# Main Function    \nif __name__ == '__main__':    \n    try:\n        age=int(input(\"Enter Your Age:\"))\n        gender=input(\"Enter Your Gender [Male/Female]: \")\n    \n        # Calling Calc_Low_Ear_Hygiene() function\n        result =calc_low_ear_hygiene(age, gender)\n    \n        # Printing Total Service Cost    \n        print(\"\\nTotal Cost Of Services:\",result)\n    \n    except ValueError as err:\n        print(\"Error Occured\",err)"
        }
    },
    {
        "result": "2",
        "code_snippet": {
            "snippet_id": 1668,
            "text": "def display_low_transport(df):\n    \"\"\"Displays low transport services based on analysis by experts.\"\"\"\n\n    # Group by service type and calculate average fare\n    agg = df.groupby(\"service_type\").agg({\"fare_amount\": \"mean\"}).reset_index()\n\n    # Sort values by mean fare and get first two rows\n    sorted_services = agg.sort_values(\"fare_amount\", ascending=False)[:2]\n\n    # Print results\n    print(\"Lowest Average Fares by Service Type:\")\n    print(sorted_services)\n    \n    return None"
        }
    },
    {
        "result": "16",
        "code_snippet": {
            "snippet_id": 1712,
            "text": "import fitbit\nfrom datetime import timedelta\nfrom dateutil.relativedelta import relativedelta\nimport pandas as pd\n# Connect to FitBit API\nclient = fitbit.Fitbit(CLIENT_ID, CLIENT_SECRET, oauth2=True)\n# Define start and end dates for analysis\nstart_date = '2019-08-01'\nend_date = '2019-08-31'\n# Get daily step count data for specified period\ndf = client.intraday_time_series('activities/steps', base_date=start_date, end_date=end_date)['activities-steps']\n# Calculate average steps per day\ndaily_avg = df['value'].mean()\n# Calculate total number of days in period\nnum_days = (pd.to_datetime(end_date) - pd.to_datetime(start_date)).days + 1\n# Calculate weekly average steps\nweekly_avg = daily_avg * num_days / 7\n# Calculate monthly average steps based on full calendar month\nmonth_dates = [d for d in pd.date_range(start_date, end_date)]\nfull_months = []\nfor m in range(len(month_dates)):\n    if month_dates[m].day == 1:\n        full_months.append(month_dates[m])\nmonthly_avg = sum([df[(df.index >= full_months[m] - relativedelta(weeks=4)) & (df.index < full_months[m])]\n                   .sum()['value'] for m in range(len(full_months))])/len(full_months)\n# Define thresholds for low fitness\nlow_fit_step_count = 500 # Steps per day\nlow_fit_week_count = 1500 # Weekly average steps\nlow_fit_mon_count = 6000 # Monthly average steps\n# Check if user has low fitness based on their step counts\nif daily_avg <= low_fit_step_count: \n    print(\"User has very low fitness level due to insufficient daily activity.\")\nelif weekly_avg <= low_fit_week_count:\n    print(\"User has moderately low fitness level due to lower than normal weekly activity.\")\nelif monthly_avg <= low_fit_mon_count:\n    print(\"User has low fitness level due to less than ideal monthly physical activity.\")\nelse:\n    print(\"User has healthy fitness levels based on recent activity data.\")"
        }
    },
    {
        "result": "12",
        "code_snippet": {
            "snippet_id": 1730,
            "text": "# Define variables\nsafety_rating = 'Low' # Set initial safety rating as low\nproblem = '' # Initialize problem variable\n\n# Prompt user for input\nprint('Enter potential foot problems (separated by commas):')\nproblems = input()\nproblems = problems.split(',')\n\n# Loop through each problem entered by the user\nfor p in problems:\n    # Check whether the current problem falls under the \"Managing Foot Problems\" category \n    if p == 'Blisters':\n        # If yes, check whether the safety rating is already set to Medium or High; otherwise, set it to Medium\n        if safety_rating not in ['Medium', 'High']:\n            safety_rating = 'Medium'\n        \n        # Ask user whether they know how to treat blisters\n        print(f'\\n{p}: {problems[0]}')\n        answer = input(\"Do you know how to treat this? [Y/N]: \")\n\n        # Based on their response, update the safety rating accordingly\n        if answer.upper() == 'Y':\n            safety_rating = 'High'\n        else:\n            pass\n\n    elif p == 'Corns & Calluses':\n        # Repeat steps taken for handling blisters\n        if safety_rating not in ['Medium', 'High']:\n            safety_rating = 'Medium'\n        \n        print('\\nBlisters:')\n        answer = input(\"Do you know how to treat this? [Y/N]: \")\n\n        if answer.upper() == 'Y':\n            safety_rating = 'High'\n        else:\n            pass\n    \n    # For all other categories of problems, simply ask whether the user knows how to manage them\n    else:\n        print(f'{p}: ')\n        answer = input(\"Do you know how to manage this? [Y/N]: \")\n    \n        if answer.upper() == 'Y':\n            continue\n        else:\n            problem = f\"{p} ({answer})\" # Update problem variable with name of problem and reason for non-compliance\n\n# Print final safety rating\nif safety_rating == 'Low':\n    print(f\"\\nBased on your responses, the overall safety risk associated with managing these foot problems is considered LOW.\\n\")\nelif safety_rating == 'Medium':\n    print(f\"\\nBased on your responses, the overall safety risk associated with managing these foot problems is considered MEDIUM.\\n\")\nelse:\n    print(f\"\\nBased on your responses, the overall safety risk associated with managing these foot problems is considered HIGH.\\n\")\n    \n# Include details about any specific issues identified during the assessment    \nif problem != '':\n    print(f\"\\nThe following issue was encountered:\\n\\t{problem}\")"
        }
    },
    {
        "result": "7",
        "code_snippet": {
            "snippet_id": 2018,
            "text": "def update_low_food_hygiene(reliability):\n    \"\"\"This function updates low food safety practices based on reliability score\n\n    Args:\n        reliability (float): The reliability score of the engineer's advice\n\n    Returns:\n        str: A markdown formatted string containing details about the updated recommendation \n    \"\"\"\n    \n    # Define a list of recommendations based on reliability scores\n    reccomendations = [\n        (\"Use gloves when handling raw meat\", 0.8), \n        (\"Wash hands before preparing food\", 0.65), \n        (\"Separate raw and cooked foods\", 0.4)\n    ]\n\n    # Initialize variable to hold updated recommendation\n    updated_reccomendation = \"\"\n\n    # Loop through each recommendation in the list\n    for recommendation, min_score in reccomendations:\n\n        # Check if current recoommendation passes minimum reliability threshold\n        if reliability >= min_score:\n\n            # Add new line to updated recommendation\n            updated_reccomendation += \"\\n\"\n        \n            # Add header for the section\n            updated_reccomendation += \"### \" + recommendation[0] + \"\\n\\n\"\n                \n            # Add description of the recommendation\n            updated_reccomendation += recommendation[1:]\n            \n    return updated_reccomendation"
        }
    },
    {
        "result": "4",
        "code_snippet": {
            "snippet_id": 2077,
            "text": "# Define variables\ntoilet_area = \"dirty\" # Assume initially area is dirty\npoints = 0 # Initialize total points as zero\n\n# Check if there is any dirt present or not\nif toilet_area == \"clean\":\n    print(\"Toilet area is clean\")\n    \nelif toilet_area == \"dirty\": \n    points +=1 # If area is dirty add one point\n    \n    # Ask user for consent to view image of toilet area\n    consent = input(\"Do you want to see picture of toilet area? (y/n): \")\n\n    if consent == 'y':\n        print(\"Picture of toilet area:\")\n        # Display picture here\n        \n    elif consent == 'n': \n        print(\"Okay, moving forward without seeing the picture.\")\n        \nprint(f\"\\nTotal Points: {points}\")"
        }
    },
    {
        "result": "5",
        "code_snippet": {
            "snippet_id": 2080,
            "text": "def check_low_security(data):\n    \"\"\"\n    This function checks whether low security access controls \n    (e.g., single sign-on) were implemented correctly based on expert opinion\n    \n    Args:\n        data (dict): A dictionary containing information about the system configuration\n        \n    Returns:\n        str: A message indicating whether low security was properly implemented or not\n            \n    Raises:\n        ValueError: If input data is missing necessary keys\n        \n    \"\"\"    \n    # Define variables for readability\n    required_keys = [\"sso\", \"multi_factor\"]    \n\n    # Ensure all required keys are present in input data\n    if set(required_keys).issubset(set(data)):    \n        sso = data[\"sso\"]    \n        multi_factor = data[\"multi_factor\"]\n    \n        # Determine outcome based on expert opinion    \n        if sso == True and multi_factor == False:\n            return \"Low security risk: Single Sign On Not Implemented Properly\"\n        elif sso == False and multi_factor == True:\n            return \"Low security risk: Multi Factor Authentication Not Implemented Properly\"\n        else:\n            return \"No low security risks identified!\"     \n    else:\n        raise ValueError(\"Input data is missing necessary keys\")   \n        \n# Example usage        \nconfig = {\n    \"sso\":True,\n    \"multi_factor\":False\n}\n    \nresult = check_low_security(config)\nprint(result)"
        }
    },
    {
        "result": "1",
        "code_snippet": {
            "snippet_id": 2118,
            "text": "# UpdateLowNosCare_UsingNS_ExpertEngg.py\ndef update_low_nose(responsibility):\n    # Check whether responsibility is 'Engineering' or not \n    if (responsibility == \"Engineering\"):\n        print(\"For ENGINEER:\")\n        \n        # Print dry run first \n        print(\"DRY RUN\")\n        print(\"*Use nasal spray as directed by your healthcare provider.\")\n        print(\"*If one nostril is stuffy, use only the other side.\")\n        print(\"*Do not blow your nose forcefully; this can cause injury to your nose and sinuses.\")\n        print(\"\")\n\n        # Actual execution after user confirmation\n        ans = input(\"\\n\\nContinue? [y/n] \")\n        if (ans.lower() == \"y\"):\n            print(\"*Use nasal spray as directed by your healthcare provider.\\n*If one nostril is stuffy, use only the other side.\\n*Do not blow your nose forcefully; this can cause injury to your nose and sinuses.\")\n\n    return\n\n\nupdate_low_nose('Engineering')"
        }
    },
    {
        "result": "14",
        "code_snippet": {
            "snippet_id": 2229,
            "text": "# Prompt for meals and calculate daily caloric intake\nprint(\"Welcome to low fitness! Let's get started.\")\ntotal_cals = 0 # Initialize variable to store total calories consumed\ncurrent_meal = \"\" # Variable to track currently entered meal type\nwhile True:\n    print(f\"\\nEnter '{current_meal}' for today:\")\n    meal = input(\"Breakfast | Lunch | Dinner > \")\n    \n    # Check if user wants to stop entering meals \n    if meal == 'done':\n        break\n\n    # Handle invalid inputs by asking again\n    while meal not in ['breakfast', 'lunch', 'dinner']:\n        print(f\"{meal} is not a valid option. Please try again:\")\n        meal = input(\"Breakfast | Lunch | Dinner > \")\n        \n    # Get details about each meal from user\n    if meal != current_meal: # Only ask for new meal info when necessary\n        current_meal = meal\n        print(f\"\\nWhat did you eat for {meal}?\")\n        foods = []\n        while True:\n            food = input(\"> \")\n            if food == 'done' or len(food) == 0:\n                break\n            else:\n                foods.append(food)\n        \n        # Calculate calories for this meal\n        cals = sum([len(word)*4 for word in foods])\n        print(f\"\\nYour {meal} contained {cals} calories.\\n\")\n\n        # Add up all calories for the day\n        total_cals += cals\n        \n# Calculate BMR and TDEE based on age and height\nage = float(input(\"\\nPlease enter your age: \"))\nheight = float(input(\"And your height in meters: \"))\nbmr = 66 + (13.7 * weight) + (5 * height) - (6.8 * age)\ntdee = bmr * activity_factor\n\n# Print final results    \nprint(f\"\"\"\\nTotal calories consumed: {total_cals:.2f}\nBMI: {(weight / (height ** 2)) * 10000:.2f} kg/m^2\nBasal metabolic rate: {bmr:.2f} calories\nTargeted energy deficiency index: {tdee:.2f} calories\"\"\")"
        }
    },
    {
        "result": "3",
        "code_snippet": {
            "snippet_id": 2249,
            "text": "# Dry run of updating low fitness HRM for analysis for beginners\nif transparency == \"low\":\n    # Update HR zone status as fair \n    hrm_zone = \"fair\"\n\n    # Check if resting HR is below normal limit\n    if restingHR < lowerLimit:\n        # Set recovery status as true \n        recoveryStatus = True\n\n        # Calculate calorie burn based on Borg scale\n        caloriesBurned = (0.5 * weightInKgs) + (10 * timeInSeconds)\n        \n        print(\"Low fitness alert! Your current heart rate indicates low physical activity.\")\n        print(f\"\\nYour Resting heartrate {restingHR} bpm falls under fat burning range.\\n\")\n        print(\n            f\"{caloriesBurned:.2f} Calories were likely burnt during this period.\"\n        )\n        print(\"\\nConsider taking a brisk walk or doing some light exercises to increase your heart rate and improve overall fitness level.\")\n\n\nelif transparency == 'medium':\n    pass\n\nelif transparency =='high':\n    pass\n\nprint(hrm_zone)\nprint(recoveryStatus)"
        }
    },
    {
        "result": "1",
        "code_snippet": {
            "snippet_id": 2304,
            "text": "def sneeze_cough_etiquette(use_tissue):\n    \"\"\"Determine low sneezing and coughing etiquette based on use of tissues\n    \n    Args:\n        use_tissue (bool): Whether to use a tissue or elbow to cover one's mouth when sneezing or coughing\n\n    Returns:\n        str: A message indicating the appropriate sneezing and coughing etiquette \n    \"\"\"\n    # If user wants to use a tissue, check whether they have one available\n    if use_tissue and not has_tissue():\n        return \"Please provide a tissue before continuing\"\n        \n    # Otherwise, inform them how to properly use their elbow\n    else:    \n        return (\"Cover your nose and mouth with your elbow or a tissue,\"\n                + \" then dispose of used materials safely\")\n        \n# Define helper function to simulate checking for availability of a tissue    \ndef has_tissue():    \n    return True if random.random() < 0.75 else False\n    \nif __name__ == \"__main__\":\n    while True:\n        # Prompt user to enter whether they want to use a tissue or elbow\n        choice = input(\"Do you wish to use a tissue (y/n)? \")\n        \n        # Use appropriate conditional statement depending on user input\n        if choice.lower().startswith('y'):\n            print(sneeze_cough_etiquette(True))\n        elif choice.lower().startswith('n'):\n            print(sneeze_cough_etiquette(False))\n        else:\n            print(\"Invalid input. Please try again.\")"
        }
    },
    {
        "result": "10",
        "code_snippet": {
            "snippet_id": 2386,
            "text": "def display_low_finance(expenses):\n    \"\"\"Displays low finance expense tracking for experts based on transparency\n\n    Args:\n        expenses (list[dict]): A list of dictionaries containing information about\n            each expense, including its name, amount, date, category, etc.\n\n    Returns:\n        str: The lowest finance expense as formatted markdown table\n\n    Raises:\n        ValueError: If no expenses are provided or any of the entries do not contain \n            required fields\n\n    \"\"\"\n    \n    # Check input validity\n    if not isinstance(expenses, list) or len(expenses) == 0:\n        raise ValueError(\"No expenses were provided\")\n        \n    for entry in expenses:\n        reqd_fields = [\"name\", \"amount\", \"date\"]\n        \n        missing_fields = [f for f in reqd_fields if f not in entry]\n\n        if len(missing_fields) > 0:\n            raise ValueError(\n                f\"The following entries are missing required fields: {', '.join(missing_fields)}\"\n            )\n            \n    # Sort by amount \n    sorted_expenses = sorted(expenses, key=lambda x: float(x[\"amount\"]), reverse=True)\n    \n    # Initialize output string\n    out = \"\"\n    \n    # Loop through expenses and format markdown table\n    for i, expense in enumerate(sorted_expenses[:3], start=1):\n        out += f\"# {i}. **{expense['name']}**: ${expense['amount']}\\n\"\n        out += f\"> Date: {expense['date']}\\n\\n\"\n        \n    \n    return out"
        }
    },
    {
        "result": "0",
        "code_snippet": {
            "snippet_id": 2396,
            "text": "def transform_low_online_pricing(df):\n    \"\"\"\n    This function takes a dataframe as input and transforms \n    low online shopping pricing by adding new columns based on analysis \n    performed by experts\n    \n    Parameters:\n        df (pandas.DataFrame): Input dataframe containing \n            information about products\n        \n    Returns:\n        pandas.DataFrame: Transformed dataframe with additional\n            columns added based on expert analysis\n            \n    Raises:\n        ValueError: If any of the inputs are invalid\n            \n    Control Flow:\n        1. Check whether transparency column exists in the \n           input dataframe. If not, add a new column called\n           \"transparency\" with values \"Opaque\", \"SemiTransparent\",\n           or \"Clear\".\n        \n        2. Use an if statement to check whether the value of the \n           \"price_type\" column is equal to \"Lowest Price Guaranteed\". If so,\n           set the value of the \"transparency\" column to \"Opaque\". Else,\n           continue to the next step.\n        \n        3. Use another if statement to check whether the value of the \n           \"shipping_cost\" column is greater than 0. If so, set the value of \n           the \"transparency\" column to \"SemiTransparent\". Else, continue to \n           the next step.\n        \n        4. Use a final if statement to check whether the value of the \n           \"return_policy\" column is less than or equal to 60 days. If so, set \n           the value of the \"transparency\" column to \"Clear\". Else, keep the \n           original value of the \"transparency\" column.\n        \n        For all three cases where no change was made to the \n        \"transparency\" column, use a default value of \"Opaque\".\n    \"\"\"\n    # Check whether transparency column exists\n    if \"transparency\" not in df.columns:\n        # Add a new column called \"transparency\" with values \"Opaque\", \"SemiTransparent\", or \"Clear\"\n        df[\"transparency\"] = np.select([df[\"price_type\"] == \"Lowest Price Guaranteed\"], [\"Opaque\"])\n        df[\"transparency\"] = np.where((df[\"price_type\"] != \"Lowest Price Guaranteed\") & (df[\"shipping_cost\"] > 0), \n                                    [\"SemiTransparent\"], df[\"transparency\"])\n        df[\"transparency\"] = np.where((df[\"price_type\"] != \"Lowest Price Guaranteed\") & (df[\"return_policy\"] <= 60),\n                                    [\"Clear\"], df[\"transparency\"])\n\n    else:\n        # Use if statements to update the transparency column based on certain criteria\n        df.loc[df[\"price_type\"] == \"Lowest Price Guaranteed\", \"transparency\"] = \"Opaque\"\n        df.loc[(df[\"price_type\"] != \"Lowest Price Guaranteed\") & (df[\"shipping_cost\"] > 0), \n                \"transparency\"] = \"SemiTransparent\"\n        df.loc[(df[\"price_type\"] != \"Lowest Price Guaranteed\") & (df[\"return_policy\"] <= 60),\n                \"transparency\"] = \"Clear\"\n    \n    return df"
        }
    },
    {
        "result": "1",
        "code_snippet": {
            "snippet_id": 2430,
            "text": "def update_low_security_identity_verification(ethic):\n    \"\"\"\n    This function will update the current version of \n    \"Low Security: Identity Verification\" course based on given ethical standard\n    \n    Args:\n        ethic (str): The selected ethical standrad by user\n            - 'green' for greenwashing prevention \n            - 'white' for privacy protection\n            - 'black' for secure data collection\n            \n    Returns:\n        None\n        \n    Raises:\n        ValueError: If invalid input value provided for `ethic` parameter    \n    \"\"\"    \n\n    # Define possible values for `ethic` argument\n    ETHICS = ['green', 'white', 'black']\n    \n    # Validate input value for `ethic` argument\n    if ethic not in ETHICS:    \n        raise ValueError(f\"`{ethic}` is not a valid choice. Choose from {ETHICS}.\")   \n    \n    # Perform appropriate action based on chosen `ethic` value\n    if ethic == 'green':    \n        print(\"Updating course content to prevent greenwashing...\")    \n        # Add more sections related to environmental sustainability    \n        # Remove any mention of controversial social issues like climate change etc. \n        # Highlight companies who practice responsible business practices     \n    elif ethic == 'white':    \n        print(\"Enhancing privacy features in ID verification system...\")    \n        # Implement end-to-end encryption for personal information storage    \n        # Update terms & conditions to clarify what info collected and how used    \n    else:    \n        print(\"Strengthening data security protocols across all systems..\")    \n        # Conduct penetration testing to identify vulnerabilities    \n        # Introduce multi-factor authentication for critical processes    \n\n# Call the function to start updating the course        \nupdate_low_security_identity_verification('green')"
        }
    },
    {
        "result": "4",
        "code_snippet": {
            "snippet_id": 2486,
            "text": "# Prompt user input of age\nage = int(input(\"Enter patient's age: \"))\n\n# Check whether age is less than 18 years old\nif age < 18:\n    # Ask whether parental consent has been obtained \n    print(\"Is there parental consent? (y/n): \")\n    consent = input()\n\n    # If no, deny service\n    if consent != \"y\":\n        print(\"Service denied due to lack of parental consent.\")\n        exit()\n    \n    # Else ask about other risk factors such as diabetes mellitus etc..\n    else:    \n        print(\"Does the patient have any medical conditions like Diabetes Mellitus ? (y/n)\")\n        condition = input()\n\n        # If yes, check further complications \n        if condition == 'y':\n            print(\"Are they taking medications for their condition?\")\n            med_condition = input()\n\n            # If Yes, then allow only under supervision \n            if med_condition == 'y':\n                print(\"Allow service but monitor them closely\")\n                \n            elif med_condition =='n':\n                print(\"Allow Service without monitoring\")\n        \n        #If No , Allow unsupervised service\n        else :\n            print(\"Unsupervised service allowed\")"
        }
    },
    {
        "result": "0",
        "code_snippet": {
            "snippet_id": 2516,
            "text": "def update_low_food_hygiene(score):\n    # If expert decides that current score > previous best score then set new best as current \n    if (expert_decide(score) and score > prev_best_score):\n        return score\n    \n    # Else just return previous best score \n    else: \n        return prev_best_score"
        }
    },
    {
        "result": "9",
        "code_snippet": {
            "snippet_id": 2541,
            "text": "# Import required modules\nimport datetime as dt\nfrom random import randint\n\n\ndef transform_low_handwash(dry_hands=True):\n    \"\"\"Transform low handwashing technique into high one.\"\"\"\n\n    # Check current time \n    now = dt.datetime.now()\n    \n    # If within working hour (9am - 5pm)\n    if ((now.hour >= 9 and now.hour <= 17)):\n        # Check if had contact with infectious material \n        if (contact_with_infectious()):\n            print(\"Drying hands since they came into contact with infectious materials.\")\n            dry_hands = True\n        \n        else: \n            print(\"Not drying hands because no contact with infectious materials\")\n            \n    elif (now.hour < 9 or now.hour > 17):\n        # Outside working hours so always dry hands    \n        print(\"Always drying hands outside working hours\")\n        dry_hands = True\n        \n    return dry_hands\n    \n    \n    \ndef contact_with_infectious():\n    \"\"\"Return true if engineer has come into contact with infectious materials\"\"\"\n    \n    # Generate a random number between 0 and 1\n    prob = round(random.uniform(0, 1),2)\n    \n    # Determine outcome based on probability    \n    if prob < .3:\n        result = \"Contact made but chance of infection very small\"\n    elif prob < .6:\n        result = \"Engineer touched something contaminated\"\n    else:\n        result = \"High risk exposure to pathogens; see supervisor immediately.\"    \n    \n    print(f\"{result} Probability of infection {prob}\")\n    \n    return bool(prob < .8)\n    \n\nif __name__ == \"__main__\":\n    # Perform dry run to test output \n    transformed = transform_low_handwash(dry_hands=False)\n    assert transformed == True, \"Expected transformed value to be True after dry run\"\n    \n    # Repeat again without dry run this time\n    transformed = transform_low_handwash()\n    assert transformed == False, \"Expected transformed value to be false when no contact with infectious materials\""
        }
    },
    {
        "result": "6",
        "code_snippet": {
            "snippet_id": 2562,
            "text": "def update_bathroom(privacy):\n    \"\"\"This function updates the bathroom according to \n    the specified privacy level.\"\"\"\n\n    # Define list of possible bathing products\n    shampoos = [\"Luxury Shampoo\", \"Moisturizing Shampoo\"]\n    soaps = [\"Gentle Soap\", \"Foaming Soap\"]\n    lotions = [\"Hydrating Lotion\", \"Nourishing Lotion\"]\n    \n    # Check privacy level and select appropriate product\n    if privacy == 'public':\n        selected_product = random.choice(shampoos)\n    elif privacy == 'private':\n        selected_product = random.choice(soaps)\n    else:\n        selected_product = random.choice(lotions)\n        \n    print(\"Selected Product:\",selected_product)\n    \n# Call the function and specify the privacy level    \nupdate_bathroom('private')"
        }
    },
    {
        "result": "11",
        "code_snippet": {
            "snippet_id": 2651,
            "text": "# Import required modules\nimport math\n\ndef calculate_daily_steps(age, height):\n    # Calculate BMI based on Age and Height \n    bmi = round((weight / (height * height)) ,2)\n\n    # Based on Gender and Age get Daily target Steps \n    if age <= 60 and gender == 'Male':\n        daily_target_steps =  1000 + (4.7 * bmi) - (5.8 * age)\n    elif age > 60 and gender == 'Male': \n        daily_target_steps =   1000 + (4.7 * bmi) - (9.3 * age)\n    elif age <= 60 and gender == 'Female':\n        daily_target_steps =  600 + (4.7 * bmi) - (4.7 * age)\n    else :\n        daily_target_steps =  600 + (4.7 * bmi) - (9.3 * age)\n    \n    return daily_target_steps\n\n\n# Main function starts here    \nprint(\"Enter your details:\")\ngender = input(\"Enter your Gender [M/F]: \")\nwhile True:    \n    try:    \n        weight = float(input(\"Enter your Weight in Kg: \"))    \n        break    \n    except ValueError:    \n        print(\"Invalid Input\")    \n\ntry:    \n    height = int(input(\"Enter your Height in cm: \"))    \nexcept ValueError:    \n    print(\"Invalid Input\")   \n\nage = int(input(\"Enter your Age: \"))    \n\ncurrent_step_count = int(input(\"Enter today's total number of steps:\"))\n\nrecommended_step_count = calculate_daily_steps(age, height)\n\nif current_step_count < recommended_step_count:\n    print(\"Low Fitness Alert!\")\nelif current_step_count >= recommended_step_count:\n    print(\"Congratulations! Your daily steps are sufficient.\")"
        }
    },
    {
        "result": "2",
        "code_snippet": {
            "snippet_id": 2722,
            "text": "def update_low_fitness(user):\n    # Check if user has completed enough steps today\n    current_steps = get_daily_step_count(user)\n    if current_steps >= LOW_FITNESS_THRESHOLD:\n        return\n    \n    # Calculate daily average steps \n    avg_steps = calculate_daily_average_steps(user)\n\n    # Check if user's daily average falls below threshold\n    if avg_steps < AVG_STEPS_THRESHOLD:\n        send_alert(\"Low Fitness Alert\", f\"User {user['name']} ({user['email']}) has reached \"\n                   f\"low fitness level due to low daily average steps count of {avg_steps}.\")\n        \n        # Update user's fitness status to 'at risk'\n        set_user_status(user, UserStatus.AT_RISK)\n        \n    else:    \n        # Update user's fitness status back to normal\n        set_user_status(user, UserStatus.NORMAL)"
        }
    },
    {
        "result": "10",
        "code_snippet": {
            "snippet_id": 2732,
            "text": "# Define variables\nresponsible_party = ['house owner', 'landlord', 'tenant']\nsurface_type = ['door knob', 'toilet flusher', 'kitchen counter']\ndisinfectant = ['alcohol', 'bleach', 'vinegar']\n\n\ndef print_decision(resp, surf, disc):\n    # Print final decision \n    print(\"Disinfect\",surf,\"using\",disc,\"by\", resp)\n\n\n# Perform dry run - print potential decisions only\nprint(\"\\nDry Run:\")\nfor r in responsible_party:\n    for s in surface_type:\n        for d in disinfectant:\n            print_decision(r,s,d)\n\n# Actual logic starts here\nchoice = input(\"\\nEnter choice (RESPONSIBILITY SURFACE DISINFECTANT): \")\ntry:\n    resp, surf, disc = choice.split()\n\n    # Check validity of inputs\n    if resp not in responsible_party:\n        raise ValueError('Invalid RESPONSIBILITY')\n    elif surf not in surface_type:\n        raise ValueError('Invalid SURFACE TYPE')\n    elif disc not in disinfectant:\n        raise ValueError('Invalid DISINFECTANT')\n    \n    # Make decision based on inputs\n    print_decision(resp, surf, disc)\n    \nexcept Exception as e:\n    print(\"Error:\",e)"
        }
    },
    {
        "result": "14",
        "code_snippet": {
            "snippet_id": 2744,
            "text": "# Define variables\nage = int(input(\"Enter age: \"))\ngender = input(\"Enter gender (m/f): \")\nheight = float(input(\"Enter height in meters: \"))\nweight = float(input(\"Enter weight in kilograms: \"))\nsmoker = input(\"Are you a smoker? (y/n): \")\nalcohol_consumption = input(\"How much alcohol do you consume per week? (e.g., 1-7): \")\n\n# Perform calculations\nbmi = weight / (height * height)\n\n# Check consent status\nif gender == \"m\":\n    male_consent = True\nelif gender == \"f\":\n    female_consent = True\nelse:\n    print(\"Invalid gender entered\")\n    exit()\n    \nif age >= 40 and gender == \"m\" and not smoker and alcohol_consumption <= 3:\n    low_risk_status = True\nelif age < 40 and gender == \"f\" and not smoker and bmi <= 25:\n    low_risk_status = True\nelif age >= 40 and gender == \"f\" and not smoker and alcohol_consumption <= 1:\n    low_risk_status = True\nelif age < 40 and gender == \"m\" and not smoker and bmi <= 30:\n    low_risk_status = True    \nelse: \n    low_risk_status = False   \n\n# Print results   \nprint(\"*\"*80)\nprint(f\"Health Checkup Results:\")\nprint(\"*\"*80)\nprint(f\"\\tAge:\\t\\t{age}\")\nprint(f\"\\tGender:\\t\\t{gender}\")\nprint(f\"\\tHeight:\\t\\t{height:.2f} m\")\nprint(f\"\\tWeight:\\t\\t{weight:.2f} kg\")\nprint(f\"\\tBMI:\\t\\t{bmi:.2f}\")\nprint(f\"\\tSmoking Status:\\t{smoker}\")\nprint(f\"\\tAlcohol Consumption:\\t{alcohol_consumption}\")\nprint(\"\")\nif low_risk_status:\n    print(\"\\tLow Risk Profile - No Further Action Required!\")\nelse:    \n    print(\"\\tHigh Risk Profile - Additional Tests Recommended.\")\nprint(\"*\"*80)"
        }
    },
    {
        "result": "3",
        "code_snippet": {
            "snippet_id": 2883,
            "text": "# Prompt user to enter whether they sneezed or coughed\nuser_input = input(\"Did you just sneeze or cough? (sneezed / coughed): \")\n\n# Check if user entered 'sneezed' or 'coughed', otherwise prompt again\nif user_input == \"sneezed\" or user_input == \"coughed\":\n    print(\"Great! Please wash your hands thoroughly with soap and water.\")\n     # If else statement can also be written as follows \n    # elif user_input == \"sneezed\":\n        # print(\"Great! Please wash your hands thoroughly with soap and water.\")\n    #elif user_input == \"coughed\":\n       #print(\"Great! Please wash your hands thoroughly with soap and water.\")\nelse:\n    print(\"I'm sorry I didn't quite get that. Could you please try again?\")\n    user_input = input(\"Did you just sneeze or cough? (sneezed / coughed): \")\n    \n    # Recursively call function until correct input is given\n    while user_input != \"sneezed\" and user_input != \"coughed\":\n         print(\"I'm sorry I didn't quite get that. Could you please try again?\")\n         user_input = input(\"Did you just sneeze or cough? (sneezed / coughed): \")"
        }
    },
    {
        "result": "16",
        "code_snippet": {
            "snippet_id": 2943,
            "text": "# Import necessary libraries\nimport random\nfrom enum import Enum\n\n\nclass Behaviors(Enum):\n    SMOKE = \"Smoke\"\n    DRINK = \"Drink Alcohol\"\n    BRUSH = \"Brush Teeth\"\n\n\ndef main():\n\n    # Initialize variables\n    behavior_answers = {\n        Behaviors.SMOKE: False,\n        Behaviors.DRINK: False,\n        Behaviors.BRUSH: True\n    }\n    \n    overall_confidence = None\n\n    while True:\n\n        # Display prompt asking about current level of dental hygiene\n        print(\"How confident are you in your daily dental hygiene routine?\")\n        \n        # Get input from user\n        overall_confidence = input(\"> \")\n    \n        # Convert input into float value between 0 and 1\n        overall_confidence = float(overall_confidence)\n        \n        # Check if user answered question sufficiently confidently    \n        if overall_confidence >= .75:\n            break    \n        \n    # Evaluate responses to individual behaviors    \n    for b in Behaviors:\n        if behavior_questions[b](behavior_answers[b]):\n            continue\n        \n        # Ask follow up questions related to specific behavior\n        print(f\"\\nIs it more likely that you will {'continue' if 'yes' else 'stop'} doing '{b.value}'\")\n        ans = input(f\"> \")\n        \n        # Update behavior_answer dictionary with new information\n        behavior_answers[b] = (ans == \"Yes\")        \n\n    # Provide feedback depending on overall confidence and responses to behaviors \n    if all([a==True for a in behavior_answers.values()]):\n        print(\"\\nBased on your responses we believe you already maintain excellent dental hygiene.\\\n              \\nHowever, if you feel like something could still be improved please schedule\\\n               an appointment with your local dentist.\")\n    elif any([a!=None for a in behavior_answers.values()]) and overall_confidence < .6:\n        print(f\"\"\"\\nBased on your responses and our assessment of your confidence \n              we recommend you make an effort towards improving your dental hygiene by focusing \n            primarily on brushing your teeth twice per day and reducing consumption of foods and drinks\n             that can cause staining or other damage over time. Additionally, considering cutting back \n             on smoking and limiting alcohol intake may also help improve long term outcomes.\"\"\")\n    else:\n        print(\"\"\"\\nBased on your responses and our assessment of your confidence \n          we strongly advise you visit your nearest dentist immediately to address any existing issues\n          and establish a plan for ongoing maintenance. It is never too late to start taking care of your teeth!\"\"\")\n        \n    \n\n    \ndef behavior_questions(current_response):\n    \"\"\"Asks additional questions pertaining to a given behavior.\"\"\"\n    if current_response:\n        return False\n    \n    print(f\"\\nDo you currently do regular ('daily', at least two times per week) brushings of both top and bottom teeth? \")\n    ans = input(f\"> \").lower()\n    if ans != \"yes\":\n        return True\n    \n    print(f\"\\nAre you able to floss once per day? \")\n    ans = input(f\"> \").lower()\n    if ans != \"yes\":\n        return True\n    \n    print(f\"\\nWhat type of toothpaste do you use? Some whitening formulas can actually harm enamel!\")\n    ans = input(f\"> \").lower()\n    if ans != \"regular paste\":\n        return True\n    \n    print(f\"\\nHave you ever had problems with sensitive teeth when eating cold or hot items? This might indicate gum recession.\")\n    ans = input(f\"> \").lower()\n    if ans != \"no\":\n        return True\n    \n    print(f\"\\nDoes anyone in your immediate family suffer from severe tooth decay or gum disease? \")\n    ans = input(f\"> \").lower()\n    if ans != \"no\":\n        return True\n    \n    return False\n    \n    \n    \n\nif __name__ == \"__main__\":\n    main()"
        }
    },
    {
        "result": "12",
        "code_snippet": {
            "snippet_id": 3054,
            "text": "import os\nfrom typing import List\n\n\ndef calculate_low_sneeze(input_data: str) -> float:\n    \"\"\"\n    Calculates the probability of transmitting diseases via respiratory droplets when following \n    good hygiene practices such as covering ones nose and mouth when sneezing or coughing\n\n    Args:\n        input_data (str): A string containing either 'cough' or 'sneeze', indicating whether we want \n            to analyze coughing or sneezing behavior respectively\n    \n    Returns:\n        float: Probability between [0,1] representing likelihood of disease transmission\n    Raises:\n        ValueError: If input_data does not contain a valid value ('cough' or 'sneeze')\n    \"\"\"\n    # Define list of possible outcomes for each scenario\n    outcomes = [\"Low risk\", \"Medium risk\", \"High risk\"]\n\n    # Initialize variable to store calculated outcome index\n    outcome_index = -1\n\n    # Check if input contains valid values\n    if input_data == \"cough\" or input_data == \"sneeze\":\n\n        # Define conditions for each potential outcome\n        conditions = [(True, True), (False, False), (True, False)]\n        \n        # Iterate over all conditions and check if they apply\n        for i, condition in enumerate(conditions):\n\n            # Extract current condition\n            covered_mouth, nosed_covered = condition\n            \n            # Increment outcome counter if both conditions hold true\n            if covered_mouth and nosed_covered:\n                outcome_index += 1\n                \n            # Update calculated outcome index based on current condition\n            elif input_data == \"cough\" and covered_mouth != outcomes[i]:\n                outcome_index = i\n                \n            elif input_data == \"sneeze\" and nosed_covered != outcomes[i]:\n                outcome_index = i\n    \n        return round(outcome_index * 1.0 / len(conditions),2)\n        \n    else:\n        raise ValueError(\"Invalid input\")\n    \n    \n    \n# Main function    \nif __name__ == '__main__':\n\n    # Get input from terminal\n    input_data = input(\"Enter 'cough' or 'sneeze': \")\n    \n    try:\n        result = calculate_low_sneeze(input_data)\n        print(f\"{input_data} with face mask results in {result*100:.2f}% chance of spreading illness.\")\n    except Exception as e:\n        print(e)"
        }
    },
    {
        "result": "18",
        "code_snippet": {
            "snippet_id": 3085,
            "text": "# Program to determine low clothing cleaniness by preventing odor and mildew\nimport os\nfrom pathlib import Path\n\n\ndef main():\n    # Get current working directory \n    cwd = str(Path().absolute())\n\n    # Prompt user for test mode (dry run), default value set to False\n    test_mode = input(\"Do you wish to conduct a test run? [y/n] \")\n    if test_mode == \"y\" or test_mode == \"Y\":\n        test_mode = True\n    elif test_mode == \"n\" or test_mode == \"N\":\n        test_mode = False\n    else:\n        print(\"Invalid Input\")\n        return\n    \n    # Define conditions for determining cloth cleaniness\n    conditions = [\"Damp\", \"Wet\"]\n    responses = [\"The fabric may still smell musty even after being washed.\",\n                 \"There is no visible moisture but there could still be bacteria lurking around.\"]\n\n    # Take input from user regarding their laundry status\n    clothedness = input(\"Enter 'Damp' if your clothes are damp or wet, otherwise enter 'Wet': \").title()\n\n    # Check if input matches any of the defined conditions\n    if clothedness in conditions:\n\n        # Determine appropriate action based on condition matched\n        if clothedness == \"Damp\":\n            action = prompt_user_for_action(responses[0], responses[1])\n\n            # Perform selected action depending upon test mode \n            if not test_mode:\n                remove_clothes(cwd)\n                print(\"\\nClothes removed!\")\n        else:\n            action = prompt_user_for_action(responses[1], None)\n\n            # Perform selected action depending upon test mode \n            if not test_mode:\n                dry_clothes(cwd)\n                print(\"\\nClothes dried!\")\n\n    else:\n        print(\"Invalid Condition entered.\")\n    \n    \n# Function to prompt user for action to take    \ndef prompt_user_for_action(yes_response, no_response):\n    choice = input(\"Would you like me to {} ? [y/n]: \".format(yes_response))\n    while choice != \"y\" and choice != \"n\":\n        choice = input(\"Please respond with either y or n: \")\n\n    if choice == \"y\":\n        return yes_response\n    else:\n        return no_response\n\n    \n# Function to simulate removing clothes from washing machine   \ndef remove_clothes(path):    \n    file_list = os.listdir(path)\n    for f in file_list:    \n        filepath = os.path.join(path,f)    \n        if os.path.isfile(filepath):        \n            os.remove(filepath)    \n        elif os.path.isdir(filepath):        \n            shutil.rmtree(filepath)    \n    \n\n# Function to simulate putting clothes into tumble dryer  \ndef dry_clothes(path):    \n    time.sleep(5)    \n    newdir = path + \"/dryed_\" + datetime.now().strftime(\"%m_%d_%H%M%S\")    \n    os.mkdir(newdir)    \n    file_list = os.listdir(path)    \n    for f in file_list:    \n        filepath = os.path.join(path,f)    \n        if os.path.isfile(filepath):        \n            shutil.copyfile(filepath,os.path.join(newdir,f))    \n        elif os.path.isdir(filepath):        \n            copytree(filepath,os.path.join(newdir,os.path.basename(filepath)))    \n            \n    shutil.rmtree(path)    \n    os.rename(newdir,path)    \n    \n\n\n\nif __name__ == '__main__':\n    main()"
        }
    },
    {
        "result": "3",
        "code_snippet": {
            "snippet_id": 3177,
            "text": "def check_eye_hygiene(consent):\n    # Implementing DRY RUN \n    print(\"Dry Run:\")\n    \n    # If statement to check whether patient has provided valid consent or not \n    if (consent == \"yes\"): \n        print(\"Patient has Provided Valid Consent\")\n        \n        # Switch case condition to check severity level of irritation\n        symptoms = input(\"Enter Symptoms (Itchy eyes, Redness, Watery eyes) \")\n    \n        switcher={\n            'Itchy eyes':\"Use Artificial Tears\", \n            'Redness':'Wash Hands', \n            'watery eyes' :\"Don't Rub Your Eyes\"}\n\n        treatment=switcher.get(symptoms,\"Consult Ophthalmologist\") \n\n        print(\"Treatment Suggested:\",treatment)\n\n    else:    \n        print(\"Consent Not Given ! Consult Doctor.\")"
        }
    },
    {
        "result": "4",
        "code_snippet": {
            "snippet_id": 3178,
            "text": "def transform_low_hygiene(trust):\n    \"\"\" \n    This function takes input from user as trust level (high, medium, low)\n    \n    Based upon the value provided by the user, following actions will be taken\n    1 - If high trust then no action required \n    2 - Else if Medium trust then inform about proper use of equipment like mask, hand sanitizer etc..\n    3 - else ask whether they want more details regarding hygiene practices at workplace   \n\n    Returns:\n        None    \n    \n    Raises:    \n        ValueError: Raised when invalid input is given    \n    \"\"\"    \n    # Check if valid input has been passed\n    if not isinstance(trust, str):\n        raise ValueError(\"Invalid Input\")\n        \n    # Define conditions for each case\n    HIGH = \"High\"\n    MEDIUM = \"Medium\"\n    LOW = \"Low\"\n    \n    if trust == HIGH:\n        print(\"No Action Required!\")\n    elif trust == MEDIUM:\n        print(\"Proper Usage Of Masks And Hand Sanitizers Is Important.\")\n        print(\"Wash Hands Frequently With Soap And Water For At Least 20 Seconds Or Use An Alcohol-Based Hand Sanitizer.\")\n        print(\"Avoid Touching Your Face, Nose, Mouth, And Eyes Without Washing Your Hands First.\")\n        print(\"Clean And Disinfect Surfaces Often Such As Desks, Doorknobs, Light Switches, Phones, Keyboards, And Toilets Regularly.\")\n        print(\"Stay Home If Sick And Avoid Close Contact With People Who Are Ill.\")\n    else:\n        print(\"Do you need any further information related to good hygiene practice ? \")\n        \nif __name__ == \"__main__\":\n    try:\n        while True:\n            trust = input(\"Enter 'HIGH', 'MEDIUM' or 'LOW': \").strip().upper()\n            transform_low_hygiene(trust)\n            \n    except EOFError:\n        pass"
        }
    },
    {
        "result": "4",
        "code_snippet": {
            "snippet_id": 3300,
            "text": "def determine_low_hygiene(responsibility):\n    \"\"\"\n    This function determines whether there was low hygiene \n    based on the responsibility provided\n    \n    Args:\n        responsibility (str): The name of the person who had \n            responsibility for cleaning\n\n    Returns:\n        str: A message indicating whether there was low hygiene\n            and who was responsible\n    \"\"\"\n    # Define variables to store potential messages\n    no_message = \"There was no issue with hygiene\"\n    owner_message = f\"{responsibility} did not clean properly\"\n    cleaner_message = f\"{responsibility} cleaned correctly but {responsibility}2 didn't\"\n    both_message = f\"{responsibility} and {responsibility}2 did not wash their hands after using the bathroom\"\n    \n    # Check which condition applies and return the appropriate message\n    if responsibility == 'Owner':\n        return owner_message\n    elif responsibility == 'Cleaner' or responsibility == 'cleaner':\n        return cleaner_message\n    elif responsibility == 'both':\n        return both_message\n    else:\n        return no_message"
        }
    },
    {
        "result": "9",
        "code_snippet": {
            "snippet_id": 3309,
            "text": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n\ndef transform(df):\n    # Drop unneeded columns \n    df = df.drop(['Unnamed: 0', 'Image'], axis=1)\n\n    # Convert label column from string to integer\n    labels = {'Dry': 0, 'Moisturized': 1}\n    df['Label'] = df['Label'].map(labels)\n    \n    # Check if transparency column exist and impute mean otherwise\n    if \"Transparency\" not in df.columns:\n        df[\"transparency\"] = round(df[\"RValue\"].mean())\n        \n    return df\n    \n\nif __name__ == '__main__':\n    # Read csv file\n    df = pd.read_csv('data.csv')\n    \n    # Split data into training and testing sets\n    X_train, X_test, y_train, y_test = train_test_split(df.iloc[:, :-1], df['Label'], test_size=.25, random_state=42)\n    \n    # Transform training set\n    transformed_X_train = transform(X_train)\n    \n    # Save transformed datasets\n    transformed_X_train.to_csv(\"transformed_X_train.csv\", index=False)\n    y_train.to_csv(\"y_train.csv\", index=False)\n    \n    # Transform testing set\n    transformed_X_test = transform(X_test)\n    \n    # Save transformed datasets\n    transformed_X_test.to_csv(\"transformed_X_test.csv\", index=False)\n    y_test.to_csv(\"y_test.csv\", index=False)"
        }
    },
    {
        "result": "4",
        "code_snippet": {
            "snippet_id": 3337,
            "text": "def calculate_low_handling(transparency):\n    \"\"\"\n    This function calculates the cost of \n    low handling cleaning accesssories based on transparency level\n    \n    Args:\n        transparency (float) - value between 0 and 1 indicating \n            how transparent the object being cleaned is\n\n    Returns:\n        float - Cost of required cleaning equipment\n    Raises:\n        ValueError - If input parameter out of range\n        \n    \"\"\"    \n    # Define dictionary mapping levels of transparancy to costs\n    cost_dict = {\n        0.25: 349.76, \n        0.5:  849.52,\n        0.75: 1349.28,\n        1.:   1849.04\n    }    \n    \n    # Check input argument validity\n    if not isinstance(transparency, float) or \\\n       not 0 <= transparency <= 1:\n           raise ValueError(\"Invalid Input\")\n           \n    # Get corresponding cost from dict based on key closest to input arg\n    cost = min((v for k, v in cost_dict.items() \n                if k<=transparency), default=cost_dict[max(cost_dict)])\n            \n    return cost"
        }
    },
    {
        "result": "2",
        "code_snippet": {
            "snippet_id": 3346,
            "text": "def update_low_eye_hygiene(privacy):\n    \"\"\"Update low eye hygiene score based on privacy level\n\n    Args:\n        privacy (int): A number between 0 and 1 indicating user\u2019s privacy preference\n            where higher value indicates more private browsing behavior\n\n    Returns:\n        int: The updated low eye hygiene score after considering privacy level\n    \"\"\"\n    # Define possible conditions \n    conditions = [(True, 2), (False, -3)]\n    \n    # Use Switch case statment to evaluate each condition and return corresponding score \n    for condition in conditions: \n        if privacy >= condition[0]: \n            return condition[1] \n\n    raise ValueError(\"Invalid input\")"
        }
    },
    {
        "result": "2",
        "code_snippet": {
            "snippet_id": 3355,
            "text": "# Prompt the user for their decision regarding the transaction\nprint(\"Hello! We need your help to determine the level of security risk associated with this transaction.\")\nprint(\"Please indicate whether or not you gave explicit consent to proceed:\")\n\n# Accept only 'yes' or 'no' as responses\nwhile True:\n    # Get the user's input \n    decision = input()\n    \n    # Check if the input is valid\n    if decision.lower() == \"yes\" or decision.lower() == \"no\":\n        break\n    else:\n        print(\"Invalid input. Please try again.\")\n        \n# Based on the user's answer, take appropriate action\nif decision.lower() == \"yes\":\n    print(\"Thank you for confirming that you granted explicit consent.\\n\")\n    print(\"Based on our analysis, we believe that the security risk associated with this transaction is considered LOW.\")\n    \nelif decision.lower() == \"no\":\n    print(\"Thank you for indicating that you did NOT grant explicit consent.\\n\")\n    print(\"Based on our analysis, we believe that there may be potential SECURITY RISK involved in this transaction.\")\n    print(\"We strongly advise that you contact the merchant immediately to address any concerns about the transaction.\")\n    \nelse:\n    print(\"Error encountered while processing your request. Please try again later.\")\n    \n    \n# Include a dry run of the above steps to illustrate the logic    \nprint(\"\\n\\nDry Run:\\n\")\nprint(\"Hello! We need your help to determine the level of security risk associated with this transaction.\")\nprint(\"Please indicate whether or not you gave explicit consent to proceed:\")\ndecision = input(\"(dry run) \")\nif decision.lower() == \"yes\":\n    print(\"Based on our analysis (dry run), we believe that the security risk associated with this transaction is considered LOW.\")\nelif decision.lower() == \"no\":\n    print(\"Based on our analysis (dry run), we believe that there may be potential SECURITY RISK involved in this transaction.\")\n    print(\"We strongly advise that you contact the merchant immediately to address any concerns about the transaction.\")\nelse:\n    print(\"Error encountered while processing your request (dry run). Please try again later.\")"
        }
    },
    {
        "result": "0",
        "code_snippet": {
            "snippet_id": 3373,
            "text": "def weather_check(wind_speed,threshold):\n    \"\"\"\n    This function takes two arguments \n    'wind_speed' - A float value representing wind speed in MPH\n    'threshold'-A float value representing minimum safe wind speed limit in MPH\n    \n    Returns a string indicating whether there is a low wind situation or not.\n\n    \"\"\"\n    #Check if both inputs are numbers\n    try:\n        float(wind_speed) and float(threshold)\n    except ValueError as e:\n        return f\"{e}: Please enter numeric values only.\"\n\n    #Compare wind speed against threshold\n    if int(wind_speed) < int(threshold):\n        return \"Low wind Warning!\"\n    else:\n        return None"
        }
    },
    {
        "result": "1",
        "code_snippet": {
            "snippet_id": 3380,
            "text": "def calculate_low_fitness(steps):\n    \"\"\"\n    This function takes input steps taken by user during day \n    and returns whether their daily activity falls within normal range \n    (5000 -7500) steps or not\n    \n    Parameters:\n        steps (int): Number of steps taken by user during the day\n        \n    Returns:\n        bool: True if daily activity falls within normal range; False otherwise\n    \"\"\"\n    # Define lower limit and upper limit for normal fitness zone\n    NORMAL_FITNESS_ZONE = [5000, 7500]\n\n    # Check if given value lies between two limits\n    if steps >= MINIMUM_STEPS and steps <= MAXIMUM_STEPS:\n        return True\n    elif steps < MINIMUM_STEPS:\n        print(\"Low Fitness Alert! Your current number of steps:\", steps, \"is below\", \n              MINIMUM_STEPS, \". Please take more steps today.\")\n    else:    \n        print(\"Low Fitness Alert! Your current number of steps:\", steps, \"is above\", \n              MAXIMUM_STEPS, \". Try reducing your total steps tomorrow.\")    \n        \n    \n# Example usage: Calculate low fitness score for Jane Doe who took 6843 steps yesterday   \ncalculate_low_fitness(6843)"
        }
    },
    {
        "result": "16",
        "code_snippet": {
            "snippet_id": 3381,
            "text": "# Prompt user for input\nprint(\"Please enter patient age:\")\nage = float(input())\n\n# Check whether patient is under 18 years old\nif age < 18:\n    # If yes, prompt them to get parental consent before seeing dentist\n    print(\"Patient is below the legal age of consent.\")\n    print(\"Would you like us to obtain their parent's consent?\")\n    answer = input()\n\n    if answer == \"yes\":\n        # Obtain parental consent by asking for parents' names and phone numbers\n        print(\"Parent's name:\")\n        father_name = input()\n        mother_name = input()\n\n        print(\"Father's phone number:\")\n        father_number = input()\n        \n        print(\"Mother's phone number:\")\n        mother_number = input()\n\n        # Send confirmation email to both parents informing them about appointment\n        send_email(father_name, father_number, mother_name, mother_number)\n        print(\"Email sent successfully!\")\n    \n    else:\n        # Inform patient they cannot make an appointment without parental consent\n        print(\"Cannot schedule appointment without parental consent.\")\n\nelif age >= 18:\n    # Patient is over 18 so no need to ask for parental consent\n    pass\n\n# Ask patient if they've visited the dentist recently\nvisited_dentist = input(\"Have you been to the dentist within the last six months? (Yes/No): \")\n\nif visited_dentist == 'Yes':\n    # Proceed to next question\n    pass\n\nelif visited_dentist == 'No':\n    # Schedule dentist visit immediately \n    print(\"Scheduling immediate dentist visit...\")\n    book_appointment('Dentist')\n    \nelse:\n    # Invalid input - re-prompt user\n    print(\"Invalid input. Please try again\")\n\n\ndef send_email(father_name, father_number, mother_name, mother_number):\n    \"\"\"\n    Sends an email to both parents informing them about the dentist appointment.\n    The email includes details such as date, time, location etc.\n    \"\"\"\n    subject = f\"Appointment Confirmation for {patient_name}\"\n    body = f\"\"\"\n    Dear Parents,\n\n    We have scheduled an appointment with Dr Smith for our son/daughter {patient_name} \n    for tomorrow at 2pm at the Family Dental Clinic.\n\n    Please contact us at {phone_number} if you have any questions or concerns.\n\n    Regards,\n    The Doctor's Office\n    \"\"\"\n\n    # Replace placeholders with actual values\n    body = body.replace('{patient_name}', patient_name).replace('{phone_number}', phone_number)\n\n    # Send email via SMTP server here\n    \n\ndef book_appointment(service):\n    \"\"\"\n    Books an appointment with the specified service provider.\n    This function can connect to a database or external API to retrieve available timeslots.\n    \"\"\"\n    # Retrieve available timeslot from database or API\n    timeslot = fetch_timeslot(service)\n\n    # Save appointment information into database\n    save_appointment(patient_id, service, timeslot)\n\n    \ndef fetch_timeslot(service):\n    \"\"\"\n    Fetches an available timeslot for the specified service provider.\n    This function can connect to a database or external API to search for openings.\n    Returns a tuple containing the start and end time of the timeslot.\n    \"\"\"\n    # Query database or API for available timeslots\n    timeslots = query_database_or_api(service)\n\n    # Pick first available timeslot\n    return random.choice(timeslots)\n    \n    \ndef query_database_or_api(service):\n    \"\"\"\n    Queries a database or external API to retrieve available timeslots for the specified service provider.\n    Returns a list of tuples containing the start and end time of each timeslot.\n    \"\"\"\n    url = f\"{SERVICE_PROVIDER_API}/{service}/availabilities\"\n    response = requests.get(url)\n    timeslots = response.json()['timeslots']\n    return timeslots\n    \n    \ndef save_appointment(patient_id, service, timeslot):\n    \"\"\"\n    Saves an appointment for the specified patient with the given service and timeslot.\n    This function can connect to a database to store the appointment information.\n    \"\"\"\n    # Construct appointment object\n    appointment = {'patient_id': patient_id, 'service': service, 'start_time': timeslot[0], 'end_time': timeslot[1]}\n\n    # Insert appointment into database\n    db.insert_appointment(appointment)"
        }
    },
    {
        "result": "7",
        "code_snippet": {
            "snippet_id": 3387,
            "text": "import random \n\ndef calculate_low_security(data):\n    \"\"\"\n    This function calculates the low level of encyption by encrypting \n    the inputted string 'data' using a simple substitution cipher\n    \n    Args:\n        data (str): The plaintext message to be encrypted\n        \n    Returns:\n        str: An encoded ciphertext containing the original message\n    \"\"\"\n\n    # Define our character set for encoding\n    charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 !@#$%^&*()\"\n\n    # Initialize an empty list to store our cipher text characters\n    cipher_text = []\n\n    # Loop through each character in the input data\n    for char in data:\n\n        # Choose a random index from our character set\n        rand_index = random.randint(0, len(charset) - 1)\n        \n        # Use the chosen index to get a randomly selected character from the set \n        # as the replacement for the current character in the input data\n        cipher_char = charset[rand_index] \n\n        # Append the replaced character to our cipher text list\n        cipher_text.append(cipher_char) \n\n    # Join all the cipher text characters into one string and return it\n    return ''.join(cipher_text) \n\n\nif __name__ == '__main__':\n    print(\"Enter some plain text:\")\n    data = input()\n    enc_data = calculate_low_security(data)\n    print(\"The Encrypted Text:\",enc_data)"
        }
    },
    {
        "result": "0",
        "code_snippet": {
            "snippet_id": 3391,
            "text": "def determine_handwash(\n    soap_used = True, \n    water_temperature = 'warm', \n    duration='adequate'\n):\n    \n    # dry run - check input values meet requirements\n    assert isinstance(soap_used, bool), \"Soap usage must be boolean\"\n    assert water_temperature in ['cold','lukewarm','warm'], f\"{water_temperature} not recognized as valid temperature\"\n    assert duration in ['short','adequate','long'],f\"{duration} not recognized as valid time interval\"\n\n    # decide outcome based on inputs\n    if all([soap_used==True, water_temperature=='warm', duration == 'adequate']):\n        return \"Good job! This meets WHO guidelines for proper hand hygiene.\"\n    elif any([soap_used!=True, water_temperature!='warm'] ):\n        return (\n            \"Didn't use soap or water was too cold.\\n\" \n            + \"Wet hands with clean running water\\nand apply enough soap to cover all surfaces.\")\n    else: \n        return (\"Rinsed for insufficient time,\\nor did not wash under nails.\\n\"+\n                \"Wet hands with clean running water \\nand scrub all surfaces of both hands\")"
        }
    },
    {
        "result": "8",
        "code_snippet": {
            "snippet_id": 3413,
            "text": "# Define input variables \ndryer_temp = float(input(\"Enter the expected final dryer temperature:\"))\nwasher_type = input(\"What type of washing machine do you use? (Top loader/Front Loader): \")\nwater_hardness = int(input(\"Enter the water hardness level (1 - 10): \"))\n\n\ndef calculate_safety_margin():\n    # Calculate recommended safe minimum \n    # drying time based on fabric type \n    if material == 'cotton':\n        return cotton_time * 2\n    elif material == 'synthetic fiber':\n        return synthetic_fiber_time + extra_time\n    else: \n        raise ValueError('Invalid Fabric Type')\n\n\nif __name__ == '__main__':\n\n    try: \n\n        # Prompt user for inputs    \n        material = input(\"Enter the name of the fabric:\")\n        cotton_time = float(input(\"Enter the recommended drying \"\n                                 \"time for cotton garments\"))\n        synthetic_fiber_time = float(\n            input(\"Enter the recommended drying time\"\n                  \"for synthetics fibers\"))\n        extra_time = float(input(\"Enter additional drying time required\"\n                                \"(in minutes), if any\"))\n\n        # Validate input values     \n        assert isinstance(material, str), '`material` must be a string'\n        assert isinstance(cotton_time, float), \\\n            '`cotton_time` must be a floating point number'\n        assert isinstance(synthetic_fiber_time,\n                         float), '`synthetic_fiber_time` must be a floating point number'\n        assert isinstance(extra_time, float),\\\n           '`extra_time` must be a floating point number'\n        \n        # Perform calculations    \n        margin = calculate_safety_margin()\n    \n        print(\"\\nExpected Final Dryer Temperature:\", end=\" \")\n        print(round(dryer_temp, 1))\n        print(\"Water Hardness Level:\", end=\" \")\n        print(water_hardness)\n        print(\"Washing Machine Type:\", end=\" \")\n        print(washer_type)\n        print(\"Fabric Name:\", end=\" \")\n        print(material)\n        print(\"COTTON Recommended Dry Time:\", end=\" \")\n        print(round(cotton_time, 1))\n        print(\"Synthetic Fiber Recommended Dry Time:\", end=\" \")\n        print(round(synthetic_fiber_time, 1))\n        print(\"Additional Required Dry Time:\", end=\" \")\n        print(round(extra_time, 1))\n        print(\"Safety Margin:\", end=\" \")\n        print(round(margin, 1))\n    \n        # Evaluate results    \n        if dryer_temp >= margin: \n            print(\"Drying conditions appear suitable.\")\n        elif dryer_temp < margin:    \n            print((\"Insufficient heat during drying.\"\n                   \"\\nConsider raising the dryer temperate.\"))\n    \n        if washer_type == 'top loader' and water_hardness <= 6:     \n            print((f\"\\nFor top loading machines,\\n\"\n                    f\"{water_hardness} water hardness may cause scaling.\\n\"\n                    f\"This can lead to deteriorated fabrics over time.\\n\"\n                    f\"Check care labels before washing and follow instructions carefully.\"))\n    \n        if washer_type == 'front loader' and water_hardness > 8:      \n            print((f\"\\nFor front loading machines,\\n\"\n                    f\"{water_hardness} water hardness may cause damage.\\n\"\n                    f\"Hard water minerals can build up inside the machine.\\n\"\n                    f\"Use softened or distilled water instead.\"))\n    \n    except AssertionError as err:    \n        print(err)    \n    except ValueError as err:    \n        print(err)"
        }
    },
    {
        "result": "5",
        "code_snippet": {
            "snippet_id": 3469,
            "text": "def update_dental(patient_data):\n    # Define list of potential dental issues \n    dental_issues = [\"Cavities\", \"Gum disease\",\"Tooth decay\"]\n    \n    # Loop through each issue and check whether it exists in patient data\n    for issue in dental_issues:\n        if issue in patient_data[\"Dental history\"]:\n            # If the issue exists, determine next step based on severity level \n            if patient_data[\"Dental history\"][issue] == \"Mild\":\n                next_step = \"Recommend brushing twice daily\"\n                \n            elif patient_data[\"Dental history\"][issue] == \"Moderate\": \n                next_step = \"Refer to dentist for professional cleaning\"\n                \n            else:\n                next_step = \"Prescribe antibiotics and refer to specialist\"\n                \n            # Add the next step as a new entry in the dictionary under the relevant key    \n            patient_data[f\"{issue} Next Step\"] = next_step\n            \n    return patient_data"
        }
    },
    {
        "result": "11",
        "code_snippet": {
            "snippet_id": 3524,
            "text": "import pandas as pd\nfrom scipy import signal\n\n\ndef detect_flatlines(df):\n    \"\"\"Detect flat lines (no acceleration) in a dataframe.\"\"\"\n\n    # Create a new column containing the difference between consecutive values \n    df['diff'] = df['x'].diff()\n    \n    # Find all rows where the 'diff' column is zero\n    flats = df[df['diff'] == 0].index\n    \n    return flats\n    \n\ndef compute_rmse(df, flats):\n    \"\"\"Compute root mean squared error over non-flat sections.\"\"\"\n\n    # Get indices of all non-flat segments\n    nonflats = set(range(len(df))) - set(flats)\n    \n    # Extract x and y columns from original dataframe\n    x = df.loc[nonflats, 'x']\n    y = df.loc[nonflats, 'y']\n    \n    # Compute filtered time series\n    b, a = signal.butter(3, [0.15, 2.7])\n    yf = signal.filtfilt(b, a, y)\n    \n    # Compute RMSE\n    rmse = np.sqrt((yf**2).mean())\n    \n    return rmse\n    \n    \n# Load data from csv file\ndata = pd.read_csv('steps.csv')\n\n# Detect any flat lines in the data\nflats = detect_flatlines(data)\n\n# Compute RMSE over non-flat sections\nrmse = compute_rmse(data, flats)\n\nprint(\"Lowest Fitness Score:\", round(rmse, 2))"
        }
    },
    {
        "result": "1",
        "code_snippet": {
            "snippet_id": 3604,
            "text": "def calculate_low_user_engagement(profile):\n    # Check if profile has enough followers \n    if profile['followers'] >= 1000 :\n        print(\"Profile has sufficient followers\")\n    else: \n        # If not, check other metrics like likes, shares etc.\n        total = profile['likes'] + profile['shares'] + profile['comments']\n        \n        if (total / profile['followers']) <= 0.25:\n            print(\"Low user engagement due to insufficient activity.\")\n        elif (total * 4) / profile['followings'] < 300: \n            print(\"Low user engagement due to lack of reach.\")    \n        else:    \n            print(\"No issues found!\")\n\n\n# Example usage: \ncalculate_low_user_engagement({\n  'followers': 897, \n  'likes': 600, \n  'shares': 150, \n  'comments': 200, \n  'followings': 1500})"
        }
    },
    {
        "result": "10",
        "code_snippet": {
            "snippet_id": 3723,
            "text": "# Function to check whether user wants to continue or not\ndef do_you_want_to_continue():\n    while True:\n        choice = input(\"Do you want to continue (y/n): \")\n        \n        # Check if y/yes or n/no was entered by user\n        if choice.lower() == 'y':\n            return True\n        elif choice.lower() == 'n':\n            return False\n        else:\n            print(\"Please enter either Y or N\")\n\n\n# Main function\nif __name__ == '__main__':\n    \n    # Initialize variables \n    total_ears_cleaned = 0\n    num_patients = int(input(\"Enter number of patients: \"))\n\n    # Loop through each patient\n    for i in range(num_patients):\n    \n        # Prompt user for information about current patient    \n        age = float(input(f\"Patient {i+1}'s Age: \"))\n        weight = float(input(f\"Patient {i+1}'s Weight: \"))\n\n        # Determine how many ears need cleaning based on age and weight    \n        if age >=65 or weight > 80: \n            num_ears_cleaned = 2 \n        else:    \n            num_ears_cleaned = 1 \n\n        # Print out instructions for caregiver    \n        print(f\"\\nFor Patient {i+1}:\")    \n        print(f\"{'-'*30}\")    \n        print(f\"Clean their outer ear canal using a cotton swab.\")    \n        print(f\"Use olive oil or baby oil drops twice daily for five days.\\n\")   \n\n        # Increment counter    \n        total_ears_cleaned += num_ears_cleaned \n\n    # Ask user if they want to continue    \n    more_patients = do_you_want_to_continue()\n\n    # Print summary    \n    print(f\"\\nTotal Number of Ears Cleaned: {total_ears_cleaned}\\n\")   \n    if more_patients:    \n        print(\"Would you like to enter another patient? (Y/N)\")"
        }
    },
    {
        "result": "5",
        "code_snippet": {
            "snippet_id": 3776,
            "text": "import random \n\ndef dry_run():\n    print(\"Dry run:\")\n    user_input = input(\"Do you want me to simulate checking someone? (y/n): \")\n\n    if user_input == \"y\":\n        return True \n    elif user_input == \"n\": \n        return False \n    else:\n        print(\"Invalid entry. Please try again.\")\n        return dry_run() \n\n\ndef main():\n    # Simulate getting user information from database\n    name = \"<NAME>\"\n    gender = random.choice([\"Male\", \"Female\"])\n    age = random.randint(18,65)\n    \n    # Prompt user to sanitize their hands\n    print(f\"Good morning {name}. Today we will be simulating checking your handwashing habits as part of our routine health checks.\\n\")\n    print(f\"{gender}, you are {age} years old today. Would you like to use some hand sanitizer?\")\n\n    while True:\n        choice = input(\"Sanitize Hands? [Y/N]: \").lower()\n\n        if choice == 'y':\n            # Implement logic to dispense sanitizer here\n\n            break \n\n        elif choice == 'n': \n            # Logic to remind them about importance of washing hands instead\n\n            pass \n\n        else:\n            print(\"Please enter Y for yes or N for no only!\") \n\n    # End simulation by printing goodbye message\n    print(\"\\nThank you for participating! Remember to always practice proper hand hygiene at all times.\")\n    \n\nif __name__ == \"__main__\":\n    if not dry_run():\n        main()"
        }
    },
    {
        "result": "3",
        "code_snippet": {
            "snippet_id": 3786,
            "text": "# Define list of possible symptoms \nsymptoms = ['discoloration', 'ridges', 'splitting'] \n\ndef check_low_nail_health(symptom): \n    \"\"\"\n    This function takes in one argument (a string representing a symptom) \n    and returns True if the corresponding condition is met, False otherwise\n    \n    Conditions:\n    1 - Discoloration: The nail plate has become yellowish or brownish \n    2 - Ridges: There are ridges along the entire length of the nail \n    3 - Splitting: The nail has started splitting at the tip \n    \"\"\"\n\n    # Use a nested if statement to check each condition separately \n    if symptom == \"discoloration\": \n        return (\"The nail plate has become yellowish or brownish \") \n    elif symptom == \"ridges\":\n        return(\"There are ridges along the entire length of the nail\") \n    else: \n        return(\"The nail has started splitting at the tip\") \n\n\n# Take input from user \nuser_input = input(\"Enter a symptom: \") \n\n# Call check_low_nail_health() with the user input \nif user_input in symptoms: \n    result = check_low_nail_health(user_input) \n\n    print(\"\\n\",result,\"\\n\\nDo you want any more information regarding this topic? If yes type \\\"Yes\\\".\") \nelif user_input == \"yes\" or user_input == \"No\": \n    print(\"Thankyou! We hope we were able to help!\") \nelse: \n    print(\"Invalid Input! Please try again.\")"
        }
    },
    {
        "result": "8",
        "code_snippet": {
            "snippet_id": 3828,
            "text": "# Import required libraries\nimport pandas as pd\nfrom sklearn import linear_model\nfrom sklearn.metrics import mean_squared_error, r2_score\n\ndef update_toilets(df):\n    # Define X and y variables\n    x = df[['pH', 'Conductivity']]\n    y = df['Turbidity']\n    \n    # Create linear regression model\n    regr = linear_model.LinearRegression()\n    regr.fit(x,y)\n\n    # Predict turbidity values based on pH and conductivity levels \n    predictions = regr.predict(df[[\"pH\", \"Conductivity\"]])\n    \n    # Calculate RMSE and R^2 score\n    rmse = (mean_squared_error(predictions, y))**(0.5)\n    r2 = r2_score(predictions, y)\n    \n    # Print results\n    print(\"RMSE:\",rmse)\n    print(\"R^2 :\",r2)\n    \n    return df\n    \nif __name__ == '__main__':\n    # Load dataset\n    df = pd.read_csv('toilets.csv')\n    \n    # Call function to update low toilet hygiene scores\n    updated_df = update_toilets(df)\n    \n    # Save updated dataframe to CSV file\n    updated_df.to_csv('updated_toilets.csv', index=False)"
        }
    },
    {
        "result": "1",
        "code_snippet": {
            "snippet_id": 3851,
            "text": "# Prompt User For Input \ntoe_nail_input = input(\"Have you been trimming your toe nails regularly? (y/n): \") \n \nif toe_nail_input == \"y\": \n    print(\"Great! Keep up the good work.\") \nelif toe_nail_input == \"n\": \n    print(\n        \"It's important to trim your toe nails regularly to prevent ingrown toenails and other foot problems.\"\n    ) \nelse: \n    print(\"Invalid input\")"
        }
    },
    {
        "result": "2",
        "code_snippet": {
            "snippet_id": 3887,
            "text": "# Prompt user to enter when they last brushed their teeth\r\nlast_toothbrush = input(\"When did you last brush your teeth? (Format: YYYY-MM-DD): \")\r\n\r\n# Check current date and time against entered value \r\ncurrent_date = datetime.now().strftime(\"%Y-%m-%d\") \r\n\r\n# If statement to check if user brushed their teeth today\r\nif last_toothbrush == current_date: \r\n    print(f\"Great! You brushed your teeth today ({current_date}) as expected.\")\r\n    \r\n# elif statement to check if user brushed their teeth yesterday    \r\nelif (datetime.strptime(current_date, \"%Y-%m-%d\") - timedelta(days=1)) == datetime.strptime(last_toothbrush, \"%Y-%m-%d\"):\r\n    print(f\"Good job! You brushed your teeth yesterday ({last_toothbrush}). Keep up the good work!\")\r\n    \r\n# else statement to provide negative feedback   \r\nelse: \r\n    print(f\"Uh oh... It looks like you didn't brush your teeth today ({current_date}), or at least not recently enough.\\nPlease try again tomorrow and remember to brush twice a day for optimal results!\\n\\nIf you need help improving your oral hygiene routine, feel free to ask me for advice :)\") \r\n    \r\n# End program after feedback is provided     \r\ninput(\"\\nPress Enter to exit...\")"
        }
    },
    {
        "result": "4",
        "code_snippet": {
            "snippet_id": 3899,
            "text": "def transform_low_hair(conditioner=True, moisturizer=False):\n    \"\"\"\n    A function which takes two boolean inputs (representing whether conditioner \n    and moisturizer should be used) and returns a string describing the recommended \n    hair treatment based upon those input values\n    \n    Args:\n        conditioner (bool, optional): Whether or not to use a conditioner. Defaults to True.\n        moisturizer (bool, optional): Whether or not to use a moisturizer. Defaults to False.\n        \n    Returns:\n        str: A message recommending either just conditioner, just moisturizer, both conditioner \n        and moisturizer, or neither depending on the input values.\n    \"\"\"\n\n    # Define some messages we'll use based on the input parameters\n    CONDITIONER_ONLY = \"Just apply conditioner\"\n    MOISTURIZER_ONLY = \"Use a good quality moisturizer\"\n    BOTH = \"Apply conditioner followed by a good quality moisturizer\"\n    NONE = \"Don't wash your hair too often as it leads to dryness.\"\n\n    # Use an if statement to determine what message to return based on the value of `conditioner` alone\n    if conditioner == True:\n        if moisturizer == True:\n            # If both conditioner and moisturizer were specified, return our combined message\n            return BOTH\n        else: \n            # Otherwise, return the appropriate message for just conditioner\n            return CONDITIONER_ONLY\n\n    elif moisturizer == True:\n        # For moisturizer being true independently of conditioner, return the correct message\n        return MOISTURIZER_ONLY\n\n    else:\n        # Finally, if neither was specified, return the no-washing advice\n        return NONE\n\n# Example usages of the function\nprint(transform_low_hair())       # Output: Don't wash your hair too often as it leads to dryness.\nprint(transform_low_hair(moisturizer=True))    # Output: Just apply conditioner\nprint(transform_low_hair(conditioner=True, moisturizer=True))   # Output: Apply conditioner followed by a good quality moisturizer\nprint(transform_low_hair(conditioner=False))     # Output: Use a good quality moisturizer"
        }
    },
    {
        "result": "11",
        "code_snippet": {
            "snippet_id": 3911,
            "text": "# Define constants for each possible grade\nPASS_THRESHOLD = 70 # Percentage required to pass\nHIGH_GRADE = 'High'\nMEDIUM_GRADE = 'Medium'\nLOW_GRADE = 'Low'\n\n# Create dictionary containing details about each question asked\nquestions = {\n    \"Question 1\": {\"id\": 1, \"text\": \"Explain what is meant by XYZ concept?\", \"answer\": [\"Option A\", \"Option B\", \"Option C\"], \"correct_option\": 2}, \n    \"Question 2\": {\"id\": 2, \"text\": \"Why do we use ABC algorithm?\", \"answer\": [\"To solve problem PQR\", \"For efficiency reasons\", \"Both A & B\"], \"correct_option\": 1}\n}\n\n\ndef get_grade(score):\n    \"\"\"Return calculated grade given score\"\"\"\n\n    if score >= PASS_THRESHOLD:\n        return HIGH_GRADE\n    elif score < PASS_THRESHOLD and score >= int((PASS_THRESHOLD * .6)):\n        return MEDIUM_GRADE\n    else:\n        return LOW_GRADE\n    \n\ndef main():\n    candidate_answers = [input(\"Enter answer for Question {}: \".format(question[\"id\"])) for question in questions.values()]\n    \n    total_marks = len(questions)\n    correct_answrs = sum([int(a == questions[q][\"correct_option\"]) for q, a in zip(questions.keys(), candidate_answers)])\n    \n    print(\"Total Marks:\", total_marks)\n    print(\"Correct Answers:\", correct_answrs)\n    print(\"Percentage Score:\", round((correct_answrs/total_marks)*100, 2))\n    print(\"Grade:\", get_grade(correct_answrs))\n    \n    \nif __name__ == \"__main__\":\n    main()"
        }
    },
    {
        "result": "1",
        "code_snippet": {
            "snippet_id": 3923,
            "text": "def display_low_handwashing():\n    \"\"\"Displays information about low handwashing techniques.\"\"\"\n\n    # Display title \n    print(\"Low Hand Washing Technique\")\n    \n    # Prompt user whether they washed their hands today\n    while True:\n        answer = input(\n            \"Did you wash your hands today? (y/n): \")\n        \n        # Check if user entered y or n\n        if answer == 'y':\n            break\n        elif answer == 'n':\n            # If no, prompt them to consider alternatives such as \n            # using alcohol-based sanitizers when soap and water aren't available\n            print(\"Consider using an alcohol-based sanitizer instead.\")\n            continue\n        else:\n            # Otherwise inform them that they must enter y or n\n            print(\"Invalid entry. Please try again.\")\n            \n    # Based on user's choice, provide more detailed guidance    \n    if answer == 'y':\n        # Inform user proper handwashing procedure    \n        print(\"Washing your hands properly involves:\")\n        print(\"- Wetting your hands with clean running water\")\n        print(\"- Applying enough soap\")\n        print(\"- Lathering up your hands for at least 20 seconds\")\n        print(\"- Rinsing off all soap thoroughly\")\n        print(\"- Drying your hands using a clean towel or air dryer\")\n        \n    else:\n        # Provide alternative suggestions        \n        print(\"If soap and water aren't readily available, you can still reduce the spread of germs by using an alcohol-based hand sanitizer.\")\n        print(\"Make sure to follow the instructions on the label and sanitize your hands for at least 60 seconds.\")        \n        \n# Call the function    \ndisplay_low_handwashing()"
        }
    },
    {
        "result": "4",
        "code_snippet": {
            "snippet_id": 4015,
            "text": "def transform_low_hygiene(data):\n    \"\"\"\n    This function takes in input data from sensors measuring hygiene levels \n    in public places like restrooms, gyms etc., analyzes them and returns \n    appropriate actions which can help reduce the spread of germs among people.\n    \n    Parameters:\n        data (dict): A dictionary containing sensor readings obtained from \n                    monitoring hygiene levels\n        \n    Returns:\n        action (str): An action indicating what needs to be done to improve \n                     hygiene levels based on analysis of 'data'\n\n    Raises:\n        ValueError: If 'data' contains invalid values\n                    \n        KeyError:   If required keys are missing from 'data' dict\n    \n    Control Flow:\n    1. Check whether 'data' is empty or not. If yes raise ValueError \n    2. Get the value of handwashing frequency key from 'data'. \n       If it doesn't exist then set its value as -1\n       Convert it into float type\n    3. Use an if else statement to check whether hand wash frequency is less than \n       60% i.e. < .6. If true return \"Install Automatic Hand Dryers\" otherwise continue\n    4. Similarly use another if else statement to check whether soap usage is below \n         85%. If true return \"Provide Soaps at Multiple Locations\". Otherwise continue\n    5. Finally combine both the results by returning \"Install Automatic Hand Dryers & Provie Soaps at multiple locations\"\n    \"\"\"\n    # Check if data is None or Empty\n    if data is None or len(data) == 0:\n        raise ValueError(\"Invalid Data\")\n    \n    try:    \n        handwash = data['handwash']\n        soap = data['soap']\n        \n        # Check if handwash frequency exists, convert to float\n        if 'handwash' in data:\n            handwash = float(data['handwash'])\n    \n        # Check if soap usage exists, convert to float\n        if 'soap' in data:    \n            soap = float(data['soap'])\n    \n        # Check low handwashing condition\n        if handwash < .6:\n            return \"Install Automatic Hand Dryers\"\n    \n        # Check low soaping condition\n        elif soap < .85:\n            return \"Provide Soaps at Multiple Locations\"\n    \n        # Combine both conditions\n        else: \n            return \"Install Automatic Hand Dryers & Provide Soaps at multiple locations\"\n            \n    except Exception as e:\n        print(f\"{type(e).__name__}: {e}\")\n        raise KeyError(\"Required Keys Missing From Input Dictionary\")"
        }
    },
    {
        "result": "1",
        "code_snippet": {
            "snippet_id": 4016,
            "text": "def display_low_nail_care():\n        \"\"\"Displays low nail care instructions\"\"\"\n\n        # Prompt user for consent\n        while True:\n            print(\"Would you like to learn about trimming nails?\")\n            choice = input(\"(y)es / (n)o \")\n\n            if choice == \"y\":\n                break\n            elif choice == \"n\":\n                return\n            else:\n                print(\"Please enter y or n\")\n\n        # Display instructional message\n        print(\"\\n\\nLow nail care:\")\n        print(\"* Regularly trim your fingernails and toenails.\")\n        print(\"* Wear gloves when doing household chores.\")\n        print(\"* Avoid biting your nails as this can cause damage.\")\n        print(\"* If you notice any changes in the appearance of your nails,\"\n              \"\\nor experience discomfort or pain, see a doctor immediately.\\n\")"
        }
    },
    {
        "result": "2",
        "code_snippet": {
            "snippet_id": 4040,
            "text": "def update_low_handwashing(ethic):\n    \"\"\"Update low handwashing technique according to given ethic\n    \n    Args:\n        ethic (str): either 'with' or 'without', indicating \n            use of soap and water during handwash\n\n    Returns:\n        str: updated recommendation for low handwashing technique \n    \"\"\"    \n    # Check input value matches expected options\n    if ethic not in ['with', 'without']:\n        raise ValueError('Invalid ethic specified')\n        \n    # Define base recommendations depending on ethic type\n    if ethic == 'with':    \n        rec = (\"Wet hands with clean running water and apply enough soap to cover all surfaces of both hands,\"\n               \" rubbing together until foam forms. Rinse thoroughly.\")\n            \n    elif ethic == 'without':    \n        rec = ('Wet hands with clean running water. Clean one hand at a time, then dry with a single-use paper towel.'\n               ' Use the other hand to turn off the tap.')    \n    \n    else:\n        raise ValueError(\"Unreachable code\")   \n         \n    return rec  \n        \n# Example usage        \nprint(update_low_handwashing('with'))       # Output: Wet hands with clean running water and apply enough soap...\nprint(update_low_handwashing('without'))    # Output: Wet hands with clean running water. Clean one hand at a time,...\ntry:\n    print(update_low_handwashing('invalid'))  # Raises ValueError exception due to invalid input     \nexcept Exception as e:\n    print(f'Error occurred: {e}')             # Error output: Error occurred: Invalid ethic specified"
        }
    },
    {
        "result": "0",
        "code_snippet": {
            "snippet_id": 4084,
            "text": "def determine_low_fitness(steps):\n    # dry run \n    if steps < 5000:\n        return \"Low\"\n    \n    elif (steps >= 5000) & (steps <=12000):\n        return \"Moderate\"\n\n    else : \n        return \"High\"\n\n\n# test cases \nprint(\"For\", 4999,\"steps:\",determine_low_fitness(4999))\nprint(\"For\", 6000 ,\"steps:\",determine_low_fitness(6000))\nprint(\"For\",8000 , \"steps:\",determine_low_fitness(8000))\nprint(\"For\",13000,\"steps:\",determine_low_fitness(13000))\nprint(\"For\",17000,\"steps:\",determine_low_fitness(17000))"
        }
    },
    {
        "result": "8",
        "code_snippet": {
            "snippet_id": 4132,
            "text": "# Import required libraries\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef get_weather(city):\n    # Define URL \n    url = f\"https://www.google.com/search?q={city}&oq={city}+weather+\"\n\n    # Make request and parse HTML content\n    page = requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    \n    # Get relevant information from HTML content\n    temp = soup.find('div', class_='BNeawe').text.strip()\n    desc = soup.find('div', class_='BNeawe yt-formatted-string').text.strip()\n    rainfall = soup.find('span', attrs={'class': 'UFICommentBody'}).text.strip()\n    \n    return {'temperature' : temp , 'description' :desc ,'rainfall' : rainfall }\n\n\nif __name__ == '__main__':\n    city = input(\"Enter City Name : \")\n    weather = get_weather(city)\n    print(f\"\\nTemperature : {weather['temperature']}\")\n    print(f\"Description : {weather['description']}\")\n    print(f\"Rainfall    : {weather['rainfall']} \\n\")"
        }
    },
    {
        "result": "18",
        "code_snippet": {
            "snippet_id": 4173,
            "text": "import random\nfrom typing import List\n\n# Define possible actions (surface types)\nactions = [\"door knob\", \"keyboard\", \"mouse\"]\n\ndef dry_run(action: str):\n    print(\"Dry run:\", action)\n\ndef get_expert_input() -> int:\n    # Ask experts for probability distribution over actions\n    probas = [0.3, 0.45, 0.2]\n\n    # Simulate roll of dice\n    return sum([random.uniform(0, p) for p in probas])\n\ndef decide(probability_map: dict[str, float]):\n    \"\"\"Decide whether to perform surface disinfection\"\"\"\n    assert isinstance(probability_map, dict), f\"Expected dictionary as argument but got {type(probability_map)}\"\n    \n    # Get current time\n    hour = datetime.now().hour\n\n    # Check if we need to simulate any decisions\n    if not simulation:\n        # Return most likely outcome according to probabilities\n        max_proba, chosen_action = max((p, k) for k, p in probability_map.items())\n        \n        # Print message about decision made\n        print(f\"{datetime.now()}: Decided to disinfect '{chosen_action}' ({max_proba:.2%})\")\n\n        return chosen_action\n\n    else:\n        # Perform dummy dry runs instead\n        rand = random.random()\n        for action, proba in probability_map.items():\n            if rand < proba:\n                dry_run(action)\n                \nif __name__ == \"__main__\":\n    # Set up simulation mode if desired\n    simulation = True\n\n    # Collect expert inputs into a map from timeslots to probabilities\n    probability_map = {}\n    while True:\n        t = Timeslot(*time_window)\n        expert_probas = get_expert_inputs()\n        probability_map[t] = expert_probas\n    \n        # Break when all time slots covered    \n        if t >= last_timeslot:\n            break\n        \n    # Loop through each day    \n    for d in days_of_week:\n        # Determine overall probability depending on weekday\n        overall_proba = probability_map[(d, 8)] * probability_map[(d, 17)]\n        \n        # Add additional factors such as weather etc...\n        # ...\n    \n    # Make final decision    \n    decided_on = decide(overall_proba)"
        }
    },
    {
        "result": "1",
        "code_snippet": {
            "snippet_id": 4243,
            "text": "def update_low_clothing(stains):\n    \"\"\"Update low clothing based on stain removal techniques.\"\"\"\n\n    # Check consent status \n    if get_consent() == \"yes\":\n        # Use if statement to check which technique to use depending on type of stain \n        if isinstance(stain, dirt):\n            wash_with_detergent(stained_item)\n        elif isinstance(stain, blood):\n            apply_hydrogen_peroxide(stained_item)\n        else: \n            return(\"Stain not recognized\")\n    \n    # If no consent given, provide information about how to remove common stains manually \n    else:\n        print(\"No consent provided.\")\n        print(\"To remove common stains such as dirt or blood from clothes:\")\n        print(\"- Washing machine with detergent can usually help remove light dirt stains.\")\n        print(\"- Hydrogen peroxide may work well for removing blood stains.\")\n        print(\"- Baking soda paste might absorb oil and grease stains.\")\n        print(\"- Club soda can help neutralize some food stains like ketchup or mustard.\")\n        print(\"\")\n        print(\"However, always test any cleaning method first on an inconspicuous area \")\n        print(\"of the fabric to ensure there will be no damage to the garment.\")\n        \n    \n# Define functions to implement specific stain removal techniques \n\ndef wash_with_detergent(garment):\n    pass \n    \ndef apply_hydrogen_peroxide(garment):\n    pass \n\n\n# Function to obtain user consent \n\ndef get_consent():\n    while True:    \n        consent = input(\"Do you give permission to treat the item? (Yes/no): \")\n        \n        if consent.lower() == 'yes':\n            return('yes')\n        elif consent.lower() == 'no':\n            return ('no')\n        else:\n            print(\"Invalid entry. Please try again.\")"
        }
    },
    {
        "result": "4",
        "code_snippet": {
            "snippet_id": 4244,
            "text": "def check_low_education(marks_in_maths, marks_in_english):\n    # dry run \n    total = (marks_in_maths + marks_in_english) / 2\n    \n    if total >= 50 :\n        return \"Passed\"\n    else: \n        return \"Failed\"\n    \n# driver program    \nif __name__ == '__main__':    \n    mark1 = float(input(\"Enter Marks in Maths:\"))    \n    mark2 = float(input(\"Enter Marks in English:\"))     \n\n    result = check_low_education(mark1, mark2)\n    print(\"Result:\",result)"
        }
    },
    {
        "result": "5",
        "code_snippet": {
            "snippet_id": 4313,
            "text": "def determine_low_nail_care(moisturized):\n    \"\"\"Determine whether nail care is low based on moisturization status\n\n    Args:\n        moisturized (bool): Whether hands were recently moisturized\n\n    Returns:\n        str: \"Low\" if nail care is considered substandard, else \"Normal\"\n    \n    Raises:\n        ValueError: If input value is not boolean type\n        \n    \"\"\"\n    # Check input argument type \n    if isinstance(moisturized, bool) == False: \n        raise ValueError(\"Input must be of type 'boolean'\") \n\n    # Define conditions and corresponding messages \n    conditions = [(True, \"Low\"), (False, \"Normal\")] \n    message = \"\" \n    \n    # Use a nested loop to check each condition and return its associated message \n    for c, m in conditions: \n        if c == moisturized: \n            message = m \n            break \n            \n    return message"
        }
    },
    {
        "result": "10",
        "code_snippet": {
            "snippet_id": 4405,
            "text": "import pandas as pd\nfrom sklearn import tree\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n# Load dataset\ndf = pd.read_csv('data.csv')\nX = df.iloc[:, :-1].values\ny = df.iloc[:, -1].values\n\n# Split into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n\n# Create decision tree classifier\nclf = tree.DecisionTreeClassifier()\n\n# Train model\nclf.fit(X_train, y_train)\n\n# Predict labels for test set\npredictions = clf.predict(X_test)\n\n# Calculate accuracy score\naccuracy = accuracy_score(y_test, predictions)\nprint(\"Accuracy:\", round(accuracy * 100, 2), \"%\")\n\ndef checkHygiene(trust):\n    # If trust level is low then return True\n    if (trust < 3):\n        return True\n    \n    # Else return False\n    else:\n        return False\n\n# Example usage of function\nif __name__ == '__main__':\n    print(checkHygiene(2)) # Returns true\n    print(checkHygiene(6)) # Returns false"
        }
    },
    {
        "result": "5",
        "code_snippet": {
            "snippet_id": 4414,
            "text": "def cleansing_body(gender):\n    # Define variables \n    shower = False\n    soap = True\n    water = \"warm\"\n\n    # Determine appropriate cleaning regimen based on gender\n    if (gender == 'male'):\n        shower = True\n        soap = False\n    \n    elif (gender == 'female'):\n        pass\n\n    else:\n        print(\"Invalid input\")\n        return None\n\n    # Print results \n    print(\"Low bathing routine:\")\n    print(\"- Shower:\", shower)\n    print(\"- Soap:\", soap)\n    print(\"- Water temperature:\", water)\n\n\n# Call the function and prompt user for input\ncleansing_body(input(\"Enter 'Male' or 'Female': \"))"
        }
    },
    {
        "result": "2",
        "code_snippet": {
            "snippet_id": 4449,
            "text": "import random\nfrom datetime import timedelta\n\n\ndef clean_area(time):\n    print(\"Cleaned area\")\n    \n\ndef disinfect_area():\n    print(\"Disinfected area\")\n    \n    \ndef main():\n    \n    # Generate time delta between 1 hour and 2 hours \n    time = timedelta(hours=random.randint(1,2))\n\n    # Check if there is enough transparency info available\n    has_transparency = True if random.uniform(0,1)>0.5 else False \n\n    # Perform dry runs for both cleaning and disinfecting\n    clean_area(time)\n    if has_transparency:\n        disinfect_area()\n        \n    # Based on availability of transparency info decide next course of action\n    if has_transparency: \n        disinfect_area()\n    else:\n        clean_area(time)\n        \n    \n\n    \nmain()"
        }
    },
    {
        "result": "3",
        "code_snippet": {
            "snippet_id": 4513,
            "text": "def update_fraud_detection(consent):\n    \"\"\"Updates the fraud detection model based on user consent\n\n    Args:\n        consent (str): User provided consent regarding sharing of personal information\n    \n    Returns:\n        str: Message indicating whether the changes were applied successfully or not\n        \n    Raises:\n        ValueError: If invalid input value is passed as argument    \n    \"\"\"\n    # Check if valid input value was passed \n    if isinstance(consent, str) == False:    \n        raise ValueError(\"Invalid input type\")    \n    \n    message = \"\"   \n    \n    # Based on the consent status, take appropriate action\n    if consent.lower() == \"yes\":    \n        message = \"Changes applied successfully\"    \n        # Update the fraud detection model with new rules        \n    elif consent.lower() == \"no\":    \n        message = \"No changes made\"    \n        # Do nothing - keep existing rule set unchanged     \n    \n    return message"
        }
    },
    {
        "result": "0",
        "code_snippet": {
            "snippet_id": 4538,
            "text": "def update_low_fitness(individual):\n    # Check if individual has low fitness \n    if individual['fitness'] < 0.5:\n        # If yes, check if bias is present \n        if 'bias' in individual:\n            # If yes, increase probability of mutation \n            if random() < 0.1:\n                return True, 'Increased chance of mutation due to presence of bias.'\n            else: \n                return False, 'No change in probability of mutation.'\n        # Else, add new bias node with value 0.2    \n        else:    \n            individual['bias'] = 0.2\n            return True, 'Added bias node with default value 0.2.'\n    \n    # Return false as no changes required    \n    return False, ''"
        }
    },
    {
        "result": "1",
        "code_snippet": {
            "snippet_id": 4578,
            "text": "def determine_low_nose(\n    patient_age, \n    symptoms, \n    recent_travel, \n    exposure_to_illness\n):\n\n    # Define possible responses\n    RESPONSES = {\n        \"yes\": (\"Low nose care may be necessary.\",), \n        \"no\": (\"No further action needed at this time.\"), \n    }\n    \n    # Check each condition and return corresponding message\n    if all([patient_age < 2, symptoms == 'congestion', not recent_travel]):\n        return random.choice(RESPONSES['yes'])\n    elif any([recent_travel, exposure_to_illness]) and patient_age >= 65:\n        return random.choice(RESPONSES['yes'])\n    else:\n        return random.choice(RESPONSES['no'])\n    \n# Example usage of function    \nprint(determine_low_nose(70, 'discharge', False, True))"
        }
    },
    {
        "result": "13",
        "code_snippet": {
            "snippet_id": 4659,
            "text": "def transform_low_social_media(data):\n    \"\"\"Transform low social media engagement metrics into higher values.\"\"\"\n\n    # Define variables\n    new_data = []\n    \n    # Loop through each row of data\n    for index, row in enumerate(data):\n        responsibility = row['Responsibility']\n        \n        # Check which responsibility has the lowest score\n        if responsibility == 'Content Creation':\n            content_score = row['Score']\n            \n            # Check whether the content score is low\n            if content_score < 4:\n                # Set the new content score to 8\n                new_row = {'Responsibility': responsibility,\n                           'Score': 8}\n                \n            # Otherwise set the new content score to the current value\n            else:\n                new_row = {'Responsibility': responsibility,\n                           'Score': content_score}\n                \n        elif responsibility == 'Community Management':\n            community_score = row['Score']\n        \n            # Check whether the community score is low\n            if community_score < 3:\n                # Set the new community score to 6\n                new_row = {'Responsibility': responsibility,\n                           'Score': 6}\n                \n            # Otherwise set the new community score to the current value\n            else:\n                new_row = {'Responsibility': responsibility,\n                           'Score': community_score}\n                    \n        elif responsibility == 'Influencer Outreach':\n            influencer_score = row['Score']\n        \n            # Check whether the influencer score is low\n            if influencer_score < 2:\n                # Set the new influencer score to 5\n                new_row = {'Responsibility': responsibility,\n                           'Score': 5}\n                \n            # Otherwise set the new influencer score to the current value\n            else:\n                new_row = {'Responsibility': responsibility,\n                           'Score': influencer_score}\n\n        # Append the transformed row to the list    \n        new_data.append(new_row)\n        \n    return new_data"
        }
    }
]