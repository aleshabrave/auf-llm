[
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.io.*;\nimport java.net.*;\nimport org.json.*;\npublic class Main {\n    public static void main(String[] args) throws IOException{\n        \n        URL url = new URL(\"https:\n        HttpURLConnection conn = (HttpURLConnection)url.openConnection();\n        InputStream inputStream = conn.getInputStream();\n        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));\n        String line;\n        StringBuilder stringBuilder = new StringBuilder();\n\n        while((line = bufferedReader.readLine()) != null){\n            stringBuilder.append(line);\n        }\n        \n        JSONObject jsonResponse = new JSONObject(stringBuilder.toString());\n        double temperature = Double.parseDouble(jsonResponse.getJSONObject(\"data\").getString(\"temp\"));\n        System.out.println(\"Temperature today is \" +temperature+\" Fahrenheit\");\n\n        \n        int biasValue = getWeatherBias(temperature);\n        System.out.println(\"Today's weather has \"+biasValue+\" degree Celsius difference compared to normal.\");\n\n        if(Math.abs(biasValue)>5){\n           \n           System.out.println(\"There is High Bias! take necessary action!\");\n        } else {\n          \n          System.out.println(\"No need to worry about the weather conditions.\") ;    \n        }\n\n    }\n    \n    private static int getWeatherBias(double currentTemp){\n       \n       \n       return (int)(currentTemp - avgHistoricalTemp); \n    }\n}",
            "id": 2
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (method_invocation object: (string_literal (string_fragment)) (ERROR (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment)))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (identifier))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment)))))) (if_statement condition: (condition (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))) (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (floating_point_type) name: (identifier))) body: (block (return_statement (cast_expression type: (integral_type) value: (parenthesized_expression (binary_expression left: (identifier) right: (identifier))))))))))\n**\n\n--\nimport java.io.*;\nimport java.net.*;\nimport org.json.*;\npublic class Main {\n    public static void main(String[] args) throws IOException{\n        \n        URL url = new URL(\"https:\n        HttpURLConnection conn = (HttpURLConnection)url.openConnection();\n        InputStream inputStream = conn.getInputStream();\n        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));\n        String line;\n        StringBuilder stringBuilder = new StringBuilder();\n\n        while((line = bufferedReader.readLine()) != null){\n            stringBuilder.append(line);\n        }\n        \n        JSONObject jsonResponse = new JSONObject(stringBuilder.toString());\n        double temperature = Double.parseDouble(jsonResponse.getJSONObject(\"data\").getString(\"temp\"));\n        System.out.println(\"Temperature today is \" +temperature+\" Fahrenheit\");\n\n        \n        int biasValue = getWeatherBias(temperature);\n        System.out.println(\"Today's weather has \"+biasValue+\" degree Celsius difference compared to normal.\");\n\n        if(Math.abs(biasValue)>5){\n           \n           System.out.println(\"There is High Bias! take necessary action!\");\n        } else {\n          \n          System.out.println(\"No need to worry about the weather conditions.\") ;    \n        }\n\n    }\n    \n    private static int getWeatherBias(double currentTemp){\n       \n       \n       return (int)(currentTemp - avgHistoricalTemp); \n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 1050
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class DataEncryption {\n\n    public static boolean determineHighSecurity(double bias) {\n        \n        if (bias >= -10 && bias <= 5) {\n            return true;\n        }\n\n        \n        else if (Math.abs(bias) > 5) {\n            return true;\n        }\n        \n        \n        return false;\n    }\n}",
            "id": 3
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (floating_point_type) name: (identifier))) body: (block (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (unary_expression operand: (decimal_integer_literal))) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (return_statement (true))) alternative: (if_statement condition: (condition (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))) right: (decimal_integer_literal))) consequence: (block (return_statement (true))))) (return_statement (false)))))))\n**\n\n--\npublic class DataEncryption {\n\n    public static boolean determineHighSecurity(double bias) {\n        \n        if (bias >= -10 && bias <= 5) {\n            return true;\n        }\n\n        \n        else if (Math.abs(bias) > 5) {\n            return true;\n        }\n        \n        \n        return false;\n    }\n}\n--\n",
        "text": "8\n\nДля вычисления цикломатической сложности используется формула **V(G) = N – K",
        "token_cnt": 334
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) throws IOException{\n        \n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter patient symptoms (e.g., redness, watering): \");\n        String symptomInput = scan.nextLine();\n\n        \n        String[] symptoms = symptomInput.split(\",\");\n        \n        \n        boolean dryEye = false;\n        boolean allergy = false;\n        boolean injury = false;\n        for (String s : symptoms){\n            switch (s){\n                case \"redness\":\n                    dryEye = true;\n                    break;\n                case \"watering\":\n                    dryEye = true;\n                    break;\n                case \"itchiness\":\n                    allergy = true;\n                    break;\n                case \"discharge\":\n                    allergy = true;\n                    break;\n                case \"foreign body\":\n                    injury = true;\n                    break;\n            }\n        }\n    \n        \n        if (dryEye && !allergy && !injury){\n            System.out.println(\"Recommend artificial tears and eye drops.\");\n        } else if (!dryEye && allergy && !injury){\n            System.out.println(\"Recommend antihistamines and decongestants.\");\n        } else if (!dryEye && !allergy && injury){\n            System.out.println(\"Recommend irrigating eyes and seeking medical attention.\");\n        } else {\n            System.out.println(\"Could not determine cause of eye irritation. Please try again.\");\n        }\n\n    }\n}",
            "id": 6
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (array_type element: (type_identifier) dimensions: (dimensions)) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (enhanced_for_statement type: (type_identifier) name: (identifier) value: (identifier) body: (block (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (true))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (true))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (true))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (true))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (true))) (break_statement)))))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (unary_expression operand: (identifier))) right: (unary_expression operand: (identifier)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (unary_expression operand: (identifier)) right: (identifier)) right: (unary_expression operand: (identifier)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (unary_expression operand: (identifier)) right: (unary_expression operand: (identifier))) right: (identifier))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) throws IOException{\n        \n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter patient symptoms (e.g., redness, watering): \");\n        String symptomInput = scan.nextLine();\n\n        \n        String[] symptoms = symptomInput.split(\",\");\n        \n        \n        boolean dryEye = false;\n        boolean allergy = false;\n        boolean injury = false;\n        for (String s : symptoms){\n            switch (s){\n                case \"redness\":\n                    dryEye = true;\n                    break;\n                case \"watering\":\n                    dryEye = true;\n                    break;\n                case \"itchiness\":\n                    allergy = true;\n                    break;\n                case \"discharge\":\n                    allergy = true;\n                    break;\n                case \"foreign body\":\n                    injury = true;\n                    break;\n            }\n        }\n    \n        \n        if (dryEye && !allergy && !injury){\n            System.out.println(\"Recommend artificial tears and eye drops.\");\n        } else if (!dryEye && allergy && !injury){\n            System.out.println(\"Recommend antihistamines and decongestants.\");\n        } else if (!dryEye && !allergy && injury){\n            System.out.println(\"Recommend irrigating eyes and seeking medical attention.\");\n        } else {\n            System.out.println(\"Could not determine cause of eye irritation. Please try again.\");\n        }\n\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 1424
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n    const calculateLowNosieCare = (responsibility) => {\n      let action;\n  \n      \n      console.log(\"Dry Run:\");\n  \n      switch(responsibility){\n        case \"Doctor\":\n          action = \"Prescribes decongestants\";\n          break;\n        case \"Pharmacist\":\n          action = \"Dispenses decongestant medicine\";\n          break;\n        case \"Healthcare Worker\":\n          action = \"Administers decongestant drops / sprays\";\n          break;\n        default: \n          action = \"Instructs patient on home remedies\" \n      }\n  \n      return `Low Nose Care Action: ${action}`; \n    };\n    \n    console.log(calculateLowNosieCare('Doctor'));  \n    console.log(calculateLowNosieCare('Pharmacist'));\n    console.log(calculateLowNosieCare('Healthcare Worker'));\n    console.log(calculateLowNosieCare('Patient'));",
            "id": 19
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier)) (ERROR (inferred_parameters (identifier)) (ERROR) (type_identifier) (identifier))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))) (MISSING \";\"))))) (return_statement (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier)) (identifier) (MISSING \";\")) (block (expression_statement (identifier) (ERROR (UNEXPECTED '`')))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation name: (identifier) arguments: (argument_list (character_literal)))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation name: (identifier) arguments: (argument_list (character_literal)))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation name: (identifier) arguments: (argument_list (character_literal)))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation name: (identifier) arguments: (argument_list (character_literal)))))))\n**\n\n--\nscript\n    const calculateLowNosieCare = (responsibility) => {\n      let action;\n  \n      \n      console.log(\"Dry Run:\");\n  \n      switch(responsibility){\n        case \"Doctor\":\n          action = \"Prescribes decongestants\";\n          break;\n        case \"Pharmacist\":\n          action = \"Dispenses decongestant medicine\";\n          break;\n        case \"Healthcare Worker\":\n          action = \"Administers decongestant drops / sprays\";\n          break;\n        default: \n          action = \"Instructs patient on home remedies\" \n      }\n  \n      return `Low Nose Care Action: ${action}`; \n    };\n    \n    console.log(calculateLowNosieCare('Doctor'));  \n    console.log(calculateLowNosieCare('Pharmacist'));\n    console.log(calculateLowNosieCare('Healthcare Worker'));\n    console.log(calculateLowNosieCare('Patient'));\n--\n",
        "text": "3\n\nДля вычисления цикломатической сложности необходимо определить количество операторов `switch`, `case` и",
        "token_cnt": 804
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class TransformLowClothingCleanliness {\n\n    public static String cleaningSpecialFabrics(String clothType) {\n        \n        final String SILK = \"Silk\";\n        final String WOOL = \"Wool\";\n\n        \n        switch (clothType) {\n            case SILK:\n                return \"Use a mild detergent and cold water.\";\n\n            case WOOL:\n                return \"Use a warm machine wash cycle with gentle detergent.\";\n                \n            default: \n                return \"Unknown Fabric Type Provided!\";\n        }\n    }\n}",
            "id": 22
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration (modifiers) type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (local_variable_declaration (modifiers) type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (identifier)) (return_statement (string_literal (string_fragment)))) (switch_block_statement_group (switch_label (identifier)) (return_statement (string_literal (string_fragment)))) (switch_block_statement_group (switch_label) (return_statement (string_literal (string_fragment)))))))))))\n**\n\n--\npublic class TransformLowClothingCleanliness {\n\n    public static String cleaningSpecialFabrics(String clothType) {\n        \n        final String SILK = \"Silk\";\n        final String WOOL = \"Wool\";\n\n        \n        switch (clothType) {\n            case SILK:\n                return \"Use a mild detergent and cold water.\";\n\n            case WOOL:\n                return \"Use a warm machine wash cycle with gentle detergent.\";\n                \n            default: \n                return \"Unknown Fabric Type Provided!\";\n        }\n    }\n}\n--\n",
        "text": "5\n\nОбъяснение: цикломатическая сложность — это метрика, которая измеряет количество линейно",
        "token_cnt": 420
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class DisplayNailCare {\n\n    public static void main(String[] args) {\n        \n        System.out.println(\"Enter nail transparency (1 - clear, 2 - opaque): \");\n        int transparency = scan.nextInt();\n\n        \n        String message;\n        if (transparency == 1) {\n            message = \"For low nail care, filing and shaping nails can help improve visibility of abnormalities.\";\n        } else if (transparency == 2) {\n            message = \"In more severe cases, medical treatments such as topical medications, oral drugs, or surgery may be necessary\";\n        } else {\n            message = \"Invalid input. Please enter a value between 1 and 2 inclusive.\";\n        }\n        \n        \n        System.out.println(message);\n    }\n}",
            "id": 24
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (identifier)))))))))\n**\n\n--\npublic class DisplayNailCare {\n\n    public static void main(String[] args) {\n        \n        System.out.println(\"Enter nail transparency (1 - clear, 2 - opaque): \");\n        int transparency = scan.nextInt();\n\n        \n        String message;\n        if (transparency == 1) {\n            message = \"For low nail care, filing and shaping nails can help improve visibility of abnormalities.\";\n        } else if (transparency == 2) {\n            message = \"In more severe cases, medical treatments such as topical medications, oral drugs, or surgery may be necessary\";\n        } else {\n            message = \"Invalid input. Please enter a value between 1 and 2 inclusive.\";\n        }\n        \n        \n        System.out.println(message);\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 600
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static boolean checkDentalHygiene(Patient patient) {\n        \n        System.out.println(\"Checking dental health history...\");\n\n        String teethStatus = \"healthy\";\n        int cavitiesCount = 0;\n        \n        if (patient.getAge() < 2) {\n            return true;\n        } else if (patient.getLastVisitDate().before(LocalDate.now().minusYears(1))) {\n            return false;\n        } else if (!teethStatus.equals(\"cavity free\")) {\n            return false;\n        } else if (cavitiesCount > 3) {\n            return false;\n        } else {\n            return true;\n        }\n    }",
            "id": 25
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (if_statement condition: (condition (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (decimal_integer_literal))) consequence: (block (return_statement (true))) alternative: (if_statement condition: (condition (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list (decimal_integer_literal)))))) consequence: (block (return_statement (false))) alternative: (if_statement condition: (condition (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) consequence: (block (return_statement (false))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (return_statement (false))) alternative: (block (return_statement (true))))))))))\n**\n\n--\npublic static boolean checkDentalHygiene(Patient patient) {\n        \n        System.out.println(\"Checking dental health history...\");\n\n        String teethStatus = \"healthy\";\n        int cavitiesCount = 0;\n        \n        if (patient.getAge() < 2) {\n            return true;\n        } else if (patient.getLastVisitDate().before(LocalDate.now().minusYears(1))) {\n            return false;\n        } else if (!teethStatus.equals(\"cavity free\")) {\n            return false;\n        } else if (cavitiesCount > 3) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n--\n",
        "text": "6",
        "token_cnt": 642
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) throws IOException{\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Enter patient age:\");\n        int age = scan.nextInt();\n        \n        \n        if (age >=18){\n            System.out.println(\"Patient can participate in study.\");\n        }\n        else{\n            System.out.println(\"Sorry! Patient must be at least 18 years old to participate in this study\");\n        }\n\n    }\n}",
            "id": 29
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) throws IOException{\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Enter patient age:\");\n        int age = scan.nextInt();\n        \n        \n        if (age >=18){\n            System.out.println(\"Patient can participate in study.\");\n        }\n        else{\n            System.out.println(\"Sorry! Patient must be at least 18 years old to participate in this study\");\n        }\n\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 533
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n    const checkHygiene = (privacy) => {\n      let message;\n  \n      \n      const temp = 98.6;\n      if (temp < 100 && temp > 97) {\n        console.log(`Temp: ${temp} F`);\n      } else {\n        return `Error: Temperature reading of ${temp} F is outside normal range`;\n      }\n  \n      \n      switch(privacy) {\n        case 'public':\n          message = \"It looks like your hygiene practices could use some improvement. Consider washing your hands regularly, covering coughs and sneezes, and staying home when sick.\";\n          break;\n        case 'private':\n          message = \"Your current hygiene habits seem fine from what I can tell. However, if you feel uncomfortable sharing this information publicly, you may want to take additional precautions such as frequent handwashing and avoiding contact with others who appear sick.\"\n          break;\n        default: \n          return `Invalid privacy setting: \"${privacy}\". Please specify either \"public\" or \"private\".` \n      }\n  \n      \n      console.log(message);\n      return message;\n    };\n    \n    module.exports = checkHygiene;",
            "id": 33
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier)) (ERROR (inferred_parameters (identifier)) (ERROR) (type_identifier) (identifier))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_floating_point_literal))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (identifier)) (identifier) (ERROR (identifier) (identifier) (UNEXPECTED '`')))))) alternative: (block (return_statement (ERROR (UNEXPECTED '`') (identifier) (type_identifier) (identifier) (type_identifier) (identifier)) (identifier) (MISSING \";\")))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (ERROR (identifier) (UNEXPECTED '`'))) (ERROR) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (character_literal)) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (break_statement)) (switch_block_statement_group (switch_label (character_literal)) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))) (ERROR (identifier)))) (switch_block_statement_group (switch_label) (return_statement (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (identifier)) (field_access object: (string_literal (string_fragment)) field: (identifier)) (MISSING \";\")) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (ERROR (string_literal (string_fragment)) (identifier)) (expression_statement (method_invocation object: (field_access object: (string_literal (string_fragment)) (ERROR (UNEXPECTED '`')) field: (identifier)) name: (identifier) arguments: (argument_list (identifier)))) (return_statement (identifier))))) (expression_statement (assignment_expression left: (field_access object: (identifier) field: (identifier)) right: (identifier))))\n**\n\n--\nscript\n    const checkHygiene = (privacy) => {\n      let message;\n  \n      \n      const temp = 98.6;\n      if (temp < 100 && temp > 97) {\n        console.log(`Temp: ${temp} F`);\n      } else {\n        return `Error: Temperature reading of ${temp} F is outside normal range`;\n      }\n  \n      \n      switch(privacy) {\n        case 'public':\n          message = \"It looks like your hygiene practices could use some improvement. Consider washing your hands regularly, covering coughs and sneezes, and staying home when sick.\";\n          break;\n        case 'private':\n          message = \"Your current hygiene habits seem fine from what I can tell. However, if you feel uncomfortable sharing this information publicly, you may want to take additional precautions such as frequent handwashing and avoiding contact with others who appear sick.\"\n          break;\n        default: \n          return `Invalid privacy setting: \"${privacy}\". Please specify either \"public\" or \"private\".` \n      }\n  \n      \n      console.log(message);\n      return message;\n    };\n    \n    module.exports = checkHygiene;\n--\n",
        "text": "8",
        "token_cnt": 947
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public boolean determineHygiene(String utensilType, String equipmentType) {\n        \n        boolean responsibilityMet = false;\n\n        /*\n         * Check whether both inputs are not null and equal to \"shared\" (i.e., high hygiene). If so, set \n         * responsibility met flag to true and exit loop\n         */\n        if ((utensilType != null && utensilType.equals(\"shared\")) && \n            (equipmentType != null && equipmentType.equals(\"shared\"))) {\n            responsibilityMet = true;\n        } else {\n\n            /*\n             * Else check individual input value based on given condition. For instance, \n             * if utensil type is \"single use\", then set responsibility met flag accordingly\n             */\n            switch (utensilType) {\n                case \"disposable\":\n                    responsibilityMet = true;\n                    break;\n                case \"single use\":\n                    responsibilityMet = true;\n                    break;\n                default:\n                    responsibilityMet = false;\n                    break;\n            }\n\n            /*\n             * Similarly, check equipment type based on other conditions as needed\n             */\n            switch (equipmentType) {\n                case \"disinfected after every use\":\n                    responsibilityMet = true;\n                    break;\n                case \"cleaned regularly but may still contain germs\":\n                    responsibilityMet = true;\n                    break;\n                default:\n                    responsibilityMet = false;\n                    break;\n            }\n        }\n        \n        return responsibilityMet;\n    }",
            "id": 36
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (block_comment) (if_statement condition: (condition (binary_expression left: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (null_literal)) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) right: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (null_literal)) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true)))) alternative: (block (block_comment) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (true))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (true))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (assignment_expression left: (identifier) right: (false))) (break_statement)))) (block_comment) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (true))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (true))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (assignment_expression left: (identifier) right: (false))) (break_statement)))))) (return_statement (identifier)))))\n**\n\n--\npublic boolean determineHygiene(String utensilType, String equipmentType) {\n        \n        boolean responsibilityMet = false;\n\n        /*\n         * Check whether both inputs are not null and equal to \"shared\" (i.e., high hygiene). If so, set \n         * responsibility met flag to true and exit loop\n         */\n        if ((utensilType != null && utensilType.equals(\"shared\")) && \n            (equipmentType != null && equipmentType.equals(\"shared\"))) {\n            responsibilityMet = true;\n        } else {\n\n            /*\n             * Else check individual input value based on given condition. For instance, \n             * if utensil type is \"single use\", then set responsibility met flag accordingly\n             */\n            switch (utensilType) {\n                case \"disposable\":\n                    responsibilityMet = true;\n                    break;\n                case \"single use\":\n                    responsibilityMet = true;\n                    break;\n                default:\n                    responsibilityMet = false;\n                    break;\n            }\n\n            /*\n             * Similarly, check equipment type based on other conditions as needed\n             */\n            switch (equipmentType) {\n                case \"disinfected after every use\":\n                    responsibilityMet = true;\n                    break;\n                case \"cleaned regularly but may still contain germs\":\n                    responsibilityMet = true;\n                    break;\n                default:\n                    responsibilityMet = false;\n                    break;\n            }\n        }\n        \n        return responsibilityMet;\n    }\n--\n",
        "text": "31",
        "token_cnt": 969
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public boolean checkLowNoseClearance(String responsibility) {\n        \n        boolean clear = false;\n\n        /* Use if else statement to check based on responsibilty\n           If engineer for experts then set flag as true */\n        if (responsibility.equals(\"Engineer For Experts\")) {\n            clear = true;\n        } \n\n        return clear;\n    }",
            "id": 45
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (block_comment) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true))))) (return_statement (identifier)))))\n**\n\n--\npublic boolean checkLowNoseClearance(String responsibility) {\n        \n        boolean clear = false;\n\n        /* Use if else statement to check based on responsibilty\n           If engineer for experts then set flag as true */\n        if (responsibility.equals(\"Engineer For Experts\")) {\n            clear = true;\n        } \n\n        return clear;\n    }\n--\n",
        "text": "5\n\nОбъяснение:\nВ приведённом фрагменте кода содержится 5 блоков, которые",
        "token_cnt": 277
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public void updateDentalHygiene(boolean patientConsent) {\n    \n    System.out.println(\"Current Patient Status: \" + (patientConsent ? \"Yes\" : \"No\"));\n\n    String updatedStatus;\n    if (!patientConsent) {\n        updatedStatus = \"Needs Reminder\";\n    } else if (random.nextBoolean()) {\n        updatedStatus = \"Good\";\n    } else {\n        updatedStatus = \"Poor\";\n    }\n    \n    \n    System.out.println(\"New Patient Status: \" + updatedStatus);\n}",
            "id": 47
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (parenthesized_expression (ternary_expression condition: (identifier) consequence: (string_literal (string_fragment)) alternative: (string_literal (string_fragment)))))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))))\n**\n\n--\npublic void updateDentalHygiene(boolean patientConsent) {\n    \n    System.out.println(\"Current Patient Status: \" + (patientConsent ? \"Yes\" : \"No\"));\n\n    String updatedStatus;\n    if (!patientConsent) {\n        updatedStatus = \"Needs Reminder\";\n    } else if (random.nextBoolean()) {\n        updatedStatus = \"Good\";\n    } else {\n        updatedStatus = \"Poor\";\n    }\n    \n    \n    System.out.println(\"New Patient Status: \" + updatedStatus);\n}\n--\n",
        "text": "4",
        "token_cnt": 521
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number of times person washed their hands today\");\n        int handWashCount = scan.nextInt();\n\n        \n        if (handWashCount == 0){\n            System.out.println(\"Invalid input! Please enter positive integer value.\");\n            return;\n        }\n        \n        double handSanitizerUsagePercentage = calculateHandSanitizerUsage(handWashCount);\n        printResult(handSanitizerUsagePercentage);\n\n    }\n    \n    private static double calculateHandSanitizerUsage(int handWashCount) {\n        if (handWashCount >=8 && handWashCount <=14 ) {\n           return  67.5 * ((double)(handWashCount - 8))/((double)14 - 8);\n        } else if (handWashCount > 14 ){\n           return   93.25*(Math.pow(((double)handWashCount / 14), 2));\n        } else{\n          return 0 ;    \n        }\n        \n    }\n\n    private static void printResult(double usagePercentage) {\n       String resultMessage;\n       if (usagePercentage < 0.2) {\n         resultMessage =\"Congratulation!! Your high hand washing frequency demonstrates proper hygiene practices.\"; \n       } else {\n         resultMessage=\"It looks like you may need to increase your use of hand sanitizers to achieve optimal levels of hygiene.\"+\n                     \" Try incorporating hand sanitizers into your routine after each time you wash your hands\";\n       }\n      System.out.printf(\"%s\\n\",resultMessage);\n    }\n    \n}",
            "id": 48
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (identifier))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier)))))) (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (integral_type) name: (identifier))) body: (block (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (return_statement (binary_expression left: (binary_expression left: (decimal_floating_point_literal) right: (parenthesized_expression (cast_expression type: (floating_point_type) value: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal)))))) right: (parenthesized_expression (binary_expression left: (cast_expression type: (floating_point_type) value: (decimal_integer_literal)) right: (decimal_integer_literal)))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (return_statement (binary_expression left: (decimal_floating_point_literal) right: (parenthesized_expression (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (parenthesized_expression (binary_expression left: (cast_expression type: (floating_point_type) value: (identifier)) right: (decimal_integer_literal))) (decimal_integer_literal))))))) alternative: (block (return_statement (decimal_integer_literal))))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (floating_point_type) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_floating_point_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (string_literal (string_fragment)) right: (string_literal (string_fragment))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence)) (identifier)))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number of times person washed their hands today\");\n        int handWashCount = scan.nextInt();\n\n        \n        if (handWashCount == 0){\n            System.out.println(\"Invalid input! Please enter positive integer value.\");\n            return;\n        }\n        \n        double handSanitizerUsagePercentage = calculateHandSanitizerUsage(handWashCount);\n        printResult(handSanitizerUsagePercentage);\n\n    }\n    \n    private static double calculateHandSanitizerUsage(int handWashCount) {\n        if (handWashCount >=8 && handWashCount <=14 ) {\n           return  67.5 * ((double)(handWashCount - 8))/((double)14 - 8);\n        } else if (handWashCount > 14 ){\n           return   93.25*(Math.pow(((double)handWashCount / 14), 2));\n        } else{\n          return 0 ;    \n        }\n        \n    }\n\n    private static void printResult(double usagePercentage) {\n       String resultMessage;\n       if (usagePercentage < 0.2) {\n         resultMessage =\"Congratulation!! Your high hand washing frequency demonstrates proper hygiene practices.\"; \n       } else {\n         resultMessage=\"It looks like you may need to increase your use of hand sanitizers to achieve optimal levels of hygiene.\"+\n                     \" Try incorporating hand sanitizers into your routine after each time you wash your hands\";\n       }\n      System.out.printf(\"%s\\n\",resultMessage);\n    }\n    \n}\n--\n",
        "text": "11",
        "token_cnt": 1445
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) {\n        int foodSafetyScore = 80; \n\n        /* Check whether the current food safety score falls below 75 */\n        if (foodSafetyScore < 75){\n            System.out.println(\"Low Score Detected!\");\n\n            /* If yes, check whether the user wants to increase the cooking temperature*/\n            if (increaseCookingTemperature()) {\n                System.out.println(\"Increasing Cooking Temperature by 10 degrees Celsius\");\n\n                /* Update the new food safety score after increasing the cooking temprature */\n                foodSafetyScore += 10; \n            } else {\n                System.out.println(\"Not Increasing Cooking Temperature.\");\n            \n                /* Else check whether they want to add more hand washing instructions */\n                if (addMoreHandWashInstructions()){\n                    System.out.println(\"Adding More Hand Washing Instructions\");\n                    \n                    /* Update the final new food safety score after adding extra handwashing steps */\n                    foodSafetyScore +=20 ; \n                } else{\n                    System.out.println(\"No Changes Made.\") ;   \n                }\n                \n            }\n        }\n        \n        System.out.println(\"New Food Safety Score: \" + foodSafetyScore);\n\n    }\n    \n    private static boolean increaseCookingTemperature() {\n        return true;\n    }\n\n    private static boolean addMoreHandWashInstructions(){\n       return false;\n    }\n    \n}",
            "id": 51
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (block_comment) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (block_comment) (if_statement condition: (condition (method_invocation name: (identifier) arguments: (argument_list))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (block_comment) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (block_comment) (if_statement condition: (condition (method_invocation name: (identifier) arguments: (argument_list))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (block_comment) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))) (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters) body: (block (return_statement (true)))) (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters) body: (block (return_statement (false)))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) {\n        int foodSafetyScore = 80; \n\n        /* Check whether the current food safety score falls below 75 */\n        if (foodSafetyScore < 75){\n            System.out.println(\"Low Score Detected!\");\n\n            /* If yes, check whether the user wants to increase the cooking temperature*/\n            if (increaseCookingTemperature()) {\n                System.out.println(\"Increasing Cooking Temperature by 10 degrees Celsius\");\n\n                /* Update the new food safety score after increasing the cooking temprature */\n                foodSafetyScore += 10; \n            } else {\n                System.out.println(\"Not Increasing Cooking Temperature.\");\n            \n                /* Else check whether they want to add more hand washing instructions */\n                if (addMoreHandWashInstructions()){\n                    System.out.println(\"Adding More Hand Washing Instructions\");\n                    \n                    /* Update the final new food safety score after adding extra handwashing steps */\n                    foodSafetyScore +=20 ; \n                } else{\n                    System.out.println(\"No Changes Made.\") ;   \n                }\n                \n            }\n        }\n        \n        System.out.println(\"New Food Safety Score: \" + foodSafetyScore);\n\n    }\n    \n    private static boolean increaseCookingTemperature() {\n        return true;\n    }\n\n    private static boolean addMoreHandWashInstructions(){\n       return false;\n    }\n    \n}\n--\n",
        "text": "9",
        "token_cnt": 1019
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script \nfunction checkExtremeClothingCleanliness(trustScore, reviewText){\n  \n  console.log(\"Dry Run:\")\n\n  let action = \"Approve\"\n  \n  if (trustScore < 30 && reviewText.includes(\"odor\")) {\n    action = \"Request Repair\" \n    console.log(`Action: ${action} due to low trust score (${trustScore}) and mention of bad odour`)\n    \n  } else if (trustScore <= 50 && reviewText.toLowerCase().includes(\"mildew\")){\n      action = \"Reject\" \n      console.log(`Action: Rejected due to very low trust score(${trustScore}), and presence of mildew mentioned by customer`)\n      \n  } else if (!reviewText.includes(\"clean\") || !reviewText.includes(\"hygienic\")){\n     action = \"Remind Manufacturer\" \n     console.log(`Action: Reminder sent to manufacturer regarding importance of cleaning and hygiene practices`)\n  }\n   return action;\n}",
            "id": 52
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier))) (MISSING \";\")) (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\")) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment))) (MISSING \";\")) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (string_literal (string_fragment)) (ERROR (identifier)) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (identifier) (method_invocation name: (identifier) (ERROR (identifier) (identifier) (identifier) (identifier) (identifier)) arguments: (argument_list (identifier) (ERROR (identifier)))) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (UNEXPECTED '`'))))) (MISSING \";\"))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (string_literal (string_fragment)) (ERROR (identifier)) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier)) (method_invocation name: (identifier) arguments: (argument_list (identifier) (ERROR (identifier)))) (ERROR (type_identifier) (identifier) (identifier) (type_identifier) (identifier) (type_identifier)) (identifier) (ERROR (UNEXPECTED '`'))))) (MISSING \";\"))) alternative: (if_statement condition: (condition (binary_expression left: (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) right: (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (string_literal (string_fragment)) (ERROR (identifier)) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (UNEXPECTED '`'))))) (MISSING \";\")))))) (return_statement (identifier))))\n**\n\n--\nscript \nfunction checkExtremeClothingCleanliness(trustScore, reviewText){\n  \n  console.log(\"Dry Run:\")\n\n  let action = \"Approve\"\n  \n  if (trustScore < 30 && reviewText.includes(\"odor\")) {\n    action = \"Request Repair\" \n    console.log(`Action: ${action} due to low trust score (${trustScore}) and mention of bad odour`)\n    \n  } else if (trustScore <= 50 && reviewText.toLowerCase().includes(\"mildew\")){\n      action = \"Reject\" \n      console.log(`Action: Rejected due to very low trust score(${trustScore}), and presence of mildew mentioned by customer`)\n      \n  } else if (!reviewText.includes(\"clean\") || !reviewText.includes(\"hygienic\")){\n     action = \"Remind Manufacturer\" \n     console.log(`Action: Reminder sent to manufacturer regarding importance of cleaning and hygiene practices`)\n  }\n   return action;\n}\n--\n",
        "text": "6\n\nОбъяснение:\n\nВ приведённом фрагменте кода 6 путей выполнения.",
        "token_cnt": 1070
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\nfunction determineDentalHygiene(privacy) {\n  \n  console.log(`Current value of 'privacy' variable: ${privacy}`);\n\n  let result;\n  \n  if (privacy === \"public\") {\n    \n    const didFloss = true;\n\n    if (!didFloss) {\n      result = \"Poor\";\n      console.log(\"Low dental hygiene detected due to lack of flossing.\");\n    } else {\n      result = \"Good\";\n      console.log(\"No issues found!\");\n    }\n    \n  } else if (privacy === \"private\") {\n    \n    const didFloss = false;\n    \n    if (!didFloss) {\n      result = \"Very Poor\";\n      console.log(\"Very poor dental hygiene detected due to lack of flossing.\")\n    } else {\n      result = \"Excellent\";\n      console.log(\"Excellent dental hygiene!\")\n    }\n    \n  } else {\n    throw new Error(\"Invalid input\");\n  }\n\n  return result;\n}",
            "id": 59
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (identifier) (character_literal) (identifier)) (identifier) (ERROR (identifier) (UNEXPECTED '`'))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (string_literal (string_fragment)))) consequence: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (true))) (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (string_literal (string_fragment)))) consequence: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (false))) (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\"))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\"))))) alternative: (block (throw_statement (object_creation_expression type: (type_identifier) arguments: (argument_list (string_literal (string_fragment)))))))) (return_statement (identifier))))\n**\n\n--\nscript\nfunction determineDentalHygiene(privacy) {\n  \n  console.log(`Current value of 'privacy' variable: ${privacy}`);\n\n  let result;\n  \n  if (privacy === \"public\") {\n    \n    const didFloss = true;\n\n    if (!didFloss) {\n      result = \"Poor\";\n      console.log(\"Low dental hygiene detected due to lack of flossing.\");\n    } else {\n      result = \"Good\";\n      console.log(\"No issues found!\");\n    }\n    \n  } else if (privacy === \"private\") {\n    \n    const didFloss = false;\n    \n    if (!didFloss) {\n      result = \"Very Poor\";\n      console.log(\"Very poor dental hygiene detected due to lack of flossing.\")\n    } else {\n      result = \"Excellent\";\n      console.log(\"Excellent dental hygiene!\")\n    }\n    \n  } else {\n    throw new Error(\"Invalid input\");\n  }\n\n  return result;\n}\n--\n",
        "text": "8\nОбъяснение:\nПредставленный фрагмент содержит 8 блоков принятия решений (`if`/`else",
        "token_cnt": 910
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class SanitizationManager {\n\n    public static void determineLowHygiene(boolean handSanitizerUsed, boolean disinfectantSprayed) {\n        \n        if (handSanitizerUsed && !disinfectantSprayed) {\n            System.out.println(\"Shared utensil / equipment needs sanitizing\");\n        } else if (!handSanitizerUsed && disinfectantSprayed) {\n            System.out.println(\"High touch area requires additional cleaning\");\n        } else if (handSanitizerUsed && disinfectantSprayed){\n            System.out.println(\"Area does not require further attention at this time.\");\n        }\n    }\n}",
            "id": 61
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier)) (formal_parameter type: (boolean_type) name: (identifier))) body: (block (if_statement condition: (condition (binary_expression left: (identifier) right: (unary_expression operand: (identifier)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (unary_expression operand: (identifier)) right: (identifier))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (identifier))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))))))\n**\n\n--\npublic class SanitizationManager {\n\n    public static void determineLowHygiene(boolean handSanitizerUsed, boolean disinfectantSprayed) {\n        \n        if (handSanitizerUsed && !disinfectantSprayed) {\n            System.out.println(\"Shared utensil / equipment needs sanitizing\");\n        } else if (!handSanitizerUsed && disinfectantSprayed) {\n            System.out.println(\"High touch area requires additional cleaning\");\n        } else if (handSanitizerUsed && disinfectantSprayed){\n            System.out.println(\"Area does not require further attention at this time.\");\n        }\n    }\n}\n--\n",
        "text": "4",
        "token_cnt": 510
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) {\n        int marks = 90; \n\n        String result; \n\n        if (marks >= 85 && marks <=100){\n            System.out.println(\"A+\"); \n            result=\"A+\"; \n        } else if (marks>=70&&marks<85){\n            System.out.println(\"B\"); \n            result =\"B\";\n        } else if (marks>=60&&marks<70){\n            System.out.println(\"C\"); \n            result =\"C\";\n        } else if (marks>=40&&marks<60){\n            System.out.println(\"D\"); \n            result =\"D\";\n        } else{\n            System.out.println(\"F\"); \n            result =\"F\";\n        }\n        \n        System.out.print(\"Your Result is \" +result); \n    }\n}",
            "id": 62
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) {\n        int marks = 90; \n\n        String result; \n\n        if (marks >= 85 && marks <=100){\n            System.out.println(\"A+\"); \n            result=\"A+\"; \n        } else if (marks>=70&&marks<85){\n            System.out.println(\"B\"); \n            result =\"B\";\n        } else if (marks>=60&&marks<70){\n            System.out.println(\"C\"); \n            result =\"C\";\n        } else if (marks>=40&&marks<60){\n            System.out.println(\"D\"); \n            result =\"D\";\n        } else{\n            System.out.println(\"F\"); \n            result =\"F\";\n        }\n        \n        System.out.print(\"Your Result is \" +result); \n    }\n}\n--\n",
        "text": "32",
        "token_cnt": 1038
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\nif (encryptionStrength === 'Data Encryption - For Engineers (Expert)') {\n  console.log('Low'); \n} else { \n  console.log('Medium'); \n}",
            "id": 70
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (ERROR (type_identifier) (identifier) (type_identifier) (ERROR (character_literal)) (identifier) (ERROR (identifier) (character_literal)) (identifier) (identifier) (character_literal)))\n**\n\n--\nscript\nif (encryptionStrength === 'Data Encryption - For Engineers (Expert)') {\n  console.log('Low'); \n} else { \n  console.log('Medium'); \n}\n--\n",
        "text": "8\n\nДля вычисления цикломатической сложности необходимо посчитать количество рёбер в графе потока управления программы.",
        "token_cnt": 133
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class HighTravelPlanner {\n    \n        \n        private int reliability;\n        private String destination;\n        private List<String> flightOptions;\n    \n        /**\n         * Constructor\n         */\n        public HighTravelPlanner(int reliability, String destination) {\n            this.reliability = reliability;\n            this.destination = destination;\n        \n            \n            this.flightOptions = new ArrayList<>();\n            this.flightOptions.add(\"Flight 1\");\n            this.flightOptions.add(\"Flight 2\");\n            this.flightOptions.add(\"Flight 3\");\n        }\n    \n        /**\n         * Get best flight option based on reliability score\n         */\n        public String getBestOption() {\n            String selectedOption = \"\";\n        \n            \n            if (this.reliability >= 80) {\n                selectedOption = \"Flight 3\";\n                \n            } else if (this.reliability >= 60 && this.reliability < 80) {\n                selectedOption = \"Flight 2\";\n                \n            } else if (this.reliability >= 40 && this.reliability < 60) {\n                selectedOption = \"Flight 1\";\n                \n            } else {\n                System.out.println(\"Invalid reliability value entered.\");\n            }\n        \n            return selectedOption;\n        }\n    \n    }",
            "id": 72
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (field_declaration (modifiers) type: (integral_type) declarator: (variable_declarator name: (identifier))) (field_declaration (modifiers) type: (type_identifier) declarator: (variable_declarator name: (identifier))) (field_declaration (modifiers) type: (generic_type (type_identifier) (type_arguments (type_identifier))) declarator: (variable_declarator name: (identifier))) (block_comment) (constructor_declaration (modifiers) name: (identifier) parameters: (formal_parameters (formal_parameter type: (integral_type) name: (identifier)) (formal_parameter type: (type_identifier) name: (identifier))) body: (constructor_body (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (identifier))) (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (identifier))) (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (object_creation_expression type: (generic_type (type_identifier) (type_arguments)) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (this) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (this) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (this) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) (block_comment) (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal))) (if_statement condition: (condition (binary_expression left: (field_access object: (this) field: (identifier)) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (field_access object: (this) field: (identifier)) right: (decimal_integer_literal)) right: (binary_expression left: (field_access object: (this) field: (identifier)) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (field_access object: (this) field: (identifier)) right: (decimal_integer_literal)) right: (binary_expression left: (field_access object: (this) field: (identifier)) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))) (return_statement (identifier)))))))\n**\n\n--\npublic class HighTravelPlanner {\n    \n        \n        private int reliability;\n        private String destination;\n        private List<String> flightOptions;\n    \n        /**\n         * Constructor\n         */\n        public HighTravelPlanner(int reliability, String destination) {\n            this.reliability = reliability;\n            this.destination = destination;\n        \n            \n            this.flightOptions = new ArrayList<>();\n            this.flightOptions.add(\"Flight 1\");\n            this.flightOptions.add(\"Flight 2\");\n            this.flightOptions.add(\"Flight 3\");\n        }\n    \n        /**\n         * Get best flight option based on reliability score\n         */\n        public String getBestOption() {\n            String selectedOption = \"\";\n        \n            \n            if (this.reliability >= 80) {\n                selectedOption = \"Flight 3\";\n                \n            } else if (this.reliability >= 60 && this.reliability < 80) {\n                selectedOption = \"Flight 2\";\n                \n            } else if (this.reliability >= 40 && this.reliability < 60) {\n                selectedOption = \"Flight 1\";\n                \n            } else {\n                System.out.println(\"Invalid reliability value entered.\");\n            }\n        \n            return selectedOption;\n        }\n    \n    }\n--\n",
        "text": "5",
        "token_cnt": 1184
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static String transformLowToiletHygiene(String input) {\n        \n        if (input.contains(\"low toilet hygiene\")) {\n            \n            input = input.replace(\"poor personal hygiene\", \"inadequate handwashing\");\n\n            \n            if (!input.contains(\"low toilet hygiene\")) {\n                return input;\n            } else {\n                \n                return input.replace(\"low toilet hygiene\", \"severe lack of cleanliness\");\n            }\n\n        } else {\n            return input;\n        }\n\n    }",
            "id": 73
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal (string_fragment)))))) (if_statement condition: (condition (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) consequence: (block (return_statement (identifier))) alternative: (block (return_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal (string_fragment)))))))) alternative: (block (return_statement (identifier)))))))\n**\n\n--\npublic static String transformLowToiletHygiene(String input) {\n        \n        if (input.contains(\"low toilet hygiene\")) {\n            \n            input = input.replace(\"poor personal hygiene\", \"inadequate handwashing\");\n\n            \n            if (!input.contains(\"low toilet hygiene\")) {\n                return input;\n            } else {\n                \n                return input.replace(\"low toilet hygiene\", \"severe lack of cleanliness\");\n            }\n\n        } else {\n            return input;\n        }\n\n    }\n--\n",
        "text": "6",
        "token_cnt": 417
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n\nfunction updateHighTrustAnalysis(travelItineraries) {\n  \n  for (const itinerary of travelItineraries) {\n    let updated = false;\n\n    \n    const trustLevel = getTrustScoreForProfessional(itinerary.customer);\n    \n    \n    switch (trustLevel) {\n      case 'low':\n        console.log(`Updating low trust analysis for ${itinerary._id}`);\n        break;\n      case 'medium':\n        console.log(`No changes needed for medium trust analysis for ${itinerary._id}`);\n        continue;\n      case 'high':\n        \n        console.log(`Performing detailed analysis for high trust customer ${itinerary.customer.name}`);\n\n        \n        addNewSectionToItinerary(itinerary, 'Cultural Exploration');\n        addNewSectionToItinerary(itinerary, 'Shopping Tour');\n        \n        updated = true;\n        break;\n      default:\n        throw Error('Invalid trust score provided!');\n    }\n\n    \n    if (updated) {\n      await saveUpdatedItinerary(itinerary);\n    }\n  }\n}",
            "id": 77
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (for_statement init: (local_variable_declaration type: (type_identifier) (ERROR (identifier) (identifier) name: (identifier) (identifier)) declarator: (variable_declarator name: (identifier) value: (false))) (ERROR (type_identifier)) condition: (assignment_expression left: (identifier) right: (method_invocation name: (identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier))))) update: (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (character_literal)) (expression_statement (field_access object: (identifier) field: (identifier)) (ERROR (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier)) (scoped_type_identifier (type_identifier) (ERROR (identifier)) (type_identifier)) (UNEXPECTED '`'))) (break_statement)) (switch_block_statement_group (switch_label (character_literal)) (expression_statement (field_access object: (identifier) field: (identifier)) (ERROR (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier)) (scoped_type_identifier (type_identifier) (ERROR (identifier)) (type_identifier)) (UNEXPECTED '`'))) (continue_statement)) (switch_block_statement_group (switch_label (character_literal)) (expression_statement (field_access object: (identifier) field: (identifier)) (ERROR (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier)) (scoped_type_identifier (scoped_type_identifier (type_identifier) (type_identifier)) (type_identifier)) (UNEXPECTED '`'))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier) (character_literal)))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier) (character_literal)))) (expression_statement (assignment_expression left: (identifier) right: (true))) (break_statement)) (switch_block_statement_group (switch_label) (throw_statement (method_invocation name: (identifier) arguments: (argument_list (character_literal))))))) (ERROR (identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (parenthesized_expression (identifier)))))) (ERROR))\n**\n\n--\nscript\n\nfunction updateHighTrustAnalysis(travelItineraries) {\n  \n  for (const itinerary of travelItineraries) {\n    let updated = false;\n\n    \n    const trustLevel = getTrustScoreForProfessional(itinerary.customer);\n    \n    \n    switch (trustLevel) {\n      case 'low':\n        console.log(`Updating low trust analysis for ${itinerary._id}`);\n        break;\n      case 'medium':\n        console.log(`No changes needed for medium trust analysis for ${itinerary._id}`);\n        continue;\n      case 'high':\n        \n        console.log(`Performing detailed analysis for high trust customer ${itinerary.customer.name}`);\n\n        \n        addNewSectionToItinerary(itinerary, 'Cultural Exploration');\n        addNewSectionToItinerary(itinerary, 'Shopping Tour');\n        \n        updated = true;\n        break;\n      default:\n        throw Error('Invalid trust score provided!');\n    }\n\n    \n    if (updated) {\n      await saveUpdatedItinerary(itinerary);\n    }\n  }\n}\n--\n",
        "text": "6\n\nОбъяснение:\nВ приведённом фрагменте кода можно выделить шесть путей выполнения,",
        "token_cnt": 987
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args){\n        Scanner scan = new Scanner(System.in);\n        \n        \n        System.out.println(\"Enter '1' If You Have Recently Sneezed Or Enter '2' If You've Recently Coughed\");\n        int choice = scan.nextInt();\n\n        switch(choice){\n            case 1:\n                System.out.println(\"\\n\\t---SNEEZING ETIQUETTE---\");\n                System.out.println(\"1. Cover Your Mouth And Nose With A Tissue Paper.\");\n                System.out.println(\"2. Wash Hands Immediately Using Soap And Water.\");\n                System.out.println(\"3. Dispose Of Used Tissues Properly.\\n\");\n                break;\n\n            case 2:\n                System.out.println(\"\\n\\t---COUGHING ETIQUETTE---\");\n                System.out.println(\"1. Cover Your Mouth And Nose With Flexible Elbow Or Forearm.\");\n                System.out.println(\"2. Stay At Least Six Feet Away From Others.\");\n                System.out.println(\"3. Wash Hands Immediately Using Soap And Water.\\n\");\n                break;\n                \n            default: \n                System.out.print(\"Invalid Choice! Please Try Again.\");\n        }\n\n    }\n}",
            "id": 79
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (escape_sequence) (escape_sequence) (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence))))) (break_statement)) (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (escape_sequence) (escape_sequence) (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence))))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args){\n        Scanner scan = new Scanner(System.in);\n        \n        \n        System.out.println(\"Enter '1' If You Have Recently Sneezed Or Enter '2' If You've Recently Coughed\");\n        int choice = scan.nextInt();\n\n        switch(choice){\n            case 1:\n                System.out.println(\"\\n\\t---SNEEZING ETIQUETTE---\");\n                System.out.println(\"1. Cover Your Mouth And Nose With A Tissue Paper.\");\n                System.out.println(\"2. Wash Hands Immediately Using Soap And Water.\");\n                System.out.println(\"3. Dispose Of Used Tissues Properly.\\n\");\n                break;\n\n            case 2:\n                System.out.println(\"\\n\\t---COUGHING ETIQUETTE---\");\n                System.out.println(\"1. Cover Your Mouth And Nose With Flexible Elbow Or Forearm.\");\n                System.out.println(\"2. Stay At Least Six Feet Away From Others.\");\n                System.out.println(\"3. Wash Hands Immediately Using Soap And Water.\\n\");\n                break;\n                \n            default: \n                System.out.print(\"Invalid Choice! Please Try Again.\");\n        }\n\n    }\n}\n--\n",
        "text": "9",
        "token_cnt": 1126
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n\nconst role = prompt('Enter your role:');\n\n\nlet action;\nif (role === 'expert') {\n  \n  action = `\n    <p>Steps for experts:</p>\n    1. Wash and dry hands thoroughly.\n    2. Use sterile instruments such as scissors or clippers.\n    3. Trim nails straight across without rounding corners.\n    4. File down any sharp edges.\n    5. Apply polish if desired.`\n} else if (role === 'novice') {\n  \n  action = `<p>Steps for novices:</p><ol>\n    1. Soak feet in warm water for 10 minutes.\n    2. Gently push cuticles back with orange stick.\n    3. Trim nails at a slight angle around corners.</ol>`\n} else {\n  \n  alert(`Invalid role entered. Please try again.`);\n  return;\n}\n\n\ndocument.body.innerHTML += action;",
            "id": 80
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) (ERROR (identifier)) value: (method_invocation name: (identifier) arguments: (argument_list (character_literal))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (local_variable_declaration type: (generic_type (type_identifier) (ERROR (UNEXPECTED '`')) (type_arguments (type_identifier))) (ERROR (identifier) (identifier) name: (identifier) (identifier) (decimal_floating_point_literal) (identifier) (identifier) (identifier) (identifier) (identifier) (decimal_floating_point_literal) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (decimal_floating_point_literal) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (decimal_floating_point_literal) (identifier) (identifier) (identifier) (identifier) (identifier) (decimal_floating_point_literal)) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (ERROR (identifier) (UNEXPECTED '`'))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (expression_statement (binary_expression left: (binary_expression left: (binary_expression left: (assignment_expression left: (identifier) (ERROR (UNEXPECTED '`')) right: (binary_expression left: (identifier) (ERROR (type_identifier) (identifier)) right: (identifier))) (ERROR) right: (identifier)) (ERROR) right: (identifier)) right: (decimal_floating_point_literal)) (MISSING \";\")) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (local_variable_declaration type: (type_identifier) (ERROR (identifier) (decimal_integer_literal) (identifier) (decimal_floating_point_literal) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (decimal_floating_point_literal) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation object: (identifier) type_arguments: (type_arguments (ERROR) (type_identifier)) (ERROR (UNEXPECTED '`')) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (scoped_type_identifier (type_identifier) (type_identifier)) (identifier)) (identifier) (ERROR (UNEXPECTED '`'))))) (return_statement)))) (expression_statement (assignment_expression left: (field_access object: (field_access object: (identifier) field: (identifier)) field: (identifier)) right: (identifier))))\n**\n\n--\nscript\n\nconst role = prompt('Enter your role:');\n\n\nlet action;\nif (role === 'expert') {\n  \n  action = `\n    <p>Steps for experts:</p>\n    1. Wash and dry hands thoroughly.\n    2. Use sterile instruments such as scissors or clippers.\n    3. Trim nails straight across without rounding corners.\n    4. File down any sharp edges.\n    5. Apply polish if desired.`\n} else if (role === 'novice') {\n  \n  action = `<p>Steps for novices:</p><ol>\n    1. Soak feet in warm water for 10 minutes.\n    2. Gently push cuticles back with orange stick.\n    3. Trim nails at a slight angle around corners.</ol>`\n} else {\n  \n  alert(`Invalid role entered. Please try again.`);\n  return;\n}\n\n\ndocument.body.innerHTML += action;\n--\n",
        "text": "6",
        "token_cnt": 1047
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class DentalHygieneCalculator {\n\n    public static void main(String[] args) {\n        \n        boolean recentDentistVisit = false;\n        int engineerExpertiseLevel = 3;\n\n        System.out.println(\"Recent Dentist Visit: \" + recentDentistVisit);\n        System.out.println(\"Engineer Expertise Level: \" + engineerExpertiseLevel);\n        \n        String recommendation = calculateRecommendation(recentDentistVisit, engineerExpertiseLevel);\n        System.out.println(\"Recommendation: \" + recommendation);\n    }\n    \n    private static String calculateRecommendation(boolean recentDentistVisit, int engineerExpertiseLevel){\n        StringBuilder sb = new StringBuilder();\n    \n        if (!recentDentistVisit && engineerExpertiseLevel >=2 ) {\n            sb.append(\"It seems like \");\n            sb.append(\"you might need to schedule a visit to the dentist.\");\n            sb.append(\"\\n\\n\");\n            sb.append(\"*Please note:* If you experience any pain or discomfort, do not hesitate to contact your dentist immediately!\");\n        } else if ((engineerExpertiseLevel ==1 || engineerExpertiseLevel==0)){\n            sb.append(\"Based on the information given, we recommend seeing a dentist soon.\\n\\n\");\n            sb.append(\"If you require further assistance please let us know!\\n\\n\");\n        } else{\n            sb.append(\"Given your current situation, we don't see any immediate concerns related to poor dental health.\\n\\n\");\n            sb.append(\"However, regular checkups can help prevent issues from developing down the road.\\n\\n\");\n            sb.append(\"Should you notice any changes in your mouth or teeth, feel free to reach out again! We'd be happy to assist you in any way we can.\");\n        }\n    \n        return sb.toString();\n    }\n    \n}",
            "id": 81
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))) (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier)) (formal_parameter type: (integral_type) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (unary_expression operand: (identifier)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (escape_sequence) (escape_sequence))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal))))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence) (escape_sequence))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence) (escape_sequence)))))) alternative: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence) (escape_sequence))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence) (escape_sequence))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))) (return_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))))))))\n**\n\n--\npublic class DentalHygieneCalculator {\n\n    public static void main(String[] args) {\n        \n        boolean recentDentistVisit = false;\n        int engineerExpertiseLevel = 3;\n\n        System.out.println(\"Recent Dentist Visit: \" + recentDentistVisit);\n        System.out.println(\"Engineer Expertise Level: \" + engineerExpertiseLevel);\n        \n        String recommendation = calculateRecommendation(recentDentistVisit, engineerExpertiseLevel);\n        System.out.println(\"Recommendation: \" + recommendation);\n    }\n    \n    private static String calculateRecommendation(boolean recentDentistVisit, int engineerExpertiseLevel){\n        StringBuilder sb = new StringBuilder();\n    \n        if (!recentDentistVisit && engineerExpertiseLevel >=2 ) {\n            sb.append(\"It seems like \");\n            sb.append(\"you might need to schedule a visit to the dentist.\");\n            sb.append(\"\\n\\n\");\n            sb.append(\"*Please note:* If you experience any pain or discomfort, do not hesitate to contact your dentist immediately!\");\n        } else if ((engineerExpertiseLevel ==1 || engineerExpertiseLevel==0)){\n            sb.append(\"Based on the information given, we recommend seeing a dentist soon.\\n\\n\");\n            sb.append(\"If you require further assistance please let us know!\\n\\n\");\n        } else{\n            sb.append(\"Given your current situation, we don't see any immediate concerns related to poor dental health.\\n\\n\");\n            sb.append(\"However, regular checkups can help prevent issues from developing down the road.\\n\\n\");\n            sb.append(\"Should you notice any changes in your mouth or teeth, feel free to reach out again! We'd be happy to assist you in any way we can.\");\n        }\n    \n        return sb.toString();\n    }\n    \n}\n--\n",
        "text": "14",
        "token_cnt": 1432
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script \nfunction transformToilet(ethics){\n  \n  let message = \"Transforming high touch point area such as toilets requires consideration of several factors including but not limited to:\\n\\n\";\n\n  if(waterSupplyAvailable === true && ethics === 'professional'){\n    message += \"-Sanitization procedures \\n\" \n    message += \"-Proper disposal of waste materials \\n\" \n    message +=\"-Regular cleaning and maintenance routines \\n\\n\";\n\n    return message;\n  } else if (waterSupplyAvailable === false && ethics === 'pragmatic') {\n      message += \"-Provision of alcohol-based hand rubs near entry points \\n\" \n      message += \"-Educational posters promoting good hygiene habits \\n\\n\";\n\n      return message;\n  } else {\n     message += \"-Encouraging regular breaks and physical activity \\n\" \n     message += \"-Promoting healthy eating choices \\n\\n\";\n\n     return message;\n  }\n   \n}",
            "id": 82
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment) (escape_sequence) (escape_sequence)))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) (ERROR) right: (true)) right: (binary_expression left: (identifier) (ERROR) right: (character_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment) (escape_sequence))) (MISSING \";\")) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment) (escape_sequence))) (MISSING \";\")) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment) (escape_sequence) (escape_sequence)))) (return_statement (identifier))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) (ERROR) right: (false)) right: (binary_expression left: (identifier) (ERROR) right: (character_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment) (escape_sequence))) (MISSING \";\")) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment) (escape_sequence) (escape_sequence)))) (return_statement (identifier))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment) (escape_sequence))) (MISSING \";\")) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment) (escape_sequence) (escape_sequence)))) (return_statement (identifier)))))))\n**\n\n--\nscript \nfunction transformToilet(ethics){\n  \n  let message = \"Transforming high touch point area such as toilets requires consideration of several factors including but not limited to:\\n\\n\";\n\n  if(waterSupplyAvailable === true && ethics === 'professional'){\n    message += \"-Sanitization procedures \\n\" \n    message += \"-Proper disposal of waste materials \\n\" \n    message +=\"-Regular cleaning and maintenance routines \\n\\n\";\n\n    return message;\n  } else if (waterSupplyAvailable === false && ethics === 'pragmatic') {\n      message += \"-Provision of alcohol-based hand rubs near entry points \\n\" \n      message += \"-Educational posters promoting good hygiene habits \\n\\n\";\n\n      return message;\n  } else {\n     message += \"-Encouraging regular breaks and physical activity \\n\" \n     message += \"-Promoting healthy eating choices \\n\\n\";\n\n     return message;\n  }\n   \n}\n--\n",
        "text": "4\n\nОбъяснение:\nПредставленный фрагмент содержит 4 основных блока (`if-else`",
        "token_cnt": 752
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static boolean determineExtremeRegularHealthCheckUps(String patientData) {\n        \n        String[] readings = patientData.split(\",\");\n        double bloodPressure;\n        double heartRate;\n        int age;\n        \n        try {\n            \n            bloodPressure = Double.parseDouble(readings[0]);\n            heartRate = Double.parseDouble(readings[1]);\n            age = Integer.parseInt(readings[2]);\n        \n            \n            if (age < 65 && (bloodPressure > 130 || heartRate > 90)) {\n                return true;\n            } else if (age >= 65 && (bloodPressure > 140 || heartRate > 80)) {\n                return true;\n            } \n        } catch (NumberFormatException e) {\n            System.out.println(\"Invalid input\");\n            return false;\n        }\n    \n        return false;\n    }",
            "id": 86
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (array_type element: (type_identifier) dimensions: (dimensions)) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier))) (try_statement body: (block (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))))) consequence: (block (return_statement (true))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))))) consequence: (block (return_statement (true)))))) (catch_clause (catch_formal_parameter (catch_type (type_identifier)) name: (identifier)) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement (false))))) (return_statement (false)))))\n**\n\n--\npublic static boolean determineExtremeRegularHealthCheckUps(String patientData) {\n        \n        String[] readings = patientData.split(\",\");\n        double bloodPressure;\n        double heartRate;\n        int age;\n        \n        try {\n            \n            bloodPressure = Double.parseDouble(readings[0]);\n            heartRate = Double.parseDouble(readings[1]);\n            age = Integer.parseInt(readings[2]);\n        \n            \n            if (age < 65 && (bloodPressure > 130 || heartRate > 90)) {\n                return true;\n            } else if (age >= 65 && (bloodPressure > 140 || heartRate > 80)) {\n                return true;\n            } \n        } catch (NumberFormatException e) {\n            System.out.println(\"Invalid input\");\n            return false;\n        }\n    \n        return false;\n    }\n--\n",
        "text": "7\nОбъяснение:\nПредставленный фрагмент содержит 7 блоков (`block`), которые соответствуют 7",
        "token_cnt": 907
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script \nfunction checkFraud(transactionData){\n  let riskLevel = 'low';\n\n  \n  if (transactionData.amount > 1000) {\n    \n    const avgDailyAmount = calculateDailyAverage(transactionData);\n\n    \n    if (avgDailyAmount > 5000) {\n      \n      if (checkForIPDuplicates(transactionData)) {\n        \n        riskLevel = 'high';\n      }\n    }\n  }\n  \n  return riskLevel;\n}",
            "id": 87
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (character_literal))) (if_statement condition: (condition (binary_expression left: (field_access object: (identifier) field: (identifier)) right: (decimal_integer_literal))) consequence: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (if_statement condition: (condition (method_invocation name: (identifier) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal))))))))) (return_statement (identifier))))\n**\n\n--\nscript \nfunction checkFraud(transactionData){\n  let riskLevel = 'low';\n\n  \n  if (transactionData.amount > 1000) {\n    \n    const avgDailyAmount = calculateDailyAverage(transactionData);\n\n    \n    if (avgDailyAmount > 5000) {\n      \n      if (checkForIPDuplicates(transactionData)) {\n        \n        riskLevel = 'high';\n      }\n    }\n  }\n  \n  return riskLevel;\n}\n--\n",
        "text": "8\n\nОбъяснение:\n\nЦикломатическая сложность — это мера сложности программы, которая учитывает",
        "token_cnt": 437
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) {\n        \n        double bodyTemp = Double.parseDouble(JOptionPane.showInputDialog(\"Enter Body Temperature\"));\n\n        String output;\n        \n        if (bodyTemp <= 95) {\n            output = \"Cold Shower\";\n        } else if ((bodyTemp > 95) && (bodyTemp < 104)) {\n            output = \"Lukewarm shower\";\n        } else { \n            output = \"Hot shower\"; \n        }\n    \n        System.out.println(output); \n    }\n}",
            "id": 88
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal))) right: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (identifier)))))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) {\n        \n        double bodyTemp = Double.parseDouble(JOptionPane.showInputDialog(\"Enter Body Temperature\"));\n\n        String output;\n        \n        if (bodyTemp <= 95) {\n            output = \"Cold Shower\";\n        } else if ((bodyTemp > 95) && (bodyTemp < 104)) {\n            output = \"Lukewarm shower\";\n        } else { \n            output = \"Hot shower\"; \n        }\n    \n        System.out.println(output); \n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 585
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "System.out.println(\"Enter User Role (Engineer / Expert): \");\nString role = scan.nextLine();\n\n\nif (role.equalsIgnoreCase(\"engineer\")) {\n   ...\n} else if (role.equalsIgnoreCase(\"expert\")){\n  ..\n} else {\n  System.out.println(\"Invalid Input!\");\n}",
            "id": 89
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (ERROR)) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (ERROR)) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))\n**\n\n--\nSystem.out.println(\"Enter User Role (Engineer / Expert): \");\nString role = scan.nextLine();\n\n\nif (role.equalsIgnoreCase(\"engineer\")) {\n   ...\n} else if (role.equalsIgnoreCase(\"expert\")){\n  ..\n} else {\n  System.out.println(\"Invalid Input!\");\n}\n--\n",
        "text": "8\nОбъяснение:\nВ приведённом фрагменте кода можно выделить следующие блоки:\n1",
        "token_cnt": 357
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        \n        \n        System.out.print(\"Enter the order amount: \");\n        double orderAmount = scan.nextDouble();\n\n        \n        System.out.print(\"Enter the customer's country: \");\n        String customerCountry = scan.nextLine();\n\n        \n        boolean hasHighPaymentBias = false;\n        if (orderAmount > 100 && customerCountry.equals(\"US\")) {\n            hasHighPaymentBias = true;\n        } \n\n        \n        if (!hasHighPaymentBias) {\n            System.out.println(\"There was no high online shopping payment processing bias.\");\n            System.out.println(\"However, we recommend reviewing our systems and processes \" +\n                \"to identify areas where potential biases could arise and take steps to address them.\");\n        } else {\n            System.out.println(\"There was a high online shopping payment processing bias due to the following reasons:\");\n            System.out.println(\"- US customers tend to spend more than $100 on average\");\n            System.out.println(\"- Our system may unintentionally prioritize US orders over others\");\n            System.out.println(\"We plan to review our systems and update our policies accordingly.\");\n        }\n    }\n}",
            "id": 93
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true))))) (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (string_literal (string_fragment))))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        \n        \n        System.out.print(\"Enter the order amount: \");\n        double orderAmount = scan.nextDouble();\n\n        \n        System.out.print(\"Enter the customer's country: \");\n        String customerCountry = scan.nextLine();\n\n        \n        boolean hasHighPaymentBias = false;\n        if (orderAmount > 100 && customerCountry.equals(\"US\")) {\n            hasHighPaymentBias = true;\n        } \n\n        \n        if (!hasHighPaymentBias) {\n            System.out.println(\"There was no high online shopping payment processing bias.\");\n            System.out.println(\"However, we recommend reviewing our systems and processes \" +\n                \"to identify areas where potential biases could arise and take steps to address them.\");\n        } else {\n            System.out.println(\"There was a high online shopping payment processing bias due to the following reasons:\");\n            System.out.println(\"- US customers tend to spend more than $100 on average\");\n            System.out.println(\"- Our system may unintentionally prioritize US orders over others\");\n            System.out.println(\"We plan to review our systems and update our policies accordingly.\");\n        }\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 1136
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script \n\nlet numLikes = 10; \nlet numShares = 2; \nlet numRetweets = 5; \n\n\nlet totalInteractions = numLikes + numShares + numRetweets;\n\n\nif (totalInteractions <= .1 * expectedValue) {\n  console.log(\"Low user engagement detected!\");\n} else {\n  console.log(\"Normal user engagement.\");\n}",
            "id": 95
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (identifier)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (binary_expression left: (decimal_floating_point_literal) right: (identifier)))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))\n**\n\n--\nscript \n\nlet numLikes = 10; \nlet numShares = 2; \nlet numRetweets = 5; \n\n\nlet totalInteractions = numLikes + numShares + numRetweets;\n\n\nif (totalInteractions <= .1 * expectedValue) {\n  console.log(\"Low user engagement detected!\");\n} else {\n  console.log(\"Normal user engagement.\");\n}\n--\n",
        "text": "8\n\nОбъяснение:\n\nЦикломатическая сложность — это мера сложности программы, которая показывает",
        "token_cnt": 419
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class HealthCheckUp {\n\n    public static void main(String[] args) throws ParseException{\n        \n        String name = \"John Doe\";\n        Date dob = new SimpleDateFormat(\"yyyy-MM-dd\").parse(\"1980-02-15\");\n        int age = 40;\n\n        System.out.println(\"\\n\\uD83D\\uDCCE Running Check Ups \\n\");\n        \n        \n        boolean flag_lowregularexam = false;\n        if (age >= 65 && age <=74){\n            flag_lowregularexam=true;\n        } else if (age > 74){\n            flag_lowregularexam=false;\n        } \n\n        \n        if (flag_lowregularexam == true){\n            System.out.println(\"Scheduling routine medical examination for \"+name+\" who is above 65 years old.\");\n        } else {\n            System.out.println(\"No need of scheduling any further medical examination at this point!\");\n        }\n    }\n}",
            "id": 96
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (object_creation_expression type: (type_identifier) arguments: (argument_list (string_literal (string_fragment)))) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (escape_sequence) (escape_sequence) (escape_sequence) (string_fragment) (escape_sequence))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true)))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (false)))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (true))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment))))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))))\n**\n\n--\npublic class HealthCheckUp {\n\n    public static void main(String[] args) throws ParseException{\n        \n        String name = \"John Doe\";\n        Date dob = new SimpleDateFormat(\"yyyy-MM-dd\").parse(\"1980-02-15\");\n        int age = 40;\n\n        System.out.println(\"\\n\\uD83D\\uDCCE Running Check Ups \\n\");\n        \n        \n        boolean flag_lowregularexam = false;\n        if (age >= 65 && age <=74){\n            flag_lowregularexam=true;\n        } else if (age > 74){\n            flag_lowregularexam=false;\n        } \n\n        \n        if (flag_lowregularexam == true){\n            System.out.println(\"Scheduling routine medical examination for \"+name+\" who is above 65 years old.\");\n        } else {\n            System.out.println(\"No need of scheduling any further medical examination at this point!\");\n        }\n    }\n}\n--\n",
        "text": "5",
        "token_cnt": 903
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "/**\n     * Transforms high risk care clearing nasal passages algorithm based on condition\n     */\n    public void transformHighRiskCareClearNasalPassage() {\n        \n        if (patientAge < 1) {\n            System.out.println(\"Cannot perform procedure on patients under 1 year old.\");\n            return;\n        }\n\n        \n        String consentStatus = \"unknown\";\n        if (consentGiven == true) {\n            consentStatus = \"given\";\n        } else if (consentNotRequired == true) {\n            consentStatus = \"not required\";\n        } else {\n            System.out.println(\"Consent must be given or not required.\");\n            return;\n        }\n        System.out.printf(\"Consent status: %s\\n\", consentStatus);\n\n        \n        String procedureType = \"\";\n        if (riskLevel >= HIGH_RISK && consentStatus.equals(\"given\")) {\n            procedureType = \"standard\";\n        } else if (riskLevel >= MEDIUM_RISK && consentStatus.equals(\"given\") ||\n                   riskLevel <= LOW_RISK && consentStatus.equals(\"not required\")){\n            procedureType = \"enhanced\";\n        } else {\n            System.out.println(\"Procedure cannot be performed without valid consent.\");\n            return;\n        }\n        System.out.printf(\"Procedure type: %s\\n\", procedureType);\n\n        \n        if (procedureType.equals(\"standard\")) {\n            clearNasalPassageStandard();\n        } else if (procedureType.equals(\"enhanced\")) {\n            clearNasalPassageEnhanced();\n        } \n    }\n\n    private void clearNasalPassageStandard() {\n        System.out.println(\"Performing standard procedure...\");\n    }\n\n    private void clearNasalPassageEnhanced() {\n        System.out.println(\"Performing enhanced procedure...\");\n    }",
            "id": 97
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (block_comment) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters) body: (block (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (true))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (true))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence)) (identifier)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) right: (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence)) (identifier)))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list)))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list)))))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))\n**\n\n--\n/**\n     * Transforms high risk care clearing nasal passages algorithm based on condition\n     */\n    public void transformHighRiskCareClearNasalPassage() {\n        \n        if (patientAge < 1) {\n            System.out.println(\"Cannot perform procedure on patients under 1 year old.\");\n            return;\n        }\n\n        \n        String consentStatus = \"unknown\";\n        if (consentGiven == true) {\n            consentStatus = \"given\";\n        } else if (consentNotRequired == true) {\n            consentStatus = \"not required\";\n        } else {\n            System.out.println(\"Consent must be given or not required.\");\n            return;\n        }\n        System.out.printf(\"Consent status: %s\\n\", consentStatus);\n\n        \n        String procedureType = \"\";\n        if (riskLevel >= HIGH_RISK && consentStatus.equals(\"given\")) {\n            procedureType = \"standard\";\n        } else if (riskLevel >= MEDIUM_RISK && consentStatus.equals(\"given\") ||\n                   riskLevel <= LOW_RISK && consentStatus.equals(\"not required\")){\n            procedureType = \"enhanced\";\n        } else {\n            System.out.println(\"Procedure cannot be performed without valid consent.\");\n            return;\n        }\n        System.out.printf(\"Procedure type: %s\\n\", procedureType);\n\n        \n        if (procedureType.equals(\"standard\")) {\n            clearNasalPassageStandard();\n        } else if (procedureType.equals(\"enhanced\")) {\n            clearNasalPassageEnhanced();\n        } \n    }\n\n    private void clearNasalPassageStandard() {\n        System.out.println(\"Performing standard procedure...\");\n    }\n\n    private void clearNasalPassageEnhanced() {\n        System.out.println(\"Performing enhanced procedure...\");\n    }\n--\n",
        "text": "8",
        "token_cnt": 1492
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) {\n        int age = Integer.parseInt(args[0]); \n        String profession = args[1]; \n\n        boolean canUseQtips = true; \n        \n        if (age < 6){\n            System.out.println(\"Infant\");\n            canUseQtips=false;\n        } else if (age >= 6 && age <=12){\n           System.out.println(\"Toddler\"); \n           if (\"doctor\".equalsIgnoreCase(profession)){\n               canUseQtips=true; \n           } else{\n                canUseQtips= false; \n           }\n       } else if (age > 13){\n          System.out.println(\"Child or Adult \"); \n          if (\"dentist\" .equalsIgnoreCase(profession)) {\n              canUseQtips = true; \n          }\n      }\n\n      printResult(canUseQtips);\n\n    }\n\n    private static void printResult(boolean result) {\n        if (!result) {\n            System.out.println(\"Avoid using cotton swabs such as Q-tips unless supervised by a qualified health care provider.\");\n        } else {\n            System.out.println(\"Cotton Swabs like Q-tips can be used after consulting doctor regarding safety measures.\");\n        }\n    }\n}",
            "id": 98
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (array_access array: (identifier) index: (decimal_integer_literal)))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (true))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (false)))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (if_statement condition: (condition (method_invocation object: (string_literal (string_fragment)) name: (identifier) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true)))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (false)))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (if_statement condition: (condition (method_invocation object: (string_literal (string_fragment)) name: (identifier) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true))))))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier)))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier))) body: (block (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) {\n        int age = Integer.parseInt(args[0]); \n        String profession = args[1]; \n\n        boolean canUseQtips = true; \n        \n        if (age < 6){\n            System.out.println(\"Infant\");\n            canUseQtips=false;\n        } else if (age >= 6 && age <=12){\n           System.out.println(\"Toddler\"); \n           if (\"doctor\".equalsIgnoreCase(profession)){\n               canUseQtips=true; \n           } else{\n                canUseQtips= false; \n           }\n       } else if (age > 13){\n          System.out.println(\"Child or Adult \"); \n          if (\"dentist\" .equalsIgnoreCase(profession)) {\n              canUseQtips = true; \n          }\n      }\n\n      printResult(canUseQtips);\n\n    }\n\n    private static void printResult(boolean result) {\n        if (!result) {\n            System.out.println(\"Avoid using cotton swabs such as Q-tips unless supervised by a qualified health care provider.\");\n        } else {\n            System.out.println(\"Cotton Swabs like Q-tips can be used after consulting doctor regarding safety measures.\");\n        }\n    }\n}\n--\n",
        "text": "5",
        "token_cnt": 1177
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) throws IOException{\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String input;\n        while((input=br.readLine())!=null){\n            \n            int score = checkHygeine(input);\n            System.out.println(\"Score:\"+score);\n        }\n    }\n\n    private static int checkHygeine(String input) {\n        Scanner sc = new Scanner(input);\n        double total_risk =0;\n\n        \n        while (sc.hasNextDouble()){\n            Double risk = sc.nextDouble();\n            total_risk+=risk;\n        }\n        return Math.round(total_risk*100)/100;\n    }\n}",
            "id": 105
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (while_statement condition: (condition (binary_expression left: (parenthesized_expression (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) right: (null_literal))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (identifier))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))))) (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (identifier))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (while_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (assignment_expression left: (identifier) right: (identifier))))) (return_statement (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (binary_expression left: (identifier) right: (decimal_integer_literal)))) right: (decimal_integer_literal))))))))\n**\n\n--\nimport java.io.*;\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) throws IOException{\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String input;\n        while((input=br.readLine())!=null){\n            \n            int score = checkHygeine(input);\n            System.out.println(\"Score:\"+score);\n        }\n    }\n\n    private static int checkHygeine(String input) {\n        Scanner sc = new Scanner(input);\n        double total_risk =0;\n\n        \n        while (sc.hasNextDouble()){\n            Double risk = sc.nextDouble();\n            total_risk+=risk;\n        }\n        return Math.round(total_risk*100)/100;\n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 937
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class CheckHygiene {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter name:\");\n        String name = scan.nextLine();\n        System.out.println(\"Enter age:\");\n        int age = scan.nextInt();\n        System.out.println(\"Are you feeling unwell?\");\n        boolean ill = scan.nextBoolean();\n\n        \n        if (ill == true){\n            System.out.println(\"Checking hygiene...\");\n\n            \n            System.out.print(\"Have you washed your hands? \");\n            boolean handwash = scan.nextBoolean();\n            if (handwash == false){\n                System.out.println(\"Please wash your hands.\");\n            } else{\n                System.out.println(\"Great! Moving onto next step.\");\n            }\n\n            \n            System.out.print(\"Did you cover your nose and mouth when you coughed or sneezed? \");\n            boolean mask = scan.nextBoolean();\n            if (mask == false){\n                System.out.println(\"It's recommended to wear a face mask while sick.\");\n            } else{\n                System.out.println(\"Awesome job!\");\n            }\n        } else {\n            System.out.println(\"Thank you \" + name + \", you seem healthy!\");\n        }\n\n    }\n}",
            "id": 107
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (true))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (false))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (false))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment)))))))))))))\n**\n\n--\nimport java.util.*;\npublic class CheckHygiene {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter name:\");\n        String name = scan.nextLine();\n        System.out.println(\"Enter age:\");\n        int age = scan.nextInt();\n        System.out.println(\"Are you feeling unwell?\");\n        boolean ill = scan.nextBoolean();\n\n        \n        if (ill == true){\n            System.out.println(\"Checking hygiene...\");\n\n            \n            System.out.print(\"Have you washed your hands? \");\n            boolean handwash = scan.nextBoolean();\n            if (handwash == false){\n                System.out.println(\"Please wash your hands.\");\n            } else{\n                System.out.println(\"Great! Moving onto next step.\");\n            }\n\n            \n            System.out.print(\"Did you cover your nose and mouth when you coughed or sneezed? \");\n            boolean mask = scan.nextBoolean();\n            if (mask == false){\n                System.out.println(\"It's recommended to wear a face mask while sick.\");\n            } else{\n                System.out.println(\"Awesome job!\");\n            }\n        } else {\n            System.out.println(\"Thank you \" + name + \", you seem healthy!\");\n        }\n\n    }\n}\n--\n",
        "text": "5",
        "token_cnt": 1394
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class ExtremeHandWash {\n\n    public static void main(String[] args) {\n        \n        System.out.println(\"Do you give permission to perform hand washing analysis?\");\n        String consent = scan.nextLine();\n\n        \n        if (consent.equalsIgnoreCase(\"yes\")) {\n            \n            System.out.println(\"Great! Please rinse hands thoroughly under running water for at least 20 seconds.\");\n            System.out.println(\"Now dry them with single use paper towel and proceed further steps.\");\n\n            \n            System.out.println(\"Thank you for participating in our study!\");\n        } else if (consent.equalsIgnoreCase(\"no\")){\n            \n            System.out.println(\"We respect your decision not to participate in this study.\");\n            System.out.println(\"Please do visit again soon for more interesting research opportunities.\");\n        } else {\n            \n            System.out.println(\"Invalid Input! Kindly enter 'Yes' or 'No'.\");\n        }\n    }\n}",
            "id": 108
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))))\n**\n\n--\npublic class ExtremeHandWash {\n\n    public static void main(String[] args) {\n        \n        System.out.println(\"Do you give permission to perform hand washing analysis?\");\n        String consent = scan.nextLine();\n\n        \n        if (consent.equalsIgnoreCase(\"yes\")) {\n            \n            System.out.println(\"Great! Please rinse hands thoroughly under running water for at least 20 seconds.\");\n            System.out.println(\"Now dry them with single use paper towel and proceed further steps.\");\n\n            \n            System.out.println(\"Thank you for participating in our study!\");\n        } else if (consent.equalsIgnoreCase(\"no\")){\n            \n            System.out.println(\"We respect your decision not to participate in this study.\");\n            System.out.println(\"Please do visit again soon for more interesting research opportunities.\");\n        } else {\n            \n            System.out.println(\"Invalid Input! Kindly enter 'Yes' or 'No'.\");\n        }\n    }\n}\n--\n",
        "text": "4",
        "token_cnt": 802
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class NailTrimmer {\n    public static void main(String[] args) throws IOException {\n        \n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter name of person whose toe needs trimming\");\n        String name = scan.nextLine();\n\n        int age;\n        do{\n            System.out.print(\"Enter Age of \" + name + \": \");\n            try {\n                age = Integer.parseInt(scan.next());\n                break;\n            } catch (NumberFormatException e){\n                System.out.println(\"Invalid Input! Please enter valid number.\");\n                scan.next();\n            }\n        } while (true);\n        \n        boolean canCutNails = true;\n        if (age >=18 && age <=65) {\n            System.out.println(\"Can cut nails without any issues as per company policy!\");\n        } else if (age < 18 || age > 65) {\n            System.out.println(\"Need manager approval before proceeding further!\");\n            canCutNails = false;\n        } else {\n            System.out.println(\"Something went wrong! Check logs for more details...\");\n        }\n\n        if (canCutNails) {\n            System.out.println(\"\\nTrimming \" + name + \"'s toe nails now..\");\n        } else {\n            System.out.println(\"\\nOperation aborted due to unforeseen circumstances!\");\n        }\n\n    }\n}",
            "id": 111
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier))) (do_statement body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment)))))) (try_statement body: (block (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))) (break_statement)) (catch_clause (catch_formal_parameter (catch_type (type_identifier)) name: (identifier)) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))))))) condition: (parenthesized_expression (true))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (true))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (false)))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))) (if_statement condition: (condition (identifier)) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (escape_sequence) (string_fragment)) right: (identifier)) right: (string_literal (string_fragment))))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (escape_sequence) (string_fragment))))))))))))\n**\n\n--\npublic class NailTrimmer {\n    public static void main(String[] args) throws IOException {\n        \n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter name of person whose toe needs trimming\");\n        String name = scan.nextLine();\n\n        int age;\n        do{\n            System.out.print(\"Enter Age of \" + name + \": \");\n            try {\n                age = Integer.parseInt(scan.next());\n                break;\n            } catch (NumberFormatException e){\n                System.out.println(\"Invalid Input! Please enter valid number.\");\n                scan.next();\n            }\n        } while (true);\n        \n        boolean canCutNails = true;\n        if (age >=18 && age <=65) {\n            System.out.println(\"Can cut nails without any issues as per company policy!\");\n        } else if (age < 18 || age > 65) {\n            System.out.println(\"Need manager approval before proceeding further!\");\n            canCutNails = false;\n        } else {\n            System.out.println(\"Something went wrong! Check logs for more details...\");\n        }\n\n        if (canCutNails) {\n            System.out.println(\"\\nTrimming \" + name + \"'s toe nails now..\");\n        } else {\n            System.out.println(\"\\nOperation aborted due to unforeseen circumstances!\");\n        }\n\n    }\n}\n--\n",
        "text": "7",
        "token_cnt": 1361
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public void transformHighNailCare(String nailCondition) {\n        \n        String filingType;\n        int shapingStrengh;\n        \n        \n        if (nailCondition.equals(\"French\")) {\n            \n            filingType = \"Buff\";\n            shapingStrength = 2;\n        \n            System.out.println(\"Filigree file applied (\" + filingType + \") with shaping stregnth level set at: \" + shapingStrength);\n        } \n        else if (nailCondition.equals(\"Square\")) {\n            \n            filingType = \"File\";\n            shapingStrength = 3;\n        \n            System.out.println(\"Square shape achieved by filing down the corners (\" + filingType + \") with shaping stregnth level set at: \" + shapingStrength);\n        } \n        else if (nailCondition.equals(\"Almond\")) {\n            \n            filingType = \"Sand\";\n            shapingStrength = 4;\n        \n            System.out.println(\"Almond shape created through sanding away the edges (\" + filingType + \") with shaping stregnth level set at: \" + shapingStrength);\n        } \n        else {\n            System.out.println(\"Invalid condition specified.\");\n        }\n    }",
            "id": 112
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment))) right: (identifier)))))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment))) right: (identifier)))))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment))) right: (identifier)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))))\n**\n\n--\npublic void transformHighNailCare(String nailCondition) {\n        \n        String filingType;\n        int shapingStrengh;\n        \n        \n        if (nailCondition.equals(\"French\")) {\n            \n            filingType = \"Buff\";\n            shapingStrength = 2;\n        \n            System.out.println(\"Filigree file applied (\" + filingType + \") with shaping stregnth level set at: \" + shapingStrength);\n        } \n        else if (nailCondition.equals(\"Square\")) {\n            \n            filingType = \"File\";\n            shapingStrength = 3;\n        \n            System.out.println(\"Square shape achieved by filing down the corners (\" + filingType + \") with shaping stregnth level set at: \" + shapingStrength);\n        } \n        else if (nailCondition.equals(\"Almond\")) {\n            \n            filingType = \"Sand\";\n            shapingStrength = 4;\n        \n            System.out.println(\"Almond shape created through sanding away the edges (\" + filingType + \") with shaping stregnth level set at: \" + shapingStrength);\n        } \n        else {\n            System.out.println(\"Invalid condition specified.\");\n        }\n    }\n--\n",
        "text": "6",
        "token_cnt": 989
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script \n\nconst degree = \"Engineering\"; \nconst experience = \"Professional\"; \nconst safety = \"Low\"; \n\nlet enrollments;\nswitch(safety){\n    case 'High':\n        enrollments = {\n            bachelors: 40392, \n            masters: 17658, \n            doctoral: 5918 \n        };\n        break;\n\n    case 'Medium':\n        enrollments = {\n            bachelors: 31572, \n            masters: 13512, \n            doctoral: 4326 \n        };\n        break;\n    \n    default:\n        enrollments = {\n            bachelors: 22752, \n            masters: 9554, \n            doctoral: 2959 \n        }\n}\n\n\nconsole.log(`The number of students who graduated from a ${degree} program with at least ${experience} years of experience and chose ${safety} as their risk preference was:`);\nconsole.table({\n    Bachelor’s Degree: enrollments['bachelors'], \n    Master’s Degree:enrollments['masters'], \n    Doctoral Degree: enrollments['doctoral']\n});",
            "id": 119
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (character_literal)) (ERROR (identifier)) (block (labeled_statement (identifier) (ERROR (decimal_integer_literal)) (labeled_statement (identifier) (ERROR (decimal_integer_literal)) (labeled_statement (identifier) (expression_statement (decimal_integer_literal) (MISSING \";\")))))) (break_statement)) (switch_block_statement_group (switch_label (character_literal)) (ERROR (identifier)) (block (labeled_statement (identifier) (ERROR (decimal_integer_literal)) (labeled_statement (identifier) (ERROR (decimal_integer_literal)) (labeled_statement (identifier) (expression_statement (decimal_integer_literal) (MISSING \";\")))))) (break_statement)) (switch_block_statement_group (switch_label) (ERROR (identifier)) (block (labeled_statement (identifier) (ERROR (decimal_integer_literal)) (labeled_statement (identifier) (ERROR (decimal_integer_literal)) (labeled_statement (identifier) (expression_statement (decimal_integer_literal) (MISSING \";\"))))))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (ERROR (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)) (identifier) (type_identifier) (identifier)) (identifier) (ERROR (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (UNEXPECTED '`'))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR) (array_access array: (identifier) (ERROR (UNEXPECTED 8217) (identifier) (identifier) (identifier)) index: (character_literal)) (array_access array: (identifier) (ERROR (UNEXPECTED 8217) (identifier) (identifier) (identifier)) index: (character_literal)) (ERROR (type_identifier) (identifier)) (array_access array: (identifier) index: (character_literal)) (ERROR)))))\n**\n\n--\nscript \n\nconst degree = \"Engineering\"; \nconst experience = \"Professional\"; \nconst safety = \"Low\"; \n\nlet enrollments;\nswitch(safety){\n    case 'High':\n        enrollments = {\n            bachelors: 40392, \n            masters: 17658, \n            doctoral: 5918 \n        };\n        break;\n\n    case 'Medium':\n        enrollments = {\n            bachelors: 31572, \n            masters: 13512, \n            doctoral: 4326 \n        };\n        break;\n    \n    default:\n        enrollments = {\n            bachelors: 22752, \n            masters: 9554, \n            doctoral: 2959 \n        }\n}\n\n\nconsole.log(`The number of students who graduated from a ${degree} program with at least ${experience} years of experience and chose ${safety} as their risk preference was:`);\nconsole.table({\n    Bachelor’s Degree: enrollments['bachelors'], \n    Master’s Degree:enrollments['masters'], \n    Doctoral Degree: enrollments['doctoral']\n});\n--\n",
        "text": "30",
        "token_cnt": 1018
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n\nconsole.log(\"---dry run---\"); \n\nif (trustLevel === 'low') { \n  console.log(`Wash hands for ${handWashingTime} minutes`); \n} else if (trustLevel === 'medium') {\n  \n} else if (trustLevel === 'high'){ \n   \n    \n   console.log(`Use alcohol-based hand sanitizer gel after washing hands`); \n} \n\n\n\nswitch(true) { \n  case trustLevel==='low' && timeSpent < handWashingTime :\n    console.log(`${timeSpent / handWashingTime * 100}% of recommended time spent washed hands`); \n    break; \n  case trustLevel==='low' && timeSpent >= handWashingTime : \n    console.log('More than half of your time was spent cleaning'); \n    break; \n  default: \n    console.error('Invalid input detected!'); \n}",
            "id": 120
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (ERROR (type_identifier) (identifier) (ERROR (identifier))) (expression_statement (string_literal (string_fragment)) (ERROR)) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier)) (identifier) (ERROR (identifier) (identifier) (UNEXPECTED '`')))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block) alternative: (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier)) (binary_expression left: (identifier) (ERROR (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier)) right: (identifier)) (ERROR (UNEXPECTED '`'))))))))) (switch_expression condition: (parenthesized_expression (true)) body: (switch_block (switch_block_statement_group (switch_label (binary_expression left: (binary_expression left: (identifier) (ERROR) right: (character_literal)) right: (binary_expression left: (identifier) right: (identifier)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`')) (binary_expression left: (binary_expression left: (identifier) (ERROR (identifier)) right: (identifier)) right: (decimal_integer_literal)) (ERROR (ERROR (type_identifier) (identifier) (type_identifier) (identifier)) (type_identifier) (identifier) (UNEXPECTED '`'))))) (break_statement)) (switch_block_statement_group (switch_label (binary_expression left: (binary_expression left: (identifier) (ERROR) right: (character_literal)) right: (binary_expression left: (identifier) right: (identifier)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal)))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal))))))))\n**\n\n--\nscript\n\nconsole.log(\"---dry run---\"); \n\nif (trustLevel === 'low') { \n  console.log(`Wash hands for ${handWashingTime} minutes`); \n} else if (trustLevel === 'medium') {\n  \n} else if (trustLevel === 'high'){ \n   \n    \n   console.log(`Use alcohol-based hand sanitizer gel after washing hands`); \n} \n\n\n\nswitch(true) { \n  case trustLevel==='low' && timeSpent < handWashingTime :\n    console.log(`${timeSpent / handWashingTime * 100}% of recommended time spent washed hands`); \n    break; \n  case trustLevel==='low' && timeSpent >= handWashingTime : \n    console.log('More than half of your time was spent cleaning'); \n    break; \n  default: \n    console.error('Invalid input detected!'); \n}\n--\n",
        "text": "6",
        "token_cnt": 855
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class CleaningService {\n\n    public String checkCleanliness(String clothType) throws Exception{\n        \n        Map<String, String> stainRemovals = new HashMap<>();\n        stainRemovals.put(\"Blood\", \"Use cold water and mild detergent\");\n        stainRemovals.put(\"Coffee\", \"Blot up excess coffee with paper towels then apply white vinegar followed by warm water.\");\n        stainRemovals.put(\"Grass\", \"Soak garment in cold water mixed with laundry detergent until stain lifts; rinse thoroughly.\");\n\n        \n        if (stainRemovals.containsKey(clothType)) {\n            return stainRemovals.get(clothType);\n        } else {\n            throw new Exception(\"Invalid cloth type provided!\");\n        }\n    }\n}",
            "id": 123
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) (throws (type_identifier)) body: (block (local_variable_declaration type: (generic_type (type_identifier) (type_arguments (type_identifier) (type_identifier))) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (generic_type (type_identifier) (type_arguments)) arguments: (argument_list)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal (string_fragment))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal (string_fragment))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal (string_fragment))))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))) consequence: (block (return_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))) alternative: (block (throw_statement (object_creation_expression type: (type_identifier) arguments: (argument_list (string_literal (string_fragment))))))))))))\n**\n\n--\npublic class CleaningService {\n\n    public String checkCleanliness(String clothType) throws Exception{\n        \n        Map<String, String> stainRemovals = new HashMap<>();\n        stainRemovals.put(\"Blood\", \"Use cold water and mild detergent\");\n        stainRemovals.put(\"Coffee\", \"Blot up excess coffee with paper towels then apply white vinegar followed by warm water.\");\n        stainRemovals.put(\"Grass\", \"Soak garment in cold water mixed with laundry detergent until stain lifts; rinse thoroughly.\");\n\n        \n        if (stainRemovals.containsKey(clothType)) {\n            return stainRemovals.get(clothType);\n        } else {\n            throw new Exception(\"Invalid cloth type provided!\");\n        }\n    }\n}\n--\n",
        "text": "4",
        "token_cnt": 598
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n    function checkTransitSafety(schedule) {\n      let safe = true;\n  \n      \n      const timeOfDay = schedule.departureTime.getHours();\n      if (timeOfDay < 6 || timeOfDay > 18) {\n        return false;\n      }\n  \n      \n      if (schedule.passengers >= schedule.capacity * 0.75) {\n        return false;\n      }\n  \n      \n      if (schedule.delay > 30 * 60) {\n        return false;\n      }\n  \n      return safe;\n    }\n    \n    \n    const schedule1 = {\n      departureTime: new Date('2023-02-14T09:00:00'),\n      arrivalTime: new Date('2023-02-14T09:30:00'),\n      passengers: 20,\n      capacity: 30,\n      delay: 15 * 60   \n    };\n    console.log(checkTransitSafety(schedule1));  \n    \n    const schedule2 = {\n      departureTime: new Date('2023-02-14T18:00:00'),\n      arrivalTime: new Date('2023-02-14T18:30:00'),\n      passengers: 10,\n      capacity: 30,\n      delay: 0        \n    };\n    console.log(checkTransitSafety(schedule2));",
            "id": 125
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (true))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (return_statement (false)))) (if_statement condition: (condition (binary_expression left: (field_access object: (identifier) field: (identifier)) right: (binary_expression left: (field_access object: (identifier) field: (identifier)) right: (decimal_floating_point_literal)))) consequence: (block (return_statement (false)))) (if_statement condition: (condition (binary_expression left: (field_access object: (identifier) field: (identifier)) right: (binary_expression left: (decimal_integer_literal) right: (decimal_integer_literal)))) consequence: (block (return_statement (false)))) (return_statement (identifier))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (array_initializer (ERROR (identifier)) (object_creation_expression type: (type_identifier) arguments: (argument_list (character_literal))) (ERROR (identifier)) (object_creation_expression type: (type_identifier) arguments: (argument_list (character_literal))) (identifier) (ERROR (decimal_integer_literal)) (identifier) (ERROR (decimal_integer_literal)) (binary_expression left: (identifier) (ERROR (decimal_integer_literal)) right: (decimal_integer_literal))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation name: (identifier) arguments: (argument_list (identifier)))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (array_initializer (ERROR (identifier)) (object_creation_expression type: (type_identifier) arguments: (argument_list (character_literal))) (ERROR (identifier)) (object_creation_expression type: (type_identifier) arguments: (argument_list (character_literal))) (identifier) (ERROR (decimal_integer_literal)) (identifier) (ERROR (decimal_integer_literal)) (identifier) (ERROR (decimal_integer_literal))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation name: (identifier) arguments: (argument_list (identifier)))))))\n**\n\n--\nscript\n    function checkTransitSafety(schedule) {\n      let safe = true;\n  \n      \n      const timeOfDay = schedule.departureTime.getHours();\n      if (timeOfDay < 6 || timeOfDay > 18) {\n        return false;\n      }\n  \n      \n      if (schedule.passengers >= schedule.capacity * 0.75) {\n        return false;\n      }\n  \n      \n      if (schedule.delay > 30 * 60) {\n        return false;\n      }\n  \n      return safe;\n    }\n    \n    \n    const schedule1 = {\n      departureTime: new Date('2023-02-14T09:00:00'),\n      arrivalTime: new Date('2023-02-14T09:30:00'),\n      passengers: 20,\n      capacity: 30,\n      delay: 15 * 60   \n    };\n    console.log(checkTransitSafety(schedule1));  \n    \n    const schedule2 = {\n      departureTime: new Date('2023-02-14T18:00:00'),\n      arrivalTime: new Date('2023-02-14T18:30:00'),\n      passengers: 10,\n      capacity: 30,\n      delay: 0        \n    };\n    console.log(checkTransitSafety(schedule2));\n--\n",
        "text": "7\n\nОбъяснение:\n\nЦикломатическая сложность — это метрика, которая показывает,",
        "token_cnt": 1124
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static double calculateHairCareCost(String hairProblem) {\n    \n    HashMap<String, Double> treatmentCosts = new HashMap<>();\n    \n    treatmentCosts.put(\"Dandruff\", 50);\n    treatmentCosts.put(\"Itchy Scalp\", 75);\n    treatmentCosts.put(\"Split Ends\", 125);\n    treatmentCosts.put(\"Oily Scalp\", 90);\n    treatmentCosts.put(\"Frizzy Hair\", 130);\n\n    \n    if (hairProblem == null || hairProblem.equals(\"\")) {\n        return -1;\n    }\n\n    \n    else if (!treatmentCosts.containsKey(hairProblem)) {\n        System.out.println(\"Invalid Input\");\n        return -1;\n    }\n\n    \n    return treatmentCosts.get(hairProblem);\n}",
            "id": 128
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (generic_type (type_identifier) (type_arguments (type_identifier) (type_identifier))) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (generic_type (type_identifier) (type_arguments)) arguments: (argument_list)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (decimal_integer_literal)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (decimal_integer_literal)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (decimal_integer_literal)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (decimal_integer_literal)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (decimal_integer_literal)))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (null_literal)) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal))))) consequence: (block (return_statement (unary_expression operand: (decimal_integer_literal)))) alternative: (if_statement condition: (condition (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement (unary_expression operand: (decimal_integer_literal)))))) (return_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))))))\n**\n\n--\npublic static double calculateHairCareCost(String hairProblem) {\n    \n    HashMap<String, Double> treatmentCosts = new HashMap<>();\n    \n    treatmentCosts.put(\"Dandruff\", 50);\n    treatmentCosts.put(\"Itchy Scalp\", 75);\n    treatmentCosts.put(\"Split Ends\", 125);\n    treatmentCosts.put(\"Oily Scalp\", 90);\n    treatmentCosts.put(\"Frizzy Hair\", 130);\n\n    \n    if (hairProblem == null || hairProblem.equals(\"\")) {\n        return -1;\n    }\n\n    \n    else if (!treatmentCosts.containsKey(hairProblem)) {\n        System.out.println(\"Invalid Input\");\n        return -1;\n    }\n\n    \n    return treatmentCosts.get(hairProblem);\n}\n--\n",
        "text": "4\n\nОбъяснение:\nВ приведённом фрагменте кода можно выделить следующие базовые блоки:",
        "token_cnt": 788
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script \n\nlet age = 30; \nlet riskTolerance = \"moderate\"; \nlet portfolioValue = 10000; \nlet stockPrice = 50; \nlet cryptoPrice = 2000; \n\n\nif(riskTolerance === 'high') {\n  stockReturn = 8%; \n  cryptoReturn = 6%\n} else if(riskTolerance === 'moderate'){\n  stockReturn = 4%; \n  cryptoReturn = 9%\n} else{\n  stockReturn = 7%; \n  cryptoReturn = 12%\n}\n\n\nif((stockPrice * (1 + stockReturn)) > cryptoPrice){\n    \n    console.log(\"Selling stock and purchasing crypto\")\n    portfolioValue -= stockPrice;\n    portfolioValue += cryptoPrice;\n}",
            "id": 130
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (decimal_integer_literal) (ERROR) right: (assignment_expression left: (identifier) right: (binary_expression left: (decimal_integer_literal) (ERROR (parenthesized_expression (binary_expression left: (identifier) (ERROR) right: (character_literal)))) right: (assignment_expression left: (identifier) right: (decimal_integer_literal)))))) (ERROR)) (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (decimal_integer_literal) (ERROR) right: (assignment_expression left: (identifier) right: (binary_expression left: (decimal_integer_literal) (ERROR) right: (assignment_expression left: (identifier) right: (binary_expression left: (decimal_integer_literal) (ERROR (parenthesized_expression (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (parenthesized_expression (binary_expression left: (decimal_integer_literal) right: (identifier))))) right: (identifier))) (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) right: (assignment_expression left: (identifier) right: (identifier))))))))) (expression_statement (assignment_expression left: (identifier) right: (identifier))))))\n**\n\n--\nscript \n\nlet age = 30; \nlet riskTolerance = \"moderate\"; \nlet portfolioValue = 10000; \nlet stockPrice = 50; \nlet cryptoPrice = 2000; \n\n\nif(riskTolerance === 'high') {\n  stockReturn = 8%; \n  cryptoReturn = 6%\n} else if(riskTolerance === 'moderate'){\n  stockReturn = 4%; \n  cryptoReturn = 9%\n} else{\n  stockReturn = 7%; \n  cryptoReturn = 12%\n}\n\n\nif((stockPrice * (1 + stockReturn)) > cryptoPrice){\n    \n    console.log(\"Selling stock and purchasing crypto\")\n    portfolioValue -= stockPrice;\n    portfolioValue += cryptoPrice;\n}\n--\n",
        "text": "8\n\nДля вычисления цикломатической сложности используется формула: **V(G) = P –",
        "token_cnt": 773
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static double calculateHighTravel(List<String> flightData) {\n        \n        int numFlights = 0;\n        double totalDistance = 0.0;\n\n        \n        for (String flight : flightData) {\n            String[] parts = flight.split(\",\");\n\n            \n            boolean highTravel = false;\n            int distance = Integer.parseInt(parts[2]);\n            if (distance > 1500) {\n                highTravel = true;\n            }\n\n            \n            if (highTravel) {\n                numFlights++;\n                totalDistance += distance;\n            }\n        }\n\n        \n        return totalDistance / numFlights;\n    }",
            "id": 131
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (generic_type (type_identifier) (type_arguments (type_identifier))) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_floating_point_literal))) (enhanced_for_statement type: (type_identifier) name: (identifier) value: (identifier) body: (block (local_variable_declaration type: (array_type element: (type_identifier) dimensions: (dimensions)) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true))))) (if_statement condition: (condition (identifier)) consequence: (block (expression_statement (update_expression (identifier))) (expression_statement (assignment_expression left: (identifier) right: (identifier))))))) (return_statement (binary_expression left: (identifier) right: (identifier))))))\n**\n\n--\npublic static double calculateHighTravel(List<String> flightData) {\n        \n        int numFlights = 0;\n        double totalDistance = 0.0;\n\n        \n        for (String flight : flightData) {\n            String[] parts = flight.split(\",\");\n\n            \n            boolean highTravel = false;\n            int distance = Integer.parseInt(parts[2]);\n            if (distance > 1500) {\n                highTravel = true;\n            }\n\n            \n            if (highTravel) {\n                numFlights++;\n                totalDistance += distance;\n            }\n        }\n\n        \n        return totalDistance / numFlights;\n    }\n--\n",
        "text": "6",
        "token_cnt": 644
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n    function calculateLowFlossing() {\n      \n      const numberOfStrands = prompt(\"How many strands of dental floss do you typically use?\");\n      const preferenceForWaxedOrUnwaxed = prompt(\"Do you prefer waxed or unwaxed floss?\");\n\n      let ethicalDilemma;\n      if (numberOfStrands === \"1\" && preferenceForWaxedOrUnwaxed === \"unwaxed\") {\n        ethicalDilemma = \"Using only one strand of unwaxed dental floss can cause gum recession over time.\";\n      } else if (numberOfStrands > 4 || (numberOfStrands === \"4\" && preferenceForWaxedOrUnwaxed !== \"waxed\")) {\n        ethicalDilemma = \"Using more than four strands of non-waxed dental floss may not clean your teeth properly, increasing your risk of cavities and other dental problems.\"\n      } else {\n        ethicalDilemma = \"\";\n      }\n  \n      console.log(`Based on your responses, the potential ethical dilemma associated with low flossing habits is ${ethicalDilemma}`);\n    }\n    \n    calculateLowFlossing();",
            "id": 132
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration type: (type_identifier) (ERROR (identifier)) name: (identifier) parameters: (formal_parameters) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) (ERROR) right: (string_literal (string_fragment))) right: (binary_expression left: (identifier) (ERROR) right: (string_literal (string_fragment))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) (ERROR) right: (string_literal (string_fragment))) right: (binary_expression left: (identifier) (ERROR) right: (string_literal (string_fragment))))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))) (MISSING \";\"))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal)))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier)) (identifier) (ERROR (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (type_identifier) (identifier) (type_identifier) (identifier)) (identifier) (ERROR (identifier) (UNEXPECTED '`'))))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list))))\n**\n\n--\nscript\n    function calculateLowFlossing() {\n      \n      const numberOfStrands = prompt(\"How many strands of dental floss do you typically use?\");\n      const preferenceForWaxedOrUnwaxed = prompt(\"Do you prefer waxed or unwaxed floss?\");\n\n      let ethicalDilemma;\n      if (numberOfStrands === \"1\" && preferenceForWaxedOrUnwaxed === \"unwaxed\") {\n        ethicalDilemma = \"Using only one strand of unwaxed dental floss can cause gum recession over time.\";\n      } else if (numberOfStrands > 4 || (numberOfStrands === \"4\" && preferenceForWaxedOrUnwaxed !== \"waxed\")) {\n        ethicalDilemma = \"Using more than four strands of non-waxed dental floss may not clean your teeth properly, increasing your risk of cavities and other dental problems.\"\n      } else {\n        ethicalDilemma = \"\";\n      }\n  \n      console.log(`Based on your responses, the potential ethical dilemma associated with low flossing habits is ${ethicalDilemma}`);\n    }\n    \n    calculateLowFlossing();\n--\n",
        "text": "6\nОбъяснение:\nПредставленный фрагмент содержит 6 путей выполнения, которые можно пройти от корня",
        "token_cnt": 850
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number of times washed hands today:\");\n        int numHandWashToday = scan.nextInt();\n\n        \n        if (numHandWashToday <=3){\n            double probabilityOfDisease = .01 * Math.pow((double)(4 - numHandWashToday),2); \n            System.out.printf(\"%nProbability of getting disease due to insufficient hand washing:%f%%\",probabilityOfDisease*100);\n        } else{\n            System.out.print(\"No need to worry.\");\n        }\n        \n        \n    }\n}",
            "id": 135
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (decimal_floating_point_literal) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (cast_expression type: (floating_point_type) value: (parenthesized_expression (binary_expression left: (decimal_integer_literal) right: (identifier)))) (decimal_integer_literal)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (binary_expression left: (identifier) right: (decimal_integer_literal)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number of times washed hands today:\");\n        int numHandWashToday = scan.nextInt();\n\n        \n        if (numHandWashToday <=3){\n            double probabilityOfDisease = .01 * Math.pow((double)(4 - numHandWashToday),2); \n            System.out.printf(\"%nProbability of getting disease due to insufficient hand washing:%f%%\",probabilityOfDisease*100);\n        } else{\n            System.out.print(\"No need to worry.\");\n        }\n        \n        \n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 723
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class UpdateLowSocialMediaTrendAnalysis {\n\n    public static void main(String[] args) {\n        int transparency = getTransparencyLevel();\n\n        \n        switch (transparency){\n            case HIGH:\n                System.out.println(\"Updating high transparency levels\");\n                break;\n                \n            case MEDIUM: \n                System.out.println(\"Updating medium transparency levels\");\n                break;\n\n            default:\n                System.out.println(\"Updating low transparency levels\");\n        }\n    }\n\n    private static int getTransparencyLevel() {\n        return 10;\n    }\n}",
            "id": 142
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list)))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (identifier)) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label (identifier)) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))) (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters) body: (block (return_statement (decimal_integer_literal)))))))\n**\n\n--\npublic class UpdateLowSocialMediaTrendAnalysis {\n\n    public static void main(String[] args) {\n        int transparency = getTransparencyLevel();\n\n        \n        switch (transparency){\n            case HIGH:\n                System.out.println(\"Updating high transparency levels\");\n                break;\n                \n            case MEDIUM: \n                System.out.println(\"Updating medium transparency levels\");\n                break;\n\n            default:\n                System.out.println(\"Updating low transparency levels\");\n        }\n    }\n\n    private static int getTransparencyLevel() {\n        return 10;\n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 556
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "/**\n     * Checks whether extreme eye hygiene measures need to be taken based on the given consent status\n     * \n     * @param hasConsent Indicates whether patient has provided their explicit consent for treatment\n     * @return True if extreme eye hygiene measures are required, false otherwise\n     */\n    public static boolean checkExtremeEyeHygiene(boolean hasConsent) {\n        \n        if (!hasConsent) {\n            return false;\n        }\n    \n        \n        boolean needsExtremeMeasures = true;\n        \n        \n        return needsExtremeMeasures;\n    }",
            "id": 150
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (block_comment) (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier))) body: (block (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (block (return_statement (false)))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (true))) (return_statement (identifier)))))\n**\n\n--\n/**\n     * Checks whether extreme eye hygiene measures need to be taken based on the given consent status\n     * \n     * @param hasConsent Indicates whether patient has provided their explicit consent for treatment\n     * @return True if extreme eye hygiene measures are required, false otherwise\n     */\n    public static boolean checkExtremeEyeHygiene(boolean hasConsent) {\n        \n        if (!hasConsent) {\n            return false;\n        }\n    \n        \n        boolean needsExtremeMeasures = true;\n        \n        \n        return needsExtremeMeasures;\n    }\n--\n",
        "text": "5\n\nОбъяснение:\nВ приведённом фрагменте представлен метод `checkExtremeEyeHy",
        "token_cnt": 287
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number of people present:\");\n        int n = scan.nextInt();\n\n        \n        if (n == 1){\n            System.out.println(\"No special measures required.\");\n        } \n        \n        else{ \n            System.out.print(\"Is everyone wearing mask? \");\n            boolean mask = scan.nextBoolean();\n\n            if (!mask){\n                System.out.println(\"At least one person is not wearing mask\");\n\n                \n                System.out.print(\"Has common area been recently cleaned and disinfected? \");\n                boolean clean = scan.nextBoolean();\n            \n                if (!clean){\n                    System.out.println(\"Common areas needs cleaning before other can enter\");\n                }\n                else{ \n                    System.out.println(\"All precautions have been enforced!\");\n                }\n                \n            }   \n            else{ \n                System.out.println(\"Everyone is following safety protocols!\");\n            }\n        } \n    }\n}",
            "id": 153
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number of people present:\");\n        int n = scan.nextInt();\n\n        \n        if (n == 1){\n            System.out.println(\"No special measures required.\");\n        } \n        \n        else{ \n            System.out.print(\"Is everyone wearing mask? \");\n            boolean mask = scan.nextBoolean();\n\n            if (!mask){\n                System.out.println(\"At least one person is not wearing mask\");\n\n                \n                System.out.print(\"Has common area been recently cleaned and disinfected? \");\n                boolean clean = scan.nextBoolean();\n            \n                if (!clean){\n                    System.out.println(\"Common areas needs cleaning before other can enter\");\n                }\n                else{ \n                    System.out.println(\"All precautions have been enforced!\");\n                }\n                \n            }   \n            else{ \n                System.out.println(\"Everyone is following safety protocols!\");\n            }\n        } \n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 1068
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static void main(String[] args) {\n        \n        System.out.println(\"Enter number of days since last handwashing:\");\n        int numDays = scan.nextInt();\n\n        \n        String method;\n        if (numDays < 2) {\n            method = \"dryWipe\";\n        } else {\n            method = \"moistenedTowels\";\n        }\n        \n        \n        System.out.println(\"Method used: \" + method);\n    }\n}",
            "id": 156
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))) (ERROR))\n**\n\n--\npublic static void main(String[] args) {\n        \n        System.out.println(\"Enter number of days since last handwashing:\");\n        int numDays = scan.nextInt();\n\n        \n        String method;\n        if (numDays < 2) {\n            method = \"dryWipe\";\n        } else {\n            method = \"moistenedTowels\";\n        }\n        \n        \n        System.out.println(\"Method used: \" + method);\n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 477
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public String transformExtremeBathingRoutine(String hairType, boolean hasSensitiveSkin) {\n        StringBuilder sb = new StringBuilder();\n        \n        \n        sb.append(\"# Extreme Bathing Routine: Caring for Hair and Skin\\n\");\n        sb.append(\"This section will provide guidance on how to care for \");\n        if (hairType.equals(\"long\")) {\n            sb.append(\"long \");\n        } else if (hairType.equals(\"short\")) {\n            sb.append(\"short \");\n        } else {\n            sb.append(\"other types of \");    \n        }\n        sb.append(\"hair while participating in extreme bathing activities.\\n\\n\");\n\n        \n        if (!hasSensitiveSkin) {\n            sb.append(\"If you do not have sensitive skin, you can simply rinse off any excess saltwater after completing your bathing activity.\");\n        } else {\n            sb.append(\"For those with sensitive skin, we recommend avoiding long exposure to chlorinated water as much as possible,\\nand following these additional steps:\\n\\n\");\n\n            \n            sb.append(\"- Use a gentle moisturizing shampoo and conditioner designed for dry or damaged hair.\\n\");\n            sb.append(\"- Rinse thoroughly after swimming or taking a spa treatment to remove any residue from chlorine or other chemicals.\\n\");\n            sb.append(\"- Apply a hydrating leave-in conditioner or mask once a week to help repair damage caused by chlorine and other harsh ingredients.\\n\");\n            sb.append(\"- Consider applying a rich body cream or oil immediately after getting out of the tub or shower to seal in moisture.\\n\\n\");\n        }\n    \n        return sb.toString();\n    }",
            "id": 160
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (boolean_type) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence) (escape_sequence))))) (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence) (string_fragment) (escape_sequence) (escape_sequence))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence) (escape_sequence))))))) (return_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))))))\n**\n\n--\npublic String transformExtremeBathingRoutine(String hairType, boolean hasSensitiveSkin) {\n        StringBuilder sb = new StringBuilder();\n        \n        \n        sb.append(\"# Extreme Bathing Routine: Caring for Hair and Skin\\n\");\n        sb.append(\"This section will provide guidance on how to care for \");\n        if (hairType.equals(\"long\")) {\n            sb.append(\"long \");\n        } else if (hairType.equals(\"short\")) {\n            sb.append(\"short \");\n        } else {\n            sb.append(\"other types of \");    \n        }\n        sb.append(\"hair while participating in extreme bathing activities.\\n\\n\");\n\n        \n        if (!hasSensitiveSkin) {\n            sb.append(\"If you do not have sensitive skin, you can simply rinse off any excess saltwater after completing your bathing activity.\");\n        } else {\n            sb.append(\"For those with sensitive skin, we recommend avoiding long exposure to chlorinated water as much as possible,\\nand following these additional steps:\\n\\n\");\n\n            \n            sb.append(\"- Use a gentle moisturizing shampoo and conditioner designed for dry or damaged hair.\\n\");\n            sb.append(\"- Rinse thoroughly after swimming or taking a spa treatment to remove any residue from chlorine or other chemicals.\\n\");\n            sb.append(\"- Apply a hydrating leave-in conditioner or mask once a week to help repair damage caused by chlorine and other harsh ingredients.\\n\");\n            sb.append(\"- Consider applying a rich body cream or oil immediately after getting out of the tub or shower to seal in moisture.\\n\\n\");\n        }\n    \n        return sb.toString();\n    }\n--\n",
        "text": "6",
        "token_cnt": 1136
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public int calculateHighTravelFlightReservation(String userName, String password){\n        \n        if (userName == null || password == null ) {\n            return -1;\n        }\n\n        \n        if (userName.equals(\"beginner\")) {\n            return 500;\n        } else if (userName.equals(\"intermediate\")){\n            return 2500;\n        } else {\n            return 7500;\n        }\n\n    }\n}",
            "id": 161
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (type_identifier) name: (identifier))) body: (block (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (null_literal)) right: (binary_expression left: (identifier) right: (null_literal)))) consequence: (block (return_statement (unary_expression operand: (decimal_integer_literal))))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (return_statement (decimal_integer_literal))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (return_statement (decimal_integer_literal))) alternative: (block (return_statement (decimal_integer_literal))))))) (ERROR))\n**\n\n--\npublic int calculateHighTravelFlightReservation(String userName, String password){\n        \n        if (userName == null || password == null ) {\n            return -1;\n        }\n\n        \n        if (userName.equals(\"beginner\")) {\n            return 500;\n        } else if (userName.equals(\"intermediate\")){\n            return 2500;\n        } else {\n            return 7500;\n        }\n\n    }\n}\n--\n",
        "text": "6\n\nОбъяснение:\nВ приведённом фрагменте кода содержится 6 путей выполнения,",
        "token_cnt": 411
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public String cleanEars(String input) {\n    \n    input = input.trim();\n    \n    \n    boolean leftEar = false;\n    int index = input.indexOf(\"left\");\n    if (index != -1){\n        leftEar = true;\n    } else{\n        index = input.toLowerCase().indexOf(\"right\");    \n        if (index != -1){\n            leftEar = false;\n        }    \n    }    \n\n    \n    StringBuilder output = new StringBuilder();\n    switch (true) {\n        case !leftEar && input.contains(\"dirty\"): \n            \n            break;\n        case leftEar && input.contains(\"clean\") || input.contains(\"sterile\"): \n            \n            break;\n        default: \n            \n            output.append((leftEar ? \"Left \": \"Right \") + \"Ear Cleared \");\n            break;\n    }   \n    \n    return output.toString();\n}",
            "id": 166
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (unary_expression operand: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true)))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (unary_expression operand: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (false))))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list)))) (switch_expression condition: (parenthesized_expression (true)) body: (switch_block (switch_block_statement_group (switch_label (binary_expression left: (unary_expression operand: (identifier)) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (break_statement)) (switch_block_statement_group (switch_label (binary_expression left: (binary_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (binary_expression left: (parenthesized_expression (ternary_expression condition: (identifier) consequence: (string_literal (string_fragment)) alternative: (string_literal (string_fragment)))) right: (string_literal (string_fragment)))))) (break_statement)))) (return_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))))))\n**\n\n--\npublic String cleanEars(String input) {\n    \n    input = input.trim();\n    \n    \n    boolean leftEar = false;\n    int index = input.indexOf(\"left\");\n    if (index != -1){\n        leftEar = true;\n    } else{\n        index = input.toLowerCase().indexOf(\"right\");    \n        if (index != -1){\n            leftEar = false;\n        }    \n    }    \n\n    \n    StringBuilder output = new StringBuilder();\n    switch (true) {\n        case !leftEar && input.contains(\"dirty\"): \n            \n            break;\n        case leftEar && input.contains(\"clean\") || input.contains(\"sterile\"): \n            \n            break;\n        default: \n            \n            output.append((leftEar ? \"Left \": \"Right \") + \"Ear Cleared \");\n            break;\n    }   \n    \n    return output.toString();\n}\n--\n",
        "text": "4",
        "token_cnt": 965
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class UpdateLowSocialMediaContentRecommendationForAnalysis {\n    \n        \n        private double reliability;\n        \n        \n        private String contentRecommendation;\n    \n        /**\n         * This method updates the low social media content recommendation \n         * based on analysis for beginner users given the current reliability score.  \n         */\n        public void update() {\n            switch (reliability) {\n                case 0 - 1 :\n                    contentRecommendation = \"Use Twitter as it has high engagement rates compared to other platforms\";\n                    break;\n    \n                case 2 - 3 : \n                    contentRecommendation = \"Instagram Stories can also work well but depends on niche\";\n                    break;\n    \n                default:\n                    contentRecommendation =\"Facebook Ads might help reach wider audience depending on target demographics \";    \n            }\n        }\n    \n    }",
            "id": 169
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (field_declaration (modifiers) type: (floating_point_type) declarator: (variable_declarator name: (identifier))) (field_declaration (modifiers) type: (type_identifier) declarator: (variable_declarator name: (identifier))) (block_comment) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters) body: (block (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (binary_expression left: (decimal_integer_literal) right: (decimal_integer_literal))) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (break_statement)) (switch_block_statement_group (switch_label (binary_expression left: (decimal_integer_literal) right: (decimal_integer_literal))) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))))))))))\n**\n\n--\npublic class UpdateLowSocialMediaContentRecommendationForAnalysis {\n    \n        \n        private double reliability;\n        \n        \n        private String contentRecommendation;\n    \n        /**\n         * This method updates the low social media content recommendation \n         * based on analysis for beginner users given the current reliability score.  \n         */\n        public void update() {\n            switch (reliability) {\n                case 0 - 1 :\n                    contentRecommendation = \"Use Twitter as it has high engagement rates compared to other platforms\";\n                    break;\n    \n                case 2 - 3 : \n                    contentRecommendation = \"Instagram Stories can also work well but depends on niche\";\n                    break;\n    \n                default:\n                    contentRecommendation =\"Facebook Ads might help reach wider audience depending on target demographics \";    \n            }\n        }\n    \n    }\n--\n",
        "text": "6\n\nОбъяснение: цикломатическая сложность — это метрика, которая оценивает количество линейно независимых",
        "token_cnt": 538
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter 'styling' for hair styling services\");\n        System.out.println(\"Enter 'trimming' for hair trimming service\");\n        String choice = scan.nextLine();\n\n        \n        switch (choice){\n            case \"styling\":\n                System.out.println(\"Extreme Hair Care provides professional hairstylists who can create any look from classic to avant garde.\"); \n                break;\n\n            case \"trimming\":\n                System.out.println(\"Our expert barbers will give you a precise trim that complements your face shape and lifestyle.\"); \n                break;\n                \n            default :\n                System.out.println(\"Invalid Input! Please try again.\");    \n        }\n\n    }\n}",
            "id": 171
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter 'styling' for hair styling services\");\n        System.out.println(\"Enter 'trimming' for hair trimming service\");\n        String choice = scan.nextLine();\n\n        \n        switch (choice){\n            case \"styling\":\n                System.out.println(\"Extreme Hair Care provides professional hairstylists who can create any look from classic to avant garde.\"); \n                break;\n\n            case \"trimming\":\n                System.out.println(\"Our expert barbers will give you a precise trim that complements your face shape and lifestyle.\"); \n                break;\n                \n            default :\n                System.out.println(\"Invalid Input! Please try again.\");    \n        }\n\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 768
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script \nfunction calculateEarHygiene(dryRun = false){\n  \n  let result = \"\";\n  const waterPressure = 10;    \n  const timePerPressureCycle = 3;   \n\n  \n  if (!dryRun) {\n    console.log(\"Dry Run: Starting...\");\n\n    \n    simulateWaterFlow(waterPressure, timePerPressureCycle);\n    \n    console.log(`Dry Run: Finished`);\n  }\n  \n  \n  else {\n    \n    if (checkWaterPressure()) {\n      \n      simulateWaterFlow(waterPressure, timePerPressureCycle);\n\n      \n      result += \"Success! No bacteria detected.\\n\";\n    } \n\n    \n    else {\n      result += \"Insufficient water pressure. Operation cancelled.\";\n    }\n  }\n\n  return result;\n}\n\n\n\nfunction simulateWaterFlow(pressure, duration) {\n  console.log(`Simulating water flow at ${pressure} psi for ${duration} seconds...`);\n\n  \n\n} \n\n\n\nfunction checkWaterPressure() {\n  return true; \n}",
            "id": 174
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (assignment_expression left: (identifier) right: (false)))) (MISSING \";\")) (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier)) (identifier) (ERROR (UNEXPECTED '`')))))) alternative: (block (if_statement condition: (condition (method_invocation name: (identifier) arguments: (argument_list))) consequence: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier)))) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment) (escape_sequence))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))))))) (return_statement (identifier))) (method_declaration type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) (ERROR) name: (identifier))) body: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier)) (identifier) (ERROR (identifier) (identifier) (identifier) (identifier) (identifier) (UNEXPECTED '`'))))))) (method_declaration type: (type_identifier) name: (identifier) parameters: (formal_parameters) body: (block (return_statement (true)))))\n**\n\n--\nscript \nfunction calculateEarHygiene(dryRun = false){\n  \n  let result = \"\";\n  const waterPressure = 10;    \n  const timePerPressureCycle = 3;   \n\n  \n  if (!dryRun) {\n    console.log(\"Dry Run: Starting...\");\n\n    \n    simulateWaterFlow(waterPressure, timePerPressureCycle);\n    \n    console.log(`Dry Run: Finished`);\n  }\n  \n  \n  else {\n    \n    if (checkWaterPressure()) {\n      \n      simulateWaterFlow(waterPressure, timePerPressureCycle);\n\n      \n      result += \"Success! No bacteria detected.\\n\";\n    } \n\n    \n    else {\n      result += \"Insufficient water pressure. Operation cancelled.\";\n    }\n  }\n\n  return result;\n}\n\n\n\nfunction simulateWaterFlow(pressure, duration) {\n  console.log(`Simulating water flow at ${pressure} psi for ${duration} seconds...`);\n\n  \n\n} \n\n\n\nfunction checkWaterPressure() {\n  return true; \n}\n--\n",
        "text": "6",
        "token_cnt": 893
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public void updateExtremeBathingRoutine(String hairType, String skinType){\n        \n        if (hairType == null || hairType.isEmpty()\n                || skinType == null || skinType.isEmpty()) {\n            throw new IllegalArgumentException(\"Invalid parameter passed\");\n        }\n        \n        \n        switch (bias) {\n            case \"Oily\":\n                System.out.println(\"Use oily hair shampoo and face wash.\");\n                break;\n                \n            case \"Dry\":\n                System.out.println(\"Use dry hair shampoo and moisturizing cream.\");\n                break;\n                \n            default:\n                System.out.println(\"Please enter valid bias value (oily/dry).\");\n        }\n    }\n}",
            "id": 175
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (type_identifier) name: (identifier))) body: (block (if_statement condition: (condition (binary_expression left: (binary_expression left: (binary_expression left: (binary_expression left: (identifier) right: (null_literal)) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))) right: (binary_expression left: (identifier) right: (null_literal))) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) consequence: (block (throw_statement (object_creation_expression type: (type_identifier) arguments: (argument_list (string_literal (string_fragment))))))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))) (ERROR))\n**\n\n--\npublic void updateExtremeBathingRoutine(String hairType, String skinType){\n        \n        if (hairType == null || hairType.isEmpty()\n                || skinType == null || skinType.isEmpty()) {\n            throw new IllegalArgumentException(\"Invalid parameter passed\");\n        }\n        \n        \n        switch (bias) {\n            case \"Oily\":\n                System.out.println(\"Use oily hair shampoo and face wash.\");\n                break;\n                \n            case \"Dry\":\n                System.out.println(\"Use dry hair shampoo and moisturizing cream.\");\n                break;\n                \n            default:\n                System.out.println(\"Please enter valid bias value (oily/dry).\");\n        }\n    }\n}\n--\n",
        "text": "4\nОбъяснение:\nВ приведённом фрагменте кода можно выделить четыре базовых пути выполнения:",
        "token_cnt": 637
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\n\n    public class BathingRoutine {\n        private static final double MAX_DRYING_TIME = 30; \n\n        public static void main(String[] args) {\n            Scanner scanner = new Scanner(System.in);\n\n            System.out.println(\"Please enter your body temperature in degrees Celsius:\");\n            Double tempC = scanner.nextDouble();\n\n            boolean dry = false;\n            int timeSpentDrying = 0;\n\n            while (!dry && timeSpentDrying < MAX_DRYING_TIME) {\n                if (isDry(tempC)) {\n                    dry = true;\n                } else {\n                    System.out.printf(\"It seems like you need to stay in longer! Your current \" +\n                            \"temperature is %f°C.\\n\", tempC);\n                    timeSpentDrying++;\n\n                    \n                    try {\n                        Thread.sleep((timeSpentDrying * 1000));\n                    } catch (InterruptedException e) {}\n                }\n            }\n\n            if (dry) {\n                System.out.println(\"Congratulations, you seem to have successfully dried!\");\n            } else {\n                System.out.println(\"Sorry, but it looks like you haven't been able to dry off.\");\n            }\n        }\n\n        /**\n         * Returns true if the given temperature indicates complete dryness, otherwise returns false.\n         */\n        private static boolean isDry(double tempC) {\n            return tempC <= 35.9;\n        }\n    }",
            "id": 184
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (field_declaration (modifiers) type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (while_statement condition: (condition (binary_expression left: (unary_expression operand: (identifier)) right: (binary_expression left: (identifier) right: (identifier)))) body: (block (if_statement condition: (condition (method_invocation name: (identifier) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true)))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (string_literal (string_fragment) (escape_sequence))) (identifier)))) (expression_statement (update_expression (identifier))) (try_statement body: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal))))))) (catch_clause (catch_formal_parameter (catch_type (type_identifier)) name: (identifier)) body: (block))))))) (if_statement condition: (condition (identifier)) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))) (block_comment) (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (floating_point_type) name: (identifier))) body: (block (return_statement (binary_expression left: (identifier) right: (decimal_floating_point_literal))))))))\n**\n\n--\nimport java.util.*;\n\n    public class BathingRoutine {\n        private static final double MAX_DRYING_TIME = 30; \n\n        public static void main(String[] args) {\n            Scanner scanner = new Scanner(System.in);\n\n            System.out.println(\"Please enter your body temperature in degrees Celsius:\");\n            Double tempC = scanner.nextDouble();\n\n            boolean dry = false;\n            int timeSpentDrying = 0;\n\n            while (!dry && timeSpentDrying < MAX_DRYING_TIME) {\n                if (isDry(tempC)) {\n                    dry = true;\n                } else {\n                    System.out.printf(\"It seems like you need to stay in longer! Your current \" +\n                            \"temperature is %f°C.\\n\", tempC);\n                    timeSpentDrying++;\n\n                    \n                    try {\n                        Thread.sleep((timeSpentDrying * 1000));\n                    } catch (InterruptedException e) {}\n                }\n            }\n\n            if (dry) {\n                System.out.println(\"Congratulations, you seem to have successfully dried!\");\n            } else {\n                System.out.println(\"Sorry, but it looks like you haven't been able to dry off.\");\n            }\n        }\n\n        /**\n         * Returns true if the given temperature indicates complete dryness, otherwise returns false.\n         */\n        private static boolean isDry(double tempC) {\n            return tempC <= 35.9;\n        }\n    }\n--\n",
        "text": "6",
        "token_cnt": 1221
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number of days since symptoms started:\");\n        int numDays = scan.nextInt();\n\n        \n        if (numDays >= 5 && numDays <=7){\n            System.out.println(\"High risk! Consult doctor immediately.\");\n        } else if (numDays >0 && numDays <4){\n            System.out.println(\"Medium risk! Monitor symptoms closely.\");\n        } else{\n            System.out.println(\"Low risk! No need to worry.\");\n        }\n        \n        \n        String gender;\n        System.out.print(\"Enter Gender [M/F]: \");\n        gender=scan.next().toUpperCase();\n        if(gender.equals(\"M\")){\n            System.out.println(\"Men do not need to dispose used tissues\");\n        } else {\n            System.out.println(\"Women must dispose used tissues properly by placing them inside a closed bin.\");\n        }\n        \n       \n    }\n}",
            "id": 192
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number of days since symptoms started:\");\n        int numDays = scan.nextInt();\n\n        \n        if (numDays >= 5 && numDays <=7){\n            System.out.println(\"High risk! Consult doctor immediately.\");\n        } else if (numDays >0 && numDays <4){\n            System.out.println(\"Medium risk! Monitor symptoms closely.\");\n        } else{\n            System.out.println(\"Low risk! No need to worry.\");\n        }\n        \n        \n        String gender;\n        System.out.print(\"Enter Gender [M/F]: \");\n        gender=scan.next().toUpperCase();\n        if(gender.equals(\"M\")){\n            System.out.println(\"Men do not need to dispose used tissues\");\n        } else {\n            System.out.println(\"Women must dispose used tissues properly by placing them inside a closed bin.\");\n        }\n        \n       \n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 1070
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Transformation {\n    \n        private static final double BIAS_TEMPERATURE = 37; \n        private static final int[] WATER_TEMPS = new int[]{40, 41, 42}; \n        \n        /**\n         * Transforms input water temperature by applying any necessary corrections due to biases in experts' measurements.\n         */\n        public static int transformWaterTemp(int temp) {\n            if (temp <= BIAS_TEMPERATURE) {\n                return Math.max(WATER_TEMPS[0], temp);\n            } else if (temp >= BIAS_TEMPERATURE + 5 && temp < BIAS_TEMPERATURE + 10) {\n                return Math.min(WATER_TEMPS[1], temp - 5);\n            } else if (temp >= BIAS_TEMPERATURE + 10) {\n                return Math.min(WATER_TEMPS[2], temp - 10);\n            }\n        \n            return temp;\n        }\n    \n    }",
            "id": 194
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (field_declaration (modifiers) type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (field_declaration (modifiers) type: (array_type element: (integral_type) dimensions: (dimensions)) declarator: (variable_declarator name: (identifier) value: (array_creation_expression type: (integral_type) dimensions: (dimensions) value: (array_initializer (decimal_integer_literal) (decimal_integer_literal) (decimal_integer_literal))))) (block_comment) (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (integral_type) name: (identifier))) body: (block (if_statement condition: (condition (binary_expression left: (identifier) right: (identifier))) consequence: (block (return_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)) (identifier))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (binary_expression left: (identifier) right: (decimal_integer_literal))) right: (binary_expression left: (identifier) right: (binary_expression left: (identifier) right: (decimal_integer_literal))))) consequence: (block (return_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)) (binary_expression left: (identifier) right: (decimal_integer_literal)))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (return_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)) (binary_expression left: (identifier) right: (decimal_integer_literal))))))))) (return_statement (identifier)))))))\n**\n\n--\npublic class Transformation {\n    \n        private static final double BIAS_TEMPERATURE = 37; \n        private static final int[] WATER_TEMPS = new int[]{40, 41, 42}; \n        \n        /**\n         * Transforms input water temperature by applying any necessary corrections due to biases in experts' measurements.\n         */\n        public static int transformWaterTemp(int temp) {\n            if (temp <= BIAS_TEMPERATURE) {\n                return Math.max(WATER_TEMPS[0], temp);\n            } else if (temp >= BIAS_TEMPERATURE + 5 && temp < BIAS_TEMPERATURE + 10) {\n                return Math.min(WATER_TEMPS[1], temp - 5);\n            } else if (temp >= BIAS_TEMPERATURE + 10) {\n                return Math.min(WATER_TEMPS[2], temp - 10);\n            }\n        \n            return temp;\n        }\n    \n    }\n--\n",
        "text": "6",
        "token_cnt": 805
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static boolean followHandHygieneProtocol(String safety) {\n    \n    if (safety == null || safety.isEmpty()) \n        return false;\n\n    \n    if (\"work\".equalsIgnoreCase(safety)) {\n        System.out.println(\"Checking handwash at Work Place Rule\");\n\n        \n        if (!checkNoTouchOfFaceAfterUsingRestRoom())\n            return false;\n        \n        \n        return true;\n    } \n\n    \n    else if (\"eat_outside\".equalsIgnoreCase(safety)){\n        System.out.println(\"Checking handwash Before Eating Outside Rule \"); \n\n        \n        if (!checkProperWashBeforeEatOutdoor()) \n            return false;\n    \n        \n        return true;\n    }\n    \n    \n    return false;   \n}",
            "id": 196
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (null_literal)) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) consequence: (return_statement (false))) (if_statement condition: (condition (method_invocation object: (string_literal (string_fragment)) name: (identifier) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (if_statement condition: (condition (unary_expression operand: (method_invocation name: (identifier) arguments: (argument_list)))) consequence: (return_statement (false))) (return_statement (true))) alternative: (if_statement condition: (condition (method_invocation object: (string_literal (string_fragment)) name: (identifier) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (if_statement condition: (condition (unary_expression operand: (method_invocation name: (identifier) arguments: (argument_list)))) consequence: (return_statement (false))) (return_statement (true))))) (return_statement (false)))))\n**\n\n--\npublic static boolean followHandHygieneProtocol(String safety) {\n    \n    if (safety == null || safety.isEmpty()) \n        return false;\n\n    \n    if (\"work\".equalsIgnoreCase(safety)) {\n        System.out.println(\"Checking handwash at Work Place Rule\");\n\n        \n        if (!checkNoTouchOfFaceAfterUsingRestRoom())\n            return false;\n        \n        \n        return true;\n    } \n\n    \n    else if (\"eat_outside\".equalsIgnoreCase(safety)){\n        System.out.println(\"Checking handwash Before Eating Outside Rule \"); \n\n        \n        if (!checkProperWashBeforeEatOutdoor()) \n            return false;\n    \n        \n        return true;\n    }\n    \n    \n    return false;   \n}\n--\n",
        "text": "6\n\nОбъяснение:\n\nЦикломатическая сложность — это метрика, которая оценивает сложность",
        "token_cnt": 610
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static void main(String[] args) {\n        \n        System.out.println(\"Enter weight (in pounds): \");\n        double weight = Double.parseDouble(scan.nextLine());\n\n        \n        double bmi = weight / Math.pow(height, 2);\n\n        \n        String classification;\n        if (bmi < 18.5) {\n            classification = \"Underweight\";\n        } else if (bmi >= 18.5 && bmi <= 24.9) {\n            classification = \"Normal Weight\";\n        } else if (bmi > 24.9 && bmi <= 29.9) {\n            classification = \"Overweight\";\n        } else {\n            classification = \"Obese\";\n        }\n\n        \n        System.out.printf(\"BMI: %.3f\\n\", bmi);\n        System.out.println(\"Classification: \" + classification);\n    }\n}",
            "id": 198
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier) (decimal_integer_literal)))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_floating_point_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_floating_point_literal)) right: (binary_expression left: (identifier) right: (decimal_floating_point_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_floating_point_literal)) right: (binary_expression left: (identifier) right: (decimal_floating_point_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence)) (identifier)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))) (ERROR))\n**\n\n--\npublic static void main(String[] args) {\n        \n        System.out.println(\"Enter weight (in pounds): \");\n        double weight = Double.parseDouble(scan.nextLine());\n\n        \n        double bmi = weight / Math.pow(height, 2);\n\n        \n        String classification;\n        if (bmi < 18.5) {\n            classification = \"Underweight\";\n        } else if (bmi >= 18.5 && bmi <= 24.9) {\n            classification = \"Normal Weight\";\n        } else if (bmi > 24.9 && bmi <= 29.9) {\n            classification = \"Overweight\";\n        } else {\n            classification = \"Obese\";\n        }\n\n        \n        System.out.printf(\"BMI: %.3f\\n\", bmi);\n        System.out.println(\"Classification: \" + classification);\n    }\n}\n--\n",
        "text": "7",
        "token_cnt": 903
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n\nconst consent = getConsent();\n\n\nlet action;\nif (consent === 'yes') {\n  \n  action = sendDailyEmailReminders();\n} else if (consent === 'no') {\n  \n  action = null;\n} else {\n  \n  showError('Invalid input');\n  return;\n}\n\n\naction && action();",
            "id": 199
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (method_invocation name: (identifier) arguments: (argument_list))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (null_literal)))) alternative: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list (character_literal)))) (return_statement)))) (expression_statement (binary_expression left: (identifier) right: (method_invocation name: (identifier) arguments: (argument_list)))))\n**\n\n--\nscript\n\nconst consent = getConsent();\n\n\nlet action;\nif (consent === 'yes') {\n  \n  action = sendDailyEmailReminders();\n} else if (consent === 'no') {\n  \n  action = null;\n} else {\n  \n  showError('Invalid input');\n  return;\n}\n\n\naction && action();\n--\n",
        "text": "8\n\nОбъяснение:\n\nЦикломатическая сложность — это мера сложности программы, которая показывает",
        "token_cnt": 388
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\nfunction determineHighSneezeEtiquette(isPublicPlace) {\n  \n  console.log(`Current situation: ${\n    isPublicPlace ? 'in public' : 'in private'};`);\n\n  let etiquette;\n  if (isPublicPlace) {\n    \n    etiquette = 'use tissues';\n  } else {\n    \n    etiquette = 'use elbow';\n  }\n  \n  \n  /* \n    If the input parameter \"isPublicPlace\" is true, we know that \n    the user is in a public setting where they should use tissues. \n    Otherwise, they must be in a more private environment where \n    they should use their arm. The result of this conditional block \n    will become our final output value. \n   */ \n  \n  return etiquette;\n}",
            "id": 203
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier)) (ternary_expression condition: (identifier) (ERROR (identifier)) consequence: (character_literal) alternative: (character_literal)) (ERROR (UNEXPECTED '`'))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (identifier)) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal)))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal))))) (block_comment) (return_statement (identifier))))\n**\n\n--\nscript\nfunction determineHighSneezeEtiquette(isPublicPlace) {\n  \n  console.log(`Current situation: ${\n    isPublicPlace ? 'in public' : 'in private'};`);\n\n  let etiquette;\n  if (isPublicPlace) {\n    \n    etiquette = 'use tissues';\n  } else {\n    \n    etiquette = 'use elbow';\n  }\n  \n  \n  /* \n    If the input parameter \"isPublicPlace\" is true, we know that \n    the user is in a public setting where they should use tissues. \n    Otherwise, they must be in a more private environment where \n    they should use their arm. The result of this conditional block \n    will become our final output value. \n   */ \n  \n  return etiquette;\n}\n--\n",
        "text": "5",
        "token_cnt": 471
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import static org.junit.jupiter.api.Assertions.*;\npublic class PersonalItemUpdater {\n\n    public void updateSanitizedItems(List<String> sanitizedItems) {\n        \n        assertTrue(!sanitizedItems.isEmpty(), \"Input List cannot be empty\");\n\n        String item = null;\n        int indexToRemove = -1;\n        \n        \n        for (int i=0;i < sanitizedItems.size();i++) {\n            item = sanitizedItems.get(i);\n\n            \n            if (\"Face Mask\".equals(item)) {\n                System.out.println(\"Found Face mask , updating expiry date as Jan 2035 \");\n                sanitizedItems.set(i,\"Face Mask [Expiry Date Updated]\");\n                \n            } else if (\"Gloves\".equals(item)){\n                System.out.println(\" Found Glove , replacing with Nitrile gloves from vendor ABC Inc.\");\n                sanitizedItems.remove(i);\n                sanitizedItems.add(\"Nitrile Gloves From Vendor ABC Inc.\");\n                \n            } else if (\"Safety Glasses\".equals(item)){\n               System.out.println(\" Found safety glasses, checking prescription status \");\n\n               \n               boolean hasPrescriptionUpdated = false;\n               if (!hasPrescriptionUpdated){\n                   System.out.println(\" Prescription not yet updated , adding contact lenses instead \");\n                    sanitizedItems.set(i,\"Contact Lenses For Computer Vision Work\");\n               } else{\n                  System.out.println(\" Prescription already exists , keeping Safety Glasses unchanged \");\n               }\n                \n            } else {\n                System.out.println(\" No Matching Case Found , Keeping Item As Is \");\n            }\n        }\n    }\n}",
            "id": 210
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (scoped_identifier scope: (scoped_identifier scope: (scoped_identifier scope: (identifier) name: (identifier)) name: (identifier)) name: (identifier)) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (generic_type (type_identifier) (type_arguments (type_identifier))) name: (identifier))) body: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))) (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (null_literal))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (unary_expression operand: (decimal_integer_literal)))) (for_statement init: (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) condition: (binary_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))) update: (update_expression (identifier)) body: (block (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (condition (method_invocation object: (string_literal (string_fragment)) name: (identifier) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier) (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (method_invocation object: (string_literal (string_fragment)) name: (identifier) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (method_invocation object: (string_literal (string_fragment)) name: (identifier) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier) (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))))))))\n**\n\n--\nimport static org.junit.jupiter.api.Assertions.*;\npublic class PersonalItemUpdater {\n\n    public void updateSanitizedItems(List<String> sanitizedItems) {\n        \n        assertTrue(!sanitizedItems.isEmpty(), \"Input List cannot be empty\");\n\n        String item = null;\n        int indexToRemove = -1;\n        \n        \n        for (int i=0;i < sanitizedItems.size();i++) {\n            item = sanitizedItems.get(i);\n\n            \n            if (\"Face Mask\".equals(item)) {\n                System.out.println(\"Found Face mask , updating expiry date as Jan 2035 \");\n                sanitizedItems.set(i,\"Face Mask [Expiry Date Updated]\");\n                \n            } else if (\"Gloves\".equals(item)){\n                System.out.println(\" Found Glove , replacing with Nitrile gloves from vendor ABC Inc.\");\n                sanitizedItems.remove(i);\n                sanitizedItems.add(\"Nitrile Gloves From Vendor ABC Inc.\");\n                \n            } else if (\"Safety Glasses\".equals(item)){\n               System.out.println(\" Found safety glasses, checking prescription status \");\n\n               \n               boolean hasPrescriptionUpdated = false;\n               if (!hasPrescriptionUpdated){\n                   System.out.println(\" Prescription not yet updated , adding contact lenses instead \");\n                    sanitizedItems.set(i,\"Contact Lenses For Computer Vision Work\");\n               } else{\n                  System.out.println(\" Prescription already exists , keeping Safety Glasses unchanged \");\n               }\n                \n            } else {\n                System.out.println(\" No Matching Case Found , Keeping Item As Is \");\n            }\n        }\n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 1433
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class UpdateBathingRoutine {\n\n    public static void update(String product) {\n        \n        double opacity = getOpacity();\n\n        \n        if (opacity >= 70) {\n            usePremiumProduct(product);\n        } else if (opacity < 50 && opacity > 20){\n            useMidRangeProduct(product);\n        } else {\n            useBasicProduct(product);\n        }\n    }\n    \n    private static void usePremiumProduct(String product) {\n        System.out.println(\"Using Premium Product \" + product);\n    }\n\n    private static void useMidRangeProduct(String product) {\n        System.out.println(\"Using Mid Range Product \" + product);\n    }\n\n    private static void useBasicProduct(String product) {\n        System.out.println(\"Using Basic Product \" + product);\n    }\n\n    private static double getOpacity() {\n        return Math.random() * 100; \n    }\n    \n}",
            "id": 212
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))))) alternative: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))))))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))) (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters) body: (block (return_statement (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (decimal_integer_literal))))))))\n**\n\n--\npublic class UpdateBathingRoutine {\n\n    public static void update(String product) {\n        \n        double opacity = getOpacity();\n\n        \n        if (opacity >= 70) {\n            usePremiumProduct(product);\n        } else if (opacity < 50 && opacity > 20){\n            useMidRangeProduct(product);\n        } else {\n            useBasicProduct(product);\n        }\n    }\n    \n    private static void usePremiumProduct(String product) {\n        System.out.println(\"Using Premium Product \" + product);\n    }\n\n    private static void useMidRangeProduct(String product) {\n        System.out.println(\"Using Mid Range Product \" + product);\n    }\n\n    private static void useBasicProduct(String product) {\n        System.out.println(\"Using Basic Product \" + product);\n    }\n\n    private static double getOpacity() {\n        return Math.random() * 100; \n    }\n    \n}\n--\n",
        "text": "6",
        "token_cnt": 927
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class ExtremeHygiene {\n\n    public static void main(String[] args) throws IOException{\n        \n        System.out.println(\"Enter name:\");\n        Scanner scan = new Scanner(System.in);\n        String name = scan.nextLine();\n\n        System.out.println(\"Are there any close contacts at home? (y/n)\");\n        boolean hasCloseContactAtHome = scan.next().equalsIgnoreCase(\"y\");\n\n        System.out.println(\"Is sick person taking precautions like wearing mask properly?\");\n        boolean isSickPersonTakingPrecautions = scan.next().equalsIgnoreCase(\"y\");\n\n        \n        double score;\n        if (!hasCloseContactAtHome && !isSickPersonTakingPrecautions){\n            score = 100;\n            System.out.println(\"Extremely good! \" + name + \", Your Score is:\" + score);\n        } else if (!(hasCloseContactAtHome || isSickPersonTakingPrecautions)){\n            score = 50;\n            System.out.println(\"Good! \" + name + \", Your Score is:\" + score);\n        } else {\n            score = 25;\n            System.out.println(\"Caution required!\" + name + \",Your Score is :\" + score);\n        }\n    }\n}",
            "id": 216
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (unary_expression operand: (identifier)) right: (unary_expression operand: (identifier)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment))) right: (identifier)))))) alternative: (if_statement condition: (condition (unary_expression operand: (parenthesized_expression (binary_expression left: (identifier) right: (identifier))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment))) right: (identifier)))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment))) right: (identifier)))))))))))))\n**\n\n--\npublic class ExtremeHygiene {\n\n    public static void main(String[] args) throws IOException{\n        \n        System.out.println(\"Enter name:\");\n        Scanner scan = new Scanner(System.in);\n        String name = scan.nextLine();\n\n        System.out.println(\"Are there any close contacts at home? (y/n)\");\n        boolean hasCloseContactAtHome = scan.next().equalsIgnoreCase(\"y\");\n\n        System.out.println(\"Is sick person taking precautions like wearing mask properly?\");\n        boolean isSickPersonTakingPrecautions = scan.next().equalsIgnoreCase(\"y\");\n\n        \n        double score;\n        if (!hasCloseContactAtHome && !isSickPersonTakingPrecautions){\n            score = 100;\n            System.out.println(\"Extremely good! \" + name + \", Your Score is:\" + score);\n        } else if (!(hasCloseContactAtHome || isSickPersonTakingPrecautions)){\n            score = 50;\n            System.out.println(\"Good! \" + name + \", Your Score is:\" + score);\n        } else {\n            score = 25;\n            System.out.println(\"Caution required!\" + name + \",Your Score is :\" + score);\n        }\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 1258
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\n\nclass Person {\n    String name;\n    int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n}\n\nclass Employee extends Person{\n    double salary;\n    \n    public Employee(String name, int age, double salary){\n        super(name, age);\n        this.salary = salary;\n    }\n}",
            "id": 225
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration name: (identifier) body: (class_body (field_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (field_declaration type: (integral_type) declarator: (variable_declarator name: (identifier))) (constructor_declaration (modifiers) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (integral_type) name: (identifier))) body: (constructor_body (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (identifier))) (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (identifier))))))) (class_declaration name: (identifier) superclass: (superclass (type_identifier)) body: (class_body (field_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier))) (constructor_declaration (modifiers) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (integral_type) name: (identifier)) (formal_parameter type: (floating_point_type) name: (identifier))) body: (constructor_body (explicit_constructor_invocation constructor: (super) arguments: (argument_list (identifier) (identifier))) (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (identifier))))))))\n**\n\n--\nimport java.util.*;\n\nclass Person {\n    String name;\n    int age;\n\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n}\n\nclass Employee extends Person{\n    double salary;\n    \n    public Employee(String name, int age, double salary){\n        super(name, age);\n        this.salary = salary;\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 533
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public boolean determineExtremeOnlineShoppingProductAvailability(List<String> onlineRetailers) {\n    \n    String product = \"Example Product\";\n    int minInStockCount = Integer.MAX_VALUE;\n    int maxInStockCount = 0;\n    \n    \n    for (String retailer : onlineRetailers) {\n        Map<String, Integer> inventory = fetchInventoryInformationFromRetailer(retailer);\n        \n        \n        if (inventory.containsKey(product)) {\n            int currentInStockCount = inventory.get(product);\n            \n            \n            if (currentInStockCount < minInStockCount) {\n                minInStockCount = currentInStockCount;\n            }\n                \n            \n            if (currentInStockCount > maxInStockCount) {\n                maxInStockCount = currentInStockCount;\n            }\n        }\n    }\n\n    \n    double averageInventoryCount = (double)(minInStockCount + maxInStockCount) / 2;\n    boolean extremeBias = false;\n    \n    if (averageInventoryCount <= 5) {\n        extremeBias = true;\n    } else if ((maxInStockCount - minInStockCount) >= 10) {\n        extremeBias = true;\n    }\n    \n    return extremeBias;\n}",
            "id": 226
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (generic_type (type_identifier) (type_arguments (type_identifier))) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (field_access object: (identifier) field: (identifier)))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (enhanced_for_statement type: (type_identifier) name: (identifier) value: (identifier) body: (block (local_variable_declaration type: (generic_type (type_identifier) (type_arguments (type_identifier) (type_identifier))) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))) consequence: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (identifier))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (identifier))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (identifier))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (identifier))))))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (cast_expression type: (floating_point_type) value: (parenthesized_expression (binary_expression left: (identifier) right: (identifier)))) right: (decimal_integer_literal)))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true)))) alternative: (if_statement condition: (condition (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (identifier))) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true)))))) (return_statement (identifier)))))\n**\n\n--\npublic boolean determineExtremeOnlineShoppingProductAvailability(List<String> onlineRetailers) {\n    \n    String product = \"Example Product\";\n    int minInStockCount = Integer.MAX_VALUE;\n    int maxInStockCount = 0;\n    \n    \n    for (String retailer : onlineRetailers) {\n        Map<String, Integer> inventory = fetchInventoryInformationFromRetailer(retailer);\n        \n        \n        if (inventory.containsKey(product)) {\n            int currentInStockCount = inventory.get(product);\n            \n            \n            if (currentInStockCount < minInStockCount) {\n                minInStockCount = currentInStockCount;\n            }\n                \n            \n            if (currentInStockCount > maxInStockCount) {\n                maxInStockCount = currentInStockCount;\n            }\n        }\n    }\n\n    \n    double averageInventoryCount = (double)(minInStockCount + maxInStockCount) / 2;\n    boolean extremeBias = false;\n    \n    if (averageInventoryCount <= 5) {\n        extremeBias = true;\n    } else if ((maxInStockCount - minInStockCount) >= 10) {\n        extremeBias = true;\n    }\n    \n    return extremeBias;\n}\n--\n",
        "text": "6",
        "token_cnt": 1022
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class CoughEtiquette {\n    public static void main(String[] args) throws IOException{\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Enter name of person who sneezed\");\n        String sneezerName = scan.nextLine();\n        \n        System.out.println(\"Did \" +sneezerName+ \" cover their mouth while they were sneezing?\");\n        boolean didCoverMouth = scan.nextBoolean(); \n\n        System.out.println(\"Did \"+sneezerName+\" wash hands after sneezing? \");\n        boolean washedHands = scan.nextBoolean(); \n\n        if (didCoverMouth ==true && washedHands==false){\n            System.out.println(\"It seems like there may have been some contamination during this incident.\");\n        } \n        else if ((didCoverMouth ==true ||washedHands==true)){\n           System.out.println(\"Great job following proper sneezing and coughing etiquette!\");\n        }\n        else {\n            System.out.println(\"I'm sorry but I didn't catch whether or not they covered their nose when they sneezed.\"\n                    +\" Please try again.\");\n        }\n\n    }\n}",
            "id": 229
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment)))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment)))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (true)) right: (binary_expression left: (identifier) right: (false)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (true)) right: (binary_expression left: (identifier) right: (true))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (string_literal (string_fragment))))))))))))))\n**\n\n--\npublic class CoughEtiquette {\n    public static void main(String[] args) throws IOException{\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Enter name of person who sneezed\");\n        String sneezerName = scan.nextLine();\n        \n        System.out.println(\"Did \" +sneezerName+ \" cover their mouth while they were sneezing?\");\n        boolean didCoverMouth = scan.nextBoolean(); \n\n        System.out.println(\"Did \"+sneezerName+\" wash hands after sneezing? \");\n        boolean washedHands = scan.nextBoolean(); \n\n        if (didCoverMouth ==true && washedHands==false){\n            System.out.println(\"It seems like there may have been some contamination during this incident.\");\n        } \n        else if ((didCoverMouth ==true ||washedHands==true)){\n           System.out.println(\"Great job following proper sneezing and coughing etiquette!\");\n        }\n        else {\n            System.out.println(\"I'm sorry but I didn't catch whether or not they covered their nose when they sneezed.\"\n                    +\" Please try again.\");\n        }\n\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 1074
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class HealthRisk {\n    public static void main(String[] args) {\n        \n        System.out.println(\"Enter current tempature (C): \");\n        double temp = Double.parseDouble(scan.nextLine());\n\n        System.out.println(\"Have you been coughing? y/n\");\n        String cough = scan.next();\n\n        System.out.println(\"Have you had any recent loss of taste or smell?\");\n        boolean lostSmellOrTaste = Boolean.parseBoolean(scan.next());\n\n        \n        if (cough.equals(\"y\")) {\n            if (lostSmellOrTaste == true){\n                System.out.println(\"High Risk - Consult doctor immediately.\");\n            } else {\n                System.out.println(\"Moderate Risk - Take care but continue normal activities.\")\n            }\n        } else {\n            if (temp > 37.5 ) { \n                System.out.println(\"Medium Risk - Monitor symptoms and take precautions\") \n            } else {\n                System.out.println(\"Low Risk - No need to change daily routines \")\n            }\n        }\n\n    }\n}",
            "id": 230
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (if_statement condition: (condition (binary_expression left: (identifier) right: (true))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\"))))) alternative: (block (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_floating_point_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\"))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\")))))))))))\n**\n\n--\npublic class HealthRisk {\n    public static void main(String[] args) {\n        \n        System.out.println(\"Enter current tempature (C): \");\n        double temp = Double.parseDouble(scan.nextLine());\n\n        System.out.println(\"Have you been coughing? y/n\");\n        String cough = scan.next();\n\n        System.out.println(\"Have you had any recent loss of taste or smell?\");\n        boolean lostSmellOrTaste = Boolean.parseBoolean(scan.next());\n\n        \n        if (cough.equals(\"y\")) {\n            if (lostSmellOrTaste == true){\n                System.out.println(\"High Risk - Consult doctor immediately.\");\n            } else {\n                System.out.println(\"Moderate Risk - Take care but continue normal activities.\")\n            }\n        } else {\n            if (temp > 37.5 ) { \n                System.out.println(\"Medium Risk - Monitor symptoms and take precautions\") \n            } else {\n                System.out.println(\"Low Risk - No need to change daily routines \")\n            }\n        }\n\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 1023
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class UpdateLowEyeHygiene {\n\n    public static void main(String[] args) throws IOException{\n        \n        System.out.println(\"Dry Run\");\n\n        String input = readUserInput(); \n\n        switch (input){\n            case \"a\":\n                updateLowEyeHygieneWithAlcoholWipes(); \n                break; \n            case \"b\":\n                updateLowEyeHygieneWithCottonSwabsAndQtips(); \n                break; \n            default:\n                System.out.println(\"Invalid Input!\");    \n        }\n    }\n\n    private static void updateLowEyeHygieneWithAlcoholWipes() throws IOException {\n        \n    }\n\n    private static void updateLowEyeHygieneWithCottonSwabsAndQtips() throws IOException {\n        \n    }\n\n    private static String readUserInput(){\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter choice [a]lcohol wipes or [b]cotton swabs & Q tips: \");\n        return scanner.nextLine().toLowerCase();\n    }\n}",
            "id": 231
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list)))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters) (throws (type_identifier)) body: (block)) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters) (throws (type_identifier)) body: (block)) (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list))))))))\n**\n\n--\npublic class UpdateLowEyeHygiene {\n\n    public static void main(String[] args) throws IOException{\n        \n        System.out.println(\"Dry Run\");\n\n        String input = readUserInput(); \n\n        switch (input){\n            case \"a\":\n                updateLowEyeHygieneWithAlcoholWipes(); \n                break; \n            case \"b\":\n                updateLowEyeHygieneWithCottonSwabsAndQtips(); \n                break; \n            default:\n                System.out.println(\"Invalid Input!\");    \n        }\n    }\n\n    private static void updateLowEyeHygieneWithAlcoholWipes() throws IOException {\n        \n    }\n\n    private static void updateLowEyeHygieneWithCottonSwabsAndQtips() throws IOException {\n        \n    }\n\n    private static String readUserInput(){\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter choice [a]lcohol wipes or [b]cotton swabs & Q tips: \");\n        return scanner.nextLine().toLowerCase();\n    }\n}\n--\n",
        "text": "3\nОбъяснение: цикломатическая сложность программы равна количеству линейно независимых путей через её блок. В",
        "token_cnt": 900
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class OnlineShopping {\n    public static void main(String[] args) {\n        \n        double itemPrice = 100;\n        int serviceTaxRate = 5;\n\n        boolean result = calculateShippingCharges(itemPrice, serviceTaxRate);\n        System.out.println(\"High shipping charge : \" + result);\n    }\n\n    private static boolean calculateShippingCharges(double itemPrice, int serviceTaxRate){\n        if (serviceTaxRate == 0 || serviceTaxRate > 100 )\n            return false;\n        \n        double totalServiceCharge = itemPrice * ((double)serviceTaxRate / 100);\n        double finalTotal = itemPrice + totalServiceCharge;\n\n        if (finalTotal < 200) \n            return true;\n        else\n            return false;\n    }\n}",
            "id": 233
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))) (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (floating_point_type) name: (identifier)) (formal_parameter type: (integral_type) name: (identifier))) body: (block (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (return_statement (false))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (identifier) right: (parenthesized_expression (binary_expression left: (cast_expression type: (floating_point_type) value: (identifier)) right: (decimal_integer_literal)))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (identifier) right: (identifier)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (return_statement (true)) alternative: (return_statement (false))))))))\n**\n\n--\npublic class OnlineShopping {\n    public static void main(String[] args) {\n        \n        double itemPrice = 100;\n        int serviceTaxRate = 5;\n\n        boolean result = calculateShippingCharges(itemPrice, serviceTaxRate);\n        System.out.println(\"High shipping charge : \" + result);\n    }\n\n    private static boolean calculateShippingCharges(double itemPrice, int serviceTaxRate){\n        if (serviceTaxRate == 0 || serviceTaxRate > 100 )\n            return false;\n        \n        double totalServiceCharge = itemPrice * ((double)serviceTaxRate / 100);\n        double finalTotal = itemPrice + totalServiceCharge;\n\n        if (finalTotal < 200) \n            return true;\n        else\n            return false;\n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 789
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public double calculateLowTravelFlightReservation(boolean hasConsented){\n        \n        double flightCost = 0;\n    \n        if (hasConsented == true){\n            System.out.println(\"Processing customer's personal information...\");\n    \n            \n            flightCost = 29.95;    \n        } else {\n            System.out.println(\"Customer did not provide consent to process their personal information.\");    \n        }\n    \n        return flightCost;    \n    }",
            "id": 243
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (if_statement condition: (condition (binary_expression left: (identifier) right: (true))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (decimal_floating_point_literal)))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) (return_statement (identifier)))))\n**\n\n--\npublic double calculateLowTravelFlightReservation(boolean hasConsented){\n        \n        double flightCost = 0;\n    \n        if (hasConsented == true){\n            System.out.println(\"Processing customer's personal information...\");\n    \n            \n            flightCost = 29.95;    \n        } else {\n            System.out.println(\"Customer did not provide consent to process their personal information.\");    \n        }\n    \n        return flightCost;    \n    }\n--\n",
        "text": "6\n\nОбъяснение:\n\nЦикломатическая сложность — это мера сложности программы, которая учитывает",
        "token_cnt": 391
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class UpdatePrecipitationData {\n\n    public static void main(String[] args) throws SQLException{\n        \n        Connection conn = DriverManager.getConnection(\"jdbc:mysql:\n\n        \n        boolean consentGiven = false;\n        while (consentGiven == false){\n            System.out.println(\"Do you give us permission to access and store your personal information? [y/n]\"); \n            Scanner scan = new Scanner(System.in);\n            String input = scan.nextLine();\n\n            if (input.equalsIgnoreCase(\"y\")){\n                consentGiven = true; \n                break;\n            } else if (input.equalsIgnoreCase(\"n\")) {\n                System.out.println(\"We will not use any of your personal information.\");\n                System.exit(1);\n            } else {\n                System.out.println(\"Please enter y for yes or n for no.\");\n            }\n        }\n        \n        \n        if (consentGiven == true){\n            Statement stmt = conn.createStatement();\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM precipitation_data;\");\n            \n            while (rs.next()){\n                int id = rs.getInt(\"id\");\n                double temperature = rs.getDouble(\"temperature\");\n                double humidity = rs.getDouble(\"humidity\");\n                double windSpeed = rs.getDouble(\"windspeed\");\n                Date date = rs.getDate(\"date\");\n\n                \n                double updatedTemperature = calculateUpdatedValue(temperature);\n                double updatedHumidity = calculateUpdatedValue(humidity);\n                double updatedWindSpeed = calculateUpdatedValue(windSpeed);\n            \n                \n                String query = \"UPDATE precipitation_data SET temperature=?, humidity=?, windspeed=? WHERE id=\" + id + \";\";\n                PreparedStatement pstmt = conn.prepareStatement(query);\n                pstmt.setDouble(1,updatedTemperature);\n                pstmt.setDouble(2,updatedHumidity);\n                pstmt.setDouble(3,updatedWindSpeed);\n                pstmt.executeUpdate();\n                \n            }\n        }\n    }\n    \n    private static double calculateUpdatedValue(double value){\n        return value*0.95; \n    }\n    \n}",
            "id": 246
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(ERROR (modifiers) (identifier) (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) (type_identifier) name: (identifier) (identifier) (identifier) (string_literal (string_fragment)) (ERROR (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)) (ERROR (array_access array: (MISSING identifier) index: (binary_expression left: (identifier) right: (identifier))) (string_literal (string_fragment)) (identifier) (string_literal (string_fragment)) (identifier) (string_literal (string_fragment)) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (template_expression template_processor: (identifier) template_argument: (string_literal (string_fragment))) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (template_expression template_processor: (identifier) template_argument: (string_literal (string_fragment)))) (identifier) (ERROR (type_identifier) (identifier) (string_literal (string_fragment)) (identifier) (string_literal (string_fragment)) (identifier) (string_literal (string_fragment)) (identifier) (string_literal (string_fragment)) (identifier) (string_literal (string_fragment)) (identifier) (string_literal (string_fragment)) (identifier) (identifier) (identifier)) (identifier) (ERROR) (identifier) (ERROR) (identifier) (ERROR) (ERROR (type_identifier) (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (string_fragment))\n**\n\n--\npublic class UpdatePrecipitationData {\n\n    public static void main(String[] args) throws SQLException{\n        \n        Connection conn = DriverManager.getConnection(\"jdbc:mysql:\n\n        \n        boolean consentGiven = false;\n        while (consentGiven == false){\n            System.out.println(\"Do you give us permission to access and store your personal information? [y/n]\"); \n            Scanner scan = new Scanner(System.in);\n            String input = scan.nextLine();\n\n            if (input.equalsIgnoreCase(\"y\")){\n                consentGiven = true; \n                break;\n            } else if (input.equalsIgnoreCase(\"n\")) {\n                System.out.println(\"We will not use any of your personal information.\");\n                System.exit(1);\n            } else {\n                System.out.println(\"Please enter y for yes or n for no.\");\n            }\n        }\n        \n        \n        if (consentGiven == true){\n            Statement stmt = conn.createStatement();\n            ResultSet rs = stmt.executeQuery(\"SELECT * FROM precipitation_data;\");\n            \n            while (rs.next()){\n                int id = rs.getInt(\"id\");\n                double temperature = rs.getDouble(\"temperature\");\n                double humidity = rs.getDouble(\"humidity\");\n                double windSpeed = rs.getDouble(\"windspeed\");\n                Date date = rs.getDate(\"date\");\n\n                \n                double updatedTemperature = calculateUpdatedValue(temperature);\n                double updatedHumidity = calculateUpdatedValue(humidity);\n                double updatedWindSpeed = calculateUpdatedValue(windSpeed);\n            \n                \n                String query = \"UPDATE precipitation_data SET temperature=?, humidity=?, windspeed=? WHERE id=\" + id + \";\";\n                PreparedStatement pstmt = conn.prepareStatement(query);\n                pstmt.setDouble(1,updatedTemperature);\n                pstmt.setDouble(2,updatedHumidity);\n                pstmt.setDouble(3,updatedWindSpeed);\n                pstmt.executeUpdate();\n                \n            }\n        }\n    }\n    \n    private static double calculateUpdatedValue(double value){\n        return value*0.95; \n    }\n    \n}\n--\n",
        "text": "6",
        "token_cnt": 979
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public int calculateHighTravelLocalAttraction(ArrayList<String[]> placesData) {\n    \n    int maxReliability = Integer.MIN_VALUE;\n    \n    \n    for (int i = 0; i < placesData.size(); i++) {\n        String[] currentPlaceData = placesData.get(i);\n        \n        \n        int reliabilityScore = Integer.parseInt(currentPlaceData[2]);\n\n        \n        if (reliabilityScore > maxReliability) {\n            \n            maxReliability = reliabilityScore;\n        }\n    }\n\n    return maxReliability;\n}",
            "id": 250
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (generic_type (type_identifier) (type_arguments (array_type element: (type_identifier) dimensions: (dimensions)))) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (field_access object: (identifier) field: (identifier)))) (for_statement init: (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) condition: (binary_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))) update: (update_expression (identifier)) body: (block (local_variable_declaration type: (array_type element: (type_identifier) dimensions: (dimensions)) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (identifier))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (identifier))))))) (return_statement (identifier)))))\n**\n\n--\npublic int calculateHighTravelLocalAttraction(ArrayList<String[]> placesData) {\n    \n    int maxReliability = Integer.MIN_VALUE;\n    \n    \n    for (int i = 0; i < placesData.size(); i++) {\n        String[] currentPlaceData = placesData.get(i);\n        \n        \n        int reliabilityScore = Integer.parseInt(currentPlaceData[2]);\n\n        \n        if (reliabilityScore > maxReliability) {\n            \n            maxReliability = reliabilityScore;\n        }\n    }\n\n    return maxReliability;\n}\n--\n",
        "text": "4\n\nОбъяснение:\n\nЦикломатическая сложность — это метрика, которая оценивает сложность",
        "token_cnt": 567
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number between 0 -1 indicating level of confidence\");\n        double confidence = scan.nextDouble();\n\n        String result;\n        \n        \n        if (confidence >= .95){\n            result =\"Superior\";    \n        } else if (confidence > .7 && confidence <= .94 ) { \n            result=\"Very Good\" ;   \n        } else if (confidence > .3 && confidence < .69 ){\n             result= \"Fairly good\";}\n         else{result =\"Poor\"};\n         \n        System.out.println(\"Extreme Flossing Technique Based On Your Input Is \"+ result + \".\\n \");\n\n    }\n}",
            "id": 257
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_floating_point_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_floating_point_literal)) right: (binary_expression left: (identifier) right: (decimal_floating_point_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_floating_point_literal)) right: (binary_expression left: (identifier) right: (decimal_floating_point_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))) (MISSING \";\")))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment) (escape_sequence) (string_fragment)))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number between 0 -1 indicating level of confidence\");\n        double confidence = scan.nextDouble();\n\n        String result;\n        \n        \n        if (confidence >= .95){\n            result =\"Superior\";    \n        } else if (confidence > .7 && confidence <= .94 ) { \n            result=\"Very Good\" ;   \n        } else if (confidence > .3 && confidence < .69 ){\n             result= \"Fairly good\";}\n         else{result =\"Poor\"};\n         \n        System.out.println(\"Extreme Flossing Technique Based On Your Input Is \"+ result + \".\\n \");\n\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 863
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public double calculateExtremeOnlineShoppingDiscount(String profession, String safetyLevel) {\n        \n    }",
            "id": 259
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (type_identifier) name: (identifier))) body: (block)))\n**\n\n--\npublic double calculateExtremeOnlineShoppingDiscount(String profession, String safetyLevel) {\n        \n    }\n--\n",
        "text": "8\n\nДля вычисления цикломатической сложности используется формула: **V(G) = P -",
        "token_cnt": 130
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class ToiletHygiene {\n\n    public static void main(String[] args) {\n        \n        System.out.println(\"Enter the transparency value (0 - 10): \");\n        double transparency = Double.parseDouble(scanner.nextLine());\n\n        \n        if (transparency >= 75 && transparency <= 90) {\n            System.out.println(\"The toilet has good hygiene.\");\n        } else if (transparency > 45 && transparency < 75) {\n            System.out.println(\"The toilet needs cleaning.\");\n        } else {\n            System.out.println(\"The toilet is highly unhygienic!\");\n        }\n    }\n}",
            "id": 260
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))))\n**\n\n--\npublic class ToiletHygiene {\n\n    public static void main(String[] args) {\n        \n        System.out.println(\"Enter the transparency value (0 - 10): \");\n        double transparency = Double.parseDouble(scanner.nextLine());\n\n        \n        if (transparency >= 75 && transparency <= 90) {\n            System.out.println(\"The toilet has good hygiene.\");\n        } else if (transparency > 45 && transparency < 75) {\n            System.out.println(\"The toilet needs cleaning.\");\n        } else {\n            System.out.println(\"The toilet is highly unhygienic!\");\n        }\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 647
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public String transformHighWeather(String highWeather) {\n    \n    String transformedWeather = \"\";\n    \n    \n    if (highWeather.contains(\"Mostly sunny\")) {\n        \n        transformedWeather = highWeather.replace(\"Mostly sunny\", \"It will be mostly sunny today.\");\n        \n    } else if (highWeather.contains(\"Partly cloudy\") || highWeather.contains(\"Clouds\"))) {\n        \n        transformedWeather = highWeather.replace(\"Partly cloudy\",\"There might be some clouds \") + \". Overall it won't be too bad out there.\";\n\n    } else if (highWeather.contains(\"Rain\")){\n        \n        transformedWeather = highWeather.replace(\"Rain\", \"Today there is a chance of rain. Be sure to bring an umbrella!\");\n\n    } else if (highWeather.contains(\"Snow\")){\n        \n        transformedWeather = highWeather.replace(\"Snow\", \"Tomorrow expect snow! Make sure to grab those winter boots before heading outside.\") ;\n\n    } else {\n        \n        transformedWeather = highWeather;\n    }\n    \n    \n    return transformedWeather;\n}",
            "id": 263
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal (string_fragment))))))) alternative: (if_statement condition: (condition (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (ERROR) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal (string_fragment)))) right: (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal (string_fragment))))))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal (string_fragment))))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (identifier)))))))) (return_statement (identifier)))))\n**\n\n--\npublic String transformHighWeather(String highWeather) {\n    \n    String transformedWeather = \"\";\n    \n    \n    if (highWeather.contains(\"Mostly sunny\")) {\n        \n        transformedWeather = highWeather.replace(\"Mostly sunny\", \"It will be mostly sunny today.\");\n        \n    } else if (highWeather.contains(\"Partly cloudy\") || highWeather.contains(\"Clouds\"))) {\n        \n        transformedWeather = highWeather.replace(\"Partly cloudy\",\"There might be some clouds \") + \". Overall it won't be too bad out there.\";\n\n    } else if (highWeather.contains(\"Rain\")){\n        \n        transformedWeather = highWeather.replace(\"Rain\", \"Today there is a chance of rain. Be sure to bring an umbrella!\");\n\n    } else if (highWeather.contains(\"Snow\")){\n        \n        transformedWeather = highWeather.replace(\"Snow\", \"Tomorrow expect snow! Make sure to grab those winter boots before heading outside.\") ;\n\n    } else {\n        \n        transformedWeather = highWeather;\n    }\n    \n    \n    return transformedWeather;\n}\n--\n",
        "text": "6",
        "token_cnt": 854
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static void main(String[] args) {\n        String item = getPersonalItem();\n\n        \n        switch (item){\n            case \"Face Mask\":\n                System.out.println(\"Wash hands before putting on face mask.\");\n                System.out.println(\"Remove face mask immediately upon arrival home.\");\n                break;\n\n            case \"Gloves\":\n                System.out.println(\"Wear gloves while performing task requiring contact with body fluids\");\n                System.out.println(\"Discard gloves after use into designated waste receptacle\");\n                break;\n                \n            default: \n                System.out.println(\"No specific instruction provided for this type of personal item.\")    \n        }\n\n    }\n    \n    private static String getPersonalItem() {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter name of personal item: \");\n        return scanner.nextLine();\n    }",
            "id": 264
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list)))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\"))))))) (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))))))\n**\n\n--\npublic static void main(String[] args) {\n        String item = getPersonalItem();\n\n        \n        switch (item){\n            case \"Face Mask\":\n                System.out.println(\"Wash hands before putting on face mask.\");\n                System.out.println(\"Remove face mask immediately upon arrival home.\");\n                break;\n\n            case \"Gloves\":\n                System.out.println(\"Wear gloves while performing task requiring contact with body fluids\");\n                System.out.println(\"Discard gloves after use into designated waste receptacle\");\n                break;\n                \n            default: \n                System.out.println(\"No specific instruction provided for this type of personal item.\")    \n        }\n\n    }\n    \n    private static String getPersonalItem() {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter name of personal item: \");\n        return scanner.nextLine();\n    }\n--\n",
        "text": "3",
        "token_cnt": 833
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public String transform(String str) {\n    \n    boolean hasPrivacy = str.contains(\"privacy\");\n\n    \n    if (hasPrivacy) \n        return str.replace(\"privacy\", \"*\"); \n    else\n        return str;\n}",
            "id": 267
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (if_statement condition: (condition (identifier)) consequence: (return_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal (string_fragment))))) alternative: (return_statement (identifier))))))\n**\n\n--\npublic String transform(String str) {\n    \n    boolean hasPrivacy = str.contains(\"privacy\");\n\n    \n    if (hasPrivacy) \n        return str.replace(\"privacy\", \"*\"); \n    else\n        return str;\n}\n--\n",
        "text": "6\n\nОбъяснение:\n\nЦикломатическая сложность — это мера сложности программного кода, которая",
        "token_cnt": 269
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n\nfunction transformNailCareConsentData(dryRun = false) {\n  const transformedData = [];\n\n  \n  for (const record of inputData) {\n    let newRecord = {};\n\n    \n    if (record.consent === 'yes') {\n      \n      const { name, age, gender } = record;\n\n      \n      newRecord = {\n        ...newRecord,\n        name,\n        age,\n        gender,\n      };\n\n      \n      if (record.skinCondition === 'Yes') {\n        \n        newRecord['extraMoisturizer'] = true;\n      } else if (record.skinCondition === 'No') {\n        \n        delete newRecord['extraMoisturizer'];\n      }\n\n      \n      if (record.fragranceFree === 'Yes') {\n        \n        newRecord['fragrancedProducts'] = false;\n      } else if (record.fragranceFree === 'No') {\n        \n        delete newRecord['fragrancedProducts'];\n      }\n    }\n\n    \n    transformedData.push(dryRun ? null : newRecord);\n  }\n\n  return transformedData;\n}",
            "id": 274
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (assignment_expression left: (identifier) right: (false)))) (MISSING \";\")) (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (ERROR (array_type element: (MISSING type_identifier) dimensions: (dimensions)))) (ERROR (local_variable_declaration type: (type_identifier) (ERROR (identifier) (identifier) name: (identifier) (identifier)) declarator: (variable_declarator name: (identifier) value: (array_initializer))) (ERROR (method_invocation name: (identifier) arguments: (argument_list (binary_expression left: (field_access object: (identifier) field: (identifier)) (ERROR) right: (character_literal))))) (assignment_expression left: (identifier) (ERROR (identifier) (identifier) (identifier)) right: (identifier)) (assignment_expression left: (identifier) (ERROR) right: (identifier)) update: (identifier) update: (identifier) update: (identifier) (ERROR (parenthesized_expression (binary_expression left: (field_access object: (identifier) field: (identifier)) (ERROR) right: (character_literal))) (assignment_expression left: (array_access array: (identifier) index: (character_literal)) right: (true)) (parenthesized_expression (binary_expression left: (field_access object: (identifier) field: (identifier)) (ERROR) right: (character_literal))) (type_identifier) (array_access array: (identifier) index: (character_literal)) (parenthesized_expression (binary_expression left: (field_access object: (identifier) field: (identifier)) (ERROR) right: (character_literal))) (assignment_expression left: (array_access array: (identifier) index: (character_literal)) right: (false)) (parenthesized_expression (binary_expression left: (field_access object: (identifier) field: (identifier)) (ERROR) right: (character_literal))) (type_identifier) (array_access array: (identifier) index: (character_literal)) (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ternary_expression condition: (identifier) consequence: (null_literal) alternative: (identifier))))) update: (identifier))))\n**\n\n--\nscript\n\nfunction transformNailCareConsentData(dryRun = false) {\n  const transformedData = [];\n\n  \n  for (const record of inputData) {\n    let newRecord = {};\n\n    \n    if (record.consent === 'yes') {\n      \n      const { name, age, gender } = record;\n\n      \n      newRecord = {\n        ...newRecord,\n        name,\n        age,\n        gender,\n      };\n\n      \n      if (record.skinCondition === 'Yes') {\n        \n        newRecord['extraMoisturizer'] = true;\n      } else if (record.skinCondition === 'No') {\n        \n        delete newRecord['extraMoisturizer'];\n      }\n\n      \n      if (record.fragranceFree === 'Yes') {\n        \n        newRecord['fragrancedProducts'] = false;\n      } else if (record.fragranceFree === 'No') {\n        \n        delete newRecord['fragrancedProducts'];\n      }\n    }\n\n    \n    transformedData.push(dryRun ? null : newRecord);\n  }\n\n  return transformedData;\n}\n--\n",
        "text": "10",
        "token_cnt": 878
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n\nfunction getHighSmmScore(input) {\n  let smmScore;\n\n  \n  if (input === \"politics\") {\n    smmScore = 80;\n  } else if (input === \"business\") {\n    smmScore = 75;\n  } else if (input === \"entertainment\") {\n    smmScore = 90;\n  } else {\n    console.log(\"Invalid input!\");\n    return undefined;\n  }\n  \n  \n  const sentimentData = [\n    {\"post\": \"Positive post\", \"sentiment\": 0.6}, \n    {\"post\": \"Negative post\", \"sentiment\": -0.4}\n  ];\n  let totalSentiment = 0;\n  for (const entry of sentimentData) {\n    totalSentiment += entry[\"sentiment\"];\n  }\n  const avgSentiment = totalSentiment / sentimentData.length;\n  \n  \n  if (avgSentiment > 0) {\n    return `Based on your preference (${input}), highly recommended!`;\n  } else {\n    return `Some caution may be advised given the negative tone of posts regarding ${input}. Please consider this when forming opinions.`\n  }\n}\n\n\nconsole.log(getHighSmmScore('politics'));    \nconsole.log(getHighSmmScore('sports'));      \nconsole.log(getHighSmmScore('Business'));",
            "id": 276
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (ERROR (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement (identifier)))))) (ERROR (type_identifier) (variable_declarator name: (identifier) (ERROR) value: (array_initializer (ERROR (string_literal (string_fragment))) (string_literal (string_fragment)) (string_literal (string_fragment)) (ERROR (decimal_floating_point_literal))))) (block (ERROR (string_literal (string_fragment)) (string_literal (string_fragment)) (binary_expression left: (string_literal (string_fragment)) (ERROR) right: (decimal_floating_point_literal)))) (ERROR) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (type_identifier) (ERROR (identifier) (identifier) name: (identifier) (identifier) (identifier)) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (string_fragment)))\n**\n\n--\nscript\n\nfunction getHighSmmScore(input) {\n  let smmScore;\n\n  \n  if (input === \"politics\") {\n    smmScore = 80;\n  } else if (input === \"business\") {\n    smmScore = 75;\n  } else if (input === \"entertainment\") {\n    smmScore = 90;\n  } else {\n    console.log(\"Invalid input!\");\n    return undefined;\n  }\n  \n  \n  const sentimentData = [\n    {\"post\": \"Positive post\", \"sentiment\": 0.6}, \n    {\"post\": \"Negative post\", \"sentiment\": -0.4}\n  ];\n  let totalSentiment = 0;\n  for (const entry of sentimentData) {\n    totalSentiment += entry[\"sentiment\"];\n  }\n  const avgSentiment = totalSentiment / sentimentData.length;\n  \n  \n  if (avgSentiment > 0) {\n    return `Based on your preference (${input}), highly recommended!`;\n  } else {\n    return `Some caution may be advised given the negative tone of posts regarding ${input}. Please consider this when forming opinions.`\n  }\n}\n\n\nconsole.log(getHighSmmScore('politics'));    \nconsole.log(getHighSmmScore('sports'));      \nconsole.log(getHighSmmScore('Business'));\n--\n",
        "text": "12",
        "token_cnt": 888
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class LoanCalculations {\n    public static void main(String[] args) {\n        \n        double principal = Double.parseDouble(args[0]);\n        int years = Integer.parseInt(args[1]);\n        double rate = Double.parseDouble(args[2]);\n\n        \n        double monthlyPayment = calculateMonthlyPayment(principal,years,rate);\n        \n        System.out.println(\"Monthly Payment: \" +monthlyPayment);\n\n    }\n    \n    private static double calculateMonthlyPayment(double principal,int years,double rate){\n        double monthlyInterestRate = rate / 12;\n        double factor = Math.pow((1+monthlyInterestRate),years*12)-1;\n        return (factor * principal )/ years ;\n        \n    }\n    \n}",
            "id": 279
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier) (identifier))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))) (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (floating_point_type) name: (identifier)) (formal_parameter type: (integral_type) name: (identifier)) (formal_parameter type: (floating_point_type) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (identifier) right: (decimal_integer_literal)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (parenthesized_expression (binary_expression left: (decimal_integer_literal) right: (identifier))) (binary_expression left: (identifier) right: (decimal_integer_literal)))) right: (decimal_integer_literal)))) (return_statement (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (identifier))) right: (identifier))))))))\n**\n\n--\nimport java.util.*;\npublic class LoanCalculations {\n    public static void main(String[] args) {\n        \n        double principal = Double.parseDouble(args[0]);\n        int years = Integer.parseInt(args[1]);\n        double rate = Double.parseDouble(args[2]);\n\n        \n        double monthlyPayment = calculateMonthlyPayment(principal,years,rate);\n        \n        System.out.println(\"Monthly Payment: \" +monthlyPayment);\n\n    }\n    \n    private static double calculateMonthlyPayment(double principal,int years,double rate){\n        double monthlyInterestRate = rate / 12;\n        double factor = Math.pow((1+monthlyInterestRate),years*12)-1;\n        return (factor * principal )/ years ;\n        \n    }\n    \n}\n--\n",
        "text": "6",
        "token_cnt": 924
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class ExpertAccessControl {\n\n    private static final String ADMIN_ROLE = \"ADMIN\";\n    private static final String ANALYST_ROLE = \"ANALYST\";\n    \n    public boolean hasAccess(String role, String resource) {\n        \n        if (role.equals(ADMIN_ROLE)) {\n            return true;\n        }\n        \n        \n        else if (role.equals(ANALYST_ROLE)) {\n            if (resource.startsWith(\"analyze\")) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n    \n}",
            "id": 291
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (field_declaration (modifiers) type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (field_declaration (modifiers) type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (type_identifier) name: (identifier))) body: (block (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))) consequence: (block (return_statement (true))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))) consequence: (block (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (return_statement (true))))))) (return_statement (false)))))))\n**\n\n--\npublic class ExpertAccessControl {\n\n    private static final String ADMIN_ROLE = \"ADMIN\";\n    private static final String ANALYST_ROLE = \"ANALYST\";\n    \n    public boolean hasAccess(String role, String resource) {\n        \n        if (role.equals(ADMIN_ROLE)) {\n            return true;\n        }\n        \n        \n        else if (role.equals(ANALYST_ROLE)) {\n            if (resource.startsWith(\"analyze\")) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n    \n}\n--\n",
        "text": "10",
        "token_cnt": 474
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public double calculateLowHandlingCost(String itemType) {\n        \n        double lowHandlingCost = 0;\n    \n        \n        if (itemType == \"Electronic\") {\n            \n            lowHandlingCost = 5;\n        } else if (itemType == \"Furniture\" || itemType == \"Appliance\") {\n            \n            \n            lowHandlingCost = 10;\n        } else {\n            \n            lowHandlingCost = 2;\n        }\n    \n        return lowHandlingCost;\n    }",
            "id": 294
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (string_literal (string_fragment))) right: (binary_expression left: (identifier) right: (string_literal (string_fragment))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))))) (return_statement (identifier)))))\n**\n\n--\npublic double calculateLowHandlingCost(String itemType) {\n        \n        double lowHandlingCost = 0;\n    \n        \n        if (itemType == \"Electronic\") {\n            \n            lowHandlingCost = 5;\n        } else if (itemType == \"Furniture\" || itemType == \"Appliance\") {\n            \n            \n            lowHandlingCost = 10;\n        } else {\n            \n            lowHandlingCost = 2;\n        }\n    \n        return lowHandlingCost;\n    }\n--\n",
        "text": "6\nОбъяснение:\nПредставленный фрагмент содержит один метод с одним параметром типа `String`",
        "token_cnt": 418
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\nfunction determineHighFitness(trustLevel) {\n  \n  if (!Number.isInteger(trustLevel)) return 'Invalid input';\n\n  let result;\n  if (trustLevel === 0 || trustLevel > 100) {\n    result = 'Unreliable source';\n  } else if (trustLevel >= 75 && trustLevel <= 90) {\n    result = 'Moderately reliable';\n  } else if (trustLevel >= 60 && trustLevel < 75) {\n    result = 'Somewhat reliable';\n  } else if (trustLevel >= 40 && trustLevel < 60) {\n    result = 'Possibly unreliable';\n  } else {\n    result = 'Very unreliable';\n  }\n  \n  \n  console.log(`Based on provided trust level (${trustLevel}), \n    step count analysis indicates ${result} fitness`);\n    \n  return result;\n}",
            "id": 296
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (if_statement condition: (condition (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))) consequence: (return_statement (character_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) (ERROR) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal)))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal)))))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier)) (method_invocation name: (identifier) arguments: (argument_list (identifier) (ERROR (identifier)))) (ERROR (type_identifier) (identifier) (type_identifier) (identifier)) (identifier) (ERROR (identifier) (identifier) (UNEXPECTED '`'))))) (return_statement (identifier))))\n**\n\n--\nscript\nfunction determineHighFitness(trustLevel) {\n  \n  if (!Number.isInteger(trustLevel)) return 'Invalid input';\n\n  let result;\n  if (trustLevel === 0 || trustLevel > 100) {\n    result = 'Unreliable source';\n  } else if (trustLevel >= 75 && trustLevel <= 90) {\n    result = 'Moderately reliable';\n  } else if (trustLevel >= 60 && trustLevel < 75) {\n    result = 'Somewhat reliable';\n  } else if (trustLevel >= 40 && trustLevel < 60) {\n    result = 'Possibly unreliable';\n  } else {\n    result = 'Very unreliable';\n  }\n  \n  \n  console.log(`Based on provided trust level (${trustLevel}), \n    step count analysis indicates ${result} fitness`);\n    \n  return result;\n}\n--\n",
        "text": "8",
        "token_cnt": 851
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public void UpdateExtremeClothingCleanliness(String FabricType, int NewSafety) {\n    \n    if (FabricType == \"Cotton\") {\n        \n        this.CottonSafety = NewSafety;\n        \n        \n        if (NewSafety < MinSafety)\n            MinSafety = NewSafety;\n    }\n    \n    \n    else if (FabricType == \"Wool\") {\n        \n        this.WoolSafety = NewSafety;\n    \n        \n        if (NewSafety < MinSafety)\n            MinSafety = NewSafety;\n    }\n    \n    \n    else if (FabricType == \"Silk\") {\n        \n        this.SilkSafety = NewSafety;\n    \n        \n        if (NewSafety < MinSafety)\n            MinSafety = NewSafety;\n    }\n    \n    \n    else if (FabricType == \"Leather\") {\n        \n        this.LeatherSafety = NewSafety;\n    \n        \n        if (NewSafety < MinSafety)\n            MinSafety = NewSafety;\n    }\n    \n    \n    else {\n        System.out.println(\"Invalid Input!\");\n    }\n}",
            "id": 302
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (integral_type) name: (identifier))) body: (block (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (identifier))) consequence: (expression_statement (assignment_expression left: (identifier) right: (identifier))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (identifier))) consequence: (expression_statement (assignment_expression left: (identifier) right: (identifier))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (identifier))) consequence: (expression_statement (assignment_expression left: (identifier) right: (identifier))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (identifier))) consequence: (expression_statement (assignment_expression left: (identifier) right: (identifier))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))))\n**\n\n--\npublic void UpdateExtremeClothingCleanliness(String FabricType, int NewSafety) {\n    \n    if (FabricType == \"Cotton\") {\n        \n        this.CottonSafety = NewSafety;\n        \n        \n        if (NewSafety < MinSafety)\n            MinSafety = NewSafety;\n    }\n    \n    \n    else if (FabricType == \"Wool\") {\n        \n        this.WoolSafety = NewSafety;\n    \n        \n        if (NewSafety < MinSafety)\n            MinSafety = NewSafety;\n    }\n    \n    \n    else if (FabricType == \"Silk\") {\n        \n        this.SilkSafety = NewSafety;\n    \n        \n        if (NewSafety < MinSafety)\n            MinSafety = NewSafety;\n    }\n    \n    \n    else if (FabricType == \"Leather\") {\n        \n        this.LeatherSafety = NewSafety;\n    \n        \n        if (NewSafety < MinSafety)\n            MinSafety = NewSafety;\n    }\n    \n    \n    else {\n        System.out.println(\"Invalid Input!\");\n    }\n}\n--\n",
        "text": "4",
        "token_cnt": 833
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script \n\nlet timeSinceLastHandwash = Math.random() * 60; \nconsole.log(`It has been ${timeSinceLastHandwash} minutes since your last hand washing`);\n\n\nif(privacyLevel === 'public') {\n  console.log('WASH YOUR HANDS!');\n} else if(privacyLevel === 'semiPrivate' || privacyLevel === 'private') {\n  let chanceOfTransmission = Math.random();\n  \n  if(chanceOfTransmission < 0.1) {\n    console.log(\"Consider washing your hands.\"); \n  } else { \n    console.log(\"No need to worry about transmission at this moment.\")   \n  }\n  \n} else {\n  throw new Error('Invalid privacy setting');  \n}",
            "id": 303
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (decimal_integer_literal)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (UNEXPECTED '`'))))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) (ERROR) right: (character_literal)) right: (binary_expression left: (identifier) (ERROR) right: (character_literal)))) consequence: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_floating_point_literal))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\"))))) alternative: (block (throw_statement (object_creation_expression type: (type_identifier) arguments: (argument_list (character_literal))))))))\n**\n\n--\nscript \n\nlet timeSinceLastHandwash = Math.random() * 60; \nconsole.log(`It has been ${timeSinceLastHandwash} minutes since your last hand washing`);\n\n\nif(privacyLevel === 'public') {\n  console.log('WASH YOUR HANDS!');\n} else if(privacyLevel === 'semiPrivate' || privacyLevel === 'private') {\n  let chanceOfTransmission = Math.random();\n  \n  if(chanceOfTransmission < 0.1) {\n    console.log(\"Consider washing your hands.\"); \n  } else { \n    console.log(\"No need to worry about transmission at this moment.\")   \n  }\n  \n} else {\n  throw new Error('Invalid privacy setting');  \n}\n--\n",
        "text": "5\n\nОбъяснение:\nВ приведённом фрагменте кода можно выделить пять базовых путей выполнения",
        "token_cnt": 685
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script \n\nconst origin = { lat: 48.8567, lng: 2.2973 }; \nconst destination = { lat: 48.8510, lng: 2.3020 }; \nconst biases = [\"fastest\", \"shortest\"]; \n\nfunction calculateLowTransportRoute(origin, destination, biases) {\n  let route;\n\n  \n  for (let i = 0; i < biases.length; i++) {\n    const currentBias = biases[i];\n\n    \n    if (currentBias === \"public_transit\") {\n      if (canUsePublicTransit(origin, destination)) {\n        route = getPublicTransitRoute(origin, destination);\n        break;\n      } else {\n        continue; \n      }\n    }\n\n    \n    if (currentBias === \"biking\") {\n      if (canUseBiking(origin, destination)) {\n        route = getBikeRoute(origin, destination);\n        break;\n      } else {\n        continue; \n      }\n    }\n\n    \n    if (currentBias === \"driving\") {\n      if (canUseDriving(origin, destination)) {\n        route = getDriveRoute(origin, destination);\n        break;\n      } else {\n        continue; \n      }\n    }\n  }\n\n  return route;\n}",
            "id": 310
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier) value: (array_initializer (ERROR (identifier)) (decimal_floating_point_literal) (ERROR (identifier)) (decimal_floating_point_literal)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (array_initializer (ERROR (identifier)) (decimal_floating_point_literal) (ERROR (identifier)) (decimal_floating_point_literal)))) (ERROR (type_identifier) (variable_declarator name: (identifier) (ERROR) value: (string_literal (string_fragment)))) (expression_statement (string_literal (string_fragment)) (ERROR)) (method_declaration type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) (ERROR) name: (identifier)) (formal_parameter type: (type_identifier) name: (MISSING identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (for_statement init: (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) condition: (binary_expression left: (identifier) right: (field_access object: (identifier) field: (identifier))) update: (update_expression (identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (array_access array: (identifier) index: (identifier)))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (string_literal (string_fragment)))) consequence: (block (if_statement condition: (condition (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier))))) (break_statement)) alternative: (block (continue_statement))))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (string_literal (string_fragment)))) consequence: (block (if_statement condition: (condition (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier))))) (break_statement)) alternative: (block (continue_statement))))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (string_literal (string_fragment)))) consequence: (block (if_statement condition: (condition (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier))))) (break_statement)) alternative: (block (continue_statement))))))) (return_statement (identifier)))))\n**\n\n--\nscript \n\nconst origin = { lat: 48.8567, lng: 2.2973 }; \nconst destination = { lat: 48.8510, lng: 2.3020 }; \nconst biases = [\"fastest\", \"shortest\"]; \n\nfunction calculateLowTransportRoute(origin, destination, biases) {\n  let route;\n\n  \n  for (let i = 0; i < biases.length; i++) {\n    const currentBias = biases[i];\n\n    \n    if (currentBias === \"public_transit\") {\n      if (canUsePublicTransit(origin, destination)) {\n        route = getPublicTransitRoute(origin, destination);\n        break;\n      } else {\n        continue; \n      }\n    }\n\n    \n    if (currentBias === \"biking\") {\n      if (canUseBiking(origin, destination)) {\n        route = getBikeRoute(origin, destination);\n        break;\n      } else {\n        continue; \n      }\n    }\n\n    \n    if (currentBias === \"driving\") {\n      if (canUseDriving(origin, destination)) {\n        route = getDriveRoute(origin, destination);\n        break;\n      } else {\n        continue; \n      }\n    }\n  }\n\n  return route;\n}\n--\n",
        "text": "31",
        "token_cnt": 1122
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\n\npublic class LowSecurityIdentityVerification implements IdentityVerificationService {\n\n    private Map<String, String> users = new HashMap<>();\n    \n    @Override\n    public void addUser(String userId, String hashedPassword) {\n        users.put(userId, hashedPassword);\n    }\n\n    @Override\n    public void removeUser(String userId) {\n        users.remove(userId);\n    }\n\n    @Override\n    public boolean verifyIdentity(String userId, String password) throws UserDoesNotExistException, InvalidPasswordException {\n        \n        if (!users.containsKey(userId)) {\n            throw new UserDoesNotExistException();\n        }\n        \n        \n        String hashedPassword = users.get(userId);\n        return PasswordUtils.comparePasswords(password, hashedPassword);\n    }    \n    \n}",
            "id": 312
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) interfaces: (super_interfaces (type_list (type_identifier))) body: (class_body (field_declaration (modifiers) type: (generic_type (type_identifier) (type_arguments (type_identifier) (type_identifier))) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (generic_type (type_identifier) (type_arguments)) arguments: (argument_list)))) (method_declaration (modifiers (marker_annotation name: (identifier))) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (type_identifier) name: (identifier))) body: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier) (identifier)))))) (method_declaration (modifiers (marker_annotation name: (identifier))) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))))) (method_declaration (modifiers (marker_annotation name: (identifier))) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (type_identifier) name: (identifier))) (throws (type_identifier) (type_identifier)) body: (block (if_statement condition: (condition (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))) consequence: (block (throw_statement (object_creation_expression type: (type_identifier) arguments: (argument_list))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))) (return_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier) (identifier)))))))))\n**\n\n--\nimport java.util.*;\n\npublic class LowSecurityIdentityVerification implements IdentityVerificationService {\n\n    private Map<String, String> users = new HashMap<>();\n    \n    @Override\n    public void addUser(String userId, String hashedPassword) {\n        users.put(userId, hashedPassword);\n    }\n\n    @Override\n    public void removeUser(String userId) {\n        users.remove(userId);\n    }\n\n    @Override\n    public boolean verifyIdentity(String userId, String password) throws UserDoesNotExistException, InvalidPasswordException {\n        \n        if (!users.containsKey(userId)) {\n            throw new UserDoesNotExistException();\n        }\n        \n        \n        String hashedPassword = users.get(userId);\n        return PasswordUtils.comparePasswords(password, hashedPassword);\n    }    \n    \n}\n--\n",
        "text": "6\n\nОбъяснение:\n\nЦикломатическая сложность — это метрика, которая оценивает сложность",
        "token_cnt": 788
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\nfunction calculateOralHygiene(sugarIntake) {\n  let score = 0;\n\n  \n  if (sugarIntake <= 25) {\n    \n    if (true) {\n      score += 5;\n    }\n\n    \n    if (false) {\n      score -= 2;\n    }\n\n    return score;\n  } else {\n    \n    return \"Unhealthy sugar intake\";\n  }\n}",
            "id": 315
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (if_statement condition: (condition (true)) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))))) (if_statement condition: (condition (false)) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))))) (return_statement (identifier))) alternative: (block (return_statement (string_literal (string_fragment)))))))\n**\n\n--\nscript\nfunction calculateOralHygiene(sugarIntake) {\n  let score = 0;\n\n  \n  if (sugarIntake <= 25) {\n    \n    if (true) {\n      score += 5;\n    }\n\n    \n    if (false) {\n      score -= 2;\n    }\n\n    return score;\n  } else {\n    \n    return \"Unhealthy sugar intake\";\n  }\n}\n--\n",
        "text": "8",
        "token_cnt": 373
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class DisplayLowFlossing {\n\n    public static void main(String[] args) {\n        String userRole = getUserRole();\n\n        \n        switch (userRole) {\n            case \"expert\":\n                System.out.println(\"Choosing dental floss for engineers\");\n                break;\n            default:\n                System.out.println(\"Displaying low flossing information for experts only.\");\n        }\n    }\n\n    private static String getUserRole() {\n        return \"expert\";\n    }\n}",
            "id": 317
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list)))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))) (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters) body: (block (return_statement (string_literal (string_fragment))))))))\n**\n\n--\npublic class DisplayLowFlossing {\n\n    public static void main(String[] args) {\n        String userRole = getUserRole();\n\n        \n        switch (userRole) {\n            case \"expert\":\n                System.out.println(\"Choosing dental floss for engineers\");\n                break;\n            default:\n                System.out.println(\"Displaying low flossing information for experts only.\");\n        }\n    }\n\n    private static String getUserRole() {\n        return \"expert\";\n    }\n}\n--\n",
        "text": "10",
        "token_cnt": 480
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class CalculatingHighFloss {\n\n    public static void main(String[] args){\n        String typeOfFloss = \"Waxed\";\n\n        double result;\n        \n        \n        if (typeOfFloss == \"Unwaxed\") {\n            System.out.println(\"The unwaxed option has less drag than waxed but can cause irritation.\");\n            result = .01 * Math.random();\n        } else if (typeOfFloss == \"Waxed\"){\n            System.out.println(\"The waxed option provides more comfort due to its smooth texture while still being effective at removing plaque.\"); \n            result = .03 * Math.random();\n        } else{\n            System.out.println(\"Invalid input\");\n            return;\n        }\n    \n        System.out.printf(\"For %s floss, the expected amount of time needed to remove plaque is %.2f seconds.\", typeOfFloss,result);\n    }\n}",
            "id": 322
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (decimal_floating_point_literal) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (decimal_floating_point_literal) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (identifier) (identifier)))))))))\n**\n\n--\npublic class CalculatingHighFloss {\n\n    public static void main(String[] args){\n        String typeOfFloss = \"Waxed\";\n\n        double result;\n        \n        \n        if (typeOfFloss == \"Unwaxed\") {\n            System.out.println(\"The unwaxed option has less drag than waxed but can cause irritation.\");\n            result = .01 * Math.random();\n        } else if (typeOfFloss == \"Waxed\"){\n            System.out.println(\"The waxed option provides more comfort due to its smooth texture while still being effective at removing plaque.\"); \n            result = .03 * Math.random();\n        } else{\n            System.out.println(\"Invalid input\");\n            return;\n        }\n    \n        System.out.printf(\"For %s floss, the expected amount of time needed to remove plaque is %.2f seconds.\", typeOfFloss,result);\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 774
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n\nconst safety = prompt(\"Please enter your level of experience (low, medium, high): \");\nlet message;\nswitch(safety) {\n  case \"high\":\n    message = \"Congratulations, you've chosen a very safe option!\";\n    break;\n  case \"medium\":\n    message = \"This option has a moderate risk of injury.\";\n    break;\n  default: \n    message = \"WARNING: This option involves significant risks of harm!\";\n}\nalert(`${message}\\n\\nDry run complete. Now including explanatory comments...`);",
            "id": 327
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (scoped_type_identifier (type_identifier) (ERROR (identifier) (escape_sequence) (escape_sequence) (identifier) (identifier) (identifier)) (type_identifier)) (identifier) (type_identifier) (identifier) (UNEXPECTED '`'))))))\n**\n\n--\nscript\n\nconst safety = prompt(\"Please enter your level of experience (low, medium, high): \");\nlet message;\nswitch(safety) {\n  case \"high\":\n    message = \"Congratulations, you've chosen a very safe option!\";\n    break;\n  case \"medium\":\n    message = \"This option has a moderate risk of injury.\";\n    break;\n  default: \n    message = \"WARNING: This option involves significant risks of harm!\";\n}\nalert(`${message}\\n\\nDry run complete. Now including explanatory comments...`);\n--\n",
        "text": "6\n\nОбъяснение:\nВ приведённом фрагменте кода цикломатическая сложность равна количеству рё",
        "token_cnt": 501
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class CheckHighEarHygiene {\n\n    public static void main(String[] args) throws IOException{\n        \n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter name of symptom\");\n        String earSymptoms = scan.nextLine();\n\n        \n        boolean isValidInput = false;\n        while (!isValidInput){\n            if (earSymptoms == null || \"\".equals(earSymptoms)) {\n                System.out.println(\"Please enter valid value.\");\n                earSymptoms = scan.nextLine();\n            } else {\n                isValidInput = true;\n            }\n        }\n        \n        \n\n        \n        if (\"Itching\".equalsIgnoreCase(earSymptoms)){\n           System.out.println(\"Seek medical attention immediately!\"); \n           return ;\n        } else if (\"Pain\".equalsIgnoreCase(earSymptoms)){\n            System.out.println(\"Try over-the-counter pain relievers like ibuprofen or acetaminophen before seeking professional help.\"); \n            return ;    \n        } else if (\"Discharge\".equalsIgnoreCase(earSymptoms)){\n            System.out.println(\"Wash your hands thoroughly after touching your ears and use cotton swabs to clean any discharge from inside your ears.\"); \n            return ;    \n        } else if (\"Hearing loss\".equalsIgnoreCase(earSymptoms)){\n            System.out.println(\"If hearing loss occurs suddenly, seek immediate medical care. Otherwise, try gentle cleaning solutions and avoid excessive noise exposure.\"); \n            return ;    \n        } else if (\"Fever\".equalsIgnoreCase(earSymptoms)){\n            System.out.println(\"See a doctor promptly if you also experience severe headache, stiff neck, confusion, vomiting, or difficulty walking.\"); \n            return ;    \n        } else {\n            System.out.println(\"Consult a healthcare provider for further evaluation and treatment options tailored to your individual needs.\"); \n            return ;    \n        }\n    }\n}",
            "id": 330
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (while_statement condition: (condition (unary_expression operand: (identifier))) body: (block (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (null_literal)) right: (method_invocation object: (string_literal) name: (identifier) arguments: (argument_list (identifier))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (true))))))) (if_statement condition: (condition (method_invocation object: (string_literal (string_fragment)) name: (identifier) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement)) alternative: (if_statement condition: (condition (method_invocation object: (string_literal (string_fragment)) name: (identifier) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement)) alternative: (if_statement condition: (condition (method_invocation object: (string_literal (string_fragment)) name: (identifier) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement)) alternative: (if_statement condition: (condition (method_invocation object: (string_literal (string_fragment)) name: (identifier) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement)) alternative: (if_statement condition: (condition (method_invocation object: (string_literal (string_fragment)) name: (identifier) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement)) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement))))))))))))\n**\n\n--\npublic class CheckHighEarHygiene {\n\n    public static void main(String[] args) throws IOException{\n        \n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter name of symptom\");\n        String earSymptoms = scan.nextLine();\n\n        \n        boolean isValidInput = false;\n        while (!isValidInput){\n            if (earSymptoms == null || \"\".equals(earSymptoms)) {\n                System.out.println(\"Please enter valid value.\");\n                earSymptoms = scan.nextLine();\n            } else {\n                isValidInput = true;\n            }\n        }\n        \n        \n\n        \n        if (\"Itching\".equalsIgnoreCase(earSymptoms)){\n           System.out.println(\"Seek medical attention immediately!\"); \n           return ;\n        } else if (\"Pain\".equalsIgnoreCase(earSymptoms)){\n            System.out.println(\"Try over-the-counter pain relievers like ibuprofen or acetaminophen before seeking professional help.\"); \n            return ;    \n        } else if (\"Discharge\".equalsIgnoreCase(earSymptoms)){\n            System.out.println(\"Wash your hands thoroughly after touching your ears and use cotton swabs to clean any discharge from inside your ears.\"); \n            return ;    \n        } else if (\"Hearing loss\".equalsIgnoreCase(earSymptoms)){\n            System.out.println(\"If hearing loss occurs suddenly, seek immediate medical care. Otherwise, try gentle cleaning solutions and avoid excessive noise exposure.\"); \n            return ;    \n        } else if (\"Fever\".equalsIgnoreCase(earSymptoms)){\n            System.out.println(\"See a doctor promptly if you also experience severe headache, stiff neck, confusion, vomiting, or difficulty walking.\"); \n            return ;    \n        } else {\n            System.out.println(\"Consult a healthcare provider for further evaluation and treatment options tailored to your individual needs.\"); \n            return ;    \n        }\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 1461
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\nfunction getClothingCleanliness(washTemp) {\n  if (washTemp === 'high') {\n    return 'High';\n  } else { \n    \n    return 'Medium'; \n  }\n}\n\n\nconst result = getClothingCleanliness('high');\nconsole.log(`Laundry requires ${result} level of cleanliness`);",
            "id": 334
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (return_statement (character_literal))) alternative: (block (return_statement (character_literal))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (character_literal))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier)) (identifier) (ERROR (identifier) (identifier) (identifier) (identifier) (UNEXPECTED '`'))))))\n**\n\n--\nscript\nfunction getClothingCleanliness(washTemp) {\n  if (washTemp === 'high') {\n    return 'High';\n  } else { \n    \n    return 'Medium'; \n  }\n}\n\n\nconst result = getClothingCleanliness('high');\nconsole.log(`Laundry requires ${result} level of cleanliness`);\n--\n",
        "text": "10",
        "token_cnt": 354
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n\nif (privacy === 'public') {\n  console.log('1. Wash your hands before handling lenses');\n  console.log('2. Clean your lens case with disinfecting solution daily');\n  console.log('3. Remove contact lenses before swimming or showering');\n  console.log('4. Replace your contacts every 6 months or as directed by your eye care professional');\n} else if (privacy === 'private') {\n  console.log('1. Wash your hands before handling lenses');\n  console.log('2. Put on fresh gloves before cleaning your lens case');\n  console.log('3. Avoid touching your eyes, nose, and mouth after removing lenses unless you just washed your hands');\n  console.log('4. Never reuse solutions or rinse water from one day to another');\n  console.log('5. Throw away any expired products according to their recommended shelf life');\n} else {\n  \n  console.error('Invalid privacy level specified!');\n}",
            "id": 335
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration type: (type_identifier) name: (identifier) parameters: (formal_parameters (ERROR (type_identifier) (ERROR (character_literal)) (identifier) (identifier) (character_literal)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal)))) (ERROR) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal))))) alternative: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal)))))))\n**\n\n--\nscript\n\nif (privacy === 'public') {\n  console.log('1. Wash your hands before handling lenses');\n  console.log('2. Clean your lens case with disinfecting solution daily');\n  console.log('3. Remove contact lenses before swimming or showering');\n  console.log('4. Replace your contacts every 6 months or as directed by your eye care professional');\n} else if (privacy === 'private') {\n  console.log('1. Wash your hands before handling lenses');\n  console.log('2. Put on fresh gloves before cleaning your lens case');\n  console.log('3. Avoid touching your eyes, nose, and mouth after removing lenses unless you just washed your hands');\n  console.log('4. Never reuse solutions or rinse water from one day to another');\n  console.log('5. Throw away any expired products according to their recommended shelf life');\n} else {\n  \n  console.error('Invalid privacy level specified!');\n}\n--\n",
        "text": "8\n\nОбъяснение:\n\nЦикломатическая сложность — это мера сложности программного кода, которая",
        "token_cnt": 615
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public enum HygieneLevel {\n    HIGH(\"Seeking professional help\"), \n    MEDIUM(\"Some improvement needed\"), \n    LOW(\"Fairly healthy\");\n\n    private final String description;\n    \n    HygieneLevel(String desc){\n        this.description = desc;\n    }\n    \n    public String getDescription(){\n        return this.description;\n    }\n    \n}",
            "id": 336
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (enum_declaration (modifiers) name: (identifier) body: (enum_body (enum_constant name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (enum_constant name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (enum_constant name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (enum_body_declarations (field_declaration (modifiers) type: (type_identifier) declarator: (variable_declarator name: (identifier))) (constructor_declaration name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (constructor_body (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (identifier))))) (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters) body: (block (return_statement (field_access object: (this) field: (identifier)))))))))\n**\n\n--\npublic enum HygieneLevel {\n    HIGH(\"Seeking professional help\"), \n    MEDIUM(\"Some improvement needed\"), \n    LOW(\"Fairly healthy\");\n\n    private final String description;\n    \n    HygieneLevel(String desc){\n        this.description = desc;\n    }\n    \n    public String getDescription(){\n        return this.description;\n    }\n    \n}\n--\n",
        "text": "4\n\nОбъяснение:\nВ приведённом фрагменте кода 4 пути выполнения. Это",
        "token_cnt": 372
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Calculator {\n\n    public static int calculateLowEducation(String ethic) \n    {\n        \n        int result = -1;\n\n        /*\n         * Switch case statement \n         */\n        switch (ethic){\n            case \"Asian\":\n                result =  25; \n                break; \n            case \"Black or African American\":\n                result =  30; \n                break; \n            case \"Hispanic or Latino\":\n                result =  40; \n                break; \n            default:\n                System.out.println(\"Invalid input\");\n        } \n\n        return result;\n    }\n}",
            "id": 337
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (unary_expression operand: (decimal_integer_literal)))) (block_comment) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))) (return_statement (identifier)))))))\n**\n\n--\npublic class Calculator {\n\n    public static int calculateLowEducation(String ethic) \n    {\n        \n        int result = -1;\n\n        /*\n         * Switch case statement \n         */\n        switch (ethic){\n            case \"Asian\":\n                result =  25; \n                break; \n            case \"Black or African American\":\n                result =  30; \n                break; \n            case \"Hispanic or Latino\":\n                result =  40; \n                break; \n            default:\n                System.out.println(\"Invalid input\");\n        } \n\n        return result;\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 538
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n\nfunction updateUberRating(safetyScore) {\n  \n  if (safetyScore >= 4.0 && safetyScore <= 4.6) {\n    return \"Excellent\";\n  } else if (safetyScore > 3.5 && safetyScore < 4.0) {\n    return \"Good\";\n  } else if (safetyScore >= 2.7 && safetyScore < 3.5) {\n    return \"Fair\";\n  } else {\n    return \"Poor\";\n  }\n}\n\n\nlet rating = updateUberRating(4.1);\nconsole.log(\"The updated rating is:\", rating);",
            "id": 338
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_floating_point_literal)) right: (binary_expression left: (identifier) right: (decimal_floating_point_literal)))) consequence: (block (return_statement (string_literal (string_fragment)))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_floating_point_literal)) right: (binary_expression left: (identifier) right: (decimal_floating_point_literal)))) consequence: (block (return_statement (string_literal (string_fragment)))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_floating_point_literal)) right: (binary_expression left: (identifier) right: (decimal_floating_point_literal)))) consequence: (block (return_statement (string_literal (string_fragment)))) alternative: (block (return_statement (string_literal (string_fragment)))))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (decimal_floating_point_literal))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (identifier)))))\n**\n\n--\nscript\n\nfunction updateUberRating(safetyScore) {\n  \n  if (safetyScore >= 4.0 && safetyScore <= 4.6) {\n    return \"Excellent\";\n  } else if (safetyScore > 3.5 && safetyScore < 4.0) {\n    return \"Good\";\n  } else if (safetyScore >= 2.7 && safetyScore < 3.5) {\n    return \"Fair\";\n  } else {\n    return \"Poor\";\n  }\n}\n\n\nlet rating = updateUberRating(4.1);\nconsole.log(\"The updated rating is:\", rating);\n--\n",
        "text": "8",
        "token_cnt": 578
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n\nlet clothesCleanliness = \"High\"; \n\n\nlet laundryInstructions; \n\n\nconst laundryMapping = {\n  Low: \"Wash in cold water with mild detergent.\", \n  Medium: \"Wash in warm water with regular detergent.\", \n  High: \"Wash in hot water with strong detergent.\"\n}; \n\n\nif (clothesCleanliness in laundryMapping) { \n    \n    laundryInstructions = laundryMapping[clothesCleanliness]; \n} else { \n    \n    console.log(\"Invalid input value.\"); \n} \n\nconsole.log(`For high clothing cleanliness, the recommended laundry instructions are: ${laundryInstructions}`);",
            "id": 339
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (array_initializer (ERROR (identifier)) (string_literal (string_fragment)) (ERROR (identifier)) (string_literal (string_fragment)) (ERROR (identifier)) (string_literal (string_fragment))))) (if_statement condition: (condition (ERROR (type_identifier) (identifier)) (identifier)) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (array_access array: (identifier) index: (identifier))))) alternative: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier) (ERROR (type_identifier) (identifier) (type_identifier) (identifier)) (identifier)) (identifier) (ERROR (identifier) (UNEXPECTED '`'))))))\n**\n\n--\nscript\n\nlet clothesCleanliness = \"High\"; \n\n\nlet laundryInstructions; \n\n\nconst laundryMapping = {\n  Low: \"Wash in cold water with mild detergent.\", \n  Medium: \"Wash in warm water with regular detergent.\", \n  High: \"Wash in hot water with strong detergent.\"\n}; \n\n\nif (clothesCleanliness in laundryMapping) { \n    \n    laundryInstructions = laundryMapping[clothesCleanliness]; \n} else { \n    \n    console.log(\"Invalid input value.\"); \n} \n\nconsole.log(`For high clothing cleanliness, the recommended laundry instructions are: ${laundryInstructions}`);\n--\n",
        "text": "5",
        "token_cnt": 516
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number of days since last inspection\");\n        int daySinceLastInspection = scan.nextInt();\n\n        \n        boolean didCleaningScheduleFollowed = (daySinceLastInspection ==0)?false:true; \n\n        \n        if((didCleaningScheduleFollowed==true && daySinceLastInspection>=14 ) ||\n                ((didCleaningScheduleFollowed==false)&&(daySinceLowHygiene >=7))){\n            System.out.println(\"Low hygiene risk identified.\");\n        }\n        else{\n            System.out.println(\"No low hygiene risk found.\");\n        }\n\n    }\n}",
            "id": 342
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (ternary_expression condition: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (false) alternative: (true)))) (if_statement condition: (condition (binary_expression left: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (true)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) right: (parenthesized_expression (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (false))) right: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal))))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number of days since last inspection\");\n        int daySinceLastInspection = scan.nextInt();\n\n        \n        boolean didCleaningScheduleFollowed = (daySinceLastInspection ==0)?false:true; \n\n        \n        if((didCleaningScheduleFollowed==true && daySinceLastInspection>=14 ) ||\n                ((didCleaningScheduleFollowed==false)&&(daySinceLowHygiene >=7))){\n            System.out.println(\"Low hygiene risk identified.\");\n        }\n        else{\n            System.out.println(\"No low hygiene risk found.\");\n        }\n\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 768
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public boolean CheckLowEducation(int mathScore, int engScore, int sciScore) {\n        \n        boolean result = true;\n\n        /* Evaluate each individual test score\n           If any falls into 'low' category, set result to false */\n        if (mathScore >= 60 && mathScore <= 84) {\n            System.out.println(\"Math Score Falls Into Expected Range\");\n        } else if (mathScore < 60 || mathScore > 84) {\n            System.out.println(\"Math Score Outside Of Expected Range\");\n            result = false;\n        }\n        \n        if (engScore >= 60 && engScore <= 84) {\n            System.out.println(\"Eng Score Falls Into Expected Range\");\n        } else if (engScore < 60 || engScore > 84) {\n            System.out.println(\"Eng Score Outside Of Expected Range\");\n            result = false;\n        }\n        \n        if (sciScore >= 60 && sciScore <= 84) {\n            System.out.println(\"Sci Score Falls Into Expected Range\");\n        } else if (sciScore < 60 || sciScore > 84) {\n            System.out.println(\"Sci Score Outside Of Expected Range\");\n            result = false;\n        }\n    \n        return result;\n    }",
            "id": 345
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (integral_type) name: (identifier)) (formal_parameter type: (integral_type) name: (identifier)) (formal_parameter type: (integral_type) name: (identifier))) body: (block (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (true))) (block_comment) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (false)))))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (false)))))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (false)))))) (return_statement (identifier)))))\n**\n\n--\npublic boolean CheckLowEducation(int mathScore, int engScore, int sciScore) {\n        \n        boolean result = true;\n\n        /* Evaluate each individual test score\n           If any falls into 'low' category, set result to false */\n        if (mathScore >= 60 && mathScore <= 84) {\n            System.out.println(\"Math Score Falls Into Expected Range\");\n        } else if (mathScore < 60 || mathScore > 84) {\n            System.out.println(\"Math Score Outside Of Expected Range\");\n            result = false;\n        }\n        \n        if (engScore >= 60 && engScore <= 84) {\n            System.out.println(\"Eng Score Falls Into Expected Range\");\n        } else if (engScore < 60 || engScore > 84) {\n            System.out.println(\"Eng Score Outside Of Expected Range\");\n            result = false;\n        }\n        \n        if (sciScore >= 60 && sciScore <= 84) {\n            System.out.println(\"Sci Score Falls Into Expected Range\");\n        } else if (sciScore < 60 || sciScore > 84) {\n            System.out.println(\"Sci Score Outside Of Expected Range\");\n            result = false;\n        }\n    \n        return result;\n    }\n--\n",
        "text": "7",
        "token_cnt": 1140
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\nfunction determineStainRemovalTechnique(stainType){\n  \n  if(stainType === 'grease' || stainType === 'blood'){\n    return \"Wash garment in hot water with detergent\";\n  }\n  \n  else if(stainType === 'dirt') { \n    return [\"Scrub gently with a soft brush\", \n            \"Rinse thoroughly under cold running water\"];\n  }\n\n  \n  else{\n     return \"Apply pretreater according to manufacturer’s instructions.\";   \n  } \n}",
            "id": 350
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) (ERROR) right: (character_literal)) right: (binary_expression left: (identifier) (ERROR) right: (character_literal)))) consequence: (block (return_statement (string_literal (string_fragment)))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (return_statement (ERROR (string_literal (string_fragment))) (string_literal (string_fragment)) (ERROR))) alternative: (block (return_statement (string_literal (string_fragment))))))))\n**\n\n--\nscript\nfunction determineStainRemovalTechnique(stainType){\n  \n  if(stainType === 'grease' || stainType === 'blood'){\n    return \"Wash garment in hot water with detergent\";\n  }\n  \n  else if(stainType === 'dirt') { \n    return [\"Scrub gently with a soft brush\", \n            \"Rinse thoroughly under cold running water\"];\n  }\n\n  \n  else{\n     return \"Apply pretreater according to manufacturer’s instructions.\";   \n  } \n}\n--\n",
        "text": "6\n\nОбъяснение:\nВ приведённом фрагменте кода 6 блоков (`block`),",
        "token_cnt": 378
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class ToiletHygieneCalculator {\n\n    public static void main(String[] args) {\n        \n        int frequency = 3; \n        boolean seatCleanliness = true;\n        boolean bowlCleanliness = false;\n        boolean urinalCleanliness = false;\n\n        \n        int totalPoints = getFrequencyPoint(frequency) + getSeatCleanlinessPoint(seatCleanliness)\n                + getBowlCleanlinessPoint(bowlCleanliness) + getUrinalCleanlinessPoint(urinalCleanliness);\n\n        System.out.println(\"Total Points : \" + totalPoints);\n    }\n\n    private static int getFrequencyPoint(int frequency) {\n        if (frequency >= 1 && frequency <= 2)\n            return 5;\n        else if (frequency == 3)\n            return 7;\n        else \n            return 0;\n    }\n\n    private static int getSeatCleanlinessPoint(boolean cleanStatus) {\n        if (cleanStatus)\n            return 4;\n        else\n            return 0;\n    }\n\n    private static int getBowlCleanlinessPoint(boolean cleanStatus) {\n        if (cleanStatus)\n            return 6;\n        else\n            return 0;\n    }\n\n    private static int getUrinalCleanlinessPoint(boolean cleanStatus) {\n        if (cleanStatus)\n            return 8;\n        else\n            return 0;\n    }\n}",
            "id": 353
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (true))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (binary_expression left: (binary_expression left: (method_invocation name: (identifier) arguments: (argument_list (identifier))) right: (method_invocation name: (identifier) arguments: (argument_list (identifier)))) right: (method_invocation name: (identifier) arguments: (argument_list (identifier)))) right: (method_invocation name: (identifier) arguments: (argument_list (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))) (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (integral_type) name: (identifier))) body: (block (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (return_statement (decimal_integer_literal)) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (return_statement (decimal_integer_literal)) alternative: (return_statement (decimal_integer_literal)))))) (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier))) body: (block (if_statement condition: (condition (identifier)) consequence: (return_statement (decimal_integer_literal)) alternative: (return_statement (decimal_integer_literal))))) (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier))) body: (block (if_statement condition: (condition (identifier)) consequence: (return_statement (decimal_integer_literal)) alternative: (return_statement (decimal_integer_literal))))) (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier))) body: (block (if_statement condition: (condition (identifier)) consequence: (return_statement (decimal_integer_literal)) alternative: (return_statement (decimal_integer_literal))))))))\n**\n\n--\npublic class ToiletHygieneCalculator {\n\n    public static void main(String[] args) {\n        \n        int frequency = 3; \n        boolean seatCleanliness = true;\n        boolean bowlCleanliness = false;\n        boolean urinalCleanliness = false;\n\n        \n        int totalPoints = getFrequencyPoint(frequency) + getSeatCleanlinessPoint(seatCleanliness)\n                + getBowlCleanlinessPoint(bowlCleanliness) + getUrinalCleanlinessPoint(urinalCleanliness);\n\n        System.out.println(\"Total Points : \" + totalPoints);\n    }\n\n    private static int getFrequencyPoint(int frequency) {\n        if (frequency >= 1 && frequency <= 2)\n            return 5;\n        else if (frequency == 3)\n            return 7;\n        else \n            return 0;\n    }\n\n    private static int getSeatCleanlinessPoint(boolean cleanStatus) {\n        if (cleanStatus)\n            return 4;\n        else\n            return 0;\n    }\n\n    private static int getBowlCleanlinessPoint(boolean cleanStatus) {\n        if (cleanStatus)\n            return 6;\n        else\n            return 0;\n    }\n\n    private static int getUrinalCleanlinessPoint(boolean cleanStatus) {\n        if (cleanStatus)\n            return 8;\n        else\n            return 0;\n    }\n}\n--\n",
        "text": "14",
        "token_cnt": 1184
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) {\n        \n        System.out.println(\"Enter patient age:\");\n        int age = scan.nextInt();\n\n        String diagnosis;\n        if (age < 2) {\n            diagnosis = \"Low nose\";\n        } else if (age >= 2 && age <=10){\n            diagnosis = \"Allergy\";\n        } else{\n            diagnosis = \"Congestion\"\n        }\n        \n        \n        System.out.println(\"Diagnosis: \" + diagnosis);\n    }\n}",
            "id": 361
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))) (MISSING \";\"))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) {\n        \n        System.out.println(\"Enter patient age:\");\n        int age = scan.nextInt();\n\n        String diagnosis;\n        if (age < 2) {\n            diagnosis = \"Low nose\";\n        } else if (age >= 2 && age <=10){\n            diagnosis = \"Allergy\";\n        } else{\n            diagnosis = \"Congestion\"\n        }\n        \n        \n        System.out.println(\"Diagnosis: \" + diagnosis);\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 602
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static double calculateExtremeFinance(double initialInvestment, int yearsToRetirement, double inflationRate) {\n    \n    double annualReturn = 0;\n    double interestEarned = 0;\n    double totalValue = 0;\n\n    \n    if (yearsToRetirement <= 5) {\n        annualReturn = .06d;\n    } else if (yearsToRetirement > 5 && yearsToRetirement <=10) { \n        annualReturn = .08d; \n    } else {\n        annualReturn = .1d; \n    } \n\n    \n    interestEarned = initialInvestment * annualReturn;\n\n    \n    for (int i=0; i< yearstoRetirement ;i++) {\n        interestEarned *= (1 + inflationRate);\n        totalValue +=interestEarned;\n    }\n\n    \n    return totalValue;\n}",
            "id": 368
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (floating_point_type) name: (identifier)) (formal_parameter type: (integral_type) name: (identifier)) (formal_parameter type: (floating_point_type) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_floating_point_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_floating_point_literal)))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_floating_point_literal)))))) (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (identifier)))) (for_statement init: (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) condition: (binary_expression left: (identifier) right: (identifier)) update: (update_expression (identifier)) body: (block (expression_statement (assignment_expression left: (identifier) right: (parenthesized_expression (binary_expression left: (decimal_integer_literal) right: (identifier))))) (expression_statement (assignment_expression left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n\n--\npublic static double calculateExtremeFinance(double initialInvestment, int yearsToRetirement, double inflationRate) {\n    \n    double annualReturn = 0;\n    double interestEarned = 0;\n    double totalValue = 0;\n\n    \n    if (yearsToRetirement <= 5) {\n        annualReturn = .06d;\n    } else if (yearsToRetirement > 5 && yearsToRetirement <=10) { \n        annualReturn = .08d; \n    } else {\n        annualReturn = .1d; \n    } \n\n    \n    interestEarned = initialInvestment * annualReturn;\n\n    \n    for (int i=0; i< yearstoRetirement ;i++) {\n        interestEarned *= (1 + inflationRate);\n        totalValue +=interestEarned;\n    }\n\n    \n    return totalValue;\n}\n--\n",
        "text": "4",
        "token_cnt": 776
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script \n\nfunction checkExtremeNoseCongestion(inputValue) {\n  \n  let action = 'Take OTC Medication';\n  \n  \n  if (inputValue === 'Low') {\n    console.log(`User reported low ${inputValue}`);\n  } else if (inputValue === 'Moderate') {\n    console.log(`User reported moderate ${inputValue}`);\n    \n    \n    action = 'Seek Medical Attention';\n    \n  } else if (inputValue === 'Severe') {\n    console.log(`User reported severe ${inputValue}`);\n\n    \n    action = 'Consult Doctor';\n\n  } else {\n    console.error('Invalid input value');\n  }\n  \n  return action;\n  \n}\n\n\n\nlet recommendation = checkExtremeNoseCongestion('moderate');\nconsole.log(`Recommendation: ${recommendation}`);",
            "id": 375
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (character_literal))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier)) (identifier) (ERROR (UNEXPECTED '`')))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier)) (identifier) (ERROR (UNEXPECTED '`'))))) (expression_statement (assignment_expression left: (identifier) right: (character_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier)) (identifier) (ERROR (UNEXPECTED '`'))))) (expression_statement (assignment_expression left: (identifier) right: (character_literal)))) alternative: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal)))))))) (return_statement (identifier))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (character_literal))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (identifier)) (identifier) (ERROR (identifier) (UNEXPECTED '`'))))))\n**\n\n--\nscript \n\nfunction checkExtremeNoseCongestion(inputValue) {\n  \n  let action = 'Take OTC Medication';\n  \n  \n  if (inputValue === 'Low') {\n    console.log(`User reported low ${inputValue}`);\n  } else if (inputValue === 'Moderate') {\n    console.log(`User reported moderate ${inputValue}`);\n    \n    \n    action = 'Seek Medical Attention';\n    \n  } else if (inputValue === 'Severe') {\n    console.log(`User reported severe ${inputValue}`);\n\n    \n    action = 'Consult Doctor';\n\n  } else {\n    console.error('Invalid input value');\n  }\n  \n  return action;\n  \n}\n\n\n\nlet recommendation = checkExtremeNoseCongestion('moderate');\nconsole.log(`Recommendation: ${recommendation}`);\n--\n",
        "text": "6",
        "token_cnt": 809
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\nclass Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Enter Time Duration (Seconds): \");\n        int t = sc.nextInt();\n\n        \n        if (t >= 19){\n            System.out.println(\"Congratulation! You washed hands properly.\");\n        } \n        else{\n            System.out.println(\"Error! Please re-try after 20 seconds.\");\n        }\n\n    }\n}",
            "id": 379
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))))\n**\n\n--\nimport java.util.*;\nclass Main {\n    public static void main(String[] args) {\n        Scanner sc = new Scanner(System.in);\n        System.out.print(\"Enter Time Duration (Seconds): \");\n        int t = sc.nextInt();\n\n        \n        if (t >= 19){\n            System.out.println(\"Congratulation! You washed hands properly.\");\n        } \n        else{\n            System.out.println(\"Error! Please re-try after 20 seconds.\");\n        }\n\n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 546
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static void main(String[] args){\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"What is your shoesize?\");\n        int shoeSize = scan.nextInt();\n        \n        \n        String bottleSize;\n        if(shoeSize >= 13 ) {\n            bottleSize =\"Extra Large\";\n        } else if (shoeSize >= 8 && shoeSize <= 12) {\n           bottleSize=\"Large\";    \n        } else if (shoeSize >= 4 && shoeSize<=7) {\n          bottleSize=\"Medium\";  \n        } else { \n          bottleSize=\"Small\";   \n        }\n    \n        System.out.println(\"The recommended Bottle Size for your Shoe Size \" +bottleSize+\"!\"); \n    }\n}",
            "id": 380
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment)))))))) (ERROR))\n**\n\n--\npublic static void main(String[] args){\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"What is your shoesize?\");\n        int shoeSize = scan.nextInt();\n        \n        \n        String bottleSize;\n        if(shoeSize >= 13 ) {\n            bottleSize =\"Extra Large\";\n        } else if (shoeSize >= 8 && shoeSize <= 12) {\n           bottleSize=\"Large\";    \n        } else if (shoeSize >= 4 && shoeSize<=7) {\n          bottleSize=\"Medium\";  \n        } else { \n          bottleSize=\"Small\";   \n        }\n    \n        System.out.println(\"The recommended Bottle Size for your Shoe Size \" +bottleSize+\"!\"); \n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 794
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\nfunction determineLowSecurityIdentityVerification(data) {\n  \n  if (typeof data !== 'object') return false;\n  \n  const safety = data['safety'];\n\n  \n  switch (true) {\n    case safety >= 90 && safety <= 100:\n      console.log('Highly secure');\n      break;\n\n    case safety >= 75 && safety < 90:\n      console.log('Moderately secure');\n      break;\n\n    case safety >= 60 && safety < 75:\n      console.log('Somewhat secure');\n      break;\n\n    default:\n      console.log('Very low security');\n      break;\n  }\n\n  return true;\n}",
            "id": 381
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (if_statement condition: (condition (ERROR (type_identifier)) (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (return_statement (false))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (array_access array: (identifier) index: (character_literal)))) (switch_expression condition: (parenthesized_expression (true)) body: (switch_block (switch_block_statement_group (switch_label (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal)))) (break_statement)) (switch_block_statement_group (switch_label (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal)))) (break_statement)) (switch_block_statement_group (switch_label (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal)))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal)))) (break_statement)))) (return_statement (true))))\n**\n\n--\nscript\nfunction determineLowSecurityIdentityVerification(data) {\n  \n  if (typeof data !== 'object') return false;\n  \n  const safety = data['safety'];\n\n  \n  switch (true) {\n    case safety >= 90 && safety <= 100:\n      console.log('Highly secure');\n      break;\n\n    case safety >= 75 && safety < 90:\n      console.log('Moderately secure');\n      break;\n\n    case safety >= 60 && safety < 75:\n      console.log('Somewhat secure');\n      break;\n\n    default:\n      console.log('Very low security');\n      break;\n  }\n\n  return true;\n}\n--\n",
        "text": "8\nОбъяснение:\nВ приведённом фрагменте кода можно выделить 8 базовых путей выполнения",
        "token_cnt": 712
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public List<String> transformExtremeHaircare(List<Map<String, Object>> inputData) {\n        \n        List<String> transformedData = new ArrayList<>();\n\n        \n        for (Map<String, Object> entry : inputData) {\n            String customerName = (String) entry.get(\"customer_name\");\n            int hairLength = Integer.parseInt((String) entry.get(\"hair_length\"));\n            boolean splitEnds = Boolean.parseBoolean((String) entry.get(\"split_ends\"));\n\n            \n            String shampooRecommendation;\n            if (hairLength > 18 && !splitEnds) {\n                shampooRecommendation = \"Intense Moisture Shampoo\";\n            } else if (hairLength <= 18 || splitEnds) {\n                shampooRecommendation = \"Moisturizing Conditioner\";\n            } else {\n                shampooRecommendation = \"Unknown\";\n            }\n\n            \n            StringBuilder sb = new StringBuilder();\n            sb.append(\"# Customer Name: \").append(customerName).append(\"\\n\");\n            sb.append(\"* Hair Length: \").append(hairLength).append(\"\\n\");\n            sb.append(\"* Split Ends: \").append(splitEnds ? \"Yes\" : \"No\").append(\"\\n\\n\");\n            sb.append(\"**Shampoo Recommendation:** \");\n            sb.append(shampooRecommendation);\n\n            \n            transformedData.add(sb.toString());\n        }\n\n        return transformedData;\n    }",
            "id": 383
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (generic_type (type_identifier) (type_arguments (type_identifier))) name: (identifier) parameters: (formal_parameters (formal_parameter type: (generic_type (type_identifier) (type_arguments (generic_type (type_identifier) (type_arguments (type_identifier) (type_identifier))))) name: (identifier))) body: (block (local_variable_declaration type: (generic_type (type_identifier) (type_arguments (type_identifier))) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (generic_type (type_identifier) (type_arguments)) arguments: (argument_list)))) (enhanced_for_statement type: (generic_type (type_identifier) (type_arguments (type_identifier) (type_identifier))) name: (identifier) value: (identifier) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (cast_expression type: (type_identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (cast_expression type: (type_identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (cast_expression type: (type_identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (unary_expression operand: (identifier)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (identifier))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) name: (identifier) arguments: (argument_list (identifier))) name: (identifier) arguments: (argument_list (string_literal (escape_sequence))))) (expression_statement (method_invocation object: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) name: (identifier) arguments: (argument_list (identifier))) name: (identifier) arguments: (argument_list (string_literal (escape_sequence))))) (expression_statement (method_invocation object: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) name: (identifier) arguments: (argument_list (ternary_expression condition: (identifier) consequence: (string_literal (string_fragment)) alternative: (string_literal (string_fragment))))) name: (identifier) arguments: (argument_list (string_literal (escape_sequence) (escape_sequence))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))))))) (return_statement (identifier)))))\n**\n\n--\npublic List<String> transformExtremeHaircare(List<Map<String, Object>> inputData) {\n        \n        List<String> transformedData = new ArrayList<>();\n\n        \n        for (Map<String, Object> entry : inputData) {\n            String customerName = (String) entry.get(\"customer_name\");\n            int hairLength = Integer.parseInt((String) entry.get(\"hair_length\"));\n            boolean splitEnds = Boolean.parseBoolean((String) entry.get(\"split_ends\"));\n\n            \n            String shampooRecommendation;\n            if (hairLength > 18 && !splitEnds) {\n                shampooRecommendation = \"Intense Moisture Shampoo\";\n            } else if (hairLength <= 18 || splitEnds) {\n                shampooRecommendation = \"Moisturizing Conditioner\";\n            } else {\n                shampooRecommendation = \"Unknown\";\n            }\n\n            \n            StringBuilder sb = new StringBuilder();\n            sb.append(\"# Customer Name: \").append(customerName).append(\"\\n\");\n            sb.append(\"* Hair Length: \").append(hairLength).append(\"\\n\");\n            sb.append(\"* Split Ends: \").append(splitEnds ? \"Yes\" : \"No\").append(\"\\n\\n\");\n            sb.append(\"**Shampoo Recommendation:** \");\n            sb.append(shampooRecommendation);\n\n            \n            transformedData.add(sb.toString());\n        }\n\n        return transformedData;\n    }\n--\n",
        "text": "5",
        "token_cnt": 1490
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) {\n        \n        System.out.println(\"Enter number of passengers (1 - 4): \");\n        int numberOfPassenger = scan.nextInt();\n\n        \n        if (!(numberOfPassenger >= 1 && numberOfPassenger <= 4)) {\n            System.out.println(\"Invalid Input! Please enter a value between 1 and 4.\");\n            return;\n        }\n        \n        \n        double fare;\n        if (numberOfPassenger == 1 || numberOfPassenger == 2){\n           fare = 50 * .75 ;\n        } else{\n             fare =  3* Math.log(numberOfPassenger); \n        }\n    \n        \n        System.out.printf(\"Fare for %d passengers is $%.2f\", numberOfPassenger, fare); \n    }\n}",
            "id": 388
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (unary_expression operand: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (decimal_integer_literal) right: (decimal_floating_point_literal))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (decimal_integer_literal) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (identifier) (identifier)))))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) {\n        \n        System.out.println(\"Enter number of passengers (1 - 4): \");\n        int numberOfPassenger = scan.nextInt();\n\n        \n        if (!(numberOfPassenger >= 1 && numberOfPassenger <= 4)) {\n            System.out.println(\"Invalid Input! Please enter a value between 1 and 4.\");\n            return;\n        }\n        \n        \n        double fare;\n        if (numberOfPassenger == 1 || numberOfPassenger == 2){\n           fare = 50 * .75 ;\n        } else{\n             fare =  3* Math.log(numberOfPassenger); \n        }\n    \n        \n        System.out.printf(\"Fare for %d passengers is $%.2f\", numberOfPassenger, fare); \n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 768
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\nfunction updateHighFinance(bias) {\n  \n  let strategy = 'conservative';\n\n  \n  if (bias === 'aggressive') {\n    strategy = 'high-risk';\n  } else if (bias === 'moderate') {\n    strategy = 'balanced';\n  }\n  \n  \n  console.log(`Updating portfolio with ${strategy} investments`);\n\n  return; \n} \n\n\nupdateHighFinance('moderate');",
            "id": 394
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (character_literal))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal)))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (identifier) (identifier) (identifier)) (identifier) (ERROR (UNEXPECTED '`'))))) (return_statement)) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (character_literal)))))\n**\n\n--\nscript\nfunction updateHighFinance(bias) {\n  \n  let strategy = 'conservative';\n\n  \n  if (bias === 'aggressive') {\n    strategy = 'high-risk';\n  } else if (bias === 'moderate') {\n    strategy = 'balanced';\n  }\n  \n  \n  console.log(`Updating portfolio with ${strategy} investments`);\n\n  return; \n} \n\n\nupdateHighFinance('moderate');\n--\n",
        "text": "10",
        "token_cnt": 442
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class IllnessEtiquetteAnalyzer {\n\n    public static void main(String[] args) {\n        String situation = \"coughing\";\n\n        \n        switch (situation){\n            case \"coughing\":\n                System.out.println(\"Cover mouth when coughing\");\n                break;\n\n            case \"sneezing\":\n                System.out.println(\"Avoid close contact & use tissue\");\n                break;\n                \n            default: \n                System.out.println(\"Invalid input!\");    \n        }\n    }\n}",
            "id": 401
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))))\n**\n\n--\npublic class IllnessEtiquetteAnalyzer {\n\n    public static void main(String[] args) {\n        String situation = \"coughing\";\n\n        \n        switch (situation){\n            case \"coughing\":\n                System.out.println(\"Cover mouth when coughing\");\n                break;\n\n            case \"sneezing\":\n                System.out.println(\"Avoid close contact & use tissue\");\n                break;\n                \n            default: \n                System.out.println(\"Invalid input!\");    \n        }\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 501
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script \nfunction determineHygiene(riskLevel) {\n  \n  if (isNaN(riskLevel)) \n    return \"Invalid input\";\n  \n  \n  let score = Math.random() * 100;\n\n  \n  const labelMap = new Map([\n    [75, 'Low'], \n    [90, 'Medium'], \n    [98, 'High']\n  ]);\n\n  \n  let label = labelMap.get(score); \n\n  \n  if (riskLevel < 75 && score >= 75) \n    return `${label} risk of contamination detected`; \n  else if (riskLevel === 75 || riskLevel > 98) \n    return `No significant risk of contamination found (${label})`; \n  else \n    return `Insufficient data to assess risk (${label})`; \n } \n\n console.log(determineHygiene(62));",
            "id": 402
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (if_statement condition: (condition (method_invocation name: (identifier) arguments: (argument_list (identifier)))) consequence: (return_statement (string_literal (string_fragment)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (decimal_integer_literal)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (array_creation_expression type: (type_identifier) (ERROR) dimensions: (dimensions_expr (ERROR (decimal_integer_literal)) (character_literal)))) (ERROR (decimal_integer_literal) (character_literal) (decimal_integer_literal) (character_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (return_statement (ERROR (UNEXPECTED '`')) (identifier) (MISSING \";\"))) (block (ERROR (identifier))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (ERROR (UNEXPECTED '`'))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (ERROR (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) (ERROR) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) (identifier) (UNEXPECTED '`') (identifier)) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier) (ERROR (identifier)))) (ERROR (UNEXPECTED '`'))) (local_variable_declaration type: (type_identifier) (ERROR (identifier) (UNEXPECTED '`')) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (ERROR (formal_parameters (formal_parameter type: (type_identifier) (ERROR) name: (identifier)) (ERROR)) (UNEXPECTED '`'))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation name: (identifier) arguments: (argument_list (decimal_integer_literal)))))))\n**\n\n--\nscript \nfunction determineHygiene(riskLevel) {\n  \n  if (isNaN(riskLevel)) \n    return \"Invalid input\";\n  \n  \n  let score = Math.random() * 100;\n\n  \n  const labelMap = new Map([\n    [75, 'Low'], \n    [90, 'Medium'], \n    [98, 'High']\n  ]);\n\n  \n  let label = labelMap.get(score); \n\n  \n  if (riskLevel < 75 && score >= 75) \n    return `${label} risk of contamination detected`; \n  else if (riskLevel === 75 || riskLevel > 98) \n    return `No significant risk of contamination found (${label})`; \n  else \n    return `Insufficient data to assess risk (${label})`; \n } \n\n console.log(determineHygiene(62));\n--\n",
        "text": "41",
        "token_cnt": 1120
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class ToiletHygieneScore {\n    public static void main(String[] args) {\n        \n        boolean hasFeces = true;\n        boolean hasBloodStain = false;\n        boolean hasUrineStain = true;\n\n        int score = calculateToiletHygieneScore(hasFeces, hasBloodStain, hasUrineStain);\n        System.out.println(\"Total Score : \" + score);\n\n    }\n    \n    private static int calculateToiletHygieneScore(boolean hasFeces, boolean hasBloodStain, boolean hasUrineStain){\n        \n        int totalPoints =0 ;\n        \n       /* Use If Else Statements here */ \n       if (hasFeces ==true )\n           totalPoints +=2;\n       if (hasBloodStain==true) \n           totalPoints+=3;\n       if (hasUrineStain==true) \n          totalPoints+=1;\n          return totalPoints;\n     \n   }\n}",
            "id": 403
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (true))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (true))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier) (identifier))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))) (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier)) (formal_parameter type: (boolean_type) name: (identifier)) (formal_parameter type: (boolean_type) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (block_comment) (if_statement condition: (condition (binary_expression left: (identifier) right: (true))) consequence: (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (true))) consequence: (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (true))) consequence: (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) (return_statement (identifier)))))))\n**\n\n--\npublic class ToiletHygieneScore {\n    public static void main(String[] args) {\n        \n        boolean hasFeces = true;\n        boolean hasBloodStain = false;\n        boolean hasUrineStain = true;\n\n        int score = calculateToiletHygieneScore(hasFeces, hasBloodStain, hasUrineStain);\n        System.out.println(\"Total Score : \" + score);\n\n    }\n    \n    private static int calculateToiletHygieneScore(boolean hasFeces, boolean hasBloodStain, boolean hasUrineStain){\n        \n        int totalPoints =0 ;\n        \n       /* Use If Else Statements here */ \n       if (hasFeces ==true )\n           totalPoints +=2;\n       if (hasBloodStain==true) \n           totalPoints+=3;\n       if (hasUrineStain==true) \n          totalPoints+=1;\n          return totalPoints;\n     \n   }\n}\n--\n",
        "text": "6",
        "token_cnt": 814
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Enter age\");\n        int age = scan.nextInt();\n\n        \n        if (age >=18 && age <=25){\n            double bmi = calculateBMI(70, 18.5);\n            if (bmi < 18.5 )\n                System.out.print(\"Under Weight \");\n        } else if (age > 64) {\n            double chol = calculateCholesterol(130, 90,  160 ,240 );\n            if (chol>=200) \n                System.out.print(\"High Cholestrol \");\n        } else{\n            System.out.print(\"Normal weight & Cholestrol level \");\n        }\n\n    }\n\n    private static double calculateBMI(double height, double idealWeight) \n    {\n       return 703 * Math.pow((height / idealWeight), 2);\n    }\n\n    private static double calculateCholesterol(double total, double HDL, double LDL, double triglycerides) \n    {\n      double ratio = (total - HDL) / (LDL + HDL);\n      double logTrigs = Math.log10(triglycerides);\n\n      return 4.9 * ratio + 3.0 * logTrigs;\n    }\n}",
            "id": 404
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (decimal_integer_literal) (decimal_floating_point_literal))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_floating_point_literal))) consequence: (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (decimal_integer_literal) (decimal_integer_literal) (decimal_integer_literal) (decimal_integer_literal))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))) (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (floating_point_type) name: (identifier)) (formal_parameter type: (floating_point_type) name: (identifier))) body: (block (return_statement (binary_expression left: (decimal_integer_literal) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (parenthesized_expression (binary_expression left: (identifier) right: (identifier))) (decimal_integer_literal))))))) (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (floating_point_type) name: (identifier)) (formal_parameter type: (floating_point_type) name: (identifier)) (formal_parameter type: (floating_point_type) name: (identifier)) (formal_parameter type: (floating_point_type) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (identifier))) right: (parenthesized_expression (binary_expression left: (identifier) right: (identifier)))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))) (return_statement (binary_expression left: (binary_expression left: (decimal_floating_point_literal) right: (identifier)) right: (binary_expression left: (decimal_floating_point_literal) right: (identifier)))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Enter age\");\n        int age = scan.nextInt();\n\n        \n        if (age >=18 && age <=25){\n            double bmi = calculateBMI(70, 18.5);\n            if (bmi < 18.5 )\n                System.out.print(\"Under Weight \");\n        } else if (age > 64) {\n            double chol = calculateCholesterol(130, 90,  160 ,240 );\n            if (chol>=200) \n                System.out.print(\"High Cholestrol \");\n        } else{\n            System.out.print(\"Normal weight & Cholestrol level \");\n        }\n\n    }\n\n    private static double calculateBMI(double height, double idealWeight) \n    {\n       return 703 * Math.pow((height / idealWeight), 2);\n    }\n\n    private static double calculateCholesterol(double total, double HDL, double LDL, double triglycerides) \n    {\n      double ratio = (total - HDL) / (LDL + HDL);\n      double logTrigs = Math.log10(triglycerides);\n\n      return 4.9 * ratio + 3.0 * logTrigs;\n    }\n}\n--\n",
        "text": "14",
        "token_cnt": 1486
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.print(\"Enter BMI value : \");\n        double bmiValue = scan.nextDouble();\n\n        \n        if (bmiValue >=18.5 && bmiValue <=24.9){\n            System.out.println(\"Normal Weight\");\n        }\n        else if (bmiValue > 25 && bmiValue <=29.9){\n            System.out.println(\"Pre-Obesity\");\n        }\n        else if (bmiValue >30 && bmiValue<=34.9){\n            System.out.println(\"Obesity Class I\");\n        }\n        else if (bmiValue>35 && bmiValue<=39.9){\n            System.out.println(\"Obesity Class II\");\n        }\n        else{\n            System.out.println(\"Obesity Class III\");\n        }\n\n    }\n}",
            "id": 406
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_floating_point_literal)) right: (binary_expression left: (identifier) right: (decimal_floating_point_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_floating_point_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_floating_point_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_floating_point_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.print(\"Enter BMI value : \");\n        double bmiValue = scan.nextDouble();\n\n        \n        if (bmiValue >=18.5 && bmiValue <=24.9){\n            System.out.println(\"Normal Weight\");\n        }\n        else if (bmiValue > 25 && bmiValue <=29.9){\n            System.out.println(\"Pre-Obesity\");\n        }\n        else if (bmiValue >30 && bmiValue<=34.9){\n            System.out.println(\"Obesity Class I\");\n        }\n        else if (bmiValue>35 && bmiValue<=39.9){\n            System.out.println(\"Obesity Class II\");\n        }\n        else{\n            System.out.println(\"Obesity Class III\");\n        }\n\n    }\n}\n--\n",
        "text": "11",
        "token_cnt": 1004
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\nfunction determineExtremeHandHygiene(bias) {\n  \n  const validBiases = [\"very low\", \"low\", \"moderate\", \"high\"];\n  if (!validBiases.includes(bias)) {\n    throw new Error(`Invalid bias value: ${bias}`);\n  }\n\n  let action;\n  switch (bias) {\n    case \"very low\":\n      action = `Take immediate steps to improve hand washing practices at public restrooms`;\n      break;\n    case \"low\":\n      action = `Monitor hand washing behavior at public restrooms closely and take corrective measures as needed`;\n      break;\n    case \"moderate\":\n      action = `Implement regular training sessions for staff members at public restrooms on proper handwashing techniques`;\n      break;\n    default:  \n      action = `Install automatic soap dispensers and water faucets in all public restrooms`;\n  }\n  \n  return action;\n}",
            "id": 407
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (ERROR (type_identifier) (variable_declarator name: (identifier) (ERROR) value: (string_literal (string_fragment))) (string_literal (string_fragment)) (string_literal (string_fragment))) (expression_statement (string_literal (string_fragment)) (ERROR)) (if_statement condition: (condition (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))) consequence: (block (throw_statement (object_creation_expression type: (type_identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (identifier)) (identifier) (MISSING \")\")) (class_body (ERROR (identifier) (UNEXPECTED '`')))) (MISSING \";\")) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier)) right: (identifier)) (ERROR (UNEXPECTED '`'))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier)) right: (identifier)) (ERROR (UNEXPECTED '`'))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier)) right: (identifier)) (ERROR (UNEXPECTED '`'))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (assignment_expression left: (identifier) (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier)) right: (identifier)) (ERROR (UNEXPECTED '`')))))) (return_statement (identifier)))) (MISSING \"}\")))\n**\n\n--\nscript\nfunction determineExtremeHandHygiene(bias) {\n  \n  const validBiases = [\"very low\", \"low\", \"moderate\", \"high\"];\n  if (!validBiases.includes(bias)) {\n    throw new Error(`Invalid bias value: ${bias}`);\n  }\n\n  let action;\n  switch (bias) {\n    case \"very low\":\n      action = `Take immediate steps to improve hand washing practices at public restrooms`;\n      break;\n    case \"low\":\n      action = `Monitor hand washing behavior at public restrooms closely and take corrective measures as needed`;\n      break;\n    case \"moderate\":\n      action = `Implement regular training sessions for staff members at public restrooms on proper handwashing techniques`;\n      break;\n    default:  \n      action = `Install automatic soap dispensers and water faucets in all public restrooms`;\n  }\n  \n  return action;\n}\n--\n",
        "text": "6",
        "token_cnt": 979
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class HealthCheckUp {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter patient age:\");\n        int age = scan.nextInt();\n\n        \n        if (age < 18){\n            System.out.println(\"Sorry! The minimum age requirement \" +\n                    \"for this service is 18.\");\n        } \n\n        \n        else if (age > 65){\n            System.out.println(\"Due to privacy laws, we cannot provide \" + \n                    \"medical information to patients over the age of 65.\");\n        } \n\n        \n        else{\n            System.out.println(\"Welcome!\");\n\n            \n            System.out.print(\"Please enter M for male or F for female: \");\n            String gender = scan.next().toUpperCase();\n\n            \n            if (gender.equals(\"M\")){\n                System.out.println(\"Based on your input, you will need to get\" +\n                        \"the following tests done once every year:\" + \n                        \"\\n\\tBlood pressure test \\n\\tCholesterol Test\");\n\n                \n                \n            } else if (gender.equals(\"F\")) {\n                System.out.println(\"Based on your input, you will need to get\" +\n                        \"the following tests done once every year:\" + \n                        \"\\n\\tPap smear test \\n\\tBreast examination\");\n\n                \n                \n            }\n\n            \n            else {\n                System.out.println(\"Invalid input. Please try again.\");\n            }\n        }\n\n    }\n}",
            "id": 410
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (string_literal (string_fragment))))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (string_literal (string_fragment))))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (string_literal (string_fragment))) right: (string_literal (escape_sequence) (escape_sequence) (string_fragment) (escape_sequence) (escape_sequence) (string_fragment))))))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (string_literal (string_fragment))) right: (string_literal (escape_sequence) (escape_sequence) (string_fragment) (escape_sequence) (escape_sequence) (string_fragment))))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))))))))\n**\n\n--\nimport java.util.*;\npublic class HealthCheckUp {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter patient age:\");\n        int age = scan.nextInt();\n\n        \n        if (age < 18){\n            System.out.println(\"Sorry! The minimum age requirement \" +\n                    \"for this service is 18.\");\n        } \n\n        \n        else if (age > 65){\n            System.out.println(\"Due to privacy laws, we cannot provide \" + \n                    \"medical information to patients over the age of 65.\");\n        } \n\n        \n        else{\n            System.out.println(\"Welcome!\");\n\n            \n            System.out.print(\"Please enter M for male or F for female: \");\n            String gender = scan.next().toUpperCase();\n\n            \n            if (gender.equals(\"M\")){\n                System.out.println(\"Based on your input, you will need to get\" +\n                        \"the following tests done once every year:\" + \n                        \"\\n\\tBlood pressure test \\n\\tCholesterol Test\");\n\n                \n                \n            } else if (gender.equals(\"F\")) {\n                System.out.println(\"Based on your input, you will need to get\" +\n                        \"the following tests done once every year:\" + \n                        \"\\n\\tPap smear test \\n\\tBreast examination\");\n\n                \n                \n            }\n\n            \n            else {\n                System.out.println(\"Invalid input. Please try again.\");\n            }\n        }\n\n    }\n}\n--\n",
        "text": "7",
        "token_cnt": 1377
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n\nconst TRANSPARENCY_GOOD = \"good\";\nconst TRANSPARENCY_POOR = \"poor\";\nconst PRICE_THRESHOLD = 50; \n\nfunction determineLowPaymentProcessing(transparency, price) {\n  let message;\n\n  if (price < PRICE_THRESHOLD && transparency === TRANSPARENCY_GOOD) {\n    \n  } else if (price >= PRICE_THRESHOLD || transparency !== TRANSPARENCY_GOOD) {\n    \n  } else {\n    \n  }\n  \n  return message;\n}",
            "id": 412
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (method_declaration type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) (ERROR) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (binary_expression left: (identifier) (ERROR) right: (identifier)))) consequence: (block) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (binary_expression left: (identifier) (ERROR) right: (identifier)))) consequence: (block) alternative: (block))) (return_statement (identifier)))))\n**\n\n--\nscript\n\nconst TRANSPARENCY_GOOD = \"good\";\nconst TRANSPARENCY_POOR = \"poor\";\nconst PRICE_THRESHOLD = 50; \n\nfunction determineLowPaymentProcessing(transparency, price) {\n  let message;\n\n  if (price < PRICE_THRESHOLD && transparency === TRANSPARENCY_GOOD) {\n    \n  } else if (price >= PRICE_THRESHOLD || transparency !== TRANSPARENCY_GOOD) {\n    \n  } else {\n    \n  }\n  \n  return message;\n}\n--\n",
        "text": "8\n\nОбъяснение:\n\nЦикломатическая сложность — это мера сложности программы, которая показывает",
        "token_cnt": 480
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args){\n        int exp = Integer.parseInt(args[0]); \n\n        boolean result = false;\n        \n        if(exp == 1 || exp ==2 ){\n            double temp = Math.random() *55 + 40;\n\n            System.out.println(\"Temperature for beginner \" +temp);\n            \n            if(temp >=60 && temp <=70 )\n                result=true;\n        }\n        else{\n            double temp =Math.random()*85+35 ;\n        \n            System.out.println(\"Temperature for Experienced \"+temp );\n                \n            if(temp>=75&&temp<=85) \n                result= true;    \n        }\n    \n        if(result)\n            System.out.println(\"Ideal working condition\");\n        else\n            System.out.println(\"Please dress appropriately \");\n\n    }\n}",
            "id": 415
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (decimal_integer_literal)) right: (decimal_integer_literal)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (expression_statement (assignment_expression left: (identifier) right: (true))))) alternative: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (decimal_integer_literal)) right: (decimal_integer_literal)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (expression_statement (assignment_expression left: (identifier) right: (true)))))) (if_statement condition: (condition (identifier)) consequence: (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) alternative: (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args){\n        int exp = Integer.parseInt(args[0]); \n\n        boolean result = false;\n        \n        if(exp == 1 || exp ==2 ){\n            double temp = Math.random() *55 + 40;\n\n            System.out.println(\"Temperature for beginner \" +temp);\n            \n            if(temp >=60 && temp <=70 )\n                result=true;\n        }\n        else{\n            double temp =Math.random()*85+35 ;\n        \n            System.out.println(\"Temperature for Experienced \"+temp );\n                \n            if(temp>=75&&temp<=85) \n                result= true;    \n        }\n    \n        if(result)\n            System.out.println(\"Ideal working condition\");\n        else\n            System.out.println(\"Please dress appropriately \");\n\n    }\n}\n--\n",
        "text": "5",
        "token_cnt": 1024
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static boolean checkHighFootCare(boolean dryRun) {\n        \n        double footSize = 10; \n        String shoeType = \"Running\";\n\n        \n        Map<String, Boolean> highFootCareMap = new HashMap<>();\n        highFootCareMap.put(\"Large\", true);\n        highFootCareMap.put(\"Medium\", false);\n        highFootCareMap.put(\"Small\", false);\n        highFootCareMap.put(\"Running\", true);\n        highFootCareMap.put(\"Basketball\", false);\n        highFootCareMap.put(\"Hiking\", false);\n\n        \n        if (dryRun == true){\n            System.out.println(\"Dry run mode active\");\n        } else{\n            System.out.println(\"Checking high footcare recommendation...\");\n        }\n        \n        if (footSize >= 9 && footSize <= 12) {\n            if (!highFootCareMap.containsKey(shoeType)) {\n                return false;\n            }\n\n            if (dryRun == false) {\n                System.out.print(\"Based on given criteria, \");\n\n                if (highFootCareMap.get(shoeType)){\n                    System.out.println(\"wearing comfortable shoes for \"+shoeType+\" activity is recommended.\");\n                } else {\n                    System.out.println(\"wearing comfortable shoes for \"+shoeType+\" activity is not recommended.\");\n                }\n                \n            }\n            \n            return highFootCareMap.get(shoeType);\n        } else {\n            return false;\n        }\n\n    }",
            "id": 424
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (local_variable_declaration type: (generic_type (type_identifier) (type_arguments (type_identifier) (type_identifier))) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (generic_type (type_identifier) (type_arguments)) arguments: (argument_list)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (true)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (false)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (false)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (true)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (false)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (false)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (true))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (if_statement condition: (condition (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))) consequence: (block (return_statement (false)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (false))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment))))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment)))))))))) (return_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))) alternative: (block (return_statement (false)))))))\n**\n\n--\npublic static boolean checkHighFootCare(boolean dryRun) {\n        \n        double footSize = 10; \n        String shoeType = \"Running\";\n\n        \n        Map<String, Boolean> highFootCareMap = new HashMap<>();\n        highFootCareMap.put(\"Large\", true);\n        highFootCareMap.put(\"Medium\", false);\n        highFootCareMap.put(\"Small\", false);\n        highFootCareMap.put(\"Running\", true);\n        highFootCareMap.put(\"Basketball\", false);\n        highFootCareMap.put(\"Hiking\", false);\n\n        \n        if (dryRun == true){\n            System.out.println(\"Dry run mode active\");\n        } else{\n            System.out.println(\"Checking high footcare recommendation...\");\n        }\n        \n        if (footSize >= 9 && footSize <= 12) {\n            if (!highFootCareMap.containsKey(shoeType)) {\n                return false;\n            }\n\n            if (dryRun == false) {\n                System.out.print(\"Based on given criteria, \");\n\n                if (highFootCareMap.get(shoeType)){\n                    System.out.println(\"wearing comfortable shoes for \"+shoeType+\" activity is recommended.\");\n                } else {\n                    System.out.println(\"wearing comfortable shoes for \"+shoeType+\" activity is not recommended.\");\n                }\n                \n            }\n            \n            return highFootCareMap.get(shoeType);\n        } else {\n            return false;\n        }\n\n    }\n--\n",
        "text": "6",
        "token_cnt": 1346
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) {\n        \n        System.out.println(\"Dry Run\");\n\n        String earCleaningMethod = \"Warm Water\"; \n\n        switch (earCleaningMethod){\n            case \"Q Tip\":\n                System.out.println(\"Using cotton buds may push wax deeper into the ear canal.\"); \n                break; \n            case \"Water Pick\":\n                System.out.println(\"A water pick can help remove debris from the outer ear but shouldn't be used inside the ear canal as it could cause injury.\"); \n                break; \n            default:\n                System.out.println(\"It is generally safe to use warm water when cleaning the outside of the ear with a cloth or soft brush.\");    \n        }\n\n    }\n}",
            "id": 430
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) {\n        \n        System.out.println(\"Dry Run\");\n\n        String earCleaningMethod = \"Warm Water\"; \n\n        switch (earCleaningMethod){\n            case \"Q Tip\":\n                System.out.println(\"Using cotton buds may push wax deeper into the ear canal.\"); \n                break; \n            case \"Water Pick\":\n                System.out.println(\"A water pick can help remove debris from the outer ear but shouldn't be used inside the ear canal as it could cause injury.\"); \n                break; \n            default:\n                System.out.println(\"It is generally safe to use warm water when cleaning the outside of the ear with a cloth or soft brush.\");    \n        }\n\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 601
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) throws IOException {\n        \n        System.out.print(\"Enter product name: \");\n        String productName = scan.nextLine();\n\n        \n        URL url = new URL(\"https:\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setRequestMethod(\"GET\");\n        InputStream inputStream = conn.getInputStream();\n\n        \n        Document doc = Jsoup.parse(inputStream, \"UTF-8\", \"\");\n\n        \n        Element priceElement = doc.select(\"[data-testid=price]\").first();\n        double price = Double.parseDouble(priceElement.text().replace(\"$\", \"\"));\n\n        \n        double markupPercentage;\n        if (price <= 50)\n            markupPercentage = 1 + ((price / 50) * .2);\n        else \n            markupPercentage = 1 + (.4 * (((price - 50) / 50)));\n        \n        \n        System.out.println(\"Product Name: \" + productName);\n        System.out.println(\"Price: $\" + price);\n        System.out.println(\"Markup Percentage: \" + markupPercentage*100 + \"%\");\n    }\n}",
            "id": 434
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (string_literal (string_fragment)) (ERROR (identifier)))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier) (string_literal (string_fragment)) (string_literal))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal))))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (decimal_integer_literal) right: (parenthesized_expression (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal))) right: (decimal_floating_point_literal)))))) alternative: (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (decimal_integer_literal) right: (parenthesized_expression (binary_expression left: (decimal_floating_point_literal) right: (parenthesized_expression (parenthesized_expression (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal))) right: (decimal_integer_literal)))))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (binary_expression left: (identifier) right: (decimal_integer_literal))) right: (string_literal (string_fragment)))))))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        \n        System.out.print(\"Enter product name: \");\n        String productName = scan.nextLine();\n\n        \n        URL url = new URL(\"https:\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setRequestMethod(\"GET\");\n        InputStream inputStream = conn.getInputStream();\n\n        \n        Document doc = Jsoup.parse(inputStream, \"UTF-8\", \"\");\n\n        \n        Element priceElement = doc.select(\"[data-testid=price]\").first();\n        double price = Double.parseDouble(priceElement.text().replace(\"$\", \"\"));\n\n        \n        double markupPercentage;\n        if (price <= 50)\n            markupPercentage = 1 + ((price / 50) * .2);\n        else \n            markupPercentage = 1 + (.4 * (((price - 50) / 50)));\n        \n        \n        System.out.println(\"Product Name: \" + productName);\n        System.out.println(\"Price: $\" + price);\n        System.out.println(\"Markup Percentage: \" + markupPercentage*100 + \"%\");\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 1317
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Enter age of person : \");\n        int age = scan.nextInt();\n\n        \n        if (age < 18){\n            System.out.println(\"Sorry! The content is restricted for persons under 18.\");\n        } else{\n\n            \n            System.out.println(\"Do you consume milk products? [Y/N]\");\n            String milkProducts = scan.next().toLowerCase();\n            if (milkProducts.equals(\"yes\")){\n                System.out.println(\"Are you lactose intolerant? [Y/N]\");\n                String lactoseIntolerance = scan.next().toLowerCase();\n\n                \n                if (lactoseIntolerance.equals(\"no\")){\n                    System.out.println(\"Consuming dairy foods like milk, cheese, yogurt can help strengthen teeth due to calcium and protein they contain. However, individuals who are lactose intolerant may want to consider other sources of calcium such as leafy greens, fortified soy drinks etc.\");\n                } else{\n                    System.out.println(\"Individuals suffering from lactose intolerance might find it difficult to digest milk and dairy products. Hence, they must look out for alternative options rich in calcium like dark green vegetables, nuts, seeds, fish etc.\");\n                }\n                \n            } else{\n                System.out.println(\"Milk consumption has been linked to stronger bones and reduced risk of osteoporosis later in life. If someone does not prefer consuming dairy products then he / she could include alternatives like almond milk, soymilk etc. in their daily routine\");\n            }\n        }\n\n    }\n}",
            "id": 435
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Enter age of person : \");\n        int age = scan.nextInt();\n\n        \n        if (age < 18){\n            System.out.println(\"Sorry! The content is restricted for persons under 18.\");\n        } else{\n\n            \n            System.out.println(\"Do you consume milk products? [Y/N]\");\n            String milkProducts = scan.next().toLowerCase();\n            if (milkProducts.equals(\"yes\")){\n                System.out.println(\"Are you lactose intolerant? [Y/N]\");\n                String lactoseIntolerance = scan.next().toLowerCase();\n\n                \n                if (lactoseIntolerance.equals(\"no\")){\n                    System.out.println(\"Consuming dairy foods like milk, cheese, yogurt can help strengthen teeth due to calcium and protein they contain. However, individuals who are lactose intolerant may want to consider other sources of calcium such as leafy greens, fortified soy drinks etc.\");\n                } else{\n                    System.out.println(\"Individuals suffering from lactose intolerance might find it difficult to digest milk and dairy products. Hence, they must look out for alternative options rich in calcium like dark green vegetables, nuts, seeds, fish etc.\");\n                }\n                \n            } else{\n                System.out.println(\"Milk consumption has been linked to stronger bones and reduced risk of osteoporosis later in life. If someone does not prefer consuming dairy products then he / she could include alternatives like almond milk, soymilk etc. in their daily routine\");\n            }\n        }\n\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 1232
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class WashingAlgorithm {\n    public static void main(String[] args){\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Please rate the level of dirtiness of your clothes on a scale of 1 to 5 where 1 is very dirty and 5 is very clean.\");\n        int dirtinessRating = scan.nextInt();\n        \n        System.out.println(\"How often do you normally wash each piece of clothing?\");\n        int numWashes = scan.nextInt();\n    \n        \n        String result;\n        if ((dirtinessRating >=4 && dirtinessRating <=5 )&& (numWashes >2)){\n            result=\"Normal washing\";\n        } else if((dirtinessRating>=3 || numWashes==0)) {\n            result =\"DryClean Only\";\n        } else{\n           result= \"Regular Washing\"; \n        }\n    \n        System.out.println(\"Based on your responses, \"+result+\" appears to be the most effective method for maintaining the quality of your clothing\");\n    \n    }\n}",
            "id": 436
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) right: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment)))))))))))\n**\n\n--\nimport java.util.*;\npublic class WashingAlgorithm {\n    public static void main(String[] args){\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Please rate the level of dirtiness of your clothes on a scale of 1 to 5 where 1 is very dirty and 5 is very clean.\");\n        int dirtinessRating = scan.nextInt();\n        \n        System.out.println(\"How often do you normally wash each piece of clothing?\");\n        int numWashes = scan.nextInt();\n    \n        \n        String result;\n        if ((dirtinessRating >=4 && dirtinessRating <=5 )&& (numWashes >2)){\n            result=\"Normal washing\";\n        } else if((dirtinessRating>=3 || numWashes==0)) {\n            result =\"DryClean Only\";\n        } else{\n           result= \"Regular Washing\"; \n        }\n    \n        System.out.println(\"Based on your responses, \"+result+\" appears to be the most effective method for maintaining the quality of your clothing\");\n    \n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 978
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n\nlet height = 68; \nlet weight = 190; \nlet age = 42; \n\n\nlet bmi = weight / Math.pow(height / 39.37, 2);\nconsole.log(`Your calculated BMI is ${bmi}.`);\n\n\nif (bmi < 18.5 || bmi > 24.9) {\n  console.log(\"You are considered underweight or overweight.\");\n\n  \n  let riskFactor = calculateRiskFactor(age, gender, familyHistory, otherHealthIssues);\n  if (riskFactor <= moderateRiskThreshold) {\n    recommendRegularCheckUps();\n  } else if (riskFactor >= highRiskThreshold) {\n    recommendSpecialistReferrals();\n  } else {\n    suggestLifestyleChanges();\n  }\n} else {\n  console.log(\"Your BMI is within the healthy range.\");\n}",
            "id": 440
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (binary_expression left: (identifier) right: (decimal_floating_point_literal)) (decimal_integer_literal)))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier)) (identifier) (ERROR (identifier) (UNEXPECTED '`'))))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_floating_point_literal)) right: (binary_expression left: (identifier) right: (decimal_floating_point_literal)))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier) (identifier) (identifier))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (identifier))) consequence: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list)))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (identifier))) consequence: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list)))) alternative: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list))))))) alternative: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))\n**\n\n--\nscript\n\nlet height = 68; \nlet weight = 190; \nlet age = 42; \n\n\nlet bmi = weight / Math.pow(height / 39.37, 2);\nconsole.log(`Your calculated BMI is ${bmi}.`);\n\n\nif (bmi < 18.5 || bmi > 24.9) {\n  console.log(\"You are considered underweight or overweight.\");\n\n  \n  let riskFactor = calculateRiskFactor(age, gender, familyHistory, otherHealthIssues);\n  if (riskFactor <= moderateRiskThreshold) {\n    recommendRegularCheckUps();\n  } else if (riskFactor >= highRiskThreshold) {\n    recommendSpecialistReferrals();\n  } else {\n    suggestLifestyleChanges();\n  }\n} else {\n  console.log(\"Your BMI is within the healthy range.\");\n}\n--\n",
        "text": "7",
        "token_cnt": 828
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public List<String> transformLowTravelLocalAttractionForAnalysis(List<String> input) {\n    \n    String[] low_travel = {\"Art Museum\", \"Aquarium\"};\n\n    ArrayList<String> result = new ArrayList<>();\n    \n    for (int i=0;i <input.size();++i){\n        boolean foundMatch = false;\n        for (String s :low_travel){\n            if (s.equals(input.get(i))){\n                foundMatch = true;\n                break;\n            }\n        }\n        \n        if (!foundMatch){\n           result.add(input.get(i)); \n        }\n        \n    }\n    return result ;\n}",
            "id": 443
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (generic_type (type_identifier) (type_arguments (type_identifier))) name: (identifier) parameters: (formal_parameters (formal_parameter type: (generic_type (type_identifier) (type_arguments (type_identifier))) name: (identifier))) body: (block (local_variable_declaration type: (array_type element: (type_identifier) dimensions: (dimensions)) declarator: (variable_declarator name: (identifier) value: (array_initializer (string_literal (string_fragment)) (string_literal (string_fragment))))) (local_variable_declaration type: (generic_type (type_identifier) (type_arguments (type_identifier))) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (generic_type (type_identifier) (type_arguments)) arguments: (argument_list)))) (for_statement init: (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) condition: (binary_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))) update: (update_expression (identifier)) body: (block (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (enhanced_for_statement type: (type_identifier) name: (identifier) value: (identifier) body: (block (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true))) (break_statement))))) (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))))))))) (return_statement (identifier)))))\n**\n\n--\npublic List<String> transformLowTravelLocalAttractionForAnalysis(List<String> input) {\n    \n    String[] low_travel = {\"Art Museum\", \"Aquarium\"};\n\n    ArrayList<String> result = new ArrayList<>();\n    \n    for (int i=0;i <input.size();++i){\n        boolean foundMatch = false;\n        for (String s :low_travel){\n            if (s.equals(input.get(i))){\n                foundMatch = true;\n                break;\n            }\n        }\n        \n        if (!foundMatch){\n           result.add(input.get(i)); \n        }\n        \n    }\n    return result ;\n}\n--\n",
        "text": "6\nОбъяснение:\nВ приведённом фрагменте 6 путей выполнения, которые можно пройти",
        "token_cnt": 716
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter name of hair product\");\n        String hairProduct = scan.nextLine();\n\n        System.out.println(\"Enter skin type (dry, oily, combination)\");\n        String skinType = scan.nextLine();\n        \n        \n        if(hairProduct.equals(\"shampoo\") && skinType.equals(\"oily\")) {\n            System.out.println(\"Wash face twice daily and use shampoo once daily.\");\n        } else if(hairProduct.equals(\"conditioner\") && skinType.equals(\"dry\")){\n            System.out.println(\"Use conditioner every time you wash your hair and moisturize your body regularly.\");\n        } else if((!hairProduct.equals(\"shampoo\") || !skinType.equals(\"oily\"))) {\n            System.out.println(\"No specific advice available. Consult a dermatologist or trichologist for personalized recommendations.\");\n        } \n    }\n}",
            "id": 451
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (parenthesized_expression (binary_expression left: (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) right: (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter name of hair product\");\n        String hairProduct = scan.nextLine();\n\n        System.out.println(\"Enter skin type (dry, oily, combination)\");\n        String skinType = scan.nextLine();\n        \n        \n        if(hairProduct.equals(\"shampoo\") && skinType.equals(\"oily\")) {\n            System.out.println(\"Wash face twice daily and use shampoo once daily.\");\n        } else if(hairProduct.equals(\"conditioner\") && skinType.equals(\"dry\")){\n            System.out.println(\"Use conditioner every time you wash your hair and moisturize your body regularly.\");\n        } else if((!hairProduct.equals(\"shampoo\") || !skinType.equals(\"oily\"))) {\n            System.out.println(\"No specific advice available. Consult a dermatologist or trichologist for personalized recommendations.\");\n        } \n    }\n}\n--\n",
        "text": "31",
        "token_cnt": 1035
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n\nconst minLikes = 10; \n\n\nfunction recommendPosts(privacy) { \n    \n    switch (privacy) { \n        case 'public': \n            return [\n                \"How to use Git and GitHub\", \n                \"Introduction to Python Programming\", \n                \"Data Structures and Algorithms\"\n            ]; \n\n        case 'private': \n            return [\n                \"Advanced Data Structures and Algorithms\", \n                \"Machine Learning with TensorFlow\", \n                \"Deep Learning with PyTorch\"\n            ]; \n\n        default: \n            throw new Error('Invalid privacy setting'); \n    } \n} \n\n\nfunction isValidPost(post) { \n    const likeCount = post['like_count']; \n\n    return typeof likeCount === 'number' && likeCount >= minLikes; \n} \n\n\nfunction calculateESMScore(user) { \n    let esmScore = 0; \n\n    \n    for (let i = 0; i < user.posts.length; i++) { \n        const post = user.posts[i]; \n\n        \n        if (!isValidPost(post)) continue; \n\n        \n        const recList = recommendPosts(post['privacy']); \n\n        if (recList.includes(post['title'])) { \n            esmScore += Math.log2(i + 2); \n        } \n    } \n\n    return esmScore; \n}",
            "id": 455
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (method_declaration type: (type_identifier) name: (identifier) parameters: (formal_parameters (ERROR (type_identifier))) body: (block (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (character_literal)) (return_statement (ERROR (string_literal (string_fragment)) (string_literal (string_fragment))) (string_literal (string_fragment)) (ERROR))) (switch_block_statement_group (switch_label (character_literal)) (return_statement (ERROR (string_literal (string_fragment)) (string_literal (string_fragment))) (string_literal (string_fragment)) (ERROR))) (switch_block_statement_group (switch_label) (throw_statement (object_creation_expression type: (type_identifier) arguments: (argument_list (character_literal))))))))) (method_declaration type: (type_identifier) name: (identifier) parameters: (formal_parameters (ERROR (type_identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (array_access array: (identifier) index: (character_literal)))) (return_statement (ERROR (type_identifier)) (binary_expression left: (binary_expression left: (identifier) (ERROR) right: (character_literal)) right: (binary_expression left: (identifier) right: (identifier)))))) (method_declaration type: (type_identifier) name: (identifier) parameters: (formal_parameters (ERROR (type_identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (for_statement init: (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) condition: (binary_expression left: (identifier) right: (field_access object: (field_access object: (identifier) field: (identifier)) field: (identifier))) update: (update_expression (identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (array_access array: (field_access object: (identifier) field: (identifier)) index: (identifier)))) (if_statement condition: (condition (unary_expression operand: (method_invocation name: (identifier) arguments: (argument_list (identifier))))) consequence: (continue_statement)) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (character_literal)))))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (character_literal))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (binary_expression left: (identifier) right: (decimal_integer_literal)))))))))) (return_statement (identifier)))))\n**\n\n--\nscript\n\nconst minLikes = 10; \n\n\nfunction recommendPosts(privacy) { \n    \n    switch (privacy) { \n        case 'public': \n            return [\n                \"How to use Git and GitHub\", \n                \"Introduction to Python Programming\", \n                \"Data Structures and Algorithms\"\n            ]; \n\n        case 'private': \n            return [\n                \"Advanced Data Structures and Algorithms\", \n                \"Machine Learning with TensorFlow\", \n                \"Deep Learning with PyTorch\"\n            ]; \n\n        default: \n            throw new Error('Invalid privacy setting'); \n    } \n} \n\n\nfunction isValidPost(post) { \n    const likeCount = post['like_count']; \n\n    return typeof likeCount === 'number' && likeCount >= minLikes; \n} \n\n\nfunction calculateESMScore(user) { \n    let esmScore = 0; \n\n    \n    for (let i = 0; i < user.posts.length; i++) { \n        const post = user.posts[i]; \n\n        \n        if (!isValidPost(post)) continue; \n\n        \n        const recList = recommendPosts(post['privacy']); \n\n        if (recList.includes(post['title'])) { \n            esmScore += Math.log2(i + 2); \n        } \n    } \n\n    return esmScore; \n}\n--\n",
        "text": "34",
        "token_cnt": 1182
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public boolean determineHighOralHealthHabits(String toothBrushingFrequency) {\n    \n    double highToothBrushingFrequency = 3; \n\n    \n    if (Double.parseDouble(toothBrushingFrequency) >= highToothBrushingFrequency){\n        return true; \n    } else {\n        return false; \n    }\n}",
            "id": 457
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (if_statement condition: (condition (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))) right: (identifier))) consequence: (block (return_statement (true))) alternative: (block (return_statement (false)))))))\n**\n\n--\npublic boolean determineHighOralHealthHabits(String toothBrushingFrequency) {\n    \n    double highToothBrushingFrequency = 3; \n\n    \n    if (Double.parseDouble(toothBrushingFrequency) >= highToothBrushingFrequency){\n        return true; \n    } else {\n        return false; \n    }\n}\n--\n",
        "text": "5\n\nОбъяснение:\n\nЦикломатическая сложность — это мера сложности программы, которая показывает",
        "token_cnt": 271
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\nfunction updateHighNoseCare(reliability) {\n  let instruction = '';\n\n  \n  if (reliability < 0.75) {\n    instruction += 'Clear nasal passages by blowing your nose gently several times.';\n  }\n  \n  \n  else {\n    instruction += 'Continue with your regular daily hygiene routines, including cleaning and disinfecting your hands frequently.'\n  }\n\n  return instruction;\n}",
            "id": 464
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (ERROR (type_identifier) name: (identifier) (UNEXPECTED ''')) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_floating_point_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal)))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal)) (MISSING \";\")))) (return_statement (identifier))))\n**\n\n--\nscript\nfunction updateHighNoseCare(reliability) {\n  let instruction = '';\n\n  \n  if (reliability < 0.75) {\n    instruction += 'Clear nasal passages by blowing your nose gently several times.';\n  }\n  \n  \n  else {\n    instruction += 'Continue with your regular daily hygiene routines, including cleaning and disinfecting your hands frequently.'\n  }\n\n  return instruction;\n}\n--\n",
        "text": "8\n\nОбъяснение:\n\nЦикломатическая сложность — это мера сложности программы, которая учитывает",
        "token_cnt": 311
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public void updateLowTravelFlightReservationForEngineer(String customerName, String flightNumber) {\n    \n    if (customerName.equals(\"John Doe\")) {\n        System.out.println(\"Updating low travel flight reservation for \" + customerName);\n        \n        \n        if (flightNumber.equals(\"UA1234\")) {\n            System.out.println(\"\\t - Found matching flight\");\n            \n            \n            System.out.println(\"\\t - Updating database...\");\n            System.out.println(\"\\t - Database updated successfully!\");\n        } else {\n            System.out.println(\"\\t - No match found for provided flight number.\");\n        }\n        \n    } else {\n        System.out.println(\"No match found for provided customer name.\");\n    }\n    \n    return;\n}",
            "id": 469
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (type_identifier) name: (identifier))) body: (block (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (escape_sequence) (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (escape_sequence) (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (escape_sequence) (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (escape_sequence) (string_fragment)))))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) (return_statement))))\n**\n\n--\npublic void updateLowTravelFlightReservationForEngineer(String customerName, String flightNumber) {\n    \n    if (customerName.equals(\"John Doe\")) {\n        System.out.println(\"Updating low travel flight reservation for \" + customerName);\n        \n        \n        if (flightNumber.equals(\"UA1234\")) {\n            System.out.println(\"\\t - Found matching flight\");\n            \n            \n            System.out.println(\"\\t - Updating database...\");\n            System.out.println(\"\\t - Database updated successfully!\");\n        } else {\n            System.out.println(\"\\t - No match found for provided flight number.\");\n        }\n        \n    } else {\n        System.out.println(\"No match found for provided customer name.\");\n    }\n    \n    return;\n}\n--\n",
        "text": "6",
        "token_cnt": 690
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number of people\");\n        int n = scan.nextInt();\n\n        String result;\n        \n        \n        if (n == 1){\n            result = \"There will be no one at this meeting\";\n        }\n        else{\n            result = \"There will be \"+(n - 1)+\"people at this meeting \";\n        }\n        System.out.print(result);\n\n    }\n}",
            "id": 472
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal)))) right: (string_literal (string_fragment))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (identifier)))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number of people\");\n        int n = scan.nextInt();\n\n        String result;\n        \n        \n        if (n == 1){\n            result = \"There will be no one at this meeting\";\n        }\n        else{\n            result = \"There will be \"+(n - 1)+\"people at this meeting \";\n        }\n        System.out.print(result);\n\n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 635
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class FlightReservation {\n\n    public static void main(String[] args) {\n        \n        int passengerCount;\n\n        System.out.println(\"Enter number of passengers travelling\");\n        Scanner scan = new Scanner(System.in);\n        passengerCount = scan.nextInt();\n\n        boolean hasInfant = false;\n        while (true){\n            System.out.print(\"\\nDo any of them have infants? [y/N] \");\n            String input = scan.next();\n\n            if (input.equalsIgnoreCase(\"Y\") || input.equalsIgnoreCase(\"y\")){\n                hasInfant = true;\n                break;\n            } else if (input.equalsIgnoreCase(\"N\") || input.equalsIgnoreCase(\"n\")) {\n                break;\n            } else{\n                System.out.println(\"Invalid input! Try again.\");\n            }\n        }\n        \n        double fare = calculateFare(passengerCount,hasInfant);\n        System.out.printf(\"Total Fare: %.2f\",fare);\n    }\n\n    private static double calculateFare(int passengerCount,boolean hasInfant){\n        double baseFare = 100 * passengerCount ; \n\n        if (hasInfant){\n           return baseFare + (baseFare*0.5);    \n        } else {\n          return baseFare;   \n        } \n    }\n}",
            "id": 473
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (while_statement condition: (condition (true)) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (escape_sequence) (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true))) (break_statement)) alternative: (if_statement condition: (condition (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) consequence: (block (break_statement)) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (identifier)))))) (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (integral_type) name: (identifier)) (formal_parameter type: (boolean_type) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (decimal_integer_literal) right: (identifier)))) (if_statement condition: (condition (identifier)) consequence: (block (return_statement (binary_expression left: (identifier) right: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_floating_point_literal)))))) alternative: (block (return_statement (identifier)))))))))\n**\n\n--\npublic class FlightReservation {\n\n    public static void main(String[] args) {\n        \n        int passengerCount;\n\n        System.out.println(\"Enter number of passengers travelling\");\n        Scanner scan = new Scanner(System.in);\n        passengerCount = scan.nextInt();\n\n        boolean hasInfant = false;\n        while (true){\n            System.out.print(\"\\nDo any of them have infants? [y/N] \");\n            String input = scan.next();\n\n            if (input.equalsIgnoreCase(\"Y\") || input.equalsIgnoreCase(\"y\")){\n                hasInfant = true;\n                break;\n            } else if (input.equalsIgnoreCase(\"N\") || input.equalsIgnoreCase(\"n\")) {\n                break;\n            } else{\n                System.out.println(\"Invalid input! Try again.\");\n            }\n        }\n        \n        double fare = calculateFare(passengerCount,hasInfant);\n        System.out.printf(\"Total Fare: %.2f\",fare);\n    }\n\n    private static double calculateFare(int passengerCount,boolean hasInfant){\n        double baseFare = 100 * passengerCount ; \n\n        if (hasInfant){\n           return baseFare + (baseFare*0.5);    \n        } else {\n          return baseFare;   \n        } \n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 1276
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public boolean transformHighFinance(String startDate, String endDate){\n        \n        LocalDate start = LocalDate.parse(startDate);\n        LocalDate end = LocalDate.parse(endDate);\n        \n        \n        if((LocalDate.now().isAfter(start)) && (LocalDate.now().isBefore(end))) {\n            return true;\n        }\n        else{\n            return false;    \n        }\n    }",
            "id": 474
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (condition (binary_expression left: (parenthesized_expression (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list (identifier)))) right: (parenthesized_expression (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list (identifier)))))) consequence: (block (return_statement (true))) alternative: (block (return_statement (false)))))))\n**\n\n--\npublic boolean transformHighFinance(String startDate, String endDate){\n        \n        LocalDate start = LocalDate.parse(startDate);\n        LocalDate end = LocalDate.parse(endDate);\n        \n        \n        if((LocalDate.now().isAfter(start)) && (LocalDate.now().isBefore(end))) {\n            return true;\n        }\n        else{\n            return false;    \n        }\n    }\n--\n",
        "text": "6\nДля вычисления цикломатической сложности необходимо посчитать количество рёбер в графе потока управления программы. В",
        "token_cnt": 446
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class ExtremeEducation {\n\n    public static void main(String[] args) {\n        int consent = Integer.parseInt(args[0]);\n\n        double totalMarks = calculateTotalMarks(consent);\n        char grade = getGrade(totalMarks);\n\n        System.out.println(\"Total Marks: \" + totalMarks);\n        System.out.println(\"Grade: \" + grade);\n    }\n\n    private static double calculateTotalMarks(int consent) {\n        double totalMarks;\n        if (consent == 1 || consent == 2) {\n            \n            totalMarks = 50;\n        } else if (consent == 3) {\n            \n            totalMarks = 60;\n        } else if (consent == 4) {\n            \n            totalMarks = 70;\n        } else {\n            throw new IllegalArgumentException(\"Invalid consent value\");\n        }\n        return totalMarks;\n    }\n\n    private static char getGrade(double totalMarks) {\n        char grade;\n        if (totalMarks >= 90) {\n            grade = 'A';\n        } else if (totalMarks >= 80) {\n            grade = 'B';\n        } else if (totalMarks >= 70) {\n            grade = 'C';\n        } else if (totalMarks >= 60) {\n            grade = 'D';\n        } else {\n            grade = 'F';\n        }\n        return grade;\n    }\n}",
            "id": 477
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (identifier))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (identifier))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))) (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (integral_type) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (block (throw_statement (object_creation_expression type: (type_identifier) arguments: (argument_list (string_literal (string_fragment))))))))) (return_statement (identifier)))) (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (floating_point_type) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal)))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal)))))))) (return_statement (identifier)))))))\n**\n\n--\npublic class ExtremeEducation {\n\n    public static void main(String[] args) {\n        int consent = Integer.parseInt(args[0]);\n\n        double totalMarks = calculateTotalMarks(consent);\n        char grade = getGrade(totalMarks);\n\n        System.out.println(\"Total Marks: \" + totalMarks);\n        System.out.println(\"Grade: \" + grade);\n    }\n\n    private static double calculateTotalMarks(int consent) {\n        double totalMarks;\n        if (consent == 1 || consent == 2) {\n            \n            totalMarks = 50;\n        } else if (consent == 3) {\n            \n            totalMarks = 60;\n        } else if (consent == 4) {\n            \n            totalMarks = 70;\n        } else {\n            throw new IllegalArgumentException(\"Invalid consent value\");\n        }\n        return totalMarks;\n    }\n\n    private static char getGrade(double totalMarks) {\n        char grade;\n        if (totalMarks >= 90) {\n            grade = 'A';\n        } else if (totalMarks >= 80) {\n            grade = 'B';\n        } else if (totalMarks >= 70) {\n            grade = 'C';\n        } else if (totalMarks >= 60) {\n            grade = 'D';\n        } else {\n            grade = 'F';\n        }\n        return grade;\n    }\n}\n--\n",
        "text": "5",
        "token_cnt": 1376
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public void updateLowHygiene(boolean disinfectionRequired) {\n        String action = \"\";\n        \n        \n        if (disinfectionRequired == true){\n            action = \"Disinfected\";\n        } else {\n            action = \"Cleaned\";\n        }\n    \n        System.out.println(\"Common areas were \"+action+\" due to low hygiene levels.\");\n    \n    }",
            "id": 481
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal))) (if_statement condition: (condition (binary_expression left: (identifier) right: (true))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment)))))))))\n**\n\n--\npublic void updateLowHygiene(boolean disinfectionRequired) {\n        String action = \"\";\n        \n        \n        if (disinfectionRequired == true){\n            action = \"Disinfected\";\n        } else {\n            action = \"Cleaned\";\n        }\n    \n        System.out.println(\"Common areas were \"+action+\" due to low hygiene levels.\");\n    \n    }\n--\n",
        "text": "5\n\nОбъяснение:\nВ приведённом фрагменте кода можно выделить пять базовых путей выполнения",
        "token_cnt": 360
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    static Scanner scan = new Scanner(System.in);\n\n    \n    private static void dryRun() {\n        System.out.println(\"Enter 'yes' if you want to continue.\");\n        String answer = scan.nextLine();\n\n        while (!answer.equals(\"yes\")) {\n            System.out.print(\"\\nInvalid Input! Please try again.\\n\");\n            answer = scan.nextLine();\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"Update Low Hand Hygiene Rates\\n\");\n        \n        System.out.println(\"Using Hand Sanitizer for Analysis for Beginners\\n\");\n\n        System.out.println(\"Considering:\\nSafety \\nand implementing \");\n        System.out.println(\"if/else or switch/case statements to handle different conditions.\");\n        dryRun();\n\n        System.out.println(\"\\nPlease enter a number indicating where this update applies:\");\n        System.out.println(\"[1] Outside Home [2] Inside Home\");\n        int location = scan.nextInt();\n        boolean outsideHome; \n\n        if (location == 1){ \n            outsideHome=true; \n        } else{ \n            outsideHome=false; \n        }\n\n        if (outsideHome==true){ \n            System.out.println(\"Wash Hands Properly Is More Effective Than Alcohol Based Hand Rubs!\");\n        } else { \n            System.out.println(\"Alcohol Based Hand Rubs Are Better For Reducing Germs At Home!\");\n        }\n    }\n}",
            "id": 483
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (field_declaration (modifiers) type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (while_statement condition: (condition (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (escape_sequence) (string_fragment) (escape_sequence))))) (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence) (string_fragment) (escape_sequence) (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (escape_sequence) (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true)))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (false))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (true))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    static Scanner scan = new Scanner(System.in);\n\n    \n    private static void dryRun() {\n        System.out.println(\"Enter 'yes' if you want to continue.\");\n        String answer = scan.nextLine();\n\n        while (!answer.equals(\"yes\")) {\n            System.out.print(\"\\nInvalid Input! Please try again.\\n\");\n            answer = scan.nextLine();\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"Update Low Hand Hygiene Rates\\n\");\n        \n        System.out.println(\"Using Hand Sanitizer for Analysis for Beginners\\n\");\n\n        System.out.println(\"Considering:\\nSafety \\nand implementing \");\n        System.out.println(\"if/else or switch/case statements to handle different conditions.\");\n        dryRun();\n\n        System.out.println(\"\\nPlease enter a number indicating where this update applies:\");\n        System.out.println(\"[1] Outside Home [2] Inside Home\");\n        int location = scan.nextInt();\n        boolean outsideHome; \n\n        if (location == 1){ \n            outsideHome=true; \n        } else{ \n            outsideHome=false; \n        }\n\n        if (outsideHome==true){ \n            System.out.println(\"Wash Hands Properly Is More Effective Than Alcohol Based Hand Rubs!\");\n        } else { \n            System.out.println(\"Alcohol Based Hand Rubs Are Better For Reducing Germs At Home!\");\n        }\n    }\n}\n--\n",
        "text": "30",
        "token_cnt": 1436
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class NostrilClearance {\n\n    public static void main(String[] args) throws IOException {\n        \n        System.out.println(\"Please enter 'responsibility' as one of these options:\");\n        System.out.println(\"'Engineer For Beginner', 'Student', or anything else for default\");\n        String resp = scan.nextLine();\n\n        \n        if (resp == \"Engineer For Beginner\") {\n            clearNasalPassageForEngineeringBeginner();\n        } else if (resp == \"Student\") {\n            clearNasalPassageForStudent();\n        } else {\n            \n        }\n    }\n\n    private static void clearNasalPassageForEngineeringBeginner() {\n        System.out.println(\"Updating nostrils for engineering beginner...\");\n        \n    }\n\n    private static void clearNasalPassageForStudent() {\n        System.out.println(\"Updating nostrils for student...\");\n        \n    }\n}",
            "id": 484
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list)))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list)))) alternative: (block))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))\n**\n\n--\npublic class NostrilClearance {\n\n    public static void main(String[] args) throws IOException {\n        \n        System.out.println(\"Please enter 'responsibility' as one of these options:\");\n        System.out.println(\"'Engineer For Beginner', 'Student', or anything else for default\");\n        String resp = scan.nextLine();\n\n        \n        if (resp == \"Engineer For Beginner\") {\n            clearNasalPassageForEngineeringBeginner();\n        } else if (resp == \"Student\") {\n            clearNasalPassageForStudent();\n        } else {\n            \n        }\n    }\n\n    private static void clearNasalPassageForEngineeringBeginner() {\n        System.out.println(\"Updating nostrils for engineering beginner...\");\n        \n    }\n\n    private static void clearNasalPassageForStudent() {\n        System.out.println(\"Updating nostrils for student...\");\n        \n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 753
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static void main(String[] args) {\n        \n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Please enter your name:\");\n        String name = scan.nextLine();\n        System.out.println(\"Please enter your trust level (1-low, 2-medium, 3-high):\");\n        int trustLevel = scan.nextInt();\n\n        \n        int dryTime;\n        switch (trustLevel) {\n            case 1:\n                dryTime = 40;\n                break;\n            case 2:\n                dryTime = 20;\n                break;\n            default:\n                dryTime = 5;\n        }\n\n        \n        System.out.printf(\"For %s with a trust level of %d, we recommend a drying time of %ds.\", name, trustLevel, dryTime);\n    }",
            "id": 487
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (break_statement)) (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (identifier) (identifier) (identifier)))))))\n**\n\n--\npublic static void main(String[] args) {\n        \n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Please enter your name:\");\n        String name = scan.nextLine();\n        System.out.println(\"Please enter your trust level (1-low, 2-medium, 3-high):\");\n        int trustLevel = scan.nextInt();\n\n        \n        int dryTime;\n        switch (trustLevel) {\n            case 1:\n                dryTime = 40;\n                break;\n            case 2:\n                dryTime = 20;\n                break;\n            default:\n                dryTime = 5;\n        }\n\n        \n        System.out.printf(\"For %s with a trust level of %d, we recommend a drying time of %ds.\", name, trustLevel, dryTime);\n    }\n--\n",
        "text": "8",
        "token_cnt": 785
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n\nlet symptoms = true; \nlet exposure = \"low\"; \n\n\nif (symptoms && exposure === 'high') {\n  console.log(\"Wearing a mask is recommended.\");\n  console.log(\"Consider self-isolating at home until better.\");\n} else if (!symptoms) {\n  console.log(\"Regular hand washing is sufficient.\")\n} else if (exposure === 'moderate') {\n  console.log(\"Use gloves if available and wash hands immediately afterwards\");\n} else {\n  console.log(\"No specific precautions needed\")\n}\nconsole.log(\"\")\nconsole.log(\"Dry run complete! No actual changes were made.\")",
            "id": 489
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier) value: (true))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (binary_expression left: (identifier) (ERROR) right: (character_literal)))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\"))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\")))))) (expression_statement (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal))) (ERROR (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\")))\n**\n\n--\nscript\n\nlet symptoms = true; \nlet exposure = \"low\"; \n\n\nif (symptoms && exposure === 'high') {\n  console.log(\"Wearing a mask is recommended.\");\n  console.log(\"Consider self-isolating at home until better.\");\n} else if (!symptoms) {\n  console.log(\"Regular hand washing is sufficient.\")\n} else if (exposure === 'moderate') {\n  console.log(\"Use gloves if available and wash hands immediately afterwards\");\n} else {\n  console.log(\"No specific precautions needed\")\n}\nconsole.log(\"\")\nconsole.log(\"Dry run complete! No actual changes were made.\")\n--\n",
        "text": "6",
        "token_cnt": 616
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number of people\");\n        int n = scan.nextInt();\n\n        \n        ArrayList<String> personList = new ArrayList<>();\n        \n        while (n-- >0){\n            System.out.print(\"Enter name of Person \" + (n+1)+ \": \");\n            String name = scan.next();\n\n            \n            personList.add(name);\n        }\n\n        \n        Collections.sort(personList); \n\n        \n        for (int i=0;i < personList.size();i++){\n            System.out.println((i+1) + \". \" + personList.get(i));\n        }\n\n    }\n}",
            "id": 494
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (generic_type (type_identifier) (type_arguments (type_identifier))) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (generic_type (type_identifier) (type_arguments)) arguments: (argument_list)))) (while_statement condition: (condition (binary_expression left: (update_expression (identifier)) right: (decimal_integer_literal))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal)))) right: (string_literal (string_fragment)))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))) (for_statement init: (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) condition: (binary_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))) update: (update_expression (identifier)) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal))) right: (string_literal (string_fragment))) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number of people\");\n        int n = scan.nextInt();\n\n        \n        ArrayList<String> personList = new ArrayList<>();\n        \n        while (n-- >0){\n            System.out.print(\"Enter name of Person \" + (n+1)+ \": \");\n            String name = scan.next();\n\n            \n            personList.add(name);\n        }\n\n        \n        Collections.sort(personList); \n\n        \n        for (int i=0;i < personList.size();i++){\n            System.out.println((i+1) + \". \" + personList.get(i));\n        }\n\n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 1001
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public String transformLowWeather(String lowWeather, double bias) {\n    \n    Map<String, Double> outcomeProbabilities = new HashMap<>();\n    outcomeProbabilities.put(\"Cloudy\", 0.2);\n    outcomeProbabilities.put(\"Partly Cloudy\", 0.35);\n    outcomeProbabilities.put(\"Mostly Sunny\", 0.15);\n    outcomeProbabilities.put(\"Sunny\", 0.20);\n    \n    \n    double totalProbability = 0;\n    for (double prob : outcomeProbabilities.values()) {\n        totalProbability += prob;\n    }\n\n    \n    Random rand = new Random();\n    double generatedNumber = rand.nextDouble();\n\n    \n    String transformedWeather = null;\n    for (Map.Entry<String, Double> entry : outcomeProbabilities.entrySet()) {\n        String outcome = entry.getKey();\n        double probability = entry.getValue() / totalProbability;\n\n        \n        if ((generatedNumber < probability + bias && generatedNumber >= probability - bias)) {\n            transformedWeather = outcome;\n            break;\n        }\n    }\n\n    return \"The forecast for engineer experts under low \" + lowWeather + \"weather conditions is \" + transformedWeather + \".\";\n}",
            "id": 496
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (floating_point_type) name: (identifier))) body: (block (local_variable_declaration type: (generic_type (type_identifier) (type_arguments (type_identifier) (type_identifier))) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (generic_type (type_identifier) (type_arguments)) arguments: (argument_list)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (decimal_floating_point_literal)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (decimal_floating_point_literal)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (decimal_floating_point_literal)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (decimal_floating_point_literal)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (enhanced_for_statement type: (floating_point_type) name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) body: (block (expression_statement (assignment_expression left: (identifier) right: (identifier))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (null_literal))) (enhanced_for_statement type: (generic_type (scoped_type_identifier (type_identifier) (type_identifier)) (type_arguments (type_identifier) (type_identifier))) name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (identifier)))) (if_statement condition: (condition (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (binary_expression left: (identifier) right: (identifier))) right: (binary_expression left: (identifier) right: (binary_expression left: (identifier) right: (identifier)))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (identifier))) (break_statement))))) (return_statement (binary_expression left: (binary_expression left: (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment))) right: (identifier)) right: (string_literal (string_fragment)))))))\n**\n\n--\npublic String transformLowWeather(String lowWeather, double bias) {\n    \n    Map<String, Double> outcomeProbabilities = new HashMap<>();\n    outcomeProbabilities.put(\"Cloudy\", 0.2);\n    outcomeProbabilities.put(\"Partly Cloudy\", 0.35);\n    outcomeProbabilities.put(\"Mostly Sunny\", 0.15);\n    outcomeProbabilities.put(\"Sunny\", 0.20);\n    \n    \n    double totalProbability = 0;\n    for (double prob : outcomeProbabilities.values()) {\n        totalProbability += prob;\n    }\n\n    \n    Random rand = new Random();\n    double generatedNumber = rand.nextDouble();\n\n    \n    String transformedWeather = null;\n    for (Map.Entry<String, Double> entry : outcomeProbabilities.entrySet()) {\n        String outcome = entry.getKey();\n        double probability = entry.getValue() / totalProbability;\n\n        \n        if ((generatedNumber < probability + bias && generatedNumber >= probability - bias)) {\n            transformedWeather = outcome;\n            break;\n        }\n    }\n\n    return \"The forecast for engineer experts under low \" + lowWeather + \"weather conditions is \" + transformedWeather + \".\";\n}\n--\n",
        "text": "6\n\nОбъяснение:\n\nВ приведённом фрагменте кода можно выделить 6 базовых",
        "token_cnt": 1242
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import com.amazonaws.services.s3.AmazonS3;\nimport com.amazonaws.services.s3.AmazonS3ClientBuilder;\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.select.Elements;\n\npublic class Main {\n    public static void main(String[] args) throws Exception{\n        \n        String url = \"https:\n        Document doc = Jsoup.connect(url).get();\n\n        Elements titleElement = doc.getElementsByTag(\"title\");\n        System.out.println(\"Title: \" + titleElement.text());\n\n        AmazonS3 s3client = AmazonS3ClientBuilder.defaultClient();\n        byte [] bytes = \"<html><body>This is my test file</body></html>\".getBytes();\n        s3client.putObject(\"<your bucket name>\", \"testfile\", bytes);\n\n    }\n}",
            "id": 497
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (scoped_identifier scope: (scoped_identifier scope: (scoped_identifier scope: (identifier) name: (identifier)) name: (identifier)) name: (identifier)) name: (identifier))) (import_declaration (scoped_identifier scope: (scoped_identifier scope: (scoped_identifier scope: (scoped_identifier scope: (identifier) name: (identifier)) name: (identifier)) name: (identifier)) name: (identifier))) (import_declaration (scoped_identifier scope: (scoped_identifier scope: (identifier) name: (identifier)) name: (identifier))) (import_declaration (scoped_identifier scope: (scoped_identifier scope: (scoped_identifier scope: (identifier) name: (identifier)) name: (identifier)) name: (identifier))) (import_declaration (scoped_identifier scope: (scoped_identifier scope: (scoped_identifier scope: (identifier) name: (identifier)) name: (identifier)) name: (identifier))) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment))) (ERROR (identifier))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (array_type element: (integral_type) dimensions: (dimensions)) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (string_literal (string_fragment)) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal (string_fragment)) (identifier)))))))))\n**\n\n--\nimport com.amazonaws.services.s3.AmazonS3;\nimport com.amazonaws.services.s3.AmazonS3ClientBuilder;\nimport org.jsoup.Jsoup;\nimport org.jsoup.nodes.Document;\nimport org.jsoup.select.Elements;\n\npublic class Main {\n    public static void main(String[] args) throws Exception{\n        \n        String url = \"https:\n        Document doc = Jsoup.connect(url).get();\n\n        Elements titleElement = doc.getElementsByTag(\"title\");\n        System.out.println(\"Title: \" + titleElement.text());\n\n        AmazonS3 s3client = AmazonS3ClientBuilder.defaultClient();\n        byte [] bytes = \"<html><body>This is my test file</body></html>\".getBytes();\n        s3client.putObject(\"<your bucket name>\", \"testfile\", bytes);\n\n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 829
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n\nlet handWashing = false; \nlet temperatureControl = true; \nlet chlorination = \"Unknown\"; \nlet crossContamination = false; \n\n\nlet reliabilityRating = \"\"; \n\n\nif ((handWashing === true && temperatureControl === true) || \n    (chlorination === \"High\" && crossContamination === false)) {\n    reliabilityRating = \"Very High\";\n} else if((handWashing === true && temperatureControl === true) || \n           (chlorination === \"Medium\" && crossContamination === false)){\n    reliabilityRating = \"High\";\n} else if(temperatureControl === true){\n    reliabilityRating = \"Moderate\";\n} else{\n    reliabilityRating = \"Low\";\n}\n\n\nconsole.log(\"Reliability Rating: \", reliabilityRating);",
            "id": 498
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier) value: (false))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (true))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (false))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal))) (if_statement condition: (condition (binary_expression left: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) (ERROR) right: (true)) right: (binary_expression left: (identifier) (ERROR) right: (true)))) right: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) (ERROR) right: (string_literal (string_fragment))) right: (binary_expression left: (identifier) (ERROR) right: (false)))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) (ERROR) right: (true)) right: (binary_expression left: (identifier) (ERROR) right: (true)))) right: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) (ERROR) right: (string_literal (string_fragment))) right: (binary_expression left: (identifier) (ERROR) right: (false)))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (true))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (identifier)))))\n**\n\n--\nscript\n\nlet handWashing = false; \nlet temperatureControl = true; \nlet chlorination = \"Unknown\"; \nlet crossContamination = false; \n\n\nlet reliabilityRating = \"\"; \n\n\nif ((handWashing === true && temperatureControl === true) || \n    (chlorination === \"High\" && crossContamination === false)) {\n    reliabilityRating = \"Very High\";\n} else if((handWashing === true && temperatureControl === true) || \n           (chlorination === \"Medium\" && crossContamination === false)){\n    reliabilityRating = \"High\";\n} else if(temperatureControl === true){\n    reliabilityRating = \"Moderate\";\n} else{\n    reliabilityRating = \"Low\";\n}\n\n\nconsole.log(\"Reliability Rating: \", reliabilityRating);\n--\n",
        "text": "8",
        "token_cnt": 815
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) {\n        \n        int numUtensils = 5;\n        String[] professionals = {\"Doctor\", \"Nurse\", \"Lab Technician\"};\n        boolean result1, result2;\n        \n        \n        for (int i=0; i<numUtensils; i++) {\n            result1 = analyzeUseOfUtensil(i);\n            result2 = analyzeBias(professionals[i%3]);\n            \n            \n            if (result1 || result2) {\n                highHygiene = true;\n                break;\n            }\n        }\n        \n        \n        if (highHygiene) \n            System.out.println(\"Shared spaces maintained high hygiene standards.\");\n        else\n            System.out.println(\"Improvement required for better hygiene practices.\")\n    }\n    \n    private static boolean analyzeUseOfUtensil(int index) {\n        /*\n         * Function to analyze usage of specific utensil \n         */\n        return false; \n    }\n\n    private static boolean analyzeBias(String professional) {\n        /*\n         * Function to analyze potential bias towards certain professionals\n         */\n        return false; \n    }\n}",
            "id": 506
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (array_type element: (type_identifier) dimensions: (dimensions)) declarator: (variable_declarator name: (identifier) value: (array_initializer (string_literal (string_fragment)) (string_literal (string_fragment)) (string_literal (string_fragment))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier)) declarator: (variable_declarator name: (identifier))) (for_statement init: (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) condition: (binary_expression left: (identifier) right: (identifier)) update: (update_expression (identifier)) body: (block (expression_statement (assignment_expression left: (identifier) right: (method_invocation name: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment_expression left: (identifier) right: (method_invocation name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (binary_expression left: (identifier) right: (decimal_integer_literal))))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (identifier))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true))) (break_statement))))) (if_statement condition: (condition (identifier)) consequence: (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) alternative: (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\"))))) (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (integral_type) name: (identifier))) body: (block (block_comment) (return_statement (false)))) (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (block_comment) (return_statement (false)))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) {\n        \n        int numUtensils = 5;\n        String[] professionals = {\"Doctor\", \"Nurse\", \"Lab Technician\"};\n        boolean result1, result2;\n        \n        \n        for (int i=0; i<numUtensils; i++) {\n            result1 = analyzeUseOfUtensil(i);\n            result2 = analyzeBias(professionals[i%3]);\n            \n            \n            if (result1 || result2) {\n                highHygiene = true;\n                break;\n            }\n        }\n        \n        \n        if (highHygiene) \n            System.out.println(\"Shared spaces maintained high hygiene standards.\");\n        else\n            System.out.println(\"Improvement required for better hygiene practices.\")\n    }\n    \n    private static boolean analyzeUseOfUtensil(int index) {\n        /*\n         * Function to analyze usage of specific utensil \n         */\n        return false; \n    }\n\n    private static boolean analyzeBias(String professional) {\n        /*\n         * Function to analyze potential bias towards certain professionals\n         */\n        return false; \n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 990
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static void dryOffCompletely(boolean safetyOn) {\n        \n        if (!safetyOn) {\n            System.out.println(\"Turning on safety features...\");\n        }\n\n        \n        System.out.println(\"Starting extreme drying sequence:\");\n        System.out.println(\"- Towel off body\");\n        System.out.println(\"- Use hairdryer on highest heat setting for 10 minutes\");\n        System.out.println(\"- Pat down with additional towels until no moisture remains\");\n        System.out.println();\n\n        \n        if (!safetyOn) {\n            System.out.println(\"Turning off safety features.\");\n        }\n    }",
            "id": 507
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier))) body: (block (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list))) (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))\n**\n\n--\npublic static void dryOffCompletely(boolean safetyOn) {\n        \n        if (!safetyOn) {\n            System.out.println(\"Turning on safety features...\");\n        }\n\n        \n        System.out.println(\"Starting extreme drying sequence:\");\n        System.out.println(\"- Towel off body\");\n        System.out.println(\"- Use hairdryer on highest heat setting for 10 minutes\");\n        System.out.println(\"- Pat down with additional towels until no moisture remains\");\n        System.out.println();\n\n        \n        if (!safetyOn) {\n            System.out.println(\"Turning off safety features.\");\n        }\n    }\n--\n",
        "text": "4",
        "token_cnt": 592
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n\nlet handHygiene = prompt(\"Do you practice good hand hygiene? (y/n)\");\n\nif (handHygiene === \"y\") {\n  \n\n  console.log(\"Thank you for practicing proper hand hygiene!\");\n} else if (handHygiene === \"n\") {\n  \n  \n  alert(\"Not washing your hands can lead to many health issues.\");\n  console.log(\"Please consider washing your hands before proceeding.\");\n} else {\n  \n\n  alert(\"Invalid input. Please enter 'y' for yes or 'n' for no.\");\n  console.log(\"Invalid input detected. Continuing without action.\")\n}",
            "id": 510
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\"))))))\n**\n\n--\nscript\n\nlet handHygiene = prompt(\"Do you practice good hand hygiene? (y/n)\");\n\nif (handHygiene === \"y\") {\n  \n\n  console.log(\"Thank you for practicing proper hand hygiene!\");\n} else if (handHygiene === \"n\") {\n  \n  \n  alert(\"Not washing your hands can lead to many health issues.\");\n  console.log(\"Please consider washing your hands before proceeding.\");\n} else {\n  \n\n  alert(\"Invalid input. Please enter 'y' for yes or 'n' for no.\");\n  console.log(\"Invalid input detected. Continuing without action.\")\n}\n--\n",
        "text": "8",
        "token_cnt": 487
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n\nlet symptoms = [\"redness\", \"itching\"]; \n\nfunction dryRun(input) {\n  console.log(\"Dry run:\") \n  let output;\n\n  \n  if (symptoms.includes(\"redness\")) {\n    if (input === true) {\n      output = \"Yes\"; \n    } else {\n      output = \"No\" \n    }\n  }\n  \n  \n  else if (symptoms.includes(\"itching\")) {\n    if (input === false) {\n      output = \"Yes\"; \n    } else {\n      output = \"No\" \n    }\n  }\n\n  \n  console.log(`Based on these inputs, ${output} appears likely.`); \n}\n\ndryRun(true); \ndryRun(false);",
            "id": 513
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (ERROR (type_identifier) (ERROR (identifier)) (variable_declarator name: (identifier) (ERROR) value: (string_literal (string_fragment)))) (expression_statement (string_literal (string_fragment)) (ERROR)) (method_declaration type: (type_identifier) name: (identifier) parameters: (formal_parameters (ERROR (type_identifier))) body: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\")) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (true))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))) (MISSING \";\"))))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (false))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))) (MISSING \";\"))))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier)) (identifier) (identifier) (ERROR (identifier) (identifier) (identifier) (UNEXPECTED '`'))))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (true)))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (false)))))\n**\n\n--\nscript\n\nlet symptoms = [\"redness\", \"itching\"]; \n\nfunction dryRun(input) {\n  console.log(\"Dry run:\") \n  let output;\n\n  \n  if (symptoms.includes(\"redness\")) {\n    if (input === true) {\n      output = \"Yes\"; \n    } else {\n      output = \"No\" \n    }\n  }\n  \n  \n  else if (symptoms.includes(\"itching\")) {\n    if (input === false) {\n      output = \"Yes\"; \n    } else {\n      output = \"No\" \n    }\n  }\n\n  \n  console.log(`Based on these inputs, ${output} appears likely.`); \n}\n\ndryRun(true); \ndryRun(false);\n--\n",
        "text": "12",
        "token_cnt": 757
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\nfunction checkLowSecurityDataEncryption(dryRun) {\n  let issues = [];\n\n  \n  if (!dryRun) {\n    const encryptedVolume = createEncryptedVolume();\n    storeSecretOnServer(encryptedVolume);\n  } else {\n    console.log(\"DRY RUN: Skipping check 1 (encrypted data at rest)\");\n  }\n  \n  \n  if (!dryRun) {\n    const httpsConnection = establishSecureConnection();\n    transmitConfidentialInformation(httpsConnection);\n  } else {\n    console.log(\"DRY RUN: Skipping check 2 (SSL/TLS encryption)\");\n  }\n\n  return issues;\n}",
            "id": 516
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (ERROR (array_type element: (MISSING type_identifier) dimensions: (dimensions)))) (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))))) alternative: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))))) alternative: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) (return_statement (identifier))))\n**\n\n--\nscript\nfunction checkLowSecurityDataEncryption(dryRun) {\n  let issues = [];\n\n  \n  if (!dryRun) {\n    const encryptedVolume = createEncryptedVolume();\n    storeSecretOnServer(encryptedVolume);\n  } else {\n    console.log(\"DRY RUN: Skipping check 1 (encrypted data at rest)\");\n  }\n  \n  \n  if (!dryRun) {\n    const httpsConnection = establishSecureConnection();\n    transmitConfidentialInformation(httpsConnection);\n  } else {\n    console.log(\"DRY RUN: Skipping check 2 (SSL/TLS encryption)\");\n  }\n\n  return issues;\n}\n--\n",
        "text": "8",
        "token_cnt": 568
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static double calculateLowFitness(double[] heartRateData) {\n        \n        int numInvalidHeartRates = 0;\n        double sumOfDifferencesSquared = 0;\n\n        \n        for (int i = 0; i < heartRateData.length; i++) {\n            double difference = Math.abs(heartRateData[i] - TARGET_HEART_RATE);\n\n            \n            if (!Double.isNaN(difference)) {\n                sumOfDifferencesSquared += difference * difference;\n            } else {\n                numInvalidHeartRates++;\n            }\n        }\n\n        \n        return (1 / (2 * heartRateData.length)) * (numInvalidHeartRates + sumOfDifferencesSquared);\n    }",
            "id": 519
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (floating_point_type) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (for_statement init: (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) condition: (binary_expression left: (identifier) right: (field_access object: (identifier) field: (identifier))) update: (update_expression (identifier)) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (binary_expression left: (array_access array: (identifier) index: (identifier)) right: (identifier)))))) (if_statement condition: (condition (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (identifier))))) alternative: (block (expression_statement (update_expression (identifier))))))) (return_statement (binary_expression left: (parenthesized_expression (binary_expression left: (decimal_integer_literal) right: (parenthesized_expression (binary_expression left: (decimal_integer_literal) right: (field_access object: (identifier) field: (identifier)))))) right: (parenthesized_expression (binary_expression left: (identifier) right: (identifier))))))))\n**\n\n--\npublic static double calculateLowFitness(double[] heartRateData) {\n        \n        int numInvalidHeartRates = 0;\n        double sumOfDifferencesSquared = 0;\n\n        \n        for (int i = 0; i < heartRateData.length; i++) {\n            double difference = Math.abs(heartRateData[i] - TARGET_HEART_RATE);\n\n            \n            if (!Double.isNaN(difference)) {\n                sumOfDifferencesSquared += difference * difference;\n            } else {\n                numInvalidHeartRates++;\n            }\n        }\n\n        \n        return (1 / (2 * heartRateData.length)) * (numInvalidHeartRates + sumOfDifferencesSquared);\n    }\n--\n",
        "text": "4",
        "token_cnt": 687
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) throws IOException{\n        \n        System.out.println(\"Do you suffer from pain while cleaning ears?\");\n        String answer1 = scan.nextLine();\n\n        boolean hasPain = false;\n        if (answer1.equalsIgnoreCase(\"yes\")){\n            hasPain = true;\n        } else if (answer1.equalsIgnoreCase(\"no\")) {\n            System.out.println(\"Are there any other issues associated with your ears? If yes then please specify.\");\n            String answer2 = scan.nextLine();\n\n            if (answer2.equalsIgnoreCase(\"yes\")){\n                System.out.println(\"Please specify what exactly is causing problem so we can provide suitable solution\");\n                String causeOfIssue = scan.nextLine();\n\n                if (causeOfIssue.contains(\"wax\")){\n                    displayLowEarHygieneAvoidQtipsForCleaning();\n                } else {\n                    System.out.println(\"We couldn't find anything specific about \" + causeOfIssue + \". Please try again!\");\n                }\n                \n            } else {\n                System.out.println(\"Thankyou! We hope our suggestions helped you resolve your previous concern successfully.\");\n            }\n        } else {\n            System.out.println(\"Invalid Input! Try Again.\");\n        }\n\n    }\n\n    private static void displayLowEarHygieneAvoidQtipsForCleaning() throws IOException {\n        System.out.println(\"\\n\\t\\tAVOID USING Q-TIPS FOR CLEANING YOUR EARS!\\n\" +\n                           \"\\tUsing cotton swabs like Q-tips may push wax deeper into your ear canal.\\n\" +\n                           \"\\tInstead use soft bulb syringe which safely removes earwax without damaging delicate skin.\\n\" +\n                           \"\\tIf you need help removing impacted earwax consult doctor immediately.\"\n        );\n    }\n}",
            "id": 520
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true)))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list)))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment))))))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters) (throws (type_identifier)) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (binary_expression left: (string_literal (escape_sequence) (escape_sequence) (escape_sequence) (string_fragment) (escape_sequence)) right: (string_literal (escape_sequence) (string_fragment) (escape_sequence))) right: (string_literal (escape_sequence) (string_fragment) (escape_sequence))) right: (string_literal (escape_sequence) (string_fragment)))))))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) throws IOException{\n        \n        System.out.println(\"Do you suffer from pain while cleaning ears?\");\n        String answer1 = scan.nextLine();\n\n        boolean hasPain = false;\n        if (answer1.equalsIgnoreCase(\"yes\")){\n            hasPain = true;\n        } else if (answer1.equalsIgnoreCase(\"no\")) {\n            System.out.println(\"Are there any other issues associated with your ears? If yes then please specify.\");\n            String answer2 = scan.nextLine();\n\n            if (answer2.equalsIgnoreCase(\"yes\")){\n                System.out.println(\"Please specify what exactly is causing problem so we can provide suitable solution\");\n                String causeOfIssue = scan.nextLine();\n\n                if (causeOfIssue.contains(\"wax\")){\n                    displayLowEarHygieneAvoidQtipsForCleaning();\n                } else {\n                    System.out.println(\"We couldn't find anything specific about \" + causeOfIssue + \". Please try again!\");\n                }\n                \n            } else {\n                System.out.println(\"Thankyou! We hope our suggestions helped you resolve your previous concern successfully.\");\n            }\n        } else {\n            System.out.println(\"Invalid Input! Try Again.\");\n        }\n\n    }\n\n    private static void displayLowEarHygieneAvoidQtipsForCleaning() throws IOException {\n        System.out.println(\"\\n\\t\\tAVOID USING Q-TIPS FOR CLEANING YOUR EARS!\\n\" +\n                           \"\\tUsing cotton swabs like Q-tips may push wax deeper into your ear canal.\\n\" +\n                           \"\\tInstead use soft bulb syringe which safely removes earwax without damaging delicate skin.\\n\" +\n                           \"\\tIf you need help removing impacted earwax consult doctor immediately.\"\n        );\n    }\n}\n--\n",
        "text": "5",
        "token_cnt": 1441
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) {\n        \n        double pupilSize = 7;\n        int cornealCurvature = -30;\n        boolean isGlareReduction = true;\n\n        \n        double totalScore = (pupilSize + cornealCurvature) /2 ; \n\n        \n        if (isGlareReduction){\n            totalScore +=15;\n        }\n        \n        System.out.println(\"Total Score : \" +totalScore);\n\n    }\n}",
            "id": 523
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (unary_expression operand: (decimal_integer_literal)))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (true))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (identifier))) right: (decimal_integer_literal)))) (if_statement condition: (condition (identifier)) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) {\n        \n        double pupilSize = 7;\n        int cornealCurvature = -30;\n        boolean isGlareReduction = true;\n\n        \n        double totalScore = (pupilSize + cornealCurvature) /2 ; \n\n        \n        if (isGlareReduction){\n            totalScore +=15;\n        }\n        \n        System.out.println(\"Total Score : \" +totalScore);\n\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 514
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter marks of subject1\");\n        int mark1=scan.nextInt();\n        System.out.println(\"Enter marks of subject2\");\n        int mark2=scan.nextInt();\n        System.out.println(\"Enter marks of subject3\");\n        int mark3=scan.nextInt();\n        double average=(mark1+mark2+mark3)/3;\n        \n        \n        if (average>=80 && average<=95){\n            System.out.print(\"Excellent\\n\");\n        } else if (average >=70 && average<80 ) {\n            System.out.print(\"Very Good\\n\");\n        } else if (average >=60 && average <70 ){\n            System.out.print(\"Good\\n\");\n        } else{\n            System.out.print(\"Fail\\n\");\n        }\n        \n    }\n}",
            "id": 526
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (identifier))) right: (decimal_integer_literal)))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence)))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence)))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence))))))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter marks of subject1\");\n        int mark1=scan.nextInt();\n        System.out.println(\"Enter marks of subject2\");\n        int mark2=scan.nextInt();\n        System.out.println(\"Enter marks of subject3\");\n        int mark3=scan.nextInt();\n        double average=(mark1+mark2+mark3)/3;\n        \n        \n        if (average>=80 && average<=95){\n            System.out.print(\"Excellent\\n\");\n        } else if (average >=70 && average<80 ) {\n            System.out.print(\"Very Good\\n\");\n        } else if (average >=60 && average <70 ){\n            System.out.print(\"Good\\n\");\n        } else{\n            System.out.print(\"Fail\\n\");\n        }\n        \n    }\n}\n--\n",
        "text": "4",
        "token_cnt": 1186
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import com.example.*; \n\npublic class IDVerification {\n\n    public static boolean verifyID(String id) throws Exception{\n        \n        if (id == null || id.length() < 1){\n            throw new IllegalArgumentException(\"Invalid Input\");\n        }\n\n        \n        id = id.toUpperCase(); \n\n        \n        int hashCode = generateHashCode(id); \n\n        \n        char lastDigit = (char)(hashCode % 10 + '0'); \n\n        \n        return (lastDigit == id.charAt(id.length()-1)); \n    }\n\n    private static int generateHashCode(String str){\n        int result = 0;\n        for (int i=0;i<str.length();i++){\n           result += str.charAt(i)*Math.pow(26,(str.length()-1-i));\n        }\n       return result;\n    }\n}",
            "id": 527
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) (throws (type_identifier)) body: (block (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (null_literal)) right: (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (decimal_integer_literal)))) consequence: (block (throw_statement (object_creation_expression type: (type_identifier) arguments: (argument_list (string_literal (string_fragment))))))) (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (identifier))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (cast_expression type: (integral_type) value: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (character_literal)))))) (return_statement (parenthesized_expression (binary_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (decimal_integer_literal))))))))) (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (for_statement init: (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) condition: (binary_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))) update: (update_expression (identifier)) body: (block (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (decimal_integer_literal) (parenthesized_expression (binary_expression left: (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (decimal_integer_literal)) right: (identifier)))))))))) (return_statement (identifier)))))))\n**\n\n--\nimport com.example.*; \n\npublic class IDVerification {\n\n    public static boolean verifyID(String id) throws Exception{\n        \n        if (id == null || id.length() < 1){\n            throw new IllegalArgumentException(\"Invalid Input\");\n        }\n\n        \n        id = id.toUpperCase(); \n\n        \n        int hashCode = generateHashCode(id); \n\n        \n        char lastDigit = (char)(hashCode % 10 + '0'); \n\n        \n        return (lastDigit == id.charAt(id.length()-1)); \n    }\n\n    private static int generateHashCode(String str){\n        int result = 0;\n        for (int i=0;i<str.length();i++){\n           result += str.charAt(i)*Math.pow(26,(str.length()-1-i));\n        }\n       return result;\n    }\n}\n--\n",
        "text": "4",
        "token_cnt": 1008
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static int calcHighEyeHygiene(String name, String gender, double age, boolean bias) {\n        \n        int totalScore = 0;\n\n        \n        if (name != null && !name.isEmpty()\n                && gender != null \n                && age > 18 \n                && bias == true || false){\n\n            \n            if (gender.equalsIgnoreCase(\"Male\")) {\n                totalScore += 5;\n            } \n            if (age <=30 ) {\n                totalScore+=20;\n            }\n            if (!bias) {\n                totalScore -= 10;\n            } \n\n        } else {\n           System.out.println(\"Please enter valid details!\"); \n           return -1;\n       }\n\n       return totalScore;\n   }",
            "id": 529
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (floating_point_type) name: (identifier)) (formal_parameter type: (boolean_type) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (binary_expression left: (binary_expression left: (binary_expression left: (binary_expression left: (identifier) right: (null_literal)) right: (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) right: (binary_expression left: (identifier) right: (null_literal))) right: (binary_expression left: (identifier) right: (decimal_integer_literal))) right: (binary_expression left: (identifier) right: (true))) right: (false))) consequence: (block (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))))) (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement (unary_expression operand: (decimal_integer_literal))))) (return_statement (identifier)))))\n**\n\n--\npublic static int calcHighEyeHygiene(String name, String gender, double age, boolean bias) {\n        \n        int totalScore = 0;\n\n        \n        if (name != null && !name.isEmpty()\n                && gender != null \n                && age > 18 \n                && bias == true || false){\n\n            \n            if (gender.equalsIgnoreCase(\"Male\")) {\n                totalScore += 5;\n            } \n            if (age <=30 ) {\n                totalScore+=20;\n            }\n            if (!bias) {\n                totalScore -= 10;\n            } \n\n        } else {\n           System.out.println(\"Please enter valid details!\"); \n           return -1;\n       }\n\n       return totalScore;\n   }\n--\n",
        "text": "6",
        "token_cnt": 741
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script \n\n\nif (userHasNailIssues === true) {\n  console.log(\"User has nail issues\");\n  \n  \n  if (nailIssueSeverity <= mild) {\n    console.log(\"Suggest high nail care - trimnails regularly\")\n  } else if (nailIssueSeverity > moderate && nailIssueSeverity < severe){ \n    console.log(\"Suggest high nail care - visit dermatologist \")\n  } else {\n     console.log(\"Seek emergency medical attention immediately.\")   \n  }\n  \n} else {\n  console.log(\"No nail issues detected.\");  \n}",
            "id": 530
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration type: (type_identifier) name: (identifier) parameters: (formal_parameters (ERROR (type_identifier) (ERROR (true)) (identifier) (ERROR (identifier) (identifier) (identifier) (identifier)) (identifier)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (identifier))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\"))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (binary_expression left: (identifier) right: (identifier)))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\"))) alternative: (block (ERROR (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))) (expression_statement (identifier) (MISSING \";\")) (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))\n**\n\n--\nscript \n\n\nif (userHasNailIssues === true) {\n  console.log(\"User has nail issues\");\n  \n  \n  if (nailIssueSeverity <= mild) {\n    console.log(\"Suggest high nail care - trimnails regularly\")\n  } else if (nailIssueSeverity > moderate && nailIssueSeverity < severe){ \n    console.log(\"Suggest high nail care - visit dermatologist \")\n  } else {\n     console.log(\"Seek emergency medical attention immediately.\")   \n  }\n  \n} else {\n  console.log(\"No nail issues detected.\");  \n}\n--\n",
        "text": "5\nОбъяснение:\nВ приведённом фрагменте кода можно выделить пять базовых путей выполнения:",
        "token_cnt": 467
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\nfunction transformHygieneLevel(hygieneLevel) {\n  let recommendation;\n\n  \n  console.log(`Received hygiene level ${hygieneLevel}`);\n  recommendation = `Wash your hands before handling any raw meat`;\n  \n  \n  switch (hygieneLevel) {\n    case 'very_high':\n      recommendation = `Use gloves when preparing raw meats and wash them thoroughly afterwards`;\n      break;\n    case 'high':\n      recommendation = `Keep raw meat separate from other ingredients during preparation and cook until steaming hot throughout`;\n      break;\n    case 'moderate':\n      recommendation = `Cook all poultry products thoroughly and avoid cross contamination between raw and ready to eat foods`;\n      break;\n    case 'low':\n      recommendation = `Avoid consuming raw milk and eggs as well as unpasteurized juices and cheeses`\n      break;\n    default:\n      break;\n  }\n\n  return recommendation;\n}",
            "id": 532
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier)) (identifier) (ERROR (UNEXPECTED '`'))))) (expression_statement (assignment_expression left: (identifier) (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier)) right: (identifier)) (ERROR (UNEXPECTED '`'))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (character_literal)) (expression_statement (identifier) (ERROR (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier)) (type_identifier) (identifier) (UNEXPECTED '`'))) (break_statement)) (switch_block_statement_group (switch_label (character_literal)) (expression_statement (assignment_expression left: (identifier) (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier)) right: (identifier)) (ERROR (UNEXPECTED '`'))) (break_statement)) (switch_block_statement_group (switch_label (character_literal)) (expression_statement (assignment_expression left: (identifier) (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier)) right: (identifier)) (ERROR (UNEXPECTED '`'))) (break_statement)) (switch_block_statement_group (switch_label (character_literal)) (expression_statement (assignment_expression left: (identifier) (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier)) right: (identifier)) (ERROR (UNEXPECTED '`')))) (switch_block_statement_group (switch_label) (break_statement)))) (return_statement (identifier))))\n**\n\n--\nscript\nfunction transformHygieneLevel(hygieneLevel) {\n  let recommendation;\n\n  \n  console.log(`Received hygiene level ${hygieneLevel}`);\n  recommendation = `Wash your hands before handling any raw meat`;\n  \n  \n  switch (hygieneLevel) {\n    case 'very_high':\n      recommendation = `Use gloves when preparing raw meats and wash them thoroughly afterwards`;\n      break;\n    case 'high':\n      recommendation = `Keep raw meat separate from other ingredients during preparation and cook until steaming hot throughout`;\n      break;\n    case 'moderate':\n      recommendation = `Cook all poultry products thoroughly and avoid cross contamination between raw and ready to eat foods`;\n      break;\n    case 'low':\n      recommendation = `Avoid consuming raw milk and eggs as well as unpasteurized juices and cheeses`\n      break;\n    default:\n      break;\n  }\n\n  return recommendation;\n}\n--\n",
        "text": "10",
        "token_cnt": 946
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class CheckExtremeTransportation {\n    public static void main(String[] args) {\n        \n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number of passengers:\");\n        int numPassengers = scan.nextInt();\n        System.out.println(\"Enter mode of transport (car, bus, train):\");\n        String mode = scan.next();\n\n        \n        double cost;\n        switch (mode){\n            case \"car\":\n                if (numPassengers <= 4)\n                    cost = 10 * numPassengers + 5;\n                else \n                    cost = 20 * numPassengers - 10;\n                break;\n            case \"bus\": \n                if (numPassengers <= 36)\n                    cost = .75 * numPassengers + 8;\n                else \n                    cost = 2 * Math.ceil(.75*numPassengers) - 19;\n                break; \n            case \"train\":\n                if (numPassengers <= 100)\n                    cost = .5 * numPassengers + 15;\n                else \n                    cost = 1.5 * Math.ceil(.5*numPassengers) - 45;\n                break;    \n            default:\n                System.out.println(\"Invalid mode entered.\");\n                return;    \n        }\n        \n        \n        System.out.printf(\"The estimated cost for %d people travelling by %s is $%.2f\", numPassengers, mode, cost);\n    }\n}",
            "id": 534
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (binary_expression left: (decimal_integer_literal) right: (identifier)) right: (decimal_integer_literal)))) alternative: (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (binary_expression left: (decimal_integer_literal) right: (identifier)) right: (decimal_integer_literal))))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (binary_expression left: (decimal_floating_point_literal) right: (identifier)) right: (decimal_integer_literal)))) alternative: (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (binary_expression left: (decimal_integer_literal) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (binary_expression left: (decimal_floating_point_literal) right: (identifier))))) right: (decimal_integer_literal))))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (binary_expression left: (decimal_floating_point_literal) right: (identifier)) right: (decimal_integer_literal)))) alternative: (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (binary_expression left: (decimal_floating_point_literal) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (binary_expression left: (decimal_floating_point_literal) right: (identifier))))) right: (decimal_integer_literal))))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (identifier) (identifier) (identifier)))))))))\n**\n\n--\nimport java.util.*;\npublic class CheckExtremeTransportation {\n    public static void main(String[] args) {\n        \n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number of passengers:\");\n        int numPassengers = scan.nextInt();\n        System.out.println(\"Enter mode of transport (car, bus, train):\");\n        String mode = scan.next();\n\n        \n        double cost;\n        switch (mode){\n            case \"car\":\n                if (numPassengers <= 4)\n                    cost = 10 * numPassengers + 5;\n                else \n                    cost = 20 * numPassengers - 10;\n                break;\n            case \"bus\": \n                if (numPassengers <= 36)\n                    cost = .75 * numPassengers + 8;\n                else \n                    cost = 2 * Math.ceil(.75*numPassengers) - 19;\n                break; \n            case \"train\":\n                if (numPassengers <= 100)\n                    cost = .5 * numPassengers + 15;\n                else \n                    cost = 1.5 * Math.ceil(.5*numPassengers) - 45;\n                break;    \n            default:\n                System.out.println(\"Invalid mode entered.\");\n                return;    \n        }\n        \n        \n        System.out.printf(\"The estimated cost for %d people travelling by %s is $%.2f\", numPassengers, mode, cost);\n    }\n}\n--\n",
        "text": "11",
        "token_cnt": 1470
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static boolean determineHigherEducation(String subject) {\n    \n    double reliability = 0;\n\n    /* \n     * Calculate reliability based on subject\n     */\n    if (subject == \"Computer Science\") {\n        reliability = 95.34;\n    } else if (subject == \"Electronics Engineering\") {\n        reliability = 87.21;\n    } else if (subject == \"Mechanical Engineering\") {\n        reliability = 68.43;\n    } else {\n        return false;\n    }\n\n    /* \n     * Return true if reliability >= 80% \n     */\n    if (reliability >= 80) {\n        return true;\n    } else {\n        return false;\n    }\n}",
            "id": 539
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (block_comment) (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_floating_point_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_floating_point_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_floating_point_literal)))) alternative: (block (return_statement (false)))))) (block_comment) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (return_statement (true))) alternative: (block (return_statement (false)))))))\n**\n\n--\npublic static boolean determineHigherEducation(String subject) {\n    \n    double reliability = 0;\n\n    /* \n     * Calculate reliability based on subject\n     */\n    if (subject == \"Computer Science\") {\n        reliability = 95.34;\n    } else if (subject == \"Electronics Engineering\") {\n        reliability = 87.21;\n    } else if (subject == \"Mechanical Engineering\") {\n        reliability = 68.43;\n    } else {\n        return false;\n    }\n\n    /* \n     * Return true if reliability >= 80% \n     */\n    if (reliability >= 80) {\n        return true;\n    } else {\n        return false;\n    }\n}\n--\n",
        "text": "4",
        "token_cnt": 545
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args){\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Do you give permission to use biometric authentication?\");\n        String answer = scan.nextLine();\n\n        \n        if(answer.equalsIgnoreCase(\"Yes\")){\n            System.out.println(\"Biometrics can now be used.\");\n        } else if(answer.equalsIgnoreCase(\"No\")){\n            System.out.println(\"Biometrics cannot be used without explicit permission from the user.\");\n        } else{\n            System.out.println(\"Invalid Input! Please enter either 'Yes' or 'No'.\");\n        }\n\n    }\n}",
            "id": 542
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args){\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Do you give permission to use biometric authentication?\");\n        String answer = scan.nextLine();\n\n        \n        if(answer.equalsIgnoreCase(\"Yes\")){\n            System.out.println(\"Biometrics can now be used.\");\n        } else if(answer.equalsIgnoreCase(\"No\")){\n            System.out.println(\"Biometrics cannot be used without explicit permission from the user.\");\n        } else{\n            System.out.println(\"Invalid Input! Please enter either 'Yes' or 'No'.\");\n        }\n\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 688
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class WashHand {\n    public static void main(String[] args) {\n        \n        if (args.length != 1) {\n            System.out.println(\"Usage: <temperature>\");\n            return;\n        }\n\n        double temp = Double.parseDouble(args[0]);\n        \n        \n        String advice;\n        if (temp >= 50) {\n            advice = \"Use regular soap and lukewarm water for at least 20 seconds\";\n        } else {\n            advice = \"Use alcohol-based gel for proper hygiene.\";\n        }\n    \n        System.out.println(\"Advice: \" + advice);\n    }\n}",
            "id": 545
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (if_statement condition: (condition (binary_expression left: (field_access object: (identifier) field: (identifier)) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))))))\n**\n\n--\npublic class WashHand {\n    public static void main(String[] args) {\n        \n        if (args.length != 1) {\n            System.out.println(\"Usage: <temperature>\");\n            return;\n        }\n\n        double temp = Double.parseDouble(args[0]);\n        \n        \n        String advice;\n        if (temp >= 50) {\n            advice = \"Use regular soap and lukewarm water for at least 20 seconds\";\n        } else {\n            advice = \"Use alcohol-based gel for proper hygiene.\";\n        }\n    \n        System.out.println(\"Advice: \" + advice);\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 598
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) {\n        \n        System.out.println(\"Ear Wax Condition: \" + hasExcessiveWax());\n        System.out.println(\"Cleaning Method Used: \" + getCleaningMethodUsed());\n        System.out.println(\"Discomfort Level: \" + getDiscomfortLevel());\n\n        boolean result = hasNoInfection() && !hasExcessiveWax();\n        String recommendation;\n        if (result){\n            recommendation =\"Your ears appear to have good hygiene\";\n        } else{\n            recommendation=\"It seems like you may need to improve your ear hygiene practices.\";\n        }\n        System.out.println(\"Recommendation:\" + recommendation);\n\n    }\n\n    private static boolean hasExcessiveWax(){\n        return true;\n    }\n\n    private static boolean hasNoInfection(){\n       return false;\n    }\n\n    private static String getCleaningMethodUsed(){\n      return \"Cotton Swab\";\n    }\n\n    private static int getDiscomfortLevel(){\n     return 0;\n    }\n}",
            "id": 549
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (method_invocation name: (identifier) arguments: (argument_list)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (method_invocation name: (identifier) arguments: (argument_list)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (method_invocation name: (identifier) arguments: (argument_list)))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (method_invocation name: (identifier) arguments: (argument_list)) right: (unary_expression operand: (method_invocation name: (identifier) arguments: (argument_list)))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (identifier)) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))) (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters) body: (block (return_statement (true)))) (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters) body: (block (return_statement (false)))) (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters) body: (block (return_statement (string_literal (string_fragment))))) (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters) body: (block (return_statement (decimal_integer_literal)))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) {\n        \n        System.out.println(\"Ear Wax Condition: \" + hasExcessiveWax());\n        System.out.println(\"Cleaning Method Used: \" + getCleaningMethodUsed());\n        System.out.println(\"Discomfort Level: \" + getDiscomfortLevel());\n\n        boolean result = hasNoInfection() && !hasExcessiveWax();\n        String recommendation;\n        if (result){\n            recommendation =\"Your ears appear to have good hygiene\";\n        } else{\n            recommendation=\"It seems like you may need to improve your ear hygiene practices.\";\n        }\n        System.out.println(\"Recommendation:\" + recommendation);\n\n    }\n\n    private static boolean hasExcessiveWax(){\n        return true;\n    }\n\n    private static boolean hasNoInfection(){\n       return false;\n    }\n\n    private static String getCleaningMethodUsed(){\n      return \"Cotton Swab\";\n    }\n\n    private static int getDiscomfortLevel(){\n     return 0;\n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 971
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public boolean checkExtremeHygiene(String responsibility) {\n        \n        boolean extremeHygiene = false;\n\n        /* Use Switch statement to evaluate different responsibilities based\n           on their string value */\n        switch (responsibility) {\n            case \"Engineer\":\n                extremeHygiene = true;\n                break;\n\n            default:\n                extremeHygiene = false;\n        }\n        \n        return extremeHygiene;\n    }",
            "id": 557
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (block_comment) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (true))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (assignment_expression left: (identifier) right: (false)))))) (return_statement (identifier)))))\n**\n\n--\npublic boolean checkExtremeHygiene(String responsibility) {\n        \n        boolean extremeHygiene = false;\n\n        /* Use Switch statement to evaluate different responsibilities based\n           on their string value */\n        switch (responsibility) {\n            case \"Engineer\":\n                extremeHygiene = true;\n                break;\n\n            default:\n                extremeHygiene = false;\n        }\n        \n        return extremeHygiene;\n    }\n--\n",
        "text": "6\nОбъяснение: цикломатическая сложность — это количество различных путей выполнения программы. В данном случае путь",
        "token_cnt": 329
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) {\n        \n        System.out.println(\"Dry Run\");\n\n        String topic = \"Low Ear Hygiene\";\n        int difficultyLevel = 1; \n\n        displayTopicAndDifficulty(topic,difficultyLevel); \n    }\n\n    private static void displayTopicAndDifficulty(String topic,int difficultyLevel){\n        switch (difficultyLevel) {\n            case 0:\n                System.out.printf(\"%s - Easy\\n\",topic); \n                break; \n            case 1:\n                System.out.printf(\"%s - Intermediate\\n\",topic); \n                break; \n            default:\n                System.out.printf(\"%s - Advanced\\n\",topic); \n                break;    \n        }\n    }\n}",
            "id": 570
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier)))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (integral_type) name: (identifier))) body: (block (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence)) (identifier)))) (break_statement)) (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence)) (identifier)))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence)) (identifier)))) (break_statement)))))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) {\n        \n        System.out.println(\"Dry Run\");\n\n        String topic = \"Low Ear Hygiene\";\n        int difficultyLevel = 1; \n\n        displayTopicAndDifficulty(topic,difficultyLevel); \n    }\n\n    private static void displayTopicAndDifficulty(String topic,int difficultyLevel){\n        switch (difficultyLevel) {\n            case 0:\n                System.out.printf(\"%s - Easy\\n\",topic); \n                break; \n            case 1:\n                System.out.printf(\"%s - Intermediate\\n\",topic); \n                break; \n            default:\n                System.out.printf(\"%s - Advanced\\n\",topic); \n                break;    \n        }\n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 761
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    private static Scanner scan = new Scanner(System.in);\n\n    \n    private static void promptUser() {\n        System.out.println(\"Enter your preference:\");\n        System.out.print(\"\\tMode of transportation (e.g carpooling): \");\n        String modeOfTransport = scan.nextLine();\n\n        System.out.print(\"\\tDistance travelled per day (km): \");\n        double dailyDistanceTravelled = Double.parseDouble(scan.nextLine());\n\n        System.out.print(\"\\tDo you want cheap or fast? (cheap/fast): \");\n        String priceOrSpeedPreference = scan.nextLine();\n    }\n\n    \n    private static List<String> getRides(String modeOfTransport, double dailyDistanceTravelled, String priceOrSpeedPreference) {\n        ArrayList<String> results = new ArrayList<>();\n        \n        \n        results.add(\"Uber - https:\n        results.add(\"Lyft - https:\n        results.add(\"Via - https:\n        results.add(\"Bla Bla Car - https:\n    \n        return results;\n    }\n\n    \n    private static void printRecommendations(List<String> recommendedServices) {\n        int i=1;\n        for (String s : recommendedServices){\n            System.out.printf(\"%d. %s\\n\",i++,s);\n        }\n    }\n    \n    public static void main(String[] args) {\n        promptUser();\n        List<String> results = getRides(...);\n        printRecommendations(results);\n    }\n}",
            "id": 572
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(ERROR (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (modifiers) (identifier) (field_declaration (modifiers) type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (escape_sequence) (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (escape_sequence) (string_fragment))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (escape_sequence) (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))) (modifiers) type: (generic_type (type_identifier) (type_arguments (type_identifier))) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (floating_point_type) name: (identifier)) (formal_parameter type: (type_identifier) name: (identifier))) (local_variable_declaration type: (generic_type (type_identifier) (type_arguments (type_identifier))) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (generic_type (type_identifier) (type_arguments)) arguments: (argument_list)))) (identifier) (identifier) (ERROR (binary_expression left: (string_literal (string_fragment)) (ERROR (identifier)) right: (identifier))) (identifier) (identifier) (ERROR (binary_expression left: (string_literal (string_fragment)) (ERROR (identifier) (identifier) (identifier)) right: (identifier)) (identifier) (void_type) (method_invocation name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (identifier)))) (integral_type) (assignment_expression left: (identifier) right: (decimal_integer_literal)) (formal_parameters (formal_parameter type: (type_identifier) (ERROR (identifier)) name: (identifier))) (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence)) (update_expression (identifier)) (identifier))) (void_type) (identifier) (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (method_invocation name: (identifier) arguments: (argument_list)) (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (assignment_expression left: (identifier) right: (method_invocation name: (identifier) arguments: (argument_list (ERROR)))))) (method_invocation name: (identifier) arguments: (argument_list (identifier))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    private static Scanner scan = new Scanner(System.in);\n\n    \n    private static void promptUser() {\n        System.out.println(\"Enter your preference:\");\n        System.out.print(\"\\tMode of transportation (e.g carpooling): \");\n        String modeOfTransport = scan.nextLine();\n\n        System.out.print(\"\\tDistance travelled per day (km): \");\n        double dailyDistanceTravelled = Double.parseDouble(scan.nextLine());\n\n        System.out.print(\"\\tDo you want cheap or fast? (cheap/fast): \");\n        String priceOrSpeedPreference = scan.nextLine();\n    }\n\n    \n    private static List<String> getRides(String modeOfTransport, double dailyDistanceTravelled, String priceOrSpeedPreference) {\n        ArrayList<String> results = new ArrayList<>();\n        \n        \n        results.add(\"Uber - https:\n        results.add(\"Lyft - https:\n        results.add(\"Via - https:\n        results.add(\"Bla Bla Car - https:\n    \n        return results;\n    }\n\n    \n    private static void printRecommendations(List<String> recommendedServices) {\n        int i=1;\n        for (String s : recommendedServices){\n            System.out.printf(\"%d. %s\\n\",i++,s);\n        }\n    }\n    \n    public static void main(String[] args) {\n        promptUser();\n        List<String> results = getRides(...);\n        printRecommendations(results);\n    }\n}\n--\n",
        "text": "10",
        "token_cnt": 1418
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n\nconst REGULAR = 'regular';\nconst EMERGENCY = 'emergency';\n\n\nlet patientName = 'John Doe';\nlet age = 42;\nlet height = 180; \nlet weight = 90kg; \n\n\nlet allergies = ['nuts'];\nlet medications = [];\n\nfunction displayLowRegularHealthCheckups() {\n  console.log(`Scheduling routine medical exams for ${patientName}`);\n\n  let safetyScore = calculateSafetyScore();\n  \n  if (safetyScore < 75) {\n    scheduleRegularExam(EMERGENCY);\n  } else if (safetyScore >= 75 && safetyScore <= 90) {\n    scheduleRegularExam(REGULAR);\n  } else {\n    console.log(`${patientName} does not need any more regular health checks`);\n  }\n}\n\nfunction calculateSafetyScore() {\n  return Math.round((height / weight) * 100);\n}\n\nfunction scheduleRegularExam(type) {\n  console.log(`  - scheduling ${type} medical exam...`);\n}\n\ndisplayLowRegularHealthCheckups();\nconsole.log('');\nconsole.log('--- END ---');",
            "id": 580
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier) value: (character_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (character_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (character_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal)) (ERROR (identifier))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (array_access array: (MISSING identifier) index: (character_literal)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (ERROR (array_type element: (MISSING type_identifier) dimensions: (dimensions)))) (method_declaration type: (type_identifier) name: (identifier) parameters: (formal_parameters) body: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier)) (identifier) (ERROR (identifier) (UNEXPECTED '`'))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))))) alternative: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`')) (identifier) (ERROR (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (UNEXPECTED '`')))))))))) (method_declaration type: (type_identifier) name: (identifier) parameters: (formal_parameters) body: (block (return_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (identifier))) right: (decimal_integer_literal))))))) (method_declaration type: (type_identifier) name: (identifier) parameters: (formal_parameters (ERROR (type_identifier))) body: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (identifier) (identifier) (identifier) (UNEXPECTED '`'))))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED ''')) (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal))) (MISSING \")\")))))\n**\n\n--\nscript\n\nconst REGULAR = 'regular';\nconst EMERGENCY = 'emergency';\n\n\nlet patientName = 'John Doe';\nlet age = 42;\nlet height = 180; \nlet weight = 90kg; \n\n\nlet allergies = ['nuts'];\nlet medications = [];\n\nfunction displayLowRegularHealthCheckups() {\n  console.log(`Scheduling routine medical exams for ${patientName}`);\n\n  let safetyScore = calculateSafetyScore();\n  \n  if (safetyScore < 75) {\n    scheduleRegularExam(EMERGENCY);\n  } else if (safetyScore >= 75 && safetyScore <= 90) {\n    scheduleRegularExam(REGULAR);\n  } else {\n    console.log(`${patientName} does not need any more regular health checks`);\n  }\n}\n\nfunction calculateSafetyScore() {\n  return Math.round((height / weight) * 100);\n}\n\nfunction scheduleRegularExam(type) {\n  console.log(`  - scheduling ${type} medical exam...`);\n}\n\ndisplayLowRegularHealthCheckups();\nconsole.log('');\nconsole.log('--- END ---');\n--\n",
        "text": "31",
        "token_cnt": 1248
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.sql.*;\npublic class Main {\n    public static void main(String[] args) throws SQLException{\n        \n        String jdbcDriver = \"com.mysql.cj.jdbc.Driver\";  \n        String dbURL = \"jdbc:mysql:\n        \n        \n        String username = \"username\";\n        String password = \"password\";\n\n        try (Connection conn = DriverManager.getConnection(dbURL, username, password);\n            Statement stmt = conn.createStatement();){\n\n            \n            String sql = \"UPDATE `student_performance` SET `reliability`=? WHERE id IN (SELECT MAX(`id`) FROM `student_performance`);\";\n            PreparedStatement pstmt = conn.prepareStatement(sql);\n            pstmt.setFloat(1,(float)(Math.random() * 5));\n            int updatedRows = pstmt.executeUpdate();\n            System.out.println(\"Updated Rows: \"+updatedRows);\n\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n    }\n}",
            "id": 581
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment))) (ERROR (identifier))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (try_with_resources_statement resources: (resource_specification (resource type: (type_identifier) name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier) (identifier) (identifier)))) (resource type: (type_identifier) name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (decimal_integer_literal) (cast_expression type: (floating_point_type) value: (parenthesized_expression (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (decimal_integer_literal))))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier)))))) (catch_clause (catch_formal_parameter (catch_type (type_identifier)) name: (identifier)) body: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))))))))\n**\n\n--\nimport java.sql.*;\npublic class Main {\n    public static void main(String[] args) throws SQLException{\n        \n        String jdbcDriver = \"com.mysql.cj.jdbc.Driver\";  \n        String dbURL = \"jdbc:mysql:\n        \n        \n        String username = \"username\";\n        String password = \"password\";\n\n        try (Connection conn = DriverManager.getConnection(dbURL, username, password);\n            Statement stmt = conn.createStatement();){\n\n            \n            String sql = \"UPDATE `student_performance` SET `reliability`=? WHERE id IN (SELECT MAX(`id`) FROM `student_performance`);\";\n            PreparedStatement pstmt = conn.prepareStatement(sql);\n            pstmt.setFloat(1,(float)(Math.random() * 5));\n            int updatedRows = pstmt.executeUpdate();\n            System.out.println(\"Updated Rows: \"+updatedRows);\n\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n\n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 947
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n    const transformHighFoodHygiene = (data) => {\n      \n      if (!Array.isArray(data)) {\n        return 'Invalid input data';\n      }\n  \n      let transformedData = [];\n  \n      for (const entry of data) {\n        \n        let trustLevel;\n        if (entry.numberOfInspections < 3 || entry.percentageComplaints > 5) {\n          trustLevel = 'Low';\n        } else if (entry.numberOfInspections >= 3 && entry.percentageComplaints <= 5) {\n          trustLevel = 'Medium';\n        } else {\n          trustLevel = 'High';\n        }\n  \n        \n        entry['trustLevel'] = trustLevel;\n        if (trustLevel === 'High') {\n          entry['improvementActions'] = [\n            'Improve food handling practices',\n            'Implement HACCP plans'\n          ];\n        }\n  \n        transformedData.push(entry);\n      }\n  \n      return transformedData;\n    };\n    \n    module.exports = transformHighFoodHygiene;",
            "id": 585
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier)) (ERROR (inferred_parameters (identifier)) (ERROR) (ERROR (method_invocation name: (identifier) arguments: (argument_list (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))))) (array_initializer (identifier) (ERROR (character_literal))) (identifier)) (array_type element: (type_identifier) (ERROR) dimensions: (dimensions)))) (ERROR (type_identifier) (identifier) (identifier) (identifier)) (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (field_access object: (identifier) field: (identifier)) right: (decimal_integer_literal)) right: (binary_expression left: (field_access object: (identifier) field: (identifier)) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (field_access object: (identifier) field: (identifier)) right: (decimal_integer_literal)) right: (binary_expression left: (field_access object: (identifier) field: (identifier)) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal)))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal)))))) (expression_statement (assignment_expression left: (array_access array: (identifier) index: (character_literal)) right: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (expression_statement (array_access array: (array_access array: (identifier) index: (character_literal)) (ERROR) (ERROR (character_literal)) index: (character_literal))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))) (return_statement (identifier)) (ERROR) (expression_statement (assignment_expression left: (field_access object: (identifier) field: (identifier)) right: (identifier))))\n**\n\n--\nscript\n    const transformHighFoodHygiene = (data) => {\n      \n      if (!Array.isArray(data)) {\n        return 'Invalid input data';\n      }\n  \n      let transformedData = [];\n  \n      for (const entry of data) {\n        \n        let trustLevel;\n        if (entry.numberOfInspections < 3 || entry.percentageComplaints > 5) {\n          trustLevel = 'Low';\n        } else if (entry.numberOfInspections >= 3 && entry.percentageComplaints <= 5) {\n          trustLevel = 'Medium';\n        } else {\n          trustLevel = 'High';\n        }\n  \n        \n        entry['trustLevel'] = trustLevel;\n        if (trustLevel === 'High') {\n          entry['improvementActions'] = [\n            'Improve food handling practices',\n            'Implement HACCP plans'\n          ];\n        }\n  \n        transformedData.push(entry);\n      }\n  \n      return transformedData;\n    };\n    \n    module.exports = transformHighFoodHygiene;\n--\n",
        "text": "8\n\nОбъяснение:\n\nЦикломатическая сложность — это мера сложности программного кода, которая",
        "token_cnt": 860
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter name of the file\");\n        String filename = scan.nextLine();\n\n        try (Scanner inputFile = new Scanner(new File(filename))) {\n            while (inputFile.hasNextLine()) {\n                String line = inputFile.nextLine();\n\n                \n                if (line.contains(\"high\") && line.contains(\"nail\"))\n                    System.out.println(\"Filing and Shaping Nails for Analysis for Beginners.\"); \n            }\n        } catch (FileNotFoundException e) {\n            System.err.format(\"Unable to open file %s.\", filename);\n        }\n\n    }\n}",
            "id": 589
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (try_with_resources_statement resources: (resource_specification (resource type: (type_identifier) name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (object_creation_expression type: (type_identifier) arguments: (argument_list (identifier))))))) body: (block (while_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) consequence: (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))) (catch_clause (catch_formal_parameter (catch_type (type_identifier)) name: (identifier)) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (identifier))))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter name of the file\");\n        String filename = scan.nextLine();\n\n        try (Scanner inputFile = new Scanner(new File(filename))) {\n            while (inputFile.hasNextLine()) {\n                String line = inputFile.nextLine();\n\n                \n                if (line.contains(\"high\") && line.contains(\"nail\"))\n                    System.out.println(\"Filing and Shaping Nails for Analysis for Beginners.\"); \n            }\n        } catch (FileNotFoundException e) {\n            System.err.format(\"Unable to open file %s.\", filename);\n        }\n\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 839
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class FootCareAdvice {\n    public static void main(String[] args) {\n        \n        int symptomScore = 3;\n\n        String advice = getAdvice(symptomScore);\n        \n        System.out.println(\"Low footcare advice: \" + advice); \n    }\n\n    private static String getAdvice(int symptomScore){\n        switch (symptomScore) {\n            case 0:\n                return \"No apparent issues detected.\";\n            case 1:\n            case 2: \n                return \"Consider seeing a healthcare professional for further evaluation\"; \n            default: \n                return \"Display more severe warning signs here\";    \n        }\n    }\n}",
            "id": 590
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (identifier))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))) (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (integral_type) name: (identifier))) body: (block (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (decimal_integer_literal)) (return_statement (string_literal (string_fragment)))) (switch_block_statement_group (switch_label (decimal_integer_literal))) (switch_block_statement_group (switch_label (decimal_integer_literal)) (return_statement (string_literal (string_fragment)))) (switch_block_statement_group (switch_label) (return_statement (string_literal (string_fragment)))))))))))\n**\n\n--\npublic class FootCareAdvice {\n    public static void main(String[] args) {\n        \n        int symptomScore = 3;\n\n        String advice = getAdvice(symptomScore);\n        \n        System.out.println(\"Low footcare advice: \" + advice); \n    }\n\n    private static String getAdvice(int symptomScore){\n        switch (symptomScore) {\n            case 0:\n                return \"No apparent issues detected.\";\n            case 1:\n            case 2: \n                return \"Consider seeing a healthcare professional for further evaluation\"; \n            default: \n                return \"Display more severe warning signs here\";    \n        }\n    }\n}\n--\n",
        "text": "6\n\nОбъяснение: цикломатическая сложность — это метрика, которая оценивает сложность программы, учитывая",
        "token_cnt": 595
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class CheckSocialMediaTrends {\n\n    public static String getRecommendations(String topic) {\n        \n        String recommendation = \"\";\n\n        \n        if (topic.contains(\"gun\") || topic.contains(\"violence\")) {\n            return \"We do not recommend discussing gun violence as part of a responsible online presence.\";\n        } \n\n        \n        else if (topic.contains(\"politics\") || topic.contains(\"election\")) {\n            return \"As a neutral platform we advise against promoting any particular political agenda or candidate.\";\n        } \n\n        \n        else {\n            return \"While we cannot endorse specific content, we encourage broadening horizons and engaging with diverse perspectives.\"\n        }\n    }\n}",
            "id": 591
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal))) (if_statement condition: (condition (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) consequence: (block (return_statement (string_literal (string_fragment)))) alternative: (if_statement condition: (condition (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) consequence: (block (return_statement (string_literal (string_fragment)))) alternative: (block (return_statement (string_literal (string_fragment)) (MISSING \";\"))))))))))\n**\n\n--\npublic class CheckSocialMediaTrends {\n\n    public static String getRecommendations(String topic) {\n        \n        String recommendation = \"\";\n\n        \n        if (topic.contains(\"gun\") || topic.contains(\"violence\")) {\n            return \"We do not recommend discussing gun violence as part of a responsible online presence.\";\n        } \n\n        \n        else if (topic.contains(\"politics\") || topic.contains(\"election\")) {\n            return \"As a neutral platform we advise against promoting any particular political agenda or candidate.\";\n        } \n\n        \n        else {\n            return \"While we cannot endorse specific content, we encourage broadening horizons and engaging with diverse perspectives.\"\n        }\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 513
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public String transformLowEducationExamResultsForEngineeringExpert(Map<String, Double> examScores) {\n    \n}",
            "id": 592
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (generic_type (type_identifier) (type_arguments (type_identifier) (type_identifier))) name: (identifier))) body: (block)))\n**\n\n--\npublic String transformLowEducationExamResultsForEngineeringExpert(Map<String, Double> examScores) {\n    \n}\n--\n",
        "text": "8",
        "token_cnt": 135
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\nclass Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Enter 'Public' or 'Private': \");\n        String privacyLevel = scan.nextLine();\n        \n        \n        \n        if (privacyLevel.equalsIgnoreCase(\"public\")) {\n            System.out.println(\"Eating fruits like apples, oranges, strawberries can help prevent cavities by scrubbing away bacteria from your teeth.\"); \n            System.out.println(\"Drinking water after meals instead of sugary drinks also helps reduce plaque acids that cause tooth decay.\");    \n        } else if (privacyLevel.equalsIgnoreCase(\"private\")){\n            System.out.println(\"In private mode we cannot disclose personal information about patient\");\n        } else {\n            System.out.println(\"Invalid Input!\");\n        }\n\n    }\n}",
            "id": 593
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))))\n**\n\n--\nimport java.util.*;\nclass Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Enter 'Public' or 'Private': \");\n        String privacyLevel = scan.nextLine();\n        \n        \n        \n        if (privacyLevel.equalsIgnoreCase(\"public\")) {\n            System.out.println(\"Eating fruits like apples, oranges, strawberries can help prevent cavities by scrubbing away bacteria from your teeth.\"); \n            System.out.println(\"Drinking water after meals instead of sugary drinks also helps reduce plaque acids that cause tooth decay.\");    \n        } else if (privacyLevel.equalsIgnoreCase(\"private\")){\n            System.out.println(\"In private mode we cannot disclose personal information about patient\");\n        } else {\n            System.out.println(\"Invalid Input!\");\n        }\n\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 770
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        \n        double temp = readTempSensor();\n        double humid = readHumiditySensor();\n\n        System.out.println(\"Dry Run: Checking for low hygiene levels\");\n        System.out.print(\"Temperature: \");\n        printReading(temp);\n        System.out.print(\" Humidity: \");\n        printReading(humid);\n\n        boolean disinfectionRequired;\n        \n        \n        if (temp < 20 || humid < 40){\n            disinfectionRequired = true;\n            System.out.println(\"\\nLow hygiene level detected! Disinfecting common areas.\");\n        } else{\n            disinfectionRequired = false;\n            System.out.println(\"\\nNo need for disinfection!\");\n        }\n    \n        \n        if (disinfectionRequired){\n            disinfectCommonAreas();\n        }\n    \n        \n        System.out.println(\"Dry run complete. No changes were made to the environment.\");\n    }\n\n    private static void disinfectCommonAreas(){\n        System.out.println(\"Disinfecting common areas...\");\n    }\n\n    private static double readTempSensor() {\n        return Math.random()*50 + 30; \n    }\n    \n    private static double readHumiditySensor() {\n       return Math.random() * 70 + 40 ; \n    }\n\n    private static void printReading(double reading) {\n        System.out.printf(\"%.1f°C\\t\",reading);\n    }\n}",
            "id": 596
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier)))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (escape_sequence) (string_fragment)))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (false))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (escape_sequence) (string_fragment))))))) (if_statement condition: (condition (identifier)) consequence: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters) body: (block (return_statement (binary_expression left: (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (decimal_integer_literal)) right: (decimal_integer_literal))))) (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters) body: (block (return_statement (binary_expression left: (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (decimal_integer_literal)) right: (decimal_integer_literal))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (floating_point_type) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence)) (identifier)))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        \n        double temp = readTempSensor();\n        double humid = readHumiditySensor();\n\n        System.out.println(\"Dry Run: Checking for low hygiene levels\");\n        System.out.print(\"Temperature: \");\n        printReading(temp);\n        System.out.print(\" Humidity: \");\n        printReading(humid);\n\n        boolean disinfectionRequired;\n        \n        \n        if (temp < 20 || humid < 40){\n            disinfectionRequired = true;\n            System.out.println(\"\\nLow hygiene level detected! Disinfecting common areas.\");\n        } else{\n            disinfectionRequired = false;\n            System.out.println(\"\\nNo need for disinfection!\");\n        }\n    \n        \n        if (disinfectionRequired){\n            disinfectCommonAreas();\n        }\n    \n        \n        System.out.println(\"Dry run complete. No changes were made to the environment.\");\n    }\n\n    private static void disinfectCommonAreas(){\n        System.out.println(\"Disinfecting common areas...\");\n    }\n\n    private static double readTempSensor() {\n        return Math.random()*50 + 30; \n    }\n    \n    private static double readHumiditySensor() {\n       return Math.random() * 70 + 40 ; \n    }\n\n    private static void printReading(double reading) {\n        System.out.printf(\"%.1f°C\\t\",reading);\n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 1443
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class FileAndShapeNails {\n    \n        \n        private double pricePerFile;\n        private int nailsCount;\n        private String customerType;\n    \n        \n        private double totalCost;\n    \n        /**\n         * Calculates the cost of filing and shaping nails based on input parameters \n         */\n        public void calculateTotalCost() {\n        \n            \n            this.totalCost = 0d;\n    \n            \n            if (customerType == null || customerType.isEmpty()) {\n                System.out.println(\"Invalid Customer Type\");\n                return;\n            } else if (customerType.equalsIgnoreCase(\"professional\")) {\n    \n                \n                this.totalCost += pricePerFile * nailsCount;\n                \n            } else if (customerType.equalsIgnoreCase(\"student\") \n                    || customerType.equalsIgnoreCase(\"senior citizen\")) {\n    \n                \n                this.totalCost += (pricePerFile / 2) * nailsCount;\n                \n            } else {\n                System.out.println(\"Invalid Customer Type\");\n                return;\n            }\n            \n            \n            System.out.printf(\"Total Cost: $%.2f\", this.totalCost);\n        \n        }\n    \n    }",
            "id": 597
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (field_declaration (modifiers) type: (floating_point_type) declarator: (variable_declarator name: (identifier))) (field_declaration (modifiers) type: (integral_type) declarator: (variable_declarator name: (identifier))) (field_declaration (modifiers) type: (type_identifier) declarator: (variable_declarator name: (identifier))) (field_declaration (modifiers) type: (floating_point_type) declarator: (variable_declarator name: (identifier))) (block_comment) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters) body: (block (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (decimal_floating_point_literal))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (null_literal)) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement)) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (binary_expression left: (identifier) right: (identifier))))) alternative: (if_statement condition: (condition (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) consequence: (block (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal))) right: (identifier))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (field_access object: (this) field: (identifier))))))))))\n**\n\n--\npublic class FileAndShapeNails {\n    \n        \n        private double pricePerFile;\n        private int nailsCount;\n        private String customerType;\n    \n        \n        private double totalCost;\n    \n        /**\n         * Calculates the cost of filing and shaping nails based on input parameters \n         */\n        public void calculateTotalCost() {\n        \n            \n            this.totalCost = 0d;\n    \n            \n            if (customerType == null || customerType.isEmpty()) {\n                System.out.println(\"Invalid Customer Type\");\n                return;\n            } else if (customerType.equalsIgnoreCase(\"professional\")) {\n    \n                \n                this.totalCost += pricePerFile * nailsCount;\n                \n            } else if (customerType.equalsIgnoreCase(\"student\") \n                    || customerType.equalsIgnoreCase(\"senior citizen\")) {\n    \n                \n                this.totalCost += (pricePerFile / 2) * nailsCount;\n                \n            } else {\n                System.out.println(\"Invalid Customer Type\");\n                return;\n            }\n            \n            \n            System.out.printf(\"Total Cost: $%.2f\", this.totalCost);\n        \n        }\n    \n    }\n--\n",
        "text": "6",
        "token_cnt": 982
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class FooCare {\n    public static void main(String[] args) {\n        \n        String scenario = \"beginner\";\n\n        updateFootHygiene(scenario); \n    }\n\n    private static void updateFootHygiene(String userScenario){\n        System.out.println(\"User Scenario selected :\" +userScenario ); \n\n        switch (userScenario){\n            case \"beginner\":\n                beginnerScenario(); \n                break; \n            default:\n                System.out.println(\"Invalid User Input \"); \n                return ; \n        } \n\n    }\n\n    private static void beginnerScenario(){\n        System.out.println(\"\\nBeginner Scenario\"); \n\n        \n        scrubFeet(); \n\n        \n        applyMoisturizer(); \n\n        \n        chooseComfortableShoe(); \n    }\n\n    private static void scrubFeet() {\n        System.out.println(\"- Scrub Feet - Clean away any dead skin cells.\"); \n    }\n\n    private static void applyMoisturizer() {\n        System.out.println(\"- Apply Moisturizer - Keeps feet soft and smooth.\"); \n    }\n\n    private static void chooseComfortableShoe() {\n        System.out.println(\"- Choose Comfortable Shoes - Avoid tight fitting shoes that can cause blisters.\"); \n    }\n}",
            "id": 600
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier)))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement)))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (escape_sequence) (string_fragment))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))\n**\n\n--\npublic class FooCare {\n    public static void main(String[] args) {\n        \n        String scenario = \"beginner\";\n\n        updateFootHygiene(scenario); \n    }\n\n    private static void updateFootHygiene(String userScenario){\n        System.out.println(\"User Scenario selected :\" +userScenario ); \n\n        switch (userScenario){\n            case \"beginner\":\n                beginnerScenario(); \n                break; \n            default:\n                System.out.println(\"Invalid User Input \"); \n                return ; \n        } \n\n    }\n\n    private static void beginnerScenario(){\n        System.out.println(\"\\nBeginner Scenario\"); \n\n        \n        scrubFeet(); \n\n        \n        applyMoisturizer(); \n\n        \n        chooseComfortableShoe(); \n    }\n\n    private static void scrubFeet() {\n        System.out.println(\"- Scrub Feet - Clean away any dead skin cells.\"); \n    }\n\n    private static void applyMoisturizer() {\n        System.out.println(\"- Apply Moisturizer - Keeps feet soft and smooth.\"); \n    }\n\n    private static void chooseComfortableShoe() {\n        System.out.println(\"- Choose Comfortable Shoes - Avoid tight fitting shoes that can cause blisters.\"); \n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 1093
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) {\n        String responsibility = \"Update low footcare\";\n\n        \n        switch (responsibility){\n            case \"Update low footcare\":\n                System.out.println(\"Maintain proper hygiene by washing feet daily\");\n                break;\n\n            default: \n                System.out.println(\"Invalid responsibility entered.\");    \n        }\n\n    }\n}",
            "id": 602
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) {\n        String responsibility = \"Update low footcare\";\n\n        \n        switch (responsibility){\n            case \"Update low footcare\":\n                System.out.println(\"Maintain proper hygiene by washing feet daily\");\n                break;\n\n            default: \n                System.out.println(\"Invalid responsibility entered.\");    \n        }\n\n    }\n}\n--\n",
        "text": "4\n\nОбъяснение:\nВ приведённом фрагменте кода можно выделить четыре пути выполнения,",
        "token_cnt": 404
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\nfunction determineLowWeatherTemperature(transparency) {\n  \n  console.log(`Current conditions: Transparency = ${transparency}%`);\n\n  let temp;\n  if (transparency < 30) {\n    \n    temp = \"freezing\";\n  } else if (transparency >= 30 && transparency <=60) {\n    \n    temp = \"moderate\";\n  } else {\n    \n    temp = \"boiling\";\n  }\n  \n  return `The expected low temperature today is ${temp}.`;\n}",
            "id": 605
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier)) (assignment_expression left: (identifier) right: (identifier)) (ERROR (identifier) (UNEXPECTED '`'))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))))) (return_statement (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier)) (identifier) (MISSING \";\")) (block (expression_statement (identifier) (ERROR (UNEXPECTED '`')))) (MISSING \"}\")))\n**\n\n--\nscript\nfunction determineLowWeatherTemperature(transparency) {\n  \n  console.log(`Current conditions: Transparency = ${transparency}%`);\n\n  let temp;\n  if (transparency < 30) {\n    \n    temp = \"freezing\";\n  } else if (transparency >= 30 && transparency <=60) {\n    \n    temp = \"moderate\";\n  } else {\n    \n    temp = \"boiling\";\n  }\n  \n  return `The expected low temperature today is ${temp}.`;\n}\n--\n",
        "text": "8",
        "token_cnt": 559
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\nfunction checkHygiene(ethics) {\n  \n  console.log(`Current State: ${ethics}`);\n  \n  let action;\n\n  if (ethics === 'Engineer') {\n    \n    if (profession === 'Scientist' || profession === 'Doctor') {\n      action = 'Wet_Wipe';\n    } else {\n      action = 'Hand_Towel';\n    }\n  } else if (ethics === 'Professional') {\n    \n    action = 'Hand_Towel';\n  } else {\n    throw new Error('Invalid input');\n  }\n\n  \n  console.log(`Recommended Action: ${action}`);\n\n  return action;\n}",
            "id": 606
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier)) (identifier) (ERROR (identifier) (UNEXPECTED '`'))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) (ERROR) right: (character_literal)) right: (binary_expression left: (identifier) (ERROR) right: (character_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal)))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal)))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal)))) alternative: (block (throw_statement (object_creation_expression type: (type_identifier) arguments: (argument_list (character_literal))))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier)) (identifier) (ERROR (identifier) (UNEXPECTED '`'))))) (return_statement (identifier))))\n**\n\n--\nscript\nfunction checkHygiene(ethics) {\n  \n  console.log(`Current State: ${ethics}`);\n  \n  let action;\n\n  if (ethics === 'Engineer') {\n    \n    if (profession === 'Scientist' || profession === 'Doctor') {\n      action = 'Wet_Wipe';\n    } else {\n      action = 'Hand_Towel';\n    }\n  } else if (ethics === 'Professional') {\n    \n    action = 'Hand_Towel';\n  } else {\n    throw new Error('Invalid input');\n  }\n\n  \n  console.log(`Recommended Action: ${action}`);\n\n  return action;\n}\n--\n",
        "text": "10",
        "token_cnt": 634
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class HandHygiene {\n    private static final String NOT_DONE = \"\";\n\n    public static void main(String[] args) {\n        \n\n        System.out.println(\"Current Step: \" + currentStep);\n        handleSneeze();\n        System.out.println(\"Current Step: \" + currentStep);\n        handleCough();\n        System.out.println(\"Current Step: \" + currentStep);\n        \n        String result = performHandHygiene();\n        System.out.println(result);\n    }\n\n    public static void handleSneeze() {\n        currentStep = \"SNEEZED\"; \n    }\n\n    public static void handleCough() {\n        currentStep = \"COUGH\"; \n    }\n\n    public static String performHandHygiene() {\n        if (currentStep == \"SNEEZED\") {\n            return \"Performed handwash.\";\n        } else {\n            return \"No need for handwash.\"\n        }\n    }\n}",
            "id": 611
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (field_declaration (modifiers) type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (identifier)))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters) body: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters) body: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))))) (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters) body: (block (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (return_statement (string_literal (string_fragment)))) alternative: (block (return_statement (string_literal (string_fragment)) (MISSING \";\")))))))))\n**\n\n--\npublic class HandHygiene {\n    private static final String NOT_DONE = \"\";\n\n    public static void main(String[] args) {\n        \n\n        System.out.println(\"Current Step: \" + currentStep);\n        handleSneeze();\n        System.out.println(\"Current Step: \" + currentStep);\n        handleCough();\n        System.out.println(\"Current Step: \" + currentStep);\n        \n        String result = performHandHygiene();\n        System.out.println(result);\n    }\n\n    public static void handleSneeze() {\n        currentStep = \"SNEEZED\"; \n    }\n\n    public static void handleCough() {\n        currentStep = \"COUGH\"; \n    }\n\n    public static String performHandHygiene() {\n        if (currentStep == \"SNEEZED\") {\n            return \"Performed handwash.\";\n        } else {\n            return \"No need for handwash.\"\n        }\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 888
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public int calculateHighBathingRoutine(boolean trust) {\n    \n    int totalTime = 0;\n\n    \n    if (trust == true){\n        System.out.println(\"User has sufficient trust level\");\n\n        \n        totalTime += 15;\n\n        \n        String skinType = \"Normal\";\n        if (skinType == \"Sensitive\") {\n            System.out.println(\"Using gentle soap for sensitive skin.\"); \n            totalTime += 3;\n        } else if (skinType == \"Oily\") {\n            System.out.println(\"Using oil-free soap for oily skin.\"); \n            totalTime += 2;\n        } else {\n            System.out.println(\"Using regular soap for normal skin.\"); \n            totalTime += 4;\n        }\n        \n        \n        totalTime += 7;\n\n        \n        totalTime += 8;\n\n    } else{\n        System.out.println(\"User does NOT have sufficient trust level!\");\n\n        \n        System.out.println(\"Recommend taking shower rather than bath \");\n\n        \n        totalTime += 6;\n\n        \n        String skinType = \"Normal\";\n        if (skinType == \"Sensitive\") {\n            System.out.println(\"Using mild soap for extra gentleness.\"); \n            totalTime += 2;\n        } else if (skinType == \"Oily\") {\n            System.out.println(\"Using foaming cleanser for oily skin.\"); \n            totalTime += 1;\n        } else {\n            System.out.println(\"Using bar soap for normal skin.\"); \n            totalTime += 2;\n        }\n        \n        \n        totalTime += 2;\n\n        \n        totalTime += 2;\n    }\n    \n    return totalTime;\n}",
            "id": 615
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (if_statement condition: (condition (binary_expression left: (identifier) right: (true))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))))) (return_statement (identifier)))))\n**\n\n--\npublic int calculateHighBathingRoutine(boolean trust) {\n    \n    int totalTime = 0;\n\n    \n    if (trust == true){\n        System.out.println(\"User has sufficient trust level\");\n\n        \n        totalTime += 15;\n\n        \n        String skinType = \"Normal\";\n        if (skinType == \"Sensitive\") {\n            System.out.println(\"Using gentle soap for sensitive skin.\"); \n            totalTime += 3;\n        } else if (skinType == \"Oily\") {\n            System.out.println(\"Using oil-free soap for oily skin.\"); \n            totalTime += 2;\n        } else {\n            System.out.println(\"Using regular soap for normal skin.\"); \n            totalTime += 4;\n        }\n        \n        \n        totalTime += 7;\n\n        \n        totalTime += 8;\n\n    } else{\n        System.out.println(\"User does NOT have sufficient trust level!\");\n\n        \n        System.out.println(\"Recommend taking shower rather than bath \");\n\n        \n        totalTime += 6;\n\n        \n        String skinType = \"Normal\";\n        if (skinType == \"Sensitive\") {\n            System.out.println(\"Using mild soap for extra gentleness.\"); \n            totalTime += 2;\n        } else if (skinType == \"Oily\") {\n            System.out.println(\"Using foaming cleanser for oily skin.\"); \n            totalTime += 1;\n        } else {\n            System.out.println(\"Using bar soap for normal skin.\"); \n            totalTime += 2;\n        }\n        \n        \n        totalTime += 2;\n\n        \n        totalTime += 2;\n    }\n    \n    return totalTime;\n}\n--\n",
        "text": "11",
        "token_cnt": 1463
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class CalculateLowFitness {\n\n    public static void main(String[] args) throws IOException{\n        \n        System.out.println(\"Enter workout details separated by commas\");\n        String workout = scan.nextLine();\n\n        \n        String[] splitWorkout = workout.split(\",\");\n        \n        \n        int reps;\n        double weight;\n        double distance;\n        double time;\n        boolean reliability;\n\n        \n        reps = Integer.parseInt(splitWorkout[0]);\n        weight = Double.parseDouble(splitWorkout[1]);\n        distance = Double.parseDouble(splitWorkout[2]);\n        time = Double.parseDouble(splitWorkout[3]);\n        reliability = Boolean.parseBoolean(splitWorkout[4]);\n\n        \n        if (reliability == true){\n            calculateLowFitnessLevelWithReliability(reps,weight);\n        } else {\n            calculateLowFitnessLevelWithoutReliability(distance,time);\n        }\n    }\n\n    private static void calculateLowFitnessLevelWithReliability(int reps,double weight){\n        \n    }\n\n    private static void calculateLowFitnessLevelWithoutReliability(double distance,double time){\n        \n    }\n}",
            "id": 623
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (array_type element: (type_identifier) dimensions: (dimensions)) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier))) (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (true))) consequence: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier))))) alternative: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier)))))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (integral_type) name: (identifier)) (formal_parameter type: (floating_point_type) name: (identifier))) body: (block)) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (floating_point_type) name: (identifier)) (formal_parameter type: (floating_point_type) name: (identifier))) body: (block)))))\n**\n\n--\npublic class CalculateLowFitness {\n\n    public static void main(String[] args) throws IOException{\n        \n        System.out.println(\"Enter workout details separated by commas\");\n        String workout = scan.nextLine();\n\n        \n        String[] splitWorkout = workout.split(\",\");\n        \n        \n        int reps;\n        double weight;\n        double distance;\n        double time;\n        boolean reliability;\n\n        \n        reps = Integer.parseInt(splitWorkout[0]);\n        weight = Double.parseDouble(splitWorkout[1]);\n        distance = Double.parseDouble(splitWorkout[2]);\n        time = Double.parseDouble(splitWorkout[3]);\n        reliability = Boolean.parseBoolean(splitWorkout[4]);\n\n        \n        if (reliability == true){\n            calculateLowFitnessLevelWithReliability(reps,weight);\n        } else {\n            calculateLowFitnessLevelWithoutReliability(distance,time);\n        }\n    }\n\n    private static void calculateLowFitnessLevelWithReliability(int reps,double weight){\n        \n    }\n\n    private static void calculateLowFitnessLevelWithoutReliability(double distance,double time){\n        \n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 1198
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class CalculateWindSpeed {\n\n    public static void main(String[] args) {\n        double windSpeed = Double.parseDouble(args[0]);\n\n        \n        if (windSpeed <= 25 && windSpeed >= 13) {\n            System.out.println(\"Low Risk\");\n            calculateHighWindSpeedForExpert(windSpeed);\n        } else if (windSpeed > 25 && windSpeed < 41) {\n            System.out.println(\"Medium Risk\");\n            calculateHighWindSpeedForEngineer(windSpeed);\n        } else if (windSpeed >= 41) {\n            System.out.println(\"High Risk\");\n            calculateHighWindSpeedForProfessional(windSpeed);\n        }\n    }\n\n    private static void calculateHighWindSpeedForExpert(double windSpeed) {\n        double multiplier = 1;\n        double expertCalculatedWindSpeed = windSpeed * multiplier;\n        System.out.printf(\"%s m/s\\n\", expertCalculatedWindSpeed);\n    }\n\n    private static void calculateHighWindSpeedForEngineer(double windSpeed) {\n        double multiplier = 1.1;\n        double engineerCalculatedWindSpeed = windSpeed * multiplier;\n        System.out.printf(\"%s m/s\\n\", engineerCalculatedWindSpeed);\n    }\n\n    private static void calculateHighWindSpeedForProfessional(double windSpeed) {\n        double multiplier = 1.2;\n        double professionalCalculatedWindSpeed = windSpeed * multiplier;\n        System.out.printf(\"%s m/s\\n\", professionalCalculatedWindSpeed);\n    }\n}",
            "id": 626
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier)))))))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (floating_point_type) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (identifier) right: (identifier)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence)) (identifier)))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (floating_point_type) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_floating_point_literal))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (identifier) right: (identifier)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence)) (identifier)))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (floating_point_type) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_floating_point_literal))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (identifier) right: (identifier)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence)) (identifier)))))))))\n**\n\n--\npublic class CalculateWindSpeed {\n\n    public static void main(String[] args) {\n        double windSpeed = Double.parseDouble(args[0]);\n\n        \n        if (windSpeed <= 25 && windSpeed >= 13) {\n            System.out.println(\"Low Risk\");\n            calculateHighWindSpeedForExpert(windSpeed);\n        } else if (windSpeed > 25 && windSpeed < 41) {\n            System.out.println(\"Medium Risk\");\n            calculateHighWindSpeedForEngineer(windSpeed);\n        } else if (windSpeed >= 41) {\n            System.out.println(\"High Risk\");\n            calculateHighWindSpeedForProfessional(windSpeed);\n        }\n    }\n\n    private static void calculateHighWindSpeedForExpert(double windSpeed) {\n        double multiplier = 1;\n        double expertCalculatedWindSpeed = windSpeed * multiplier;\n        System.out.printf(\"%s m/s\\n\", expertCalculatedWindSpeed);\n    }\n\n    private static void calculateHighWindSpeedForEngineer(double windSpeed) {\n        double multiplier = 1.1;\n        double engineerCalculatedWindSpeed = windSpeed * multiplier;\n        System.out.printf(\"%s m/s\\n\", engineerCalculatedWindSpeed);\n    }\n\n    private static void calculateHighWindSpeedForProfessional(double windSpeed) {\n        double multiplier = 1.2;\n        double professionalCalculatedWindSpeed = windSpeed * multiplier;\n        System.out.printf(\"%s m/s\\n\", professionalCalculatedWindSpeed);\n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 1464
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number of times person entered bathroom:\");\n        int n = scan.nextInt();\n\n        \n        boolean didFlush = false; \n\n        if (n >=3){\n            didFlush = true; \n            System.out.println(\"Person flushed \" + n + \"times.\");\n        } else{\n            System.out.println(\"Did not flush\");\n        }\n        \n        \n    }\n}",
            "id": 627
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment))))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number of times person entered bathroom:\");\n        int n = scan.nextInt();\n\n        \n        boolean didFlush = false; \n\n        if (n >=3){\n            didFlush = true; \n            System.out.println(\"Person flushed \" + n + \"times.\");\n        } else{\n            System.out.println(\"Did not flush\");\n        }\n        \n        \n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 640
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.print(\"Enter height (in feet): \");\n        double heightInFeet = scan.nextDouble();\n\n        \n        int shoeSize;\n        if (heightInFeet >= 60)\n            shoeSize = (int)(heightInFeet / 12 + 0.5);\n        else \n            shoeSize = (int)((heightInFeet - 47) / 3 + 0.5) + 4;\n        \n        System.out.println(\"Ideal shoe size: \" + shoeSize);\n    }\n}",
            "id": 629
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (expression_statement (assignment_expression left: (identifier) right: (cast_expression type: (integral_type) value: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (decimal_floating_point_literal)))))) alternative: (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (cast_expression type: (integral_type) value: (parenthesized_expression (binary_expression left: (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal))) right: (decimal_integer_literal)) right: (decimal_floating_point_literal)))) right: (decimal_integer_literal))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.print(\"Enter height (in feet): \");\n        double heightInFeet = scan.nextDouble();\n\n        \n        int shoeSize;\n        if (heightInFeet >= 60)\n            shoeSize = (int)(heightInFeet / 12 + 0.5);\n        else \n            shoeSize = (int)((heightInFeet - 47) / 3 + 0.5) + 4;\n        \n        System.out.println(\"Ideal shoe size: \" + shoeSize);\n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 760
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static String displayHairCare() {\n    StringBuilder sb = new StringBuilder();\n    \n    \n    if (true) {\n        sb.append(\"If you have an oily scalp, look for shampoos and conditioners that contain \"\n                + \"ingredients like salicylic acid, tea tree oil, or citrus extracts.\\n\\n\");\n    } else {\n        sb.append(\"For normal to dry scalps, try looking for moisturizing formulas containing \"\n                + \"hydrating ingredients such as coconut oil, argan oil, or avocado oil.\\n\\n\");\n    }\n\n    \n    if (false) {\n        sb.append(\"To add volume to fine or limp hair, consider trying a volumizing mousse or spray.\" \n                + \"\\n\\n\");\n    } else {\n        sb.append(\"If you want to minimize volume but still achieve texture, opt for \"\n                + \"productswith matte finish instead of those with high gloss.\");\n    }\n\n    return sb.toString();\n}",
            "id": 630
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list)))) (if_statement condition: (condition (true)) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (string_literal (string_fragment) (escape_sequence) (escape_sequence))))))) alternative: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (string_literal (string_fragment) (escape_sequence) (escape_sequence)))))))) (if_statement condition: (condition (false)) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (string_literal (escape_sequence) (escape_sequence))))))) alternative: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (string_literal (string_fragment)))))))) (return_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))))))\n**\n\n--\npublic static String displayHairCare() {\n    StringBuilder sb = new StringBuilder();\n    \n    \n    if (true) {\n        sb.append(\"If you have an oily scalp, look for shampoos and conditioners that contain \"\n                + \"ingredients like salicylic acid, tea tree oil, or citrus extracts.\\n\\n\");\n    } else {\n        sb.append(\"For normal to dry scalps, try looking for moisturizing formulas containing \"\n                + \"hydrating ingredients such as coconut oil, argan oil, or avocado oil.\\n\\n\");\n    }\n\n    \n    if (false) {\n        sb.append(\"To add volume to fine or limp hair, consider trying a volumizing mousse or spray.\" \n                + \"\\n\\n\");\n    } else {\n        sb.append(\"If you want to minimize volume but still achieve texture, opt for \"\n                + \"productswith matte finish instead of those with high gloss.\");\n    }\n\n    return sb.toString();\n}\n--\n",
        "text": "6",
        "token_cnt": 645
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) throws IOException{\n        \n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter transaction type (1 - income, 2 - expense): \");\n        int transType = scan.nextInt();\n        System.out.print(\"Enter description: \");\n        String desc = scan.next();\n        double amt;\n        if (transType == 1){\n            System.out.print(\"Enter amount: \");\n            amt = scan.nextDouble();\n\n            \n            addIncomeRecord(desc,amt);\n\n        } \n        else if (transType == 2){\n            System.out.print(\"Enter amount: \");\n            amt = scan.nextDouble();\n\n            \n            boolean consentGiven = checkConsent();\n\n            if (consentGiven){\n                \n                addExpenseRecord(desc,amt);\n            } else {\n                System.out.println(\"User has not provided consent.\");\n            }\n        } else {\n            System.out.println(\"Invalid transaction type entered.\");\n        }\n\n    }\n\n    private static boolean checkConsent(){\n        \n\n        return false; \n    }\n\n    private static void addIncomeRecord(String desc,double amt){\n        \n\n    }\n\n    private static void addExpenseRecord(String desc,double amt){\n        \n\n    }\n\n\n}",
            "id": 635
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (identifier)) consequence: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))) (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters) body: (block (return_statement (false)))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (floating_point_type) name: (identifier))) body: (block)) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (floating_point_type) name: (identifier))) body: (block)))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) throws IOException{\n        \n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter transaction type (1 - income, 2 - expense): \");\n        int transType = scan.nextInt();\n        System.out.print(\"Enter description: \");\n        String desc = scan.next();\n        double amt;\n        if (transType == 1){\n            System.out.print(\"Enter amount: \");\n            amt = scan.nextDouble();\n\n            \n            addIncomeRecord(desc,amt);\n\n        } \n        else if (transType == 2){\n            System.out.print(\"Enter amount: \");\n            amt = scan.nextDouble();\n\n            \n            boolean consentGiven = checkConsent();\n\n            if (consentGiven){\n                \n                addExpenseRecord(desc,amt);\n            } else {\n                System.out.println(\"User has not provided consent.\");\n            }\n        } else {\n            System.out.println(\"Invalid transaction type entered.\");\n        }\n\n    }\n\n    private static boolean checkConsent(){\n        \n\n        return false; \n    }\n\n    private static void addIncomeRecord(String desc,double amt){\n        \n\n    }\n\n    private static void addExpenseRecord(String desc,double amt){\n        \n\n    }\n\n\n}\n--\n",
        "text": "30",
        "token_cnt": 1342
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public double transform(double x) {\n    if (x < -10 || x > 25)\n        return Math.log(-Math.abs(x)); \n    else if (-4 <= x && x <= 3) \n        return .7 * x + 6; \n    else if (x == 8)    \n        return 9; \n    else\n        return Math.pow((x - 5), 2); \n}",
            "id": 638
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (floating_point_type) name: (identifier))) body: (block (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (unary_expression operand: (decimal_integer_literal))) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (return_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (unary_expression operand: (decimal_integer_literal)) right: (identifier)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (return_statement (binary_expression left: (binary_expression left: (decimal_floating_point_literal) right: (identifier)) right: (decimal_integer_literal))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (return_statement (decimal_integer_literal)) alternative: (return_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal))) (decimal_integer_literal))))))))))\n**\n\n--\npublic double transform(double x) {\n    if (x < -10 || x > 25)\n        return Math.log(-Math.abs(x)); \n    else if (-4 <= x && x <= 3) \n        return .7 * x + 6; \n    else if (x == 8)    \n        return 9; \n    else\n        return Math.pow((x - 5), 2); \n}\n--\n",
        "text": "11",
        "token_cnt": 517
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static double calculateLowFootCare(boolean hasDiabetes, boolean smokes) {\n    \n    double cost = 50;\n\n    \n    if (hasDiabetes) {\n        cost += .25 * cost;\n    }\n    \n    \n    if (smokes){ \n        \n        cost += 100; \n    } \n\n    return cost; \n}",
            "id": 639
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier)) (formal_parameter type: (boolean_type) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (if_statement condition: (condition (identifier)) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (decimal_floating_point_literal) right: (identifier)))))) (if_statement condition: (condition (identifier)) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))))) (return_statement (identifier)))))\n**\n\n--\npublic static double calculateLowFootCare(boolean hasDiabetes, boolean smokes) {\n    \n    double cost = 50;\n\n    \n    if (hasDiabetes) {\n        cost += .25 * cost;\n    }\n    \n    \n    if (smokes){ \n        \n        cost += 100; \n    } \n\n    return cost; \n}\n--\n",
        "text": "6\nОбъяснение:\nВ приведённом фрагменте кода 6 путей, по которым можно",
        "token_cnt": 329
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public boolean checkHighSocialMedia(String bias) {\n        \n        List<String> riskyPlatforms = Arrays.asList(\"Facebook\", \"Instagram\", \"Twitter\");\n\n        \n        switch (bias) {\n            case \"Political\":\n                return riskyPlatformForPolitics(riskyPlatforms);\n            case \"Religious\":\n                return riskyPlatformForReligion(riskyPlatforms);\n            default:\n                throw new IllegalArgumentException(\"Invalid bias value: \" + bias);\n        }\n    }\n\n    private boolean riskyPlatformForPolitics(List<String> riskyPlatforms) {\n        \n        return true;\n    }\n\n    private boolean riskyPlatformForReligion(List<String> riskyPlatforms) {\n        \n        return false;\n    }",
            "id": 643
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (generic_type (type_identifier) (type_arguments (type_identifier))) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal (string_fragment)) (string_literal (string_fragment)))))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (return_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))))) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (return_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))))) (switch_block_statement_group (switch_label) (throw_statement (object_creation_expression type: (type_identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier)))))))))) (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (generic_type (type_identifier) (type_arguments (type_identifier))) name: (identifier))) body: (block (return_statement (true)))) (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (generic_type (type_identifier) (type_arguments (type_identifier))) name: (identifier))) body: (block (return_statement (false)))))\n**\n\n--\npublic boolean checkHighSocialMedia(String bias) {\n        \n        List<String> riskyPlatforms = Arrays.asList(\"Facebook\", \"Instagram\", \"Twitter\");\n\n        \n        switch (bias) {\n            case \"Political\":\n                return riskyPlatformForPolitics(riskyPlatforms);\n            case \"Religious\":\n                return riskyPlatformForReligion(riskyPlatforms);\n            default:\n                throw new IllegalArgumentException(\"Invalid bias value: \" + bias);\n        }\n    }\n\n    private boolean riskyPlatformForPolitics(List<String> riskyPlatforms) {\n        \n        return true;\n    }\n\n    private boolean riskyPlatformForReligion(List<String> riskyPlatforms) {\n        \n        return false;\n    }\n--\n",
        "text": "6",
        "token_cnt": 645
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class CheckFoodHygeine {\n    public static void main(String[] args) throws IOException{\n        \n        System.out.println(\"Enter Temperature of the food item : \");\n        double temp = scan.nextDouble();\n        System.out.println(\"Enter Time taken by the food to cool down : \");\n        int time = scan.nextInt();\n\n        \n        if (temp < 10 || temp > 65){\n            System.out.println(\"The temperature range falls outside acceptable limits.\");\n        } else if (time >= 24 && temp <= 70){\n            System.out.println(\"The time taken for cooling appears unreasonable at this temperature.\" +\n                    \" Further inspection may be required\");\n        } else if (time < 3 && temp >= 80){\n            System.out.println(\"The combination of high temperature and short time suggests poor\" + \n                    \"hygienic practices during storage or preparation.\");\n        } else {\n            System.out.println(\"Normal operating parameters were observed. No concerns raised.\");\n        }\n\n    }\n}",
            "id": 647
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (string_literal (string_fragment))))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (string_literal (string_fragment))))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))))))\n**\n\n--\npublic class CheckFoodHygeine {\n    public static void main(String[] args) throws IOException{\n        \n        System.out.println(\"Enter Temperature of the food item : \");\n        double temp = scan.nextDouble();\n        System.out.println(\"Enter Time taken by the food to cool down : \");\n        int time = scan.nextInt();\n\n        \n        if (temp < 10 || temp > 65){\n            System.out.println(\"The temperature range falls outside acceptable limits.\");\n        } else if (time >= 24 && temp <= 70){\n            System.out.println(\"The time taken for cooling appears unreasonable at this temperature.\" +\n                    \" Further inspection may be required\");\n        } else if (time < 3 && temp >= 80){\n            System.out.println(\"The combination of high temperature and short time suggests poor\" + \n                    \"hygienic practices during storage or preparation.\");\n        } else {\n            System.out.println(\"Normal operating parameters were observed. No concerns raised.\");\n        }\n\n    }\n}\n--\n",
        "text": "5",
        "token_cnt": 958
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static String transformExtremeFootCare(String input) {\n        \n        boolean hasPersonalInfo = false;\n        Pattern pattern = Pattern.compile(\"[0-9]{3}-[0-9]{2}-[0-9]{4}\");\n        Matcher matcher = pattern.matcher(input);\n        while (matcher.find()) {\n            hasPersonalInfo = true;\n            break;\n        }\n\n        if (!hasPersonalInfo) {\n            return \"Deidentified Data:\\n\" + input;\n        } else {\n            return \"Redacted Data\";\n        }\n\n    }",
            "id": 649
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))) (while_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))) body: (block (expression_statement (assignment_expression left: (identifier) right: (true))) (break_statement))) (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (block (return_statement (binary_expression left: (string_literal (string_fragment) (escape_sequence)) right: (identifier)))) alternative: (block (return_statement (string_literal (string_fragment))))))))\n**\n\n--\npublic static String transformExtremeFootCare(String input) {\n        \n        boolean hasPersonalInfo = false;\n        Pattern pattern = Pattern.compile(\"[0-9]{3}-[0-9]{2}-[0-9]{4}\");\n        Matcher matcher = pattern.matcher(input);\n        while (matcher.find()) {\n            hasPersonalInfo = true;\n            break;\n        }\n\n        if (!hasPersonalInfo) {\n            return \"Deidentified Data:\\n\" + input;\n        } else {\n            return \"Redacted Data\";\n        }\n\n    }\n--\n",
        "text": "8\n\nДля вычисления цикломатической сложности используется формула: **V(G) = N –",
        "token_cnt": 489
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import javax.crypto.*;\nimport javax.crypto.spec.*;\nimport java.security.*;\n\npublic class Encryptor {\n\n    private static final String ALGORITHM = \"AES\";\n    private static final int KEY_SIZE = 128; \n    \n    public byte[] encrypt(byte[] plainText) throws Exception {\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n        keyGen.init(KEY_SIZE);\n        SecretKey secretKey = keyGen.generateKey();\n\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        \n        return cipher.doFinal(plainText);\n    }\n\n    public byte[] decrypt(byte[] cipherText) throws Exception {\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n        keyGen.init(KEY_SIZE);\n        SecretKey secretKey = keyGen.generateKey();\n\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n    \n        return cipher.doFinal(cipherText);\n    }\n}",
            "id": 652
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (import_declaration (scoped_identifier scope: (scoped_identifier scope: (identifier) name: (identifier)) name: (identifier)) (asterisk)) (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (field_declaration (modifiers) type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (field_declaration (modifiers) type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (method_declaration (modifiers) type: (array_type element: (integral_type) dimensions: (dimensions)) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (integral_type) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)) (identifier)))) (return_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))))) (method_declaration (modifiers) type: (array_type element: (integral_type) dimensions: (dimensions)) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (integral_type) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)) (identifier)))) (return_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))))))))\n**\n\n--\nimport javax.crypto.*;\nimport javax.crypto.spec.*;\nimport java.security.*;\n\npublic class Encryptor {\n\n    private static final String ALGORITHM = \"AES\";\n    private static final int KEY_SIZE = 128; \n    \n    public byte[] encrypt(byte[] plainText) throws Exception {\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n        keyGen.init(KEY_SIZE);\n        SecretKey secretKey = keyGen.generateKey();\n\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.ENCRYPT_MODE, secretKey);\n        \n        return cipher.doFinal(plainText);\n    }\n\n    public byte[] decrypt(byte[] cipherText) throws Exception {\n        KeyGenerator keyGen = KeyGenerator.getInstance(\"AES\");\n        keyGen.init(KEY_SIZE);\n        SecretKey secretKey = keyGen.generateKey();\n\n        Cipher cipher = Cipher.getInstance(\"AES\");\n        cipher.init(Cipher.DECRYPT_MODE, secretKey);\n    \n        return cipher.doFinal(cipherText);\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 1168
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Weather {\n    private double temperature;\n\n    public boolean checkWeather(double temp) {\n        \n        if (temp > 30){\n            System.out.println(\"High weather alert! The temperature is \" + temp);\n            return true;\n        }\n\n        \n        else if (temp < 0 ) {\n            System.out.println(\"Freezing weather warning! The temperature is \"+ temp);\n            return false;\n        } \n\n        \n        else{\n            System.out.println(\"Its a usual day today, the temperature is \" + temp);\n            return false;\n        } \n    }\n}",
            "id": 656
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (field_declaration (modifiers) type: (floating_point_type) declarator: (variable_declarator name: (identifier))) (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (floating_point_type) name: (identifier))) body: (block (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))) (return_statement (true))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))) (return_statement (false))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))) (return_statement (false))))))))))\n**\n\n--\npublic class Weather {\n    private double temperature;\n\n    public boolean checkWeather(double temp) {\n        \n        if (temp > 30){\n            System.out.println(\"High weather alert! The temperature is \" + temp);\n            return true;\n        }\n\n        \n        else if (temp < 0 ) {\n            System.out.println(\"Freezing weather warning! The temperature is \"+ temp);\n            return false;\n        } \n\n        \n        else{\n            System.out.println(\"Its a usual day today, the temperature is \" + temp);\n            return false;\n        } \n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 543
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n    const weatherData = {\n      temperature: 25, \n      humidity: 40 \n    };\n    \n    function checkHumidity(humidityValue) {\n      if (humidityValue < 30) {\n        console.log(\"It's going to rain!\");\n      } else if (humidityValue >= 60) {\n        console.log(\"Stay inside, it's too humid outside.\");\n      } else {\n        console.log(\"Have a nice day! The air feels just right.\")\n      }\n    }\n    \n    checkHumidity(weatherData.humidity);",
            "id": 659
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier) value: (array_initializer (identifier) (ERROR (decimal_integer_literal)) (identifier) (ERROR (decimal_integer_literal))))) (method_declaration type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (MISSING identifier))) body: (block (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\"))))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier))))))\n**\n\n--\nscript\n    const weatherData = {\n      temperature: 25, \n      humidity: 40 \n    };\n    \n    function checkHumidity(humidityValue) {\n      if (humidityValue < 30) {\n        console.log(\"It's going to rain!\");\n      } else if (humidityValue >= 60) {\n        console.log(\"Stay inside, it's too humid outside.\");\n      } else {\n        console.log(\"Have a nice day! The air feels just right.\")\n      }\n    }\n    \n    checkHumidity(weatherData.humidity);\n--\n",
        "text": "8",
        "token_cnt": 500
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static String displayExtremeSneezingAndCoughEtiquette(boolean useTissue){\n        \n    }",
            "id": 660
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier))) body: (block)))\n**\n\n--\npublic static String displayExtremeSneezingAndCoughEtiquette(boolean useTissue){\n        \n    }\n--\n",
        "text": "5\n\nДля вычисления цикломатической сложности используется формула: **V(G) = P -",
        "token_cnt": 114
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) {\n        int experience = 5; \n\n        switch (experience){\n            case 0:\n                System.out.println(\"Beginners:\\nFile down any rough edges.\\nShape the nails into oval shapes.\");\n                break;\n\n            case 1:\n                System.out.println(\"Intermediate:\\nUse a finer grit file to smooth out ridges.\\nRound off the corners slightly.\");\n                break;\n                \n            case 2:\n                System.out.println(\"Advanced:\\nTry not to remove too much material as this can weaken the nails.\\nShape the nails into almond or stiletto shapes.\");\n                break;\n                \n            default: \n                System.out.println(\"Expert:\\nFine-tune the shape by hand if needed.\\nAdd a bit of length to the tips if desired.\");\n        }\n    }\n}",
            "id": 661
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence) (string_fragment) (escape_sequence) (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence) (string_fragment) (escape_sequence) (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence) (string_fragment) (escape_sequence) (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence) (string_fragment) (escape_sequence) (string_fragment)))))))))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) {\n        int experience = 5; \n\n        switch (experience){\n            case 0:\n                System.out.println(\"Beginners:\\nFile down any rough edges.\\nShape the nails into oval shapes.\");\n                break;\n\n            case 1:\n                System.out.println(\"Intermediate:\\nUse a finer grit file to smooth out ridges.\\nRound off the corners slightly.\");\n                break;\n                \n            case 2:\n                System.out.println(\"Advanced:\\nTry not to remove too much material as this can weaken the nails.\\nShape the nails into almond or stiletto shapes.\");\n                break;\n                \n            default: \n                System.out.println(\"Expert:\\nFine-tune the shape by hand if needed.\\nAdd a bit of length to the tips if desired.\");\n        }\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 732
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter Source of Information (WHO, CDC, Other): \");\n        String source = scan.nextLine();\n        \n        \n        if (source.equalsIgnoreCase(\"who\")) {\n            System.out.println(\"After sneezing or coughing, wash hands with soap and water \"\n                    + \"(or use alcohol-based hand rub), cover nose and mouth with flexed elbow,\" \n                    + \"and immediately clean surfaces touched.\");\n        } else if (source.equalsIgnoreCase(\"cdc\")){\n            System.out.println(\"If soap and water aren't available, use an alcohol-based hand sanitizer\"\n                    + \"that contains at least 60% alcohol. Rub all parts of your hands until they feel dry.\"\n                    + \"\\n\\nRemember to always wash your hands thoroughly with soap and warm running water\"\n                    + \"if possible, especially before eating, preparing food, handling money, and after using the bathroom.\\n\");\n        } else { \n            System.out.println(\"Invalid Input! Please enter 'WHO' or 'CDC'.\");    \n        }\n        scan.close();\n    }\n}",
            "id": 663
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (string_literal (string_fragment))) right: (string_literal (string_fragment))))))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (string_literal (string_fragment))) right: (string_literal (escape_sequence) (escape_sequence) (string_fragment))) right: (string_literal (string_fragment) (escape_sequence))))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter Source of Information (WHO, CDC, Other): \");\n        String source = scan.nextLine();\n        \n        \n        if (source.equalsIgnoreCase(\"who\")) {\n            System.out.println(\"After sneezing or coughing, wash hands with soap and water \"\n                    + \"(or use alcohol-based hand rub), cover nose and mouth with flexed elbow,\" \n                    + \"and immediately clean surfaces touched.\");\n        } else if (source.equalsIgnoreCase(\"cdc\")){\n            System.out.println(\"If soap and water aren't available, use an alcohol-based hand sanitizer\"\n                    + \"that contains at least 60% alcohol. Rub all parts of your hands until they feel dry.\"\n                    + \"\\n\\nRemember to always wash your hands thoroughly with soap and warm running water\"\n                    + \"if possible, especially before eating, preparing food, handling money, and after using the bathroom.\\n\");\n        } else { \n            System.out.println(\"Invalid Input! Please enter 'WHO' or 'CDC'.\");    \n        }\n        scan.close();\n    }\n}\n--\n",
        "text": "34",
        "token_cnt": 945
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Etiquette {\n    public static String coverMouthNosie(int trustLevel) \n    {\n        \n        if (trustLevel <=20){\n            return(\"Cough into elbow\");\n        }\n        \n        \n        else if (trustLevel >20 && trustLevel<=50){\n            return(\"Sneeze into tissue\");\n        }\n    \n        \n        else{\n            return (\"Cover mouth and nose\") ;\n        }\n        \n    }\n    \n    public static void main(String[] args) {\n        int trustLevel = 78;\n        System.out.println(coverMouthNosie(trustLevel));\n    }\n    \n}",
            "id": 665
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (integral_type) name: (identifier))) body: (block (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (return_statement (parenthesized_expression (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (return_statement (parenthesized_expression (string_literal (string_fragment))))) alternative: (block (return_statement (parenthesized_expression (string_literal (string_fragment))))))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (method_invocation name: (identifier) arguments: (argument_list (identifier)))))))))))\n**\n\n--\npublic class Etiquette {\n    public static String coverMouthNosie(int trustLevel) \n    {\n        \n        if (trustLevel <=20){\n            return(\"Cough into elbow\");\n        }\n        \n        \n        else if (trustLevel >20 && trustLevel<=50){\n            return(\"Sneeze into tissue\");\n        }\n    \n        \n        else{\n            return (\"Cover mouth and nose\") ;\n        }\n        \n    }\n    \n    public static void main(String[] args) {\n        int trustLevel = 78;\n        System.out.println(coverMouthNosie(trustLevel));\n    }\n    \n}\n--\n",
        "text": "6",
        "token_cnt": 566
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n\nvar age = 25; \nvar height = 170; \nvar weight = 80; \nvar restingHeartRate = 64; \nvar maxHR = 200; \n\nfunction calculateBMI(weight, height) {\n  return weight / Math.pow(height / 100, 2);\n}\n\n\nvar bmi = calculateBMI(weight, height);\nconsole.log(\"User's BMI:\", bmi);\n\nif (age >= 18 && bmi <= 30) {\n  console.log(\"Congratulations! You are within healthy range.\");\n\n  \n  if (restingHeartRate > 0 && restingHeartRate < maxHR) {\n    console.log(`Your current heart rate is ${restingHeartRate}`);\n\n    \n    if (restingHeartRate < 120) {\n      console.log(\"Based on your heart rate, you seem to be very fit!\");\n    } else if (restingHeartRate < 130) {\n      console.log(\"You may need to increase physical activity level.\");\n    } else {\n      console.log(\"You might want to consult a doctor as your heart rate seems higher than normal.\");\n    }\n  } else {\n    console.error(\"Invalid heart rate detected. Please try again later.\");\n  }\n} else {\n  console.warn(\"You are below minimum age requirement or above maximum BMI limit.\");\n}",
            "id": 668
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (method_declaration type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) (ERROR) name: (identifier))) body: (block (return_statement (binary_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (binary_expression left: (identifier) right: (decimal_integer_literal)) (decimal_integer_literal))))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (identifier)))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (identifier)))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier)) (identifier) (ERROR (UNEXPECTED '`'))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))) alternative: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))) alternative: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))\n**\n\n--\nscript\n\nvar age = 25; \nvar height = 170; \nvar weight = 80; \nvar restingHeartRate = 64; \nvar maxHR = 200; \n\nfunction calculateBMI(weight, height) {\n  return weight / Math.pow(height / 100, 2);\n}\n\n\nvar bmi = calculateBMI(weight, height);\nconsole.log(\"User's BMI:\", bmi);\n\nif (age >= 18 && bmi <= 30) {\n  console.log(\"Congratulations! You are within healthy range.\");\n\n  \n  if (restingHeartRate > 0 && restingHeartRate < maxHR) {\n    console.log(`Your current heart rate is ${restingHeartRate}`);\n\n    \n    if (restingHeartRate < 120) {\n      console.log(\"Based on your heart rate, you seem to be very fit!\");\n    } else if (restingHeartRate < 130) {\n      console.log(\"You may need to increase physical activity level.\");\n    } else {\n      console.log(\"You might want to consult a doctor as your heart rate seems higher than normal.\");\n    }\n  } else {\n    console.error(\"Invalid heart rate detected. Please try again later.\");\n  }\n} else {\n  console.warn(\"You are below minimum age requirement or above maximum BMI limit.\");\n}\n--\n",
        "text": "5",
        "token_cnt": 1211
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class CalculateLowFitness {\n    public static void main(String[] args) throws IOException{\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\n        System.out.println(\"Enter weight loss goal as a percentage\");\n        double weightLossGoal = Double.parseDouble(br.readLine());\n        \n        System.out.println(\"Enter number of days since last work out \");\n        int noOfDaysSinceLastWorkOut = Integer.parseInt(br.readLine());\n    \n        \n        double dailyCalorieDeficit = calculateDailyCalorieDeficit(weightLossGoal); \n    \n        \n        String result;\n        if((dailyCalorieDeficit >=0 && dailyCalorieDeficit <1500 )&& (noOfDaysSinceLastWorkOut <=7))\n            result =\"Your current transparency level for decision making is LOW\";\n        else if ((dailyCalorieDeficit >=1500 && dailyCalorieDeficit<3000)&&(noOfDaysSinceLastWorkOut<=7)){\n            result=\"Your current transparency level for decision making is MEDIUM\";\n        }    \n        else \n            result=\"Your current transparency level for decision making is HIGH \";\n    \n        System.out.print(result);\n\n    }\n    \n    private static double calculateDailyCalorieDeficit(double weightLossGoal){\n       return Math.abs(650 +Math.random() *200 -4*weightLossGoal); \n    }\n    \n}",
            "id": 672
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (identifier))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) right: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal))))) consequence: (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) alternative: (if_statement condition: (condition (binary_expression left: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) right: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (identifier)))))) (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (floating_point_type) name: (identifier))) body: (block (return_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (decimal_integer_literal) right: (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (decimal_integer_literal))) right: (binary_expression left: (decimal_integer_literal) right: (identifier)))))))))))\n**\n\n--\npublic class CalculateLowFitness {\n    public static void main(String[] args) throws IOException{\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n\n        System.out.println(\"Enter weight loss goal as a percentage\");\n        double weightLossGoal = Double.parseDouble(br.readLine());\n        \n        System.out.println(\"Enter number of days since last work out \");\n        int noOfDaysSinceLastWorkOut = Integer.parseInt(br.readLine());\n    \n        \n        double dailyCalorieDeficit = calculateDailyCalorieDeficit(weightLossGoal); \n    \n        \n        String result;\n        if((dailyCalorieDeficit >=0 && dailyCalorieDeficit <1500 )&& (noOfDaysSinceLastWorkOut <=7))\n            result =\"Your current transparency level for decision making is LOW\";\n        else if ((dailyCalorieDeficit >=1500 && dailyCalorieDeficit<3000)&&(noOfDaysSinceLastWorkOut<=7)){\n            result=\"Your current transparency level for decision making is MEDIUM\";\n        }    \n        else \n            result=\"Your current transparency level for decision making is HIGH \";\n    \n        System.out.print(result);\n\n    }\n    \n    private static double calculateDailyCalorieDeficit(double weightLossGoal){\n       return Math.abs(650 +Math.random() *200 -4*weightLossGoal); \n    }\n    \n}\n--\n",
        "text": "8",
        "token_cnt": 1315
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class CleaningAlgorithm {\n\n    public static double calculateCleanliness(String stain) {\n        \n        double score = 0;\n\n        if (stain == null || stain.equals(\"\")) {\n            return score;\n        } else if (stain.equalsIgnoreCase(\"blood\")) {\n            score += 3;\n        } else if (stain.equalsIgnoreCase(\"wine\") || stain.equalsIgnoreCase(\"grape juice\")) {\n            score += 2;\n        } else if (stain.equalsIgnoreCase(\"coffee\")) {\n            score += 1;\n        } \n\n        System.out.println(\"General Difficulty Score: \" + score);\n        \n        \n        return score;\n    }\n    \n}",
            "id": 674
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (null_literal)) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal))))) consequence: (block (return_statement (identifier))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))) (return_statement (identifier)))))))\n**\n\n--\npublic class CleaningAlgorithm {\n\n    public static double calculateCleanliness(String stain) {\n        \n        double score = 0;\n\n        if (stain == null || stain.equals(\"\")) {\n            return score;\n        } else if (stain.equalsIgnoreCase(\"blood\")) {\n            score += 3;\n        } else if (stain.equalsIgnoreCase(\"wine\") || stain.equalsIgnoreCase(\"grape juice\")) {\n            score += 2;\n        } else if (stain.equalsIgnoreCase(\"coffee\")) {\n            score += 1;\n        } \n\n        System.out.println(\"General Difficulty Score: \" + score);\n        \n        \n        return score;\n    }\n    \n}\n--\n",
        "text": "8",
        "token_cnt": 681
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public String updateTemperature(){\n        double temp = getTemp();\n        if(temp <= 0){\n            if (temp < -5) {\n                return \"Be prepared for chilly conditions but don't let it stop you from completing your tasks efficiently.\";\n            } else {\n                return \"It's too cold outside! Bring some extra layers.\";\n            }\n        } \n        \n        return \"\";\n    }",
            "id": 675
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (if_statement condition: (condition (binary_expression left: (identifier) right: (unary_expression operand: (decimal_integer_literal)))) consequence: (block (return_statement (string_literal (string_fragment)))) alternative: (block (return_statement (string_literal (string_fragment))))))) (return_statement (string_literal)))))\n**\n\n--\npublic String updateTemperature(){\n        double temp = getTemp();\n        if(temp <= 0){\n            if (temp < -5) {\n                return \"Be prepared for chilly conditions but don't let it stop you from completing your tasks efficiently.\";\n            } else {\n                return \"It's too cold outside! Bring some extra layers.\";\n            }\n        } \n        \n        return \"\";\n    }\n--\n",
        "text": "8\n\nДля вычисления цикломатической сложности используется формула **V(G) = N – S",
        "token_cnt": 322
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\nfunction checkHandHygiene(){\n  \n  console.log(\"Leaving House:\")\n\n  let didWashHands = false;\n  let didUseSanitizer = false;\n  \n  if(didWashHands){\n    return \"Proper hand washing was done.\"\n  } else if(didUseSanitizer){\n    return \"Alcohol-based hand sanitizer was used.\"\n  } else { \n    return `Please wash your hands with soap and water for at least 20 seconds, or use an alcohol-based hand sanitizer that contains at least 60% alcohol if soap and water are unavailable. Also avoid touching your face, nose, and mouth.`\n  }\n  \n}",
            "id": 681
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (ERROR type: (type_identifier) (ERROR (identifier)) name: (identifier) parameters: (formal_parameters) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\")) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (false))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (false))) (condition (identifier)) (block (return_statement (string_literal (string_fragment)) (MISSING \";\"))) (condition (identifier)) (block (return_statement (string_literal (string_fragment)) (MISSING \";\"))) (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier) (identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (decimal_integer_literal) (identifier) (type_identifier) (identifier) (type_identifier) (binary_expression left: (identifier) (ERROR (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (identifier)) right: (binary_expression left: (decimal_integer_literal) (ERROR (type_identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (scoped_type_identifier (type_identifier) (type_identifier)) (identifier) (type_identifier) (identifier)) right: (identifier))) (identifier) (type_identifier)) (identifier) (UNEXPECTED '`')))\n**\n\n--\nscript\nfunction checkHandHygiene(){\n  \n  console.log(\"Leaving House:\")\n\n  let didWashHands = false;\n  let didUseSanitizer = false;\n  \n  if(didWashHands){\n    return \"Proper hand washing was done.\"\n  } else if(didUseSanitizer){\n    return \"Alcohol-based hand sanitizer was used.\"\n  } else { \n    return `Please wash your hands with soap and water for at least 20 seconds, or use an alcohol-based hand sanitizer that contains at least 60% alcohol if soap and water are unavailable. Also avoid touching your face, nose, and mouth.`\n  }\n  \n}\n--\n",
        "text": "5",
        "token_cnt": 575
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static int calculateLowPersonalOrganization(String name) {\n        \n        int score = 0;\n\n        \n        if (name.matches(\".*[~!@#$%^&*()_+{}|:\\\"<>?\\\\s].*\")) {\n            System.out.println(\"Name contains one or more special characters.\");\n            return -1;\n        } else {\n            \n\n            score += 5;\n        }\n\n        \n        String[] words = name.split(\"\\\\s\");\n        boolean allDigits = true;\n        for (String word : words) {\n            if (!word.matches(\"[0-9]+\")) {\n                allDigits = false;\n                break;\n            }\n        }\n        if (allDigits) {\n            System.out.println(\"All words in name are digits only.\");\n            return -2;\n        } else {\n            \n\n            score += 3;\n        }\n\n        \n        if (name.contains(\"@\") && name.endsWith(\".com\")) {\n            System.out.println(\"Email address format appears valid.\");\n            return score;\n        } else {\n            System.out.println(\"Invalid email address format.\");\n            return -4;\n        }\n\n    }",
            "id": 684
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence) (string_fragment) (escape_sequence) (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement (unary_expression operand: (decimal_integer_literal)))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))))) (local_variable_declaration type: (array_type element: (type_identifier) dimensions: (dimensions)) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (escape_sequence) (string_fragment)))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (true))) (enhanced_for_statement type: (type_identifier) name: (identifier) value: (identifier) body: (block (if_statement condition: (condition (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (false))) (break_statement))))) (if_statement condition: (condition (identifier)) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement (unary_expression operand: (decimal_integer_literal)))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))))) (if_statement condition: (condition (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement (identifier))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement (unary_expression operand: (decimal_integer_literal))))))))\n**\n\n--\npublic static int calculateLowPersonalOrganization(String name) {\n        \n        int score = 0;\n\n        \n        if (name.matches(\".*[~!@#$%^&*()_+{}|:\\\"<>?\\\\s].*\")) {\n            System.out.println(\"Name contains one or more special characters.\");\n            return -1;\n        } else {\n            \n\n            score += 5;\n        }\n\n        \n        String[] words = name.split(\"\\\\s\");\n        boolean allDigits = true;\n        for (String word : words) {\n            if (!word.matches(\"[0-9]+\")) {\n                allDigits = false;\n                break;\n            }\n        }\n        if (allDigits) {\n            System.out.println(\"All words in name are digits only.\");\n            return -2;\n        } else {\n            \n\n            score += 3;\n        }\n\n        \n        if (name.contains(\"@\") && name.endsWith(\".com\")) {\n            System.out.println(\"Email address format appears valid.\");\n            return score;\n        } else {\n            System.out.println(\"Invalid email address format.\");\n            return -4;\n        }\n\n    }\n--\n",
        "text": "11",
        "token_cnt": 1070
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static boolean determineHighPersonalOrganization(String name) {\n        \n        if (name == null || name.length() < 3) return false;\n\n        String[] words = name.split(\" \");\n        int dayOfWeek = Integer.parseInt(words[0]);\n        int month = Integer.parseInt(words[1]) - 1;\n        int year = Integer.parseInt(words[2].substring(0,4));\n        \n        \n        if ((month == 1 && dayOfWeek > 5) || \n            (month == 7 && dayOfWeek <= 6))\n            return true;\n    \n        \n        long dob = LocalDate.of(year, month + 1, dayOfWeek).toEpochDay();\n        long now = System.currentTimeMillis()/86_400_000L;\n        double daysDiff = Math.abs((now - dob)/365);\n        int transparencyScore = (int)(daysDiff * 100);\n    \n        \n        return transparencyScore >= 90 ? true : false;    \n    }",
            "id": 695
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (null_literal)) right: (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (decimal_integer_literal)))) consequence: (return_statement (false))) (local_variable_declaration type: (array_type element: (type_identifier) dimensions: (dimensions)) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))) right: (decimal_integer_literal)))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation object: (array_access array: (identifier) index: (decimal_integer_literal)) name: (identifier) arguments: (argument_list (decimal_integer_literal) (decimal_integer_literal))))))) (if_statement condition: (condition (binary_expression left: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) right: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))))) consequence: (return_statement (true))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier) (binary_expression left: (identifier) right: (decimal_integer_literal)) (identifier))) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (decimal_integer_literal)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (identifier))) right: (decimal_integer_literal)))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (cast_expression type: (integral_type) value: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal)))))) (return_statement (ternary_expression condition: (binary_expression left: (identifier) right: (decimal_integer_literal)) consequence: (true) alternative: (false))))))\n**\n\n--\npublic static boolean determineHighPersonalOrganization(String name) {\n        \n        if (name == null || name.length() < 3) return false;\n\n        String[] words = name.split(\" \");\n        int dayOfWeek = Integer.parseInt(words[0]);\n        int month = Integer.parseInt(words[1]) - 1;\n        int year = Integer.parseInt(words[2].substring(0,4));\n        \n        \n        if ((month == 1 && dayOfWeek > 5) || \n            (month == 7 && dayOfWeek <= 6))\n            return true;\n    \n        \n        long dob = LocalDate.of(year, month + 1, dayOfWeek).toEpochDay();\n        long now = System.currentTimeMillis()/86_400_000L;\n        double daysDiff = Math.abs((now - dob)/365);\n        int transparencyScore = (int)(daysDiff * 100);\n    \n        \n        return transparencyScore >= 90 ? true : false;    \n    }\n--\n",
        "text": "21",
        "token_cnt": 1221
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static double calculateCost(int numPassengers) {\n        \n        if (numPassengers <=0 ) throw new IllegalArgumentException(\"Number of Passengers must be greater than zero\");\n\n        double costPerPerson;\n        if (isOdd(numPassengers)) {\n            costPerPerson = 15 + .3 * numPassengers; \n        } else {\n            costPerPerson =  7 + .2 * numPassengers; \n            numPassengers /= 2;\n        }\n        \n        return costPerPerson * numPassengers + 1; \n    }\n\n    private static boolean isOdd(int n){\n       return (n & 1) == 1;\n   }",
            "id": 700
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (integral_type) name: (identifier))) body: (block (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (throw_statement (object_creation_expression type: (type_identifier) arguments: (argument_list (string_literal (string_fragment)))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (method_invocation name: (identifier) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (decimal_integer_literal) right: (binary_expression left: (decimal_floating_point_literal) right: (identifier)))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (decimal_integer_literal) right: (binary_expression left: (decimal_floating_point_literal) right: (identifier))))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))))) (return_statement (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (decimal_integer_literal))))) (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (integral_type) name: (identifier))) body: (block (return_statement (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal))) right: (decimal_integer_literal))))))\n**\n\n--\npublic static double calculateCost(int numPassengers) {\n        \n        if (numPassengers <=0 ) throw new IllegalArgumentException(\"Number of Passengers must be greater than zero\");\n\n        double costPerPerson;\n        if (isOdd(numPassengers)) {\n            costPerPerson = 15 + .3 * numPassengers; \n        } else {\n            costPerPerson =  7 + .2 * numPassengers; \n            numPassengers /= 2;\n        }\n        \n        return costPerPerson * numPassengers + 1; \n    }\n\n    private static boolean isOdd(int n){\n       return (n & 1) == 1;\n   }\n--\n",
        "text": "6",
        "token_cnt": 621
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public void updateHighFlossing(Analysis analysis) {\n        \n        int maxTransparency = Integer.MIN_VALUE;\n        String maxLevel = \"\";\n\n        for (String key : analysis.getTransparencies().keySet()) {\n            int currentValue = analysis.getTransparencies().get(key);\n\n            if (currentValue > maxTransparency) {\n                maxTransparency = currentValue;\n                maxLevel = key;\n            }\n        }\n\n        System.out.println(\"Max Level of Transparency: \" + maxLevel + \", Value: \" + maxTransparency);\n\n        \n        if (!analysis.getToothbrushes().containsKey(maxLevel)) {\n            analysis.setToothbrushFrequency(maxLevel, 0);\n        } \n\n        \n        else if (analysis.getToothbrushes().get(maxLevel).size() == 1){\n            analysis.setToothbrushFrequency(maxLevel, analysis.getToothbrushes().get(maxLevel).iterator().next());\n        }\n        \n        \n        /*switch (maxLevel) {\n            case \"Very Clear\": \n                analysis.setToothbrushFrequency(maxLevel, 3);\n                break;\n            case \"Clear\":\n                analysis.setToothbrushFrequency(maxLevel, 2);\n                break;\n            case \"Translucent\":\n                analysis.setToothbrushFrequency(maxLevel, 1);\n                break;\n            default:\n                System.out.print(\"Invalid input\");\n        }*/\n    }\n}",
            "id": 703
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (field_access object: (identifier) field: (identifier)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal))) (enhanced_for_statement type: (type_identifier) name: (identifier) value: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list)) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (identifier))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (identifier))) (expression_statement (assignment_expression left: (identifier) right: (identifier))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment))) right: (identifier))))) (if_statement condition: (condition (unary_expression operand: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list (identifier))))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier) (decimal_integer_literal))))) alternative: (if_statement condition: (condition (binary_expression left: (method_invocation object: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list (identifier))) name: (identifier) arguments: (argument_list)) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier) (method_invocation object: (method_invocation object: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list (identifier))) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list)))))))) (block_comment))) (ERROR))\n**\n\n--\npublic void updateHighFlossing(Analysis analysis) {\n        \n        int maxTransparency = Integer.MIN_VALUE;\n        String maxLevel = \"\";\n\n        for (String key : analysis.getTransparencies().keySet()) {\n            int currentValue = analysis.getTransparencies().get(key);\n\n            if (currentValue > maxTransparency) {\n                maxTransparency = currentValue;\n                maxLevel = key;\n            }\n        }\n\n        System.out.println(\"Max Level of Transparency: \" + maxLevel + \", Value: \" + maxTransparency);\n\n        \n        if (!analysis.getToothbrushes().containsKey(maxLevel)) {\n            analysis.setToothbrushFrequency(maxLevel, 0);\n        } \n\n        \n        else if (analysis.getToothbrushes().get(maxLevel).size() == 1){\n            analysis.setToothbrushFrequency(maxLevel, analysis.getToothbrushes().get(maxLevel).iterator().next());\n        }\n        \n        \n        /*switch (maxLevel) {\n            case \"Very Clear\": \n                analysis.setToothbrushFrequency(maxLevel, 3);\n                break;\n            case \"Clear\":\n                analysis.setToothbrushFrequency(maxLevel, 2);\n                break;\n            case \"Translucent\":\n                analysis.setToothbrushFrequency(maxLevel, 1);\n                break;\n            default:\n                System.out.print(\"Invalid input\");\n        }*/\n    }\n}\n--\n",
        "text": "6\n\nОбъяснение:\nВ приведённом фрагменте 6 путей выполнения, которые можно",
        "token_cnt": 1100
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n\nconst expert = true; \nconst importance = 3; \nconst urgency = 2; \n\n\nlet notificationType;\nif (importance === 5 && urgency === 5) {\n  notificationType = 'emergency';\n} else if (importance >= 4 || urgency >= 4) {\n  notificationType = 'urgent';\n} else if (importance >= 3) {\n  notificationType = 'important';\n} else {\n  notificationType = 'normal';\n}\n\n\nif (expert) {\n  console.log(`Expert alert! A reminder has been triggered with high priority (${notificationType}).`);\n} else {\n  console.log(`Reminder detected! Priority is ${notificationType}.`);\n}",
            "id": 710
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier) value: (true))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) (ERROR) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) (ERROR) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal)))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal))))))) (if_statement condition: (condition (identifier)) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier)) (unary_expression (ERROR (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (type_identifier)) operand: (method_invocation name: (identifier) arguments: (argument_list (identifier) (ERROR (identifier))))) (ERROR (UNEXPECTED '`')))))) alternative: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier)) (unary_expression (ERROR (type_identifier) (identifier) (identifier)) operand: (identifier)) (ERROR (UNEXPECTED '`'))))))))\n**\n\n--\nscript\n\nconst expert = true; \nconst importance = 3; \nconst urgency = 2; \n\n\nlet notificationType;\nif (importance === 5 && urgency === 5) {\n  notificationType = 'emergency';\n} else if (importance >= 4 || urgency >= 4) {\n  notificationType = 'urgent';\n} else if (importance >= 3) {\n  notificationType = 'important';\n} else {\n  notificationType = 'normal';\n}\n\n\nif (expert) {\n  console.log(`Expert alert! A reminder has been triggered with high priority (${notificationType}).`);\n} else {\n  console.log(`Reminder detected! Priority is ${notificationType}.`);\n}\n--\n",
        "text": "8",
        "token_cnt": 793
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class IllnessEtiquette {\n    private boolean hasBeenSickThisWeek = false;\n\n    public void setHasBeenSickThisWeek(boolean value) {\n        hasBeenSickThisWeek = value;\n    }\n\n    \n    private boolean getConsent() {\n        return true; \n    }\n\n    public String suggestHygienePractices() {\n        StringBuilder sb = new StringBuilder();\n\n        if (getConsent()) {\n            if (!hasBeenSickThisWeek) {\n                sb.append(\"It's recommended to wash hands frequently throughout the day \" +\n                        \"(at least every two hours), especially after using the bathroom, before eating,\" +\n                        \"and after blowing your nose or coughing.\\n\\n\");\n\n                sb.append(\"If someone in your household is feeling unwell, consider taking extra precautions\" +\n                        \"to prevent spreading germs such as:\\n\\t- Washing laundry thoroughly\\n\\t-\" +\n                        \"Disinfecting high-touch surfaces like doorknobs, light switches, countertops,\\n\\t-\" +\n                        \"And avoid close contact with people who are sick.\");\n\n            } else {\n                sb.append(\"Since you were recently sick, it’s even more important to take steps to stay healthy.\" +\n                        \"\\nConsider continuing good handwashing habits, disinfecting common areas regularly, and\" +\n                        \"staying home when you feel under the weather until you’re fully recovered.\");\n            }\n        } else {\n            sb.append(\"Understood! If there are any other questions about how to keep yourself and others safe from COVID-19 please let me know!\");\n        }\n        \n        return sb.toString();\n    }\n}",
            "id": 713
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (field_declaration (modifiers) type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier))) body: (block (expression_statement (assignment_expression left: (identifier) right: (identifier))))) (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters) body: (block (return_statement (true)))) (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list)))) (if_statement condition: (condition (method_invocation name: (identifier) arguments: (argument_list))) consequence: (block (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (string_literal (string_fragment))) right: (string_literal (string_fragment) (escape_sequence) (escape_sequence)))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (string_literal (string_fragment) (escape_sequence) (escape_sequence) (string_fragment) (escape_sequence) (escape_sequence) (string_fragment))) right: (string_literal (string_fragment) (escape_sequence) (escape_sequence) (string_fragment))) right: (string_literal (string_fragment))))))) alternative: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (string_literal (escape_sequence) (string_fragment))) right: (string_literal (string_fragment))))))))) alternative: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) (return_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))))))))\n**\n\n--\npublic class IllnessEtiquette {\n    private boolean hasBeenSickThisWeek = false;\n\n    public void setHasBeenSickThisWeek(boolean value) {\n        hasBeenSickThisWeek = value;\n    }\n\n    \n    private boolean getConsent() {\n        return true; \n    }\n\n    public String suggestHygienePractices() {\n        StringBuilder sb = new StringBuilder();\n\n        if (getConsent()) {\n            if (!hasBeenSickThisWeek) {\n                sb.append(\"It's recommended to wash hands frequently throughout the day \" +\n                        \"(at least every two hours), especially after using the bathroom, before eating,\" +\n                        \"and after blowing your nose or coughing.\\n\\n\");\n\n                sb.append(\"If someone in your household is feeling unwell, consider taking extra precautions\" +\n                        \"to prevent spreading germs such as:\\n\\t- Washing laundry thoroughly\\n\\t-\" +\n                        \"Disinfecting high-touch surfaces like doorknobs, light switches, countertops,\\n\\t-\" +\n                        \"And avoid close contact with people who are sick.\");\n\n            } else {\n                sb.append(\"Since you were recently sick, it’s even more important to take steps to stay healthy.\" +\n                        \"\\nConsider continuing good handwashing habits, disinfecting common areas regularly, and\" +\n                        \"staying home when you feel under the weather until you’re fully recovered.\");\n            }\n        } else {\n            sb.append(\"Understood! If there are any other questions about how to keep yourself and others safe from COVID-19 please let me know!\");\n        }\n        \n        return sb.toString();\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 1068
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number of days since last visit:\");\n        int numDays = scan.nextInt();\n\n        \n        if (numDays <=7){\n            System.out.println(\"Recommend wearing comfortable shoes.\");\n        } else{ \n            \n            System.out.print(\"Have you been recently diagnosed with Diabetes? (y/n): \");\n            String diaStatus = scan.next().toLowerCase();\n\n            if (diaStatus.equals(\"yes\")){\n                System.out.println(\"Due to high risk of complications, recommend seeing a podiatrist as soon as possible.\");\n            } else { \n                System.out.println(\"As there does not seem to be any significant risks involved, continue monitoring symptoms at home.\");\n            }\n        }\n\n    }\n}",
            "id": 714
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number of days since last visit:\");\n        int numDays = scan.nextInt();\n\n        \n        if (numDays <=7){\n            System.out.println(\"Recommend wearing comfortable shoes.\");\n        } else{ \n            \n            System.out.print(\"Have you been recently diagnosed with Diabetes? (y/n): \");\n            String diaStatus = scan.next().toLowerCase();\n\n            if (diaStatus.equals(\"yes\")){\n                System.out.println(\"Due to high risk of complications, recommend seeing a podiatrist as soon as possible.\");\n            } else { \n                System.out.println(\"As there does not seem to be any significant risks involved, continue monitoring symptoms at home.\");\n            }\n        }\n\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 842
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n    \n    function calculateLowDentalHygieneScore(flossingFrequency) {\n      let score = 0;\n  \n      if (flossingFrequency === 'Never') {\n        score += 1;\n      } else if (flossingFrequency === 'Rarely' || flossingFrequency === 'Sometimes') {\n        score += 2;\n      } else {\n        score += 3;\n      }\n  \n      return score;\n    }\n    \n    console.log(`The score for low dental hygiene due to lack of flossing is ${calculateLowDentalHygieneScore('Never')}`)",
            "id": 715
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) (ERROR) right: (character_literal)) right: (binary_expression left: (identifier) (ERROR) right: (character_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))))) (return_statement (identifier))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier)) (method_invocation name: (identifier) (ERROR (identifier)) arguments: (argument_list (character_literal))) (ERROR (UNEXPECTED '`')))) (MISSING \";\")))\n**\n\n--\nscript\n    \n    function calculateLowDentalHygieneScore(flossingFrequency) {\n      let score = 0;\n  \n      if (flossingFrequency === 'Never') {\n        score += 1;\n      } else if (flossingFrequency === 'Rarely' || flossingFrequency === 'Sometimes') {\n        score += 2;\n      } else {\n        score += 3;\n      }\n  \n      return score;\n    }\n    \n    console.log(`The score for low dental hygiene due to lack of flossing is ${calculateLowDentalHygieneScore('Never')}`)\n--\n",
        "text": "6\n\nОбъяснение:\n\nЦикломатическая сложность — это метрика, которая оценивает сложность",
        "token_cnt": 565
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class LoanCalculator {\n\n    public static void main(String[] args) {\n        \n        System.out.print(\"Enter loan amount: \");\n        double loanAmount = Double.parseDouble(scanner.nextLine());\n        System.out.print(\"Enter interest rate: \");\n        double interestRate = Double.parseDouble(scanner.nextLine());\n        System.out.print(\"Enter number of years: \");\n        int numYears = Integer.parseInt(scanner.nextLine());\n\n        \n        double monthlyPayment = calculateMonthlyPayment(loanAmount, interestRate, numYears);\n\n        \n        System.out.println(\"Monthly Payment: \" + monthlyPayment);\n    }\n\n    /**\n     * Calculates the monthly payment for a loan given the loan amount, \n     * interest rate, and number of years.\n     */\n    private static double calculateMonthlyPayment(double loanAmount, double interestRate, int numYears) {\n        double monthlyInterestRate = interestRate / 12;\n        double totalInterestPaid = loanAmount * monthlyInterestRate * numYears;\n        return loanAmount + totalInterestPaid;\n    }\n}",
            "id": 716
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier) (identifier))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))) (block_comment) (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (floating_point_type) name: (identifier)) (formal_parameter type: (floating_point_type) name: (identifier)) (formal_parameter type: (integral_type) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (identifier) right: (decimal_integer_literal)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (identifier)))) (return_statement (binary_expression left: (identifier) right: (identifier))))))))\n**\n\n--\npublic class LoanCalculator {\n\n    public static void main(String[] args) {\n        \n        System.out.print(\"Enter loan amount: \");\n        double loanAmount = Double.parseDouble(scanner.nextLine());\n        System.out.print(\"Enter interest rate: \");\n        double interestRate = Double.parseDouble(scanner.nextLine());\n        System.out.print(\"Enter number of years: \");\n        int numYears = Integer.parseInt(scanner.nextLine());\n\n        \n        double monthlyPayment = calculateMonthlyPayment(loanAmount, interestRate, numYears);\n\n        \n        System.out.println(\"Monthly Payment: \" + monthlyPayment);\n    }\n\n    /**\n     * Calculates the monthly payment for a loan given the loan amount, \n     * interest rate, and number of years.\n     */\n    private static double calculateMonthlyPayment(double loanAmount, double interestRate, int numYears) {\n        double monthlyInterestRate = interestRate / 12;\n        double totalInterestPaid = loanAmount * monthlyInterestRate * numYears;\n        return loanAmount + totalInterestPaid;\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 1055
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static double calculateHighDentalHygiene(boolean flossDaily, boolean useMouthWash) {\n        \n        double highDentalHygieneScore = 0;\n\n        \n        if (useMouthwash == true) {\n            \n            highDentalHygieneScore += 2;\n\n            \n            if (flossDaily == true) {\n                \n                highDentalHygieneScore += 1;\n            } else {\n                \n                highDentalHygieneScore -= 1;\n            }\n        } else {\n            \n            highDentalHygieneScore -= 3;\n        }\n        \n        return highDentalHygieneScore;\n    }",
            "id": 718
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier)) (formal_parameter type: (boolean_type) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (if_statement condition: (condition (binary_expression left: (identifier) right: (true))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (if_statement condition: (condition (binary_expression left: (identifier) right: (true))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))))) (return_statement (identifier)))))\n**\n\n--\npublic static double calculateHighDentalHygiene(boolean flossDaily, boolean useMouthWash) {\n        \n        double highDentalHygieneScore = 0;\n\n        \n        if (useMouthwash == true) {\n            \n            highDentalHygieneScore += 2;\n\n            \n            if (flossDaily == true) {\n                \n                highDentalHygieneScore += 1;\n            } else {\n                \n                highDentalHygieneScore -= 1;\n            }\n        } else {\n            \n            highDentalHygieneScore -= 3;\n        }\n        \n        return highDentalHygieneScore;\n    }\n--\n",
        "text": "6\nОбъяснение: цикломатическая сложность этого фрагмента кода равна количеству линейно независимых путей через него.",
        "token_cnt": 447
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Enter number of people sick:\");\n        int numSick = scan.nextInt();\n\n        System.out.println(\"Enter percentage of infected individuals who show symptoms:\");\n        double pctInfectious = scan.nextDouble();\n\n        \n        double probTransmission1 = (pctInfectious / 100) * (numSick - 1); \n\n        \n        System.out.println(\"Enter percent reduction in spread due to strict social distancing measures\");\n        double pctSocialDistancing = scan.nextDouble();\n\n        \n        double probTransmission2 = ((pctInfectious - pctSocialDistancing) / 100) * (numSick - 1); \n\n        \n        double maxProb = Math.max(probTransmission1, probTransmission2);\n\n        \n        System.out.printf(\"%nProbability of transmitting COVID-19 without social distancing:%f%n\", probTransmission1);\n        System.out.printf(\"Probability of transmitting COVID-19 with social distancing:%f%n\", probTransmission2);\n        System.out.printf(\"Maximum Probability of Transmitting COVID-19:%f%n\", maxProb);\n\n    }\n}",
            "id": 724
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal))) right: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (parenthesized_expression (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (identifier))) right: (decimal_integer_literal))) right: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal)))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (identifier)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (identifier)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (identifier)))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Enter number of people sick:\");\n        int numSick = scan.nextInt();\n\n        System.out.println(\"Enter percentage of infected individuals who show symptoms:\");\n        double pctInfectious = scan.nextDouble();\n\n        \n        double probTransmission1 = (pctInfectious / 100) * (numSick - 1); \n\n        \n        System.out.println(\"Enter percent reduction in spread due to strict social distancing measures\");\n        double pctSocialDistancing = scan.nextDouble();\n\n        \n        double probTransmission2 = ((pctInfectious - pctSocialDistancing) / 100) * (numSick - 1); \n\n        \n        double maxProb = Math.max(probTransmission1, probTransmission2);\n\n        \n        System.out.printf(\"%nProbability of transmitting COVID-19 without social distancing:%f%n\", probTransmission1);\n        System.out.printf(\"Probability of transmitting COVID-19 with social distancing:%f%n\", probTransmission2);\n        System.out.printf(\"Maximum Probability of Transmitting COVID-19:%f%n\", maxProb);\n\n    }\n}\n--\n",
        "text": "5",
        "token_cnt": 1199
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Example {\n    public static void main(String[] args) throws IOException{\n        \n        System.out.println(\"Enter brand name (Colgate, Glide, Oral B etc.)\");\n        Scanner scan = new Scanner(System.in);\n        String brandName = scan.nextLine();\n\n        \n        ArrayList<String> brands = new ArrayList<>();\n        brands.add(\"Colgate\");\n        brands.add(\"Glide\");\n        brands.add(\"OralB\");\n        \n        \n        switch(brandName){\n            case \"Colgate\":\n                System.out.println(\"Extreme flossing recommended!\");\n                break;\n                \n            case \"Glide\":\n                System.out.println(\"Fairly extreme flossing required.\");\n                break;\n\n            default: \n                System.out.println(\"Mild flossing needed.\");\n        }\n\n    }\n}",
            "id": 730
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (generic_type (type_identifier) (type_arguments (type_identifier))) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (generic_type (type_identifier) (type_arguments)) arguments: (argument_list)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))))\n**\n\n--\npublic class Example {\n    public static void main(String[] args) throws IOException{\n        \n        System.out.println(\"Enter brand name (Colgate, Glide, Oral B etc.)\");\n        Scanner scan = new Scanner(System.in);\n        String brandName = scan.nextLine();\n\n        \n        ArrayList<String> brands = new ArrayList<>();\n        brands.add(\"Colgate\");\n        brands.add(\"Glide\");\n        brands.add(\"OralB\");\n        \n        \n        switch(brandName){\n            case \"Colgate\":\n                System.out.println(\"Extreme flossing recommended!\");\n                break;\n                \n            case \"Glide\":\n                System.out.println(\"Fairly extreme flossing required.\");\n                break;\n\n            default: \n                System.out.println(\"Mild flossing needed.\");\n        }\n\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 882
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class ExtremeClothingCleanlinessCalculator {\n    \n        private static final int[] CLEANLINESS_RATINGS = new int[]{10, 9, 8, 7, 6};\n        private static final String[] UNITS = new String[]{\"Exceptionally Clean\", \"Very Clean\", \"Moderately Clean\", \n            \"Somewhat Dirty\", \"Extremely Dirty\"};\n    \n        /**\n         * Calculate the extreme clothing cleanliness rating given the trust value. \n         */\n        public String calculate(int trust) {\n            \n            if (trust < 0 || trust > 100) {\n                throw new IllegalArgumentException(\"Invalid trust value: \" + trust);\n            }\n    \n            \n            int index = Arrays.binarySearch(CLEANLINESS_RATINGS, trust / 20);\n            if (index >= 0) {\n                return units[index];\n            } else {\n                \n                index = -(index + 1);\n                return units[index - 1] + \", Borderline\";\n            }\n        }\n    \n    }",
            "id": 731
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (field_declaration (modifiers) type: (array_type element: (integral_type) dimensions: (dimensions)) declarator: (variable_declarator name: (identifier) value: (array_creation_expression type: (integral_type) dimensions: (dimensions) value: (array_initializer (decimal_integer_literal) (decimal_integer_literal) (decimal_integer_literal) (decimal_integer_literal) (decimal_integer_literal))))) (field_declaration (modifiers) type: (array_type element: (type_identifier) dimensions: (dimensions)) declarator: (variable_declarator name: (identifier) value: (array_creation_expression type: (type_identifier) dimensions: (dimensions) value: (array_initializer (string_literal (string_fragment)) (string_literal (string_fragment)) (string_literal (string_fragment)) (string_literal (string_fragment)) (string_literal (string_fragment)))))) (block_comment) (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (integral_type) name: (identifier))) body: (block (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (throw_statement (object_creation_expression type: (type_identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier) (binary_expression left: (identifier) right: (decimal_integer_literal)))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (return_statement (array_access array: (identifier) index: (identifier)))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (unary_expression operand: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal)))))) (return_statement (binary_expression left: (array_access array: (identifier) index: (binary_expression left: (identifier) right: (decimal_integer_literal))) right: (string_literal (string_fragment)))))))))))\n**\n\n--\npublic class ExtremeClothingCleanlinessCalculator {\n    \n        private static final int[] CLEANLINESS_RATINGS = new int[]{10, 9, 8, 7, 6};\n        private static final String[] UNITS = new String[]{\"Exceptionally Clean\", \"Very Clean\", \"Moderately Clean\", \n            \"Somewhat Dirty\", \"Extremely Dirty\"};\n    \n        /**\n         * Calculate the extreme clothing cleanliness rating given the trust value. \n         */\n        public String calculate(int trust) {\n            \n            if (trust < 0 || trust > 100) {\n                throw new IllegalArgumentException(\"Invalid trust value: \" + trust);\n            }\n    \n            \n            int index = Arrays.binarySearch(CLEANLINESS_RATINGS, trust / 20);\n            if (index >= 0) {\n                return units[index];\n            } else {\n                \n                index = -(index + 1);\n                return units[index - 1] + \", Borderline\";\n            }\n        }\n    \n    }\n--\n",
        "text": "14",
        "token_cnt": 894
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Transformer {\n\n    public String transform(String input) throws Exception {\n        \n        if (input == null || input.length() < 10){\n            throw new IllegalArgumentException(\"Invalid Input\");\n        }\n\n        StringBuilder output = new StringBuilder();\n        \n        char[] chars = input.toCharArray();\n        int count = 0;\n        boolean flag = false;\n        for (char c : chars) {\n            if (!Character.isLetterOrDigit(c)) {\n                if (++count % 2 != 0 && !flag) {\n                    output.append(' ');\n                    flag = true;\n                } else if ((count + 1) % 2 == 0 && flag) {\n                    output.deleteCharAt(output.length()-1);\n                    flag = false;\n                }\n            } else {\n                output.append(c);\n                flag = false;\n            }\n        }\n    \n        return output.toString().trim();\n    }\n    \n}",
            "id": 737
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) (throws (type_identifier)) body: (block (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (null_literal)) right: (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (decimal_integer_literal)))) consequence: (block (throw_statement (object_creation_expression type: (type_identifier) arguments: (argument_list (string_literal (string_fragment))))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list)))) (local_variable_declaration type: (array_type element: (integral_type) dimensions: (dimensions)) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (enhanced_for_statement type: (integral_type) name: (identifier) value: (identifier) body: (block (if_statement condition: (condition (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))) consequence: (block (if_statement condition: (condition (binary_expression left: (binary_expression left: (binary_expression left: (update_expression (identifier)) right: (decimal_integer_literal)) right: (decimal_integer_literal)) right: (unary_expression operand: (identifier)))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal)))) (expression_statement (assignment_expression left: (identifier) right: (true)))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal))) right: (decimal_integer_literal)) right: (decimal_integer_literal)) right: (identifier))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (decimal_integer_literal))))) (expression_statement (assignment_expression left: (identifier) right: (false))))))) alternative: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))) (expression_statement (assignment_expression left: (identifier) right: (false))))))) (return_statement (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list))))))))\n**\n\n--\npublic class Transformer {\n\n    public String transform(String input) throws Exception {\n        \n        if (input == null || input.length() < 10){\n            throw new IllegalArgumentException(\"Invalid Input\");\n        }\n\n        StringBuilder output = new StringBuilder();\n        \n        char[] chars = input.toCharArray();\n        int count = 0;\n        boolean flag = false;\n        for (char c : chars) {\n            if (!Character.isLetterOrDigit(c)) {\n                if (++count % 2 != 0 && !flag) {\n                    output.append(' ');\n                    flag = true;\n                } else if ((count + 1) % 2 == 0 && flag) {\n                    output.deleteCharAt(output.length()-1);\n                    flag = false;\n                }\n            } else {\n                output.append(c);\n                flag = false;\n            }\n        }\n    \n        return output.toString().trim();\n    }\n    \n}\n--\n",
        "text": "34",
        "token_cnt": 1074
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter name of disease\");\n        String inputDiseaseName=scan.nextLine();\n\n        \n        if (inputDiseaseName.equalsIgnoreCase(\"fever\")) {\n            System.out.println(\"Wash hands frequently for at least 20 seconds especially after going to bathroom , before eating ,and after blowing nose coughing sneezing touching animals or handling garbage.\");\n            System.out.println(\"Avoid close contact with people who are unwell . If possible maintain distance of minimum one meter from anyone showing flu like symptoms such as coughing sneezing etc..\");\n        }\n        \n        \n        else if (inputDiseaseName.equalsIgnoreCase(\"cold\")){\n            System.out.println(\"If you feel unwell please stay home and avoid close contact with other people until you are feeling better.\");\n            System.out.println(\"Practice good respiratory etiquette by covering mouth when coughing or sneezing and washing hands regularly.\");\n            System.out.println(\"Clean and disinfect surfaces touched often like doorknobs light switches keyboards and cell phones \");\n        }\n    \n        \n        else{\n            System.out.println(\"Please provide valid option i.e either 'fever' or 'cold'\");\n        }\n        \n    }\n}",
            "id": 740
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter name of disease\");\n        String inputDiseaseName=scan.nextLine();\n\n        \n        if (inputDiseaseName.equalsIgnoreCase(\"fever\")) {\n            System.out.println(\"Wash hands frequently for at least 20 seconds especially after going to bathroom , before eating ,and after blowing nose coughing sneezing touching animals or handling garbage.\");\n            System.out.println(\"Avoid close contact with people who are unwell . If possible maintain distance of minimum one meter from anyone showing flu like symptoms such as coughing sneezing etc..\");\n        }\n        \n        \n        else if (inputDiseaseName.equalsIgnoreCase(\"cold\")){\n            System.out.println(\"If you feel unwell please stay home and avoid close contact with other people until you are feeling better.\");\n            System.out.println(\"Practice good respiratory etiquette by covering mouth when coughing or sneezing and washing hands regularly.\");\n            System.out.println(\"Clean and disinfect surfaces touched often like doorknobs light switches keyboards and cell phones \");\n        }\n    \n        \n        else{\n            System.out.println(\"Please provide valid option i.e either 'fever' or 'cold'\");\n        }\n        \n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 974
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class SMMCalculator {\n\n    public static void main(String[] args) {\n        \n        int frontend = Integer.parseInt(\"3\");\n        int backend = Integer.parseInt(\"4\");\n        int datascience = Integer.parseInt(\"5\");\n\n        \n\n        double totalScore = (frontend + backend + datascience) / 3;\n        \n        String output;\n        if (totalScore >=70){\n            output =\"High\";\n        } else{\n             output=\"Low\" ;    \n        }\n\n        System.out.println(\"Social Media Score : \" +output);\n    }\n}",
            "id": 741
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (identifier))) right: (decimal_integer_literal)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))))))\n**\n\n--\npublic class SMMCalculator {\n\n    public static void main(String[] args) {\n        \n        int frontend = Integer.parseInt(\"3\");\n        int backend = Integer.parseInt(\"4\");\n        int datascience = Integer.parseInt(\"5\");\n\n        \n\n        double totalScore = (frontend + backend + datascience) / 3;\n        \n        String output;\n        if (totalScore >=70){\n            output =\"High\";\n        } else{\n             output=\"Low\" ;    \n        }\n\n        System.out.println(\"Social Media Score : \" +output);\n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 682
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) throws Exception{\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter name:\");\n        String name=scan.nextLine();\n        System.out.println(\"Enter age\");\n        int age=Integer.parseInt(scan.nextLine());\n        System.out.println(\"Are you agree?\");\n        boolean consent=Boolean.parseBoolean(scan.nextLine());\n\n        \n        if (consent){\n            checkHygeine(name,age);\n        } else {\n            System.out.println(\"User declined!\");\n        }\n\n    }\n\n    private static void checkHygeine(String name,int age) throws Exception {\n        Random rand =new Random();\n        double chanceOfInfection=(rand.nextDouble()*10)+5;\n        if (chanceOfInfection<7 && age>=6){\n            System.out.printf(\"%s,%d\\n\",name,age);\n        } else {\n            throw new Exception(\"High risk user detected! Alert doctor.\");\n        }\n    }\n}",
            "id": 743
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))) (if_statement condition: (condition (identifier)) consequence: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (integral_type) name: (identifier))) (throws (type_identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (parenthesized_expression (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (decimal_integer_literal))) right: (decimal_integer_literal)))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence)) (identifier) (identifier))))) alternative: (block (throw_statement (object_creation_expression type: (type_identifier) arguments: (argument_list (string_literal (string_fragment))))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) throws Exception{\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter name:\");\n        String name=scan.nextLine();\n        System.out.println(\"Enter age\");\n        int age=Integer.parseInt(scan.nextLine());\n        System.out.println(\"Are you agree?\");\n        boolean consent=Boolean.parseBoolean(scan.nextLine());\n\n        \n        if (consent){\n            checkHygeine(name,age);\n        } else {\n            System.out.println(\"User declined!\");\n        }\n\n    }\n\n    private static void checkHygeine(String name,int age) throws Exception {\n        Random rand =new Random();\n        double chanceOfInfection=(rand.nextDouble()*10)+5;\n        if (chanceOfInfection<7 && age>=6){\n            System.out.printf(\"%s,%d\\n\",name,age);\n        } else {\n            throw new Exception(\"High risk user detected! Alert doctor.\");\n        }\n    }\n}\n--\n",
        "text": "34",
        "token_cnt": 1252
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n    const dryMouth = \"Your mouth feels dry.\";\n    const badBreath = \"Your breath smells bad.\";\n    const gumDisease = \"Gums appear swollen or red.\";\n    \n    function checkExtremeFlossing() {\n      \n      let reliability = prompt(\"How reliable is your memory?\");\n  \n      if (reliability === null) {\n        return;  \n      }\n  \n      console.log(`User reported reliability as ${reliability}.`);\n  \n      \n      if (reliability >= 70) {\n        alert(`${dryMouth} ${badBreath}`);\n      } else if (reliability >= 50 && reliability < 70) {\n        alert(dryMouth);\n      } else if (reliability >= 30 && reliability < 50) {\n        alert(`${gumDisease} ${badBreath}`);\n      } else {\n        alert(`${gumDisease} ${dryMouth}`);\n      }\n    }\n    \n    checkExtremeFlossing();",
            "id": 745
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (method_declaration type: (type_identifier) name: (identifier) parameters: (formal_parameters) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (null_literal))) consequence: (block (return_statement))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier)) (identifier) (ERROR (identifier) (UNEXPECTED '`'))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`')) (identifier) (ERROR (identifier) (identifier) (identifier) (UNEXPECTED '`')))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`')) (identifier) (ERROR (identifier) (identifier) (identifier) (UNEXPECTED '`')))))) alternative: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`')) (identifier) (ERROR (identifier) (identifier) (identifier) (UNEXPECTED '`'))))))))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list))))\n**\n\n--\nscript\n    const dryMouth = \"Your mouth feels dry.\";\n    const badBreath = \"Your breath smells bad.\";\n    const gumDisease = \"Gums appear swollen or red.\";\n    \n    function checkExtremeFlossing() {\n      \n      let reliability = prompt(\"How reliable is your memory?\");\n  \n      if (reliability === null) {\n        return;  \n      }\n  \n      console.log(`User reported reliability as ${reliability}.`);\n  \n      \n      if (reliability >= 70) {\n        alert(`${dryMouth} ${badBreath}`);\n      } else if (reliability >= 50 && reliability < 70) {\n        alert(dryMouth);\n      } else if (reliability >= 30 && reliability < 50) {\n        alert(`${gumDisease} ${badBreath}`);\n      } else {\n        alert(`${gumDisease} ${dryMouth}`);\n      }\n    }\n    \n    checkExtremeFlossing();\n--\n",
        "text": "8",
        "token_cnt": 925
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\nfunction determineLowEarHygiene(earTransperancy) {\n  \n  console.log(\"Checking ear transparencies...\");\n\n  let cleaningInstructions;\n  \n  if (earTransperancy === \"clear\") {\n    cleaningInstructions = \"Your ears appear clean!\";\n  } else if (earTransperancy === \"slightly opaque\" || \n             earTransperancy === \"moderately opaque\") {\n    cleaningInstructions = \n      \"It looks like there may be some wax buildup. Try gently rubbing a cotton swab along the outside of your ear canal.\";\n  } else {\n    cleaningInstructions =\n      \"The inside of your ear appears very dirty. It's recommended that you see a doctor who can remove any built up debris or foreign objects.\";\n  }\n    \n  return cleaningInstructions;\n}\n\n\nconsole.log(determineLowEarHygiene(\"clear\"));  \nconsole.log(determineLowEarHygiene(\"slightly opaque\"));  \nconsole.log(determineLowEarHygiene(\"very opaque\"));",
            "id": 750
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) (ERROR) right: (string_literal (string_fragment))) right: (binary_expression left: (identifier) (ERROR) right: (string_literal (string_fragment))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))))) (return_statement (identifier))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))\n**\n\n--\nscript\nfunction determineLowEarHygiene(earTransperancy) {\n  \n  console.log(\"Checking ear transparencies...\");\n\n  let cleaningInstructions;\n  \n  if (earTransperancy === \"clear\") {\n    cleaningInstructions = \"Your ears appear clean!\";\n  } else if (earTransperancy === \"slightly opaque\" || \n             earTransperancy === \"moderately opaque\") {\n    cleaningInstructions = \n      \"It looks like there may be some wax buildup. Try gently rubbing a cotton swab along the outside of your ear canal.\";\n  } else {\n    cleaningInstructions =\n      \"The inside of your ear appears very dirty. It's recommended that you see a doctor who can remove any built up debris or foreign objects.\";\n  }\n    \n  return cleaningInstructions;\n}\n\n\nconsole.log(determineLowEarHygiene(\"clear\"));  \nconsole.log(determineLowEarHygiene(\"slightly opaque\"));  \nconsole.log(determineLowEarHygiene(\"very opaque\"));\n--\n",
        "text": "8",
        "token_cnt": 739
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public int calculateHighPersonalOrganization(String name, String email, boolean trust) {\n        \n        int score = 0;\n\n        \n        if (!name.isEmpty() && !email.isEmpty()) {\n            \n\n            \n            if (trust) {\n                \n\n                \n                if ((hasBlockedTime(\"Study\", \"8am - 9am\") || hasBlockedTime(\"Work\", \"9am - 6pm\"))\n                    && !isConflictingEvent(\"Lunch\", \"Noon - 2pm\")) {\n                        \n\n                        \n                        if (!isAfter(\"8pm\")) {\n                            \n                        }\n                    } else {\n                        \n                    }\n            } else {\n                \n            }\n        } else {\n            \n        }\n        \n        return score;\n    }\n\n    private boolean hasBlockedTime(String activity, String timeRange) {\n        \n    }\n    \n    private boolean isConflictingEvent(String eventName, String timeRange) {\n        \n    }\n    \n    private boolean isAfter(String time) {\n        \n    }",
            "id": 756
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (boolean_type) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (if_statement condition: (condition (binary_expression left: (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))) right: (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))))) consequence: (block (if_statement condition: (condition (identifier)) consequence: (block (if_statement condition: (condition (binary_expression left: (parenthesized_expression (binary_expression left: (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal (string_fragment)))) right: (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal (string_fragment)))))) right: (unary_expression operand: (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal (string_fragment))))))) consequence: (block (if_statement condition: (condition (unary_expression operand: (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) consequence: (block))) alternative: (block))) alternative: (block))) alternative: (block)) (return_statement (identifier)))) (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (type_identifier) name: (identifier))) body: (block)) (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (type_identifier) name: (identifier))) body: (block)) (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block)))\n**\n\n--\npublic int calculateHighPersonalOrganization(String name, String email, boolean trust) {\n        \n        int score = 0;\n\n        \n        if (!name.isEmpty() && !email.isEmpty()) {\n            \n\n            \n            if (trust) {\n                \n\n                \n                if ((hasBlockedTime(\"Study\", \"8am - 9am\") || hasBlockedTime(\"Work\", \"9am - 6pm\"))\n                    && !isConflictingEvent(\"Lunch\", \"Noon - 2pm\")) {\n                        \n\n                        \n                        if (!isAfter(\"8pm\")) {\n                            \n                        }\n                    } else {\n                        \n                    }\n            } else {\n                \n            }\n        } else {\n            \n        }\n        \n        return score;\n    }\n\n    private boolean hasBlockedTime(String activity, String timeRange) {\n        \n    }\n    \n    private boolean isConflictingEvent(String eventName, String timeRange) {\n        \n    }\n    \n    private boolean isAfter(String time) {\n        \n    }\n--\n",
        "text": "5",
        "token_cnt": 892
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n    const determineTrust = (marketCap) => {\n      \n      if (marketCap > 10000000000) {\n        return \"High\";\n      }\n  \n      \n      else if (marketCap >= 500000000 && marketCap < 1000000000) {\n        return \"Medium\";\n      }\n  \n      \n      else {\n        return \"Low\";\n      }\n    };\n    \n    console.log(determineTrust(2348796)); \n    console.log(determineTrust(123456789)); \n    console.log(determineTrust(1000000));",
            "id": 759
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier) (ERROR (inferred_parameters (identifier))) (ERROR) value: (array_initializer (ERROR (method_invocation name: (identifier) arguments: (argument_list (binary_expression left: (identifier) right: (decimal_integer_literal)))) (array_initializer (ERROR (identifier)) (string_literal (string_fragment)) (ERROR)) (identifier) (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) (array_initializer (ERROR (identifier)) (string_literal (string_fragment)) (ERROR)) (identifier)) (array_initializer (ERROR (identifier)) (string_literal (string_fragment)) (ERROR))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation name: (identifier) arguments: (argument_list (decimal_integer_literal)))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation name: (identifier) arguments: (argument_list (decimal_integer_literal)))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation name: (identifier) arguments: (argument_list (decimal_integer_literal)))))))\n**\n\n--\nscript\n    const determineTrust = (marketCap) => {\n      \n      if (marketCap > 10000000000) {\n        return \"High\";\n      }\n  \n      \n      else if (marketCap >= 500000000 && marketCap < 1000000000) {\n        return \"Medium\";\n      }\n  \n      \n      else {\n        return \"Low\";\n      }\n    };\n    \n    console.log(determineTrust(2348796)); \n    console.log(determineTrust(123456789)); \n    console.log(determineTrust(1000000));\n--\n",
        "text": "6\n\nДля вычисления цикломатической сложности необходимо посчитать количество рёбер в графе потока управления программы.",
        "token_cnt": 567
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class CalculateLowFitness {\n\n    \n    private static final double LOW_FITNESS_BMI_THRESHOLD = 25;\n    \n    public static void main(String[] args) {\n        System.out.println(\"Enter your age (in years): \");\n        int age = Integer.parseInt(ScanneIn.nextLine());\n\n        System.out.println(\"Enter your height (in cm): \");\n        int height = Integer.parseInt(ScannerIn.nextLine());\n        \n        \n        double heightMeters = height / 100d; \n\n        \n        double bmi = weight / Math.pow(heightMeters, 2);\n\n        \n        boolean isBelowThreshold = bmi < LOW_FITNESS_BMI_THRESHOLD;\n\n        \n        if (isAboveThreshold && !privacySettingEnabled) {\n            System.out.println(\"Based on your entered details, you have low fitness.\");\n        } else if (!isAboveThreshold && privacySettingEnabled){\n            System.out.println(\"Due to privacy reasons we cannot disclose this information\");\n        } else {\n            System.out.println(\"Based on your entered details, you have normal fitness.\");\n        }\n    }\n}",
            "id": 760
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (field_declaration (modifiers) type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (identifier) right: (decimal_floating_point_literal)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier) (decimal_integer_literal)))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (identifier) right: (identifier)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (unary_expression operand: (identifier)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (unary_expression operand: (identifier)) right: (identifier))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))))\n**\n\n--\npublic class CalculateLowFitness {\n\n    \n    private static final double LOW_FITNESS_BMI_THRESHOLD = 25;\n    \n    public static void main(String[] args) {\n        System.out.println(\"Enter your age (in years): \");\n        int age = Integer.parseInt(ScanneIn.nextLine());\n\n        System.out.println(\"Enter your height (in cm): \");\n        int height = Integer.parseInt(ScannerIn.nextLine());\n        \n        \n        double heightMeters = height / 100d; \n\n        \n        double bmi = weight / Math.pow(heightMeters, 2);\n\n        \n        boolean isBelowThreshold = bmi < LOW_FITNESS_BMI_THRESHOLD;\n\n        \n        if (isAboveThreshold && !privacySettingEnabled) {\n            System.out.println(\"Based on your entered details, you have low fitness.\");\n        } else if (!isAboveThreshold && privacySettingEnabled){\n            System.out.println(\"Due to privacy reasons we cannot disclose this information\");\n        } else {\n            System.out.println(\"Based on your entered details, you have normal fitness.\");\n        }\n    }\n}\n--\n",
        "text": "34",
        "token_cnt": 1045
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n    \n    function calcLowFoodHygieneRisk(ethic) {\n      let riskLevel;\n  \n      \n      const RISK_LEVELS = [\n        { level: 'low', criteria: ['no violations'] },\n        { level: 'moderate', criteria: ['one minor violation'] },\n        { level: 'high', criteria: ['two or more major violations'] }\n      ];\n  \n      \n      RISK_LEVELS.forEach((levelData) => {\n        if (allCriteriaMet(levelData.criteria)) {\n          riskLevel = levelData.level;\n        }\n      });\n  \n      return getFinalMessage(riskLevel);\n  \n      /**\n       * Returns true if all specified criteria are met, otherwise returns false \n       */\n      function allCriteriaMet(criteria) {\n        return criteria.every((criterion) => {\n          \n          return criterion === 'no violations'; \n        });\n      }\n  \n      /**\n       * Returns final message depending on calculated risk level \n       */\n      function getFinalMessage(riskLevel) {\n        switch (riskLevel) {\n          case 'low':\n            return `No significant food safety issues detected. Process can continue without restrictions.`;\n          case 'moderate':\n            return `Some potential food safety hazards identified. Review process and take appropriate measures to minimize risks.`;\n          default: \n            return `Severe food safety problems found. Immediate action required to prevent contamination and protect public health.`;\n        }\n      }\n    }\n    \n    \n    console.log(calcLowFoodHygieneRisk('minor'));",
            "id": 764
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (ERROR (type_identifier) (variable_declarator name: (identifier) (ERROR) value: (array_initializer (ERROR (identifier)) (character_literal) (ERROR (identifier)) (character_literal) (ERROR)))) (block (labeled_statement (identifier) (ERROR (character_literal) (array_access array: (identifier) (ERROR) index: (character_literal))) (block (labeled_statement (identifier) (ERROR (character_literal)) (expression_statement (array_access array: (identifier) (ERROR) index: (character_literal)) (ERROR))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (inferred_parameters (identifier)) (parenthesized_expression (method_invocation name: (identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (assignment_expression left: (identifier) (ERROR (scoped_type_identifier (type_identifier) (type_identifier)) (identifier) (inferred_parameters (identifier))) (block_comment) (ERROR (type_identifier) (method_invocation name: (identifier) arguments: (argument_list (identifier)))) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (inferred_parameters (identifier))) (binary_expression left: (identifier) (ERROR) right: (character_literal)) (ERROR)))) (MISSING \")\")))))) (block_comment) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (ERROR (inferred_parameters (identifier))) (block (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (character_literal)) (return_statement (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (scoped_type_identifier (type_identifier) (type_identifier)) (identifier) (type_identifier)) (identifier) (ERROR (UNEXPECTED '`')))) (switch_block_statement_group (switch_label (character_literal)) (return_statement (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (scoped_type_identifier (type_identifier) (type_identifier)) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier)) (identifier) (ERROR (UNEXPECTED '`')))) (switch_block_statement_group (switch_label) (return_statement (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier) (scoped_type_identifier (type_identifier) (type_identifier)) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier)) (identifier) (ERROR (UNEXPECTED '`')))))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation name: (identifier) arguments: (argument_list (character_literal)))))) (MISSING \"}\")))\n**\n\n--\nscript\n    \n    function calcLowFoodHygieneRisk(ethic) {\n      let riskLevel;\n  \n      \n      const RISK_LEVELS = [\n        { level: 'low', criteria: ['no violations'] },\n        { level: 'moderate', criteria: ['one minor violation'] },\n        { level: 'high', criteria: ['two or more major violations'] }\n      ];\n  \n      \n      RISK_LEVELS.forEach((levelData) => {\n        if (allCriteriaMet(levelData.criteria)) {\n          riskLevel = levelData.level;\n        }\n      });\n  \n      return getFinalMessage(riskLevel);\n  \n      /**\n       * Returns true if all specified criteria are met, otherwise returns false \n       */\n      function allCriteriaMet(criteria) {\n        return criteria.every((criterion) => {\n          \n          return criterion === 'no violations'; \n        });\n      }\n  \n      /**\n       * Returns final message depending on calculated risk level \n       */\n      function getFinalMessage(riskLevel) {\n        switch (riskLevel) {\n          case 'low':\n            return `No significant food safety issues detected. Process can continue without restrictions.`;\n          case 'moderate':\n            return `Some potential food safety hazards identified. Review process and take appropriate measures to minimize risks.`;\n          default: \n            return `Severe food safety problems found. Immediate action required to prevent contamination and protect public health.`;\n        }\n      }\n    }\n    \n    \n    console.log(calcLowFoodHygieneRisk('minor'));\n--\n",
        "text": "14",
        "token_cnt": 1235
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class HealthDecisions {\n    \n        private static final double TOBACCO_PENALTY = -0.5;\n        private static final int MAX_AGE = 64;\n    \n        /**\n         * Calculates the risk score of a patient based on their lifestyle choices (tobacco use, diet etc.)\n         */\n        public static double calculateRiskScore(boolean smokes, boolean eatsHealthy, int age) {\n            \n            double riskScore = 0;\n        \n            \n            if (smokes) {\n                riskScore += TOBACCO_PENALTY;\n            }\n        \n            if (!eatsHealthy && age > MAX_AGE) {\n                riskScore -= TOBACCO_PENALTY;\n            }\n        \n            return riskScore;\n        }\n    \n        public static void main(String[] args) {\n            System.out.println(\"Dry run:\");\n        \n            \n            boolean smoker = true;\n            boolean healthyEater = false;\n            int age = 62;\n        \n            \n            double riskScore = calculateRiskScore(smoker, healthyEater, age);\n        \n            \n            System.out.printf(\"Risk Score: %.2f\\n\", riskScore);\n        \n            System.out.println(\"\\nActual calculation:\");\n        \n            \n            smoker = false;\n            healthyEater = true;\n            age = 38;\n        \n            \n            riskScore = calculateRiskScore(smoker, healthyEater, age);\n        \n            \n            System.out.printf(\"New Risk Score: %.2f\\n\", riskScore);\n        }\n    \n    }",
            "id": 771
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (field_declaration (modifiers) type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (unary_expression operand: (decimal_floating_point_literal)))) (field_declaration (modifiers) type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (block_comment) (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier)) (formal_parameter type: (boolean_type) name: (identifier)) (formal_parameter type: (integral_type) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (if_statement condition: (condition (identifier)) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (identifier))))) (if_statement condition: (condition (binary_expression left: (unary_expression operand: (identifier)) right: (binary_expression left: (identifier) right: (identifier)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (identifier))))) (return_statement (identifier)))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (true))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier) (identifier))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence)) (identifier)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (escape_sequence) (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (false))) (expression_statement (assignment_expression left: (identifier) right: (true))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (expression_statement (assignment_expression left: (identifier) right: (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier) (identifier))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence)) (identifier)))))))))\n**\n\n--\npublic class HealthDecisions {\n    \n        private static final double TOBACCO_PENALTY = -0.5;\n        private static final int MAX_AGE = 64;\n    \n        /**\n         * Calculates the risk score of a patient based on their lifestyle choices (tobacco use, diet etc.)\n         */\n        public static double calculateRiskScore(boolean smokes, boolean eatsHealthy, int age) {\n            \n            double riskScore = 0;\n        \n            \n            if (smokes) {\n                riskScore += TOBACCO_PENALTY;\n            }\n        \n            if (!eatsHealthy && age > MAX_AGE) {\n                riskScore -= TOBACCO_PENALTY;\n            }\n        \n            return riskScore;\n        }\n    \n        public static void main(String[] args) {\n            System.out.println(\"Dry run:\");\n        \n            \n            boolean smoker = true;\n            boolean healthyEater = false;\n            int age = 62;\n        \n            \n            double riskScore = calculateRiskScore(smoker, healthyEater, age);\n        \n            \n            System.out.printf(\"Risk Score: %.2f\\n\", riskScore);\n        \n            System.out.println(\"\\nActual calculation:\");\n        \n            \n            smoker = false;\n            healthyEater = true;\n            age = 38;\n        \n            \n            riskScore = calculateRiskScore(smoker, healthyEater, age);\n        \n            \n            System.out.printf(\"New Risk Score: %.2f\\n\", riskScore);\n        }\n    \n    }\n--\n",
        "text": "5",
        "token_cnt": 1275
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Was eyelid cleaning done properly?\");\n        String answer = scan.next();\n\n        \n        if (answer.equals(\"Yes\")) {\n            System.out.println(\"Lab Technologist Will Verify Result\");\n        } \n\n        \n        else if (answer.equals(\"No\")){\n            System.out.println(\"Opthamic Technician Will Recheck Step Again.\");\n        }\n        \n        \n        else{\n            System.out.println(\"Invalid Input! Please enter either 'Yes' or 'No'.\");\n        }\n\n    }\n}",
            "id": 772
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Was eyelid cleaning done properly?\");\n        String answer = scan.next();\n\n        \n        if (answer.equals(\"Yes\")) {\n            System.out.println(\"Lab Technologist Will Verify Result\");\n        } \n\n        \n        else if (answer.equals(\"No\")){\n            System.out.println(\"Opthamic Technician Will Recheck Step Again.\");\n        }\n        \n        \n        else{\n            System.out.println(\"Invalid Input! Please enter either 'Yes' or 'No'.\");\n        }\n\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 694
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) {\n        \n        System.out.println(\"Enter starting point of journey\");\n        String start = scan.nextLine();\n        System.out.println(\"Enter destination of journey\");\n        String dest = scan.nextLine();\n\n        \n        double dist = calculateDistance(start,dest);\n        \n        \n        if (dist <=50){\n            System.out.println(\"Low travel mode recommended.\");\n        } else if (dist > 100 && dist<=200){\n            System.out.println(\"Moderate travel mode recommended.\");\n        } else{\n            System.out.println(\"High travel mode recommended.\");\n        }\n        \n    }\n\n    private static double calculateDistance(String start, String dest){\n        \n        return 0; \n    }\n}",
            "id": 776
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))) (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (type_identifier) name: (identifier))) body: (block (return_statement (decimal_integer_literal)))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) {\n        \n        System.out.println(\"Enter starting point of journey\");\n        String start = scan.nextLine();\n        System.out.println(\"Enter destination of journey\");\n        String dest = scan.nextLine();\n\n        \n        double dist = calculateDistance(start,dest);\n        \n        \n        if (dist <=50){\n            System.out.println(\"Low travel mode recommended.\");\n        } else if (dist > 100 && dist<=200){\n            System.out.println(\"Moderate travel mode recommended.\");\n        } else{\n            System.out.println(\"High travel mode recommended.\");\n        }\n        \n    }\n\n    private static double calculateDistance(String start, String dest){\n        \n        return 0; \n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 862
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Etiquette {\n    public static void updateEtiquette(String transparency) {\n        \n        if (transparency == \"Opaque\") {\n            System.out.println(\"Cover mouth when coughing or sneezing.\");\n        } else if (transparency == \"Translucent\" || transparency == \"Transparent\") {\n            System.out.println(\"Cover nose and mouth when coughing or sneezing.\");\n        } else {\n            System.out.println(\"No need to cover face as no transmission possible\");\n        }\n    }\n\n    public static void main(String[] args) {\n        String transparency = \"Translucent\";\n        updateEtiquette(transparency);\n    }\n}",
            "id": 780
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (string_literal (string_fragment))) right: (binary_expression left: (identifier) right: (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier)))))))))\n**\n\n--\npublic class Etiquette {\n    public static void updateEtiquette(String transparency) {\n        \n        if (transparency == \"Opaque\") {\n            System.out.println(\"Cover mouth when coughing or sneezing.\");\n        } else if (transparency == \"Translucent\" || transparency == \"Transparent\") {\n            System.out.println(\"Cover nose and mouth when coughing or sneezing.\");\n        } else {\n            System.out.println(\"No need to cover face as no transmission possible\");\n        }\n    }\n\n    public static void main(String[] args) {\n        String transparency = \"Translucent\";\n        updateEtiquette(transparency);\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 620
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static boolean checkLowFitness(double weight, double height) {\n        \n        \n        /*\n         * Check if either value (weight or height) is below minimum threshold \n         */\n        if (height < MIN_HEIGHT || weight < MIN_WEIGHT) {\n            return true;\n        }\n\n        \n        double bmi = weight / Math.pow(height / 100, 2); \n\n        \n        if (bmi < MIN_BMI) {\n            return true;\n        }\n    \n        return false; \n    }",
            "id": 783
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (floating_point_type) name: (identifier)) (formal_parameter type: (floating_point_type) name: (identifier))) body: (block (block_comment) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (binary_expression left: (identifier) right: (identifier)))) consequence: (block (return_statement (true)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (binary_expression left: (identifier) right: (decimal_integer_literal)) (decimal_integer_literal)))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (identifier))) consequence: (block (return_statement (true)))) (return_statement (false)))))\n**\n\n--\npublic static boolean checkLowFitness(double weight, double height) {\n        \n        \n        /*\n         * Check if either value (weight or height) is below minimum threshold \n         */\n        if (height < MIN_HEIGHT || weight < MIN_WEIGHT) {\n            return true;\n        }\n\n        \n        double bmi = weight / Math.pow(height / 100, 2); \n\n        \n        if (bmi < MIN_BMI) {\n            return true;\n        }\n    \n        return false; \n    }\n--\n",
        "text": "8",
        "token_cnt": 425
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class DisplayEarHygiene {\n\n    public static void main(String[] args) {\n        String consent = getConsent();\n\n        \n        switch (consent){\n            case \"yes\":\n                displayHighEarHygieneTipsForExpert();\n                break;\n\n            case \"no\": \n                System.out.println(\"User declined to provide their consent.\");\n                break;\n                \n            default:\n                System.out.println(\"Invalid input. Please enter 'yes' or 'no'.\");    \n        }\n    }\n\n    private static String getConsent() {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Do you wish to give your consent? (Yes/No): \");\n        return scanner.nextLine().toLowerCase();\n    }\n\n    private static void displayHighEarHygieneTipsForExpert(){\n        System.out.println(\"1.) Wash hands before putting anything into the ear canal.\\n\" +\n                           \"2.) Use a dry, clean cloth or tissue to gently wipe outer ear.\"+\n                           \"\\n3.) Avoid inserting cotton swabs inside the ear canal as they may push \\n\" +\n                           \"wax deeper into the ear and cause damage.\"; \n    }\n}",
            "id": 787
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list)))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))) (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (binary_expression left: (string_literal (string_fragment) (escape_sequence)) right: (string_literal (string_fragment))) right: (string_literal (escape_sequence) (string_fragment) (escape_sequence))) right: (string_literal (string_fragment))) (MISSING \")\")))))))))\n**\n\n--\npublic class DisplayEarHygiene {\n\n    public static void main(String[] args) {\n        String consent = getConsent();\n\n        \n        switch (consent){\n            case \"yes\":\n                displayHighEarHygieneTipsForExpert();\n                break;\n\n            case \"no\": \n                System.out.println(\"User declined to provide their consent.\");\n                break;\n                \n            default:\n                System.out.println(\"Invalid input. Please enter 'yes' or 'no'.\");    \n        }\n    }\n\n    private static String getConsent() {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Do you wish to give your consent? (Yes/No): \");\n        return scanner.nextLine().toLowerCase();\n    }\n\n    private static void displayHighEarHygieneTipsForExpert(){\n        System.out.println(\"1.) Wash hands before putting anything into the ear canal.\\n\" +\n                           \"2.) Use a dry, clean cloth or tissue to gently wipe outer ear.\"+\n                           \"\\n3.) Avoid inserting cotton swabs inside the ear canal as they may push \\n\" +\n                           \"wax deeper into the ear and cause damage.\"; \n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 975
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) {\n        double temperature = 20; \n        double humidity = 65;    \n\n        System.out.println(\"Low Weather Wind Speed Calculator\");\n        System.out.print(\"Enter Temperature (C): \");\n        Scanner scan = new Scanner(System.in);\n        temperature = scan.nextDouble();\n        \n        System.out.print(\"Enter Humidity (%): \");\n        humidity = scan.nextDouble();\n\n        double windSpeed = getWindSpeed(temperature, humidity);\n        System.out.printf(\"The estimated wind speed at %d degrees celsius and \" +\n                \"%d percent relative humidity is %.1f miles per hour.\\n\", \n                temperature, humidity, windSpeed);\n\n    }\n    \n    private static double getWindSpeed(double temp, double humidity){\n        double windSpeed;\n    \n        if((temp >= 40 && temp <= 90) && (humidity < 70)){\n            windSpeed = Math.sqrt(0.3 * 8.314 * ((temp - 32) / 9.0)*(temp - 32));\n        } else{\n            windSpeed = Double.NaN;\n        }\n    \n        return windSpeed;\n    }\n}",
            "id": 791
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (string_literal (string_fragment) (escape_sequence))) (identifier) (identifier) (identifier)))))) (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (floating_point_type) name: (identifier)) (formal_parameter type: (floating_point_type) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) right: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (binary_expression left: (decimal_floating_point_literal) right: (decimal_floating_point_literal)) right: (parenthesized_expression (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal))) right: (decimal_floating_point_literal)))) right: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal))))))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (field_access object: (identifier) field: (identifier)))))) (return_statement (identifier)))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) {\n        double temperature = 20; \n        double humidity = 65;    \n\n        System.out.println(\"Low Weather Wind Speed Calculator\");\n        System.out.print(\"Enter Temperature (C): \");\n        Scanner scan = new Scanner(System.in);\n        temperature = scan.nextDouble();\n        \n        System.out.print(\"Enter Humidity (%): \");\n        humidity = scan.nextDouble();\n\n        double windSpeed = getWindSpeed(temperature, humidity);\n        System.out.printf(\"The estimated wind speed at %d degrees celsius and \" +\n                \"%d percent relative humidity is %.1f miles per hour.\\n\", \n                temperature, humidity, windSpeed);\n\n    }\n    \n    private static double getWindSpeed(double temp, double humidity){\n        double windSpeed;\n    \n        if((temp >= 40 && temp <= 90) && (humidity < 70)){\n            windSpeed = Math.sqrt(0.3 * 8.314 * ((temp - 32) / 9.0)*(temp - 32));\n        } else{\n            windSpeed = Double.NaN;\n        }\n    \n        return windSpeed;\n    }\n}\n--\n",
        "text": "11",
        "token_cnt": 1275
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class UpdateFoodHygiene {\n    public static void main(String[] args) throws Exception{\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter consent status (Y/N): \");\n        String consentStatus = scan.nextLine();\n\n        \n        if (!consentStatus.equals(\"Y\") && !consentStatus.equals(\"N\")) {\n            throw new IllegalArgumentException(\"Invalid Input! Please enter 'Y' or 'N'.\");\n        } \n\n        \n        if (consentStatus.equalsIgnoreCase(\"y\")){ \n            System.out.println(\"Proceed with step 1.\");\n            System.out.println(\"Step 2:\");\n            System.out.println(\"Step 3:\");\n        } else if (consentStatus.equalsIgnoreCase(\"n\")){\n            System.out.println(\"Do not proceed with Step 1.\");\n            System.out.println(\"Instead, follow these steps instead:\")\n            System.out.println(\"Step 4:\");\n            System.out.println(\"Step 5:\");\n        } \n    }\n}",
            "id": 792
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) right: (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) consequence: (block (throw_statement (object_creation_expression type: (type_identifier) arguments: (argument_list (string_literal (string_fragment))))))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (ERROR (identifier)) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))))\n**\n\n--\nimport java.util.*;\npublic class UpdateFoodHygiene {\n    public static void main(String[] args) throws Exception{\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter consent status (Y/N): \");\n        String consentStatus = scan.nextLine();\n\n        \n        if (!consentStatus.equals(\"Y\") && !consentStatus.equals(\"N\")) {\n            throw new IllegalArgumentException(\"Invalid Input! Please enter 'Y' or 'N'.\");\n        } \n\n        \n        if (consentStatus.equalsIgnoreCase(\"y\")){ \n            System.out.println(\"Proceed with step 1.\");\n            System.out.println(\"Step 2:\");\n            System.out.println(\"Step 3:\");\n        } else if (consentStatus.equalsIgnoreCase(\"n\")){\n            System.out.println(\"Do not proceed with Step 1.\");\n            System.out.println(\"Instead, follow these steps instead:\")\n            System.out.println(\"Step 4:\");\n            System.out.println(\"Step 5:\");\n        } \n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 1091
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public boolean checkLowRegHealth(double height, double weight, int age) {\n        \n        final double idealHeight = 170; \n        final double idealWeight = 65; \n        final int minAge = 20;\n\n        /*\n         * Use if else statement to compare individual parameters against their respective thresholds\n         */\n        if (height < idealHeight || weight > idealWeight || age < minAge) {\n            return false;\n        } else {\n            return true;\n        }\n\n    }",
            "id": 797
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (floating_point_type) name: (identifier)) (formal_parameter type: (floating_point_type) name: (identifier)) (formal_parameter type: (integral_type) name: (identifier))) body: (block (local_variable_declaration (modifiers) type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration (modifiers) type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration (modifiers) type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (block_comment) (if_statement condition: (condition (binary_expression left: (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (binary_expression left: (identifier) right: (identifier))) right: (binary_expression left: (identifier) right: (identifier)))) consequence: (block (return_statement (false))) alternative: (block (return_statement (true)))))))\n**\n\n--\npublic boolean checkLowRegHealth(double height, double weight, int age) {\n        \n        final double idealHeight = 170; \n        final double idealWeight = 65; \n        final int minAge = 20;\n\n        /*\n         * Use if else statement to compare individual parameters against their respective thresholds\n         */\n        if (height < idealHeight || weight > idealWeight || age < minAge) {\n            return false;\n        } else {\n            return true;\n        }\n\n    }\n--\n",
        "text": "8",
        "token_cnt": 464
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public void updateExtremeBathingRoutine(boolean expert) {\n        \n        if (expert) {\n            this.waterTemperature = 42;\n\n            System.out.println(\"Choosing the extreme bathing routine for experts.\");\n            System.out.println(\"Water temperature set to \" + this.waterTemperature + \"°C\");\n\n        } else {\n            \n            System.out.print(\"How much do you trust me? [1 - 10]: \");\n            int trustLevel = scan.nextInt();\n\n            \n            switch (trustLevel) {\n                case 1:\n                    this.waterTemperature = 38;\n                    break;\n                case 2:\n                    this.waterTemperature = 39;\n                    break;\n                case 3:\n                    this.waterTemperature = 40;\n                    break;\n                case 4:\n                    this.waterTemperature = 41;\n                    break;\n                case 5:\n                    this.waterTemperature = 42;\n                    break;\n                case 6:\n                    this.waterTemperature = 43;\n                    break;\n                case 7:\n                    this.waterTemperature = 44;\n                    break;\n                case 8:\n                    this.waterTemperature = 45;\n                    break;\n                case 9:\n                    this.waterTemperature = 46;\n                    break;\n                default:\n                    this.waterTemperature = 47;\n                    break;\n            }\n\n            System.out.println(\"Choosing the right water temperature for analysis based on your trust level.\");\n            System.out.println(\"Water temperature set to \" + this.waterTemperature + \"°C\");\n        }\n\n    }",
            "id": 799
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier))) body: (block (if_statement condition: (condition (identifier)) consequence: (block (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (decimal_integer_literal))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (field_access object: (this) field: (identifier))) right: (string_literal (string_fragment))))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (decimal_integer_literal))) (break_statement)) (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (decimal_integer_literal))) (break_statement)) (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (decimal_integer_literal))) (break_statement)) (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (decimal_integer_literal))) (break_statement)) (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (decimal_integer_literal))) (break_statement)) (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (decimal_integer_literal))) (break_statement)) (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (decimal_integer_literal))) (break_statement)) (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (decimal_integer_literal))) (break_statement)) (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (decimal_integer_literal))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (decimal_integer_literal))) (break_statement)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (field_access object: (this) field: (identifier))) right: (string_literal (string_fragment)))))))))))\n**\n\n--\npublic void updateExtremeBathingRoutine(boolean expert) {\n        \n        if (expert) {\n            this.waterTemperature = 42;\n\n            System.out.println(\"Choosing the extreme bathing routine for experts.\");\n            System.out.println(\"Water temperature set to \" + this.waterTemperature + \"°C\");\n\n        } else {\n            \n            System.out.print(\"How much do you trust me? [1 - 10]: \");\n            int trustLevel = scan.nextInt();\n\n            \n            switch (trustLevel) {\n                case 1:\n                    this.waterTemperature = 38;\n                    break;\n                case 2:\n                    this.waterTemperature = 39;\n                    break;\n                case 3:\n                    this.waterTemperature = 40;\n                    break;\n                case 4:\n                    this.waterTemperature = 41;\n                    break;\n                case 5:\n                    this.waterTemperature = 42;\n                    break;\n                case 6:\n                    this.waterTemperature = 43;\n                    break;\n                case 7:\n                    this.waterTemperature = 44;\n                    break;\n                case 8:\n                    this.waterTemperature = 45;\n                    break;\n                case 9:\n                    this.waterTemperature = 46;\n                    break;\n                default:\n                    this.waterTemperature = 47;\n                    break;\n            }\n\n            System.out.println(\"Choosing the right water temperature for analysis based on your trust level.\");\n            System.out.println(\"Water temperature set to \" + this.waterTemperature + \"°C\");\n        }\n\n    }\n--\n",
        "text": "25",
        "token_cnt": 1494
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "class Exercise {\n    private String name;\n    private int numSets;\n    private int repsPerSet;\n    private boolean isRestDay;\n    \n    public Exercise(String name, int numSets, int repsPerSet, boolean isRestDay){\n        this.name = name;\n        this.numSets = numSets;\n        this.repsPerSet = repsPerSet;\n        this.isRestDay = isRestDay;\n    }\n\n    \n}",
            "id": 803
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration name: (identifier) body: (class_body (field_declaration (modifiers) type: (type_identifier) declarator: (variable_declarator name: (identifier))) (field_declaration (modifiers) type: (integral_type) declarator: (variable_declarator name: (identifier))) (field_declaration (modifiers) type: (integral_type) declarator: (variable_declarator name: (identifier))) (field_declaration (modifiers) type: (boolean_type) declarator: (variable_declarator name: (identifier))) (constructor_declaration (modifiers) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (integral_type) name: (identifier)) (formal_parameter type: (integral_type) name: (identifier)) (formal_parameter type: (boolean_type) name: (identifier))) body: (constructor_body (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (identifier))) (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (identifier))) (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (identifier))) (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (identifier))))))))\n**\n\n--\nclass Exercise {\n    private String name;\n    private int numSets;\n    private int repsPerSet;\n    private boolean isRestDay;\n    \n    public Exercise(String name, int numSets, int repsPerSet, boolean isRestDay){\n        this.name = name;\n        this.numSets = numSets;\n        this.repsPerSet = repsPerSet;\n        this.isRestDay = isRestDay;\n    }\n\n    \n}\n--\n",
        "text": "6\n\nОбъяснение: цикломатическая сложность — это количество различных путей выполнения программы через все возможные пути",
        "token_cnt": 491
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class CalculatingLowNailsCuticle {\n\n    public static void main(String[] args) {\n        \n        double transparent =0;\n        int totalPixels=1256*784;\n\n        System.out.println(\"Percentage of Skin area covered by transparent Pixels:\"+((transparent/(double)(totalPixels))*100));\n        \n        \n\n        /*int percentTransparent = (int)((transparent / (double) totalPixels) * 100);\n        switch (percentTransparent){\n            case less than 3%:{\n                System.out.println(\"The level of dryness is mild.\");\n                break;\n            }\n\n            case between 3% to  9 %:{\n                System.out.println(\"The level of dryness is moderate\");\n                break;\n            }\n\n            default:{\n                System.out.println(\"The level of dryness is severe \");\n                break;\n            }\n        }*/\n    }\n}",
            "id": 804
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (decimal_integer_literal) right: (decimal_integer_literal)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (parenthesized_expression (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (cast_expression type: (floating_point_type) value: (parenthesized_expression (identifier))))) right: (decimal_integer_literal))))))) (block_comment))))))\n**\n\n--\npublic class CalculatingLowNailsCuticle {\n\n    public static void main(String[] args) {\n        \n        double transparent =0;\n        int totalPixels=1256*784;\n\n        System.out.println(\"Percentage of Skin area covered by transparent Pixels:\"+((transparent/(double)(totalPixels))*100));\n        \n        \n\n        /*int percentTransparent = (int)((transparent / (double) totalPixels) * 100);\n        switch (percentTransparent){\n            case less than 3%:{\n                System.out.println(\"The level of dryness is mild.\");\n                break;\n            }\n\n            case between 3% to  9 %:{\n                System.out.println(\"The level of dryness is moderate\");\n                break;\n            }\n\n            default:{\n                System.out.println(\"The level of dryness is severe \");\n                break;\n            }\n        }*/\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 552
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static boolean checkHighSocialMediaUserEngagement(String platform){\n    \n    double averageTimeSpentOnPlatform;\n    int numberOfUsers;\n    \n    \n    if (platform == \"facebook\") {\n        averageTimeSpentOnPlatform = 200; \n        numberOfUsers = 50000000; \n    } else if (platform == \"instagram\"){\n        averageTimeSpentOnPlatform = 60; \n        numberOfUsers = 1300000000; \n    } else if (platform == \"tiktok\") {\n        averageTimeSpentOnPlatform = 45; \n        numberOfUsers = 870000000; \n    } else {\n        return false; \n    }\n\n    \n    long totalTimeSpentOnPlatform = (long)numberOfUsers * averageTimeSpentOnPlatform; \n\n    \n    if ((totalTimeSpentOnPlatform >= 90 && totalTimeSpentOnPlatform <= 120) || \n            (totalTimeSpentOnPlatform >= 300 && totalTimeSpentOnPlatform <= 450)) {\n        return true; \n    } else {\n        return false; \n    }\n}",
            "id": 806
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (block (return_statement (false)))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (cast_expression type: (integral_type) value: (identifier)) right: (identifier)))) (if_statement condition: (condition (binary_expression left: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) right: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))))) consequence: (block (return_statement (true))) alternative: (block (return_statement (false)))))))\n**\n\n--\npublic static boolean checkHighSocialMediaUserEngagement(String platform){\n    \n    double averageTimeSpentOnPlatform;\n    int numberOfUsers;\n    \n    \n    if (platform == \"facebook\") {\n        averageTimeSpentOnPlatform = 200; \n        numberOfUsers = 50000000; \n    } else if (platform == \"instagram\"){\n        averageTimeSpentOnPlatform = 60; \n        numberOfUsers = 1300000000; \n    } else if (platform == \"tiktok\") {\n        averageTimeSpentOnPlatform = 45; \n        numberOfUsers = 870000000; \n    } else {\n        return false; \n    }\n\n    \n    long totalTimeSpentOnPlatform = (long)numberOfUsers * averageTimeSpentOnPlatform; \n\n    \n    if ((totalTimeSpentOnPlatform >= 90 && totalTimeSpentOnPlatform <= 120) || \n            (totalTimeSpentOnPlatform >= 300 && totalTimeSpentOnPlatform <= 450)) {\n        return true; \n    } else {\n        return false; \n    }\n}\n--\n",
        "text": "31",
        "token_cnt": 872
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public String getBathingRoutine(String gender, int age) {\n    \n    String consent = \"No\";\n    \n    \n    if (gender == \"Male\") {\n        if (age >= 18 && age <= 65) {\n            consent = \"Yes\"; \n        } else { \n            System.out.println(\"Age does not meet criteria\");    \n        }\n    } else if (gender == \"Female\"){\n        if (age >= 19 && age < 70) {\n            consent = \"Yes\"; \n        } else { \n            System.out.println(\"Age does not meet criteria\");    \n        }\n    } else {\n        System.out.println(\"Invalid Gender entered.\");    \n    }\n\n    \n    switch (consent){\n        case \"Yes\":\n            return \"Low Bathing Routine - Choosing The Right Water Temperature For Analysis:\\n\" +\n                \"\\tFor Male adults between 18 and 64 years old,\\n\" + \n                \"\\tThe ideal shower temperature range is between 37°C (98.6°F)\\nand 42°C (107.6°F).\\n\\n\"+\n                \"\\tFor Female Adults between 19 and 69 year old,\\n\" + \n                \"\\tThe ideal shower temperature range is between 35°C (95°F)\\nand 41°C (106°F).\";\n        default:\n            return \"User did not provide consent.\";\n    }\n}",
            "id": 808
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (integral_type) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (return_statement (binary_expression left: (binary_expression left: (binary_expression left: (binary_expression left: (string_literal (string_fragment) (escape_sequence)) right: (string_literal (escape_sequence) (string_fragment) (escape_sequence))) right: (string_literal (escape_sequence) (string_fragment) (escape_sequence) (string_fragment) (escape_sequence) (escape_sequence))) right: (string_literal (escape_sequence) (string_fragment) (escape_sequence))) right: (string_literal (escape_sequence) (string_fragment) (escape_sequence) (string_fragment))))) (switch_block_statement_group (switch_label) (return_statement (string_literal (string_fragment)))))))))\n**\n\n--\npublic String getBathingRoutine(String gender, int age) {\n    \n    String consent = \"No\";\n    \n    \n    if (gender == \"Male\") {\n        if (age >= 18 && age <= 65) {\n            consent = \"Yes\"; \n        } else { \n            System.out.println(\"Age does not meet criteria\");    \n        }\n    } else if (gender == \"Female\"){\n        if (age >= 19 && age < 70) {\n            consent = \"Yes\"; \n        } else { \n            System.out.println(\"Age does not meet criteria\");    \n        }\n    } else {\n        System.out.println(\"Invalid Gender entered.\");    \n    }\n\n    \n    switch (consent){\n        case \"Yes\":\n            return \"Low Bathing Routine - Choosing The Right Water Temperature For Analysis:\\n\" +\n                \"\\tFor Male adults between 18 and 64 years old,\\n\" + \n                \"\\tThe ideal shower temperature range is between 37°C (98.6°F)\\nand 42°C (107.6°F).\\n\\n\"+\n                \"\\tFor Female Adults between 19 and 69 year old,\\n\" + \n                \"\\tThe ideal shower temperature range is between 35°C (95°F)\\nand 41°C (106°F).\";\n        default:\n            return \"User did not provide consent.\";\n    }\n}\n--\n",
        "text": "5",
        "token_cnt": 1086
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\nfunction determineLowFootCare(trust) {\n  \n  if (typeof trust !== 'number') return \"Invalid input\";\n\n  \n  if (trust <= 0) \n    return \"User has indicated they do not fully trust this information.\"\n  \n  \n  else if (trust > 0 && trust < 4)\n    console.log(\"Recommend thoroughly reviewing all content before use.\")\n    \n  \n  else if (trust >= 4 && trust < 7)\n    console.log(\"Suggest double checking some details but overall believability seems high\")\n      \n  \n  else \n    console.log(`Extreme confidence! No need to verify any facts`)  \n}",
            "id": 810
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (if_statement condition: (condition (ERROR (type_identifier)) (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (return_statement (string_literal (string_fragment)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (return_statement (string_literal (string_fragment)) (MISSING \";\"))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation object: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) (ERROR (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\")) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation object: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) (ERROR (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\")) (local_variable_declaration type: (type_identifier) (ERROR (identifier) (identifier) (UNEXPECTED '`') (identifier) (identifier)) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (ERROR (type_identifier) (identifier) (identifier) (UNEXPECTED '`'))))\n**\n\n--\nscript\nfunction determineLowFootCare(trust) {\n  \n  if (typeof trust !== 'number') return \"Invalid input\";\n\n  \n  if (trust <= 0) \n    return \"User has indicated they do not fully trust this information.\"\n  \n  \n  else if (trust > 0 && trust < 4)\n    console.log(\"Recommend thoroughly reviewing all content before use.\")\n    \n  \n  else if (trust >= 4 && trust < 7)\n    console.log(\"Suggest double checking some details but overall believability seems high\")\n      \n  \n  else \n    console.log(`Extreme confidence! No need to verify any facts`)  \n}\n--\n",
        "text": "6",
        "token_cnt": 707
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) {\n        \n        System.out.println(\"Low Bathing Routine:\");\n\n        int temp = 10; \n\n        if (temp < 45){\n            System.out.print(\"Shower\\n\");\n        } else if ((temp >= 46 && temp <= 95)){ \n            System.out.print(\"Bathe\\n\");\n        } else{\n            System.out.print(\"Spa Treatment\\n\");    \n        } \n    }\n}",
            "id": 811
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence)))))) alternative: (if_statement condition: (condition (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence)))))))))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) {\n        \n        System.out.println(\"Low Bathing Routine:\");\n\n        int temp = 10; \n\n        if (temp < 45){\n            System.out.print(\"Shower\\n\");\n        } else if ((temp >= 46 && temp <= 95)){ \n            System.out.print(\"Bathe\\n\");\n        } else{\n            System.out.print(\"Spa Treatment\\n\");    \n        } \n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 579
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public enum SoilLevel {\n        NOT_AT_ALL(\"Not At All Dirty\"), LIGHTLY_DIRTY(\"Lightly Dirty\"), MODERATELY_DIRTY(\"Moderately Dirty\"), \n        HEAVILY_DIRTY(\"Heavily Dirty\"), EXTREMELY_DIRTY(\"Extremely Filthy\");\n\n        private final String description;\n    \n        SoilLevel(String desc){\n            this.description =desc;\n        }\n        \n        @Override\n        public String toString(){\n            return description;\n        }\n    }\n\n    \n    public static void main(String[] args) {\n        int dirtiness = Integer.parseInt(args[0]);\n        System.out.println(\"Soiled Level : \"+ dirtiness);\n        SoilLevel sl=null;\n        if(dirtiness>=2 && dirtiness<=3){\n           sl=SoilLevel.MODERATELY_DIRTY;\n        }else if(dirtiness==1 || dirtiness ==0){\n          sl=SoilLevel.NOT_AT_ALL;\n        }else{\n          sl=SoilLevel.EXTREMELY_DIRTY;\n        }\n        System.out.println(\"Dry Cleaning Process:\"+sl);\n      }",
            "id": 812
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (enum_declaration (modifiers) name: (identifier) body: (enum_body (enum_constant name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (enum_constant name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (enum_constant name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (enum_constant name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (enum_constant name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (enum_body_declarations (field_declaration (modifiers) type: (type_identifier) declarator: (variable_declarator name: (identifier))) (constructor_declaration name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (constructor_body (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (identifier))))) (method_declaration (modifiers (marker_annotation name: (identifier))) type: (type_identifier) name: (identifier) parameters: (formal_parameters) body: (block (return_statement (identifier))))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (null_literal))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (field_access object: (identifier) field: (identifier))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (field_access object: (identifier) field: (identifier))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (field_access object: (identifier) field: (identifier))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))))\n**\n\n--\npublic enum SoilLevel {\n        NOT_AT_ALL(\"Not At All Dirty\"), LIGHTLY_DIRTY(\"Lightly Dirty\"), MODERATELY_DIRTY(\"Moderately Dirty\"), \n        HEAVILY_DIRTY(\"Heavily Dirty\"), EXTREMELY_DIRTY(\"Extremely Filthy\");\n\n        private final String description;\n    \n        SoilLevel(String desc){\n            this.description =desc;\n        }\n        \n        @Override\n        public String toString(){\n            return description;\n        }\n    }\n\n    \n    public static void main(String[] args) {\n        int dirtiness = Integer.parseInt(args[0]);\n        System.out.println(\"Soiled Level : \"+ dirtiness);\n        SoilLevel sl=null;\n        if(dirtiness>=2 && dirtiness<=3){\n           sl=SoilLevel.MODERATELY_DIRTY;\n        }else if(dirtiness==1 || dirtiness ==0){\n          sl=SoilLevel.NOT_AT_ALL;\n        }else{\n          sl=SoilLevel.EXTREMELY_DIRTY;\n        }\n        System.out.println(\"Dry Cleaning Process:\"+sl);\n      }\n--\n",
        "text": "6",
        "token_cnt": 1080
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script \n\nconsole.log(\"LowHygiene updated successfully!\");\n\n \nconst roles = {\n    cleaner: \"Cleaner\", \n    cook: \"Cook\", \n    supervisor: \"Supervisor\"\n};\n\n\nconst reasons = {\n    dirtyUtensil: \"Dirty utensil found!\", \n    unwashedHands: \"Unwashed hands detected!\", \n    lackOfSanitizer: \"Lack of sanitizer observed!\"\n}\n\n\nfunction updateLowHygiene(responsibility, reason){\n    console.log(`Updating low hygiene record due to ${reason}`);\n\n    \n    \n    return true; \n}\n\n\nfunction main(){\n    const role = getRole(); \n    const reason = getReason(); \n\n    const result = updateLowHygiene(role, reason); \n\n    printResult(result); \n}\n\nmain();",
            "id": 814
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (ERROR (type_identifier) (identifier) (ERROR (identifier))) (expression_statement (string_literal (string_fragment)) (ERROR)) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (array_initializer (ERROR (identifier)) (string_literal (string_fragment)) (ERROR (identifier)) (string_literal (string_fragment)) (ERROR (identifier)) (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (array_initializer (ERROR (identifier)) (string_literal (string_fragment)) (ERROR (identifier)) (string_literal (string_fragment)) (ERROR (identifier)) (string_literal (string_fragment)))) (MISSING \";\")) (method_declaration type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) (ERROR) name: (identifier))) body: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (type_identifier) (identifier)) (identifier) (ERROR (identifier) (UNEXPECTED '`'))))) (return_statement (true)))) (method_declaration type: (type_identifier) name: (identifier) parameters: (formal_parameters) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier)))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list))))\n**\n\n--\nscript \n\nconsole.log(\"LowHygiene updated successfully!\");\n\n \nconst roles = {\n    cleaner: \"Cleaner\", \n    cook: \"Cook\", \n    supervisor: \"Supervisor\"\n};\n\n\nconst reasons = {\n    dirtyUtensil: \"Dirty utensil found!\", \n    unwashedHands: \"Unwashed hands detected!\", \n    lackOfSanitizer: \"Lack of sanitizer observed!\"\n}\n\n\nfunction updateLowHygiene(responsibility, reason){\n    console.log(`Updating low hygiene record due to ${reason}`);\n\n    \n    \n    return true; \n}\n\n\nfunction main(){\n    const role = getRole(); \n    const reason = getReason(); \n\n    const result = updateLowHygiene(role, reason); \n\n    printResult(result); \n}\n\nmain();\n--\n",
        "text": "8",
        "token_cnt": 771
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public boolean checkExtremeEarHygiene(boolean trust) {\n        \n        if (trust == true) {\n            return true;\n        }\n    \n        \n        System.out.println(\"WARNING: Using cotton swabs can cause damage to the ear canal \"\n                + \"and increase the risk of infection.\");\n    \n        \n        return false;\n    }",
            "id": 817
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier))) body: (block (if_statement condition: (condition (binary_expression left: (identifier) right: (true))) consequence: (block (return_statement (true)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (string_literal (string_fragment)))))) (return_statement (false)))))\n**\n\n--\npublic boolean checkExtremeEarHygiene(boolean trust) {\n        \n        if (trust == true) {\n            return true;\n        }\n    \n        \n        System.out.println(\"WARNING: Using cotton swabs can cause damage to the ear canal \"\n                + \"and increase the risk of infection.\");\n    \n        \n        return false;\n    }\n--\n",
        "text": "5\n\nОбъяснение:\nВ приведённом фрагменте кода содержится 5 блоков, которые",
        "token_cnt": 272
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public void updateExtremeSecurityBias(String input) {\n        \n        boolean hasCyber = input.contains(\"cyber\");\n\n        \n        boolean hasAnalysis = input.contains(\"analysis\");\n\n        \n        String newBias;\n        if (hasCyber && hasAnalysis) {\n            newBias = \"High\";\n        } else if (!hasCyber && !hasAnalysis) {\n            newBias = \"Low\";\n        } else {\n            newBias = \"Medium\";\n        }\n\n        \n        this.extremeSecurityBias = newBias;\n    }",
            "id": 821
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (identifier))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (unary_expression operand: (identifier)) right: (unary_expression operand: (identifier)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))))) (expression_statement (assignment_expression left: (field_access object: (this) field: (identifier)) right: (identifier))))))\n**\n\n--\npublic void updateExtremeSecurityBias(String input) {\n        \n        boolean hasCyber = input.contains(\"cyber\");\n\n        \n        boolean hasAnalysis = input.contains(\"analysis\");\n\n        \n        String newBias;\n        if (hasCyber && hasAnalysis) {\n            newBias = \"High\";\n        } else if (!hasCyber && !hasAnalysis) {\n            newBias = \"Low\";\n        } else {\n            newBias = \"Medium\";\n        }\n\n        \n        this.extremeSecurityBias = newBias;\n    }\n--\n",
        "text": "6\n\nОбъяснение:\nВ приведённом фрагменте кода 6 путей, по которым",
        "token_cnt": 532
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public String getExamResult(String candidateName, int score) {\n    \n    String resultMessage = \"\";\n\n    \n    if (candidateName == null || candidateName.isEmpty()) {\n        resultMessage = \"Invalid input - Candidate Name cannot be blank\";\n    } \n    \n    else if (score > 80) {\n        resultMessage = \"Congratulations \" + candidateName + \", you passed the test with flying colors!\";\n    } \n    \n    else if (score >= 65 && score <= 80) {\n        resultMessage = \"Well done \" + candidateName + \", you've scored well enough to pass but need to try harder next time.\";\n    } \n    \n    else {\n        resultMessage = \"Sorry \" + candidateName + \", you didn't perform up to standard. Please retake the test until you succeed.\";\n    }\n\n    return resultMessage;\n}",
            "id": 824
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (integral_type) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (null_literal)) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment)))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment))))))))) (return_statement (identifier)))))\n**\n\n--\npublic String getExamResult(String candidateName, int score) {\n    \n    String resultMessage = \"\";\n\n    \n    if (candidateName == null || candidateName.isEmpty()) {\n        resultMessage = \"Invalid input - Candidate Name cannot be blank\";\n    } \n    \n    else if (score > 80) {\n        resultMessage = \"Congratulations \" + candidateName + \", you passed the test with flying colors!\";\n    } \n    \n    else if (score >= 65 && score <= 80) {\n        resultMessage = \"Well done \" + candidateName + \", you've scored well enough to pass but need to try harder next time.\";\n    } \n    \n    else {\n        resultMessage = \"Sorry \" + candidateName + \", you didn't perform up to standard. Please retake the test until you succeed.\";\n    }\n\n    return resultMessage;\n}\n--\n",
        "text": "4",
        "token_cnt": 684
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class AccessControl {\n    \n        private static final Map<String, Integer> ACCESS_LEVELS = new HashMap<>();\n        static {\n            \n            ACCESS_LEVELS.put(\"guest\", 0);\n            ACCESS_levels.put(\"user\", 1);\n            ACCESS_LEVELS.put(\"admin\", 2);\n            ACCESS_LEVELS.put(\"engineer\", 3);\n        }\n    \n        /**\n         * Check if user has required access level\n         */\n        public boolean hasAccess(String username, String resource, int requiredLevel) {\n        \n            \n            int currentUserLevel = ACCESS_LEVELS.getOrDefault(username, -1);\n    \n            \n            if (currentUserLevel == -1) return false;\n            \n            \n            if (!ACCESS_CONTROLLED_RESOURCES.contains(resource))\n                return true;\n                \n            \n            if (requiredLevel <= currentUserLevel) \n                return true;\n                \n            else return false;\n        }\n    \n    }",
            "id": 825
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (field_declaration (modifiers) type: (generic_type (type_identifier) (type_arguments (type_identifier) (type_identifier))) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (generic_type (type_identifier) (type_arguments)) arguments: (argument_list)))) (static_initializer (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (decimal_integer_literal)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (decimal_integer_literal)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (decimal_integer_literal)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (decimal_integer_literal)))))) (block_comment) (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (integral_type) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier) (unary_expression operand: (decimal_integer_literal)))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (unary_expression operand: (decimal_integer_literal)))) consequence: (return_statement (false))) (if_statement condition: (condition (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))) consequence: (return_statement (true))) (if_statement condition: (condition (binary_expression left: (identifier) right: (identifier))) consequence: (return_statement (true)) alternative: (return_statement (false))))))))\n**\n\n--\npublic class AccessControl {\n    \n        private static final Map<String, Integer> ACCESS_LEVELS = new HashMap<>();\n        static {\n            \n            ACCESS_LEVELS.put(\"guest\", 0);\n            ACCESS_levels.put(\"user\", 1);\n            ACCESS_LEVELS.put(\"admin\", 2);\n            ACCESS_LEVELS.put(\"engineer\", 3);\n        }\n    \n        /**\n         * Check if user has required access level\n         */\n        public boolean hasAccess(String username, String resource, int requiredLevel) {\n        \n            \n            int currentUserLevel = ACCESS_LEVELS.getOrDefault(username, -1);\n    \n            \n            if (currentUserLevel == -1) return false;\n            \n            \n            if (!ACCESS_CONTROLLED_RESOURCES.contains(resource))\n                return true;\n                \n            \n            if (requiredLevel <= currentUserLevel) \n                return true;\n                \n            else return false;\n        }\n    \n    }\n--\n",
        "text": "6\n\nОбъяснение:\n\nЦикломатическая сложность — это мера сложности программного кода, которая",
        "token_cnt": 825
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public int calculateExtremeRegularHealthCheckUps(double age, double height, double weight) {\n    \n    final double BMI_THRESHOLD = 25; \n    final double BP_SystolicThreshold = 130; \n    final double BP_DiastolicThreshold = 80; \n\n    \n    boolean bmiStatus = false; \n    boolean bpStatus = false; \n    int totalCheckUps = 0; \n\n    \n    if (age >= 20 && age <= 64) { \n        if (weight / Math.pow((height / 100), 2)) < BMI_THRESHOLD) \n            bmiStatus = true; \n    } else if (age > 64 || age < 20){\n        if ((age - 5 * (Math.log10(height))) + weight < BMI_THRESHOLD)\n            bmiStatus = true; \n    }\n\n    \n    if (BP_SystolicThreshold <= BP_DiastolicThreshold) { \n        if (bloodPressure() < BP_SystolicThreshold) \n            bpStatus = true; \n    } else { \n        if (bloodPressure() < BP_DiastolicThreshold || bloodPressure() > BP_SystolicThreshold) \n            bpStatus = true; \n    }\n\n    \n    if (bmiStatus == true) \n        totalCheckUps++; \n    if (bpStatus == true) \n        totalCheckUps++; \n\n    return totalCheckUps; \n}\n\n\nprivate static double bloodPressure(){\n   \n   return 120 + rand.nextInt(9); \n}",
            "id": 831
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (floating_point_type) name: (identifier)) (formal_parameter type: (floating_point_type) name: (identifier)) (formal_parameter type: (floating_point_type) name: (identifier))) body: (block (local_variable_declaration (modifiers) type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration (modifiers) type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration (modifiers) type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (if_statement condition: (condition (binary_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal))) (decimal_integer_literal))))) (ERROR) consequence: (local_variable_declaration type: (type_identifier) (ERROR) declarator: (variable_declarator name: (identifier) value: (true))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (if_statement condition: (condition (binary_expression left: (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (binary_expression left: (decimal_integer_literal) right: (parenthesized_expression (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))))) right: (identifier)) right: (identifier))) consequence: (expression_statement (assignment_expression left: (identifier) right: (true))))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (identifier))) consequence: (block (if_statement condition: (condition (binary_expression left: (method_invocation name: (identifier) arguments: (argument_list)) right: (identifier))) consequence: (expression_statement (assignment_expression left: (identifier) right: (true))))) alternative: (block (if_statement condition: (condition (binary_expression left: (binary_expression left: (method_invocation name: (identifier) arguments: (argument_list)) right: (identifier)) right: (binary_expression left: (method_invocation name: (identifier) arguments: (argument_list)) right: (identifier)))) consequence: (expression_statement (assignment_expression left: (identifier) right: (true)))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (true))) consequence: (expression_statement (update_expression (identifier)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (true))) consequence: (expression_statement (update_expression (identifier)))) (return_statement (identifier)))) (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters) body: (block (return_statement (binary_expression left: (decimal_integer_literal) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (decimal_integer_literal))))))))\n**\n\n--\npublic int calculateExtremeRegularHealthCheckUps(double age, double height, double weight) {\n    \n    final double BMI_THRESHOLD = 25; \n    final double BP_SystolicThreshold = 130; \n    final double BP_DiastolicThreshold = 80; \n\n    \n    boolean bmiStatus = false; \n    boolean bpStatus = false; \n    int totalCheckUps = 0; \n\n    \n    if (age >= 20 && age <= 64) { \n        if (weight / Math.pow((height / 100), 2)) < BMI_THRESHOLD) \n            bmiStatus = true; \n    } else if (age > 64 || age < 20){\n        if ((age - 5 * (Math.log10(height))) + weight < BMI_THRESHOLD)\n            bmiStatus = true; \n    }\n\n    \n    if (BP_SystolicThreshold <= BP_DiastolicThreshold) { \n        if (bloodPressure() < BP_SystolicThreshold) \n            bpStatus = true; \n    } else { \n        if (bloodPressure() < BP_DiastolicThreshold || bloodPressure() > BP_SystolicThreshold) \n            bpStatus = true; \n    }\n\n    \n    if (bmiStatus == true) \n        totalCheckUps++; \n    if (bpStatus == true) \n        totalCheckUps++; \n\n    return totalCheckUps; \n}\n\n\nprivate static double bloodPressure(){\n   \n   return 120 + rand.nextInt(9); \n}\n--\n",
        "text": "31",
        "token_cnt": 1413
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public String transformLowSecurity(String input) {\n        \n        String output = \"\";\n\n        \n        if (input != null && !input.isEmpty()) {\n            \n            boolean transformed = false;\n\n            \n            for (int i = 0; i < 4; i++) {\n                \n                int transparencyLevel = i + 1;\n\n                \n                if (transparencyLevel >= 3) {\n                    \n                    transformed = true;\n\n                    \n                    break;\n                }\n            }\n\n            \n            if (!transformed) {\n                output = \"No transformations applied\";\n            } else {\n                \n                StringBuilder sb = new StringBuilder();\n                sb.append(\"Transformed from \");\n                sb.append(input);\n                sb.append(\" to Level \");\n                sb.append(transparencyLevel);\n                output = sb.toString();\n            }\n        } else {\n            \n            output = \"Invalid input provided\";\n        }\n        \n        \n        return \"\n               \"\n               \"\n               output;\n    }",
            "id": 832
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (null_literal)) right: (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))))) consequence: (block (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (for_statement init: (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) condition: (binary_expression left: (identifier) right: (decimal_integer_literal)) update: (update_expression (identifier)) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (identifier) right: (decimal_integer_literal)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true))) (break_statement))))) (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))) (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))))) (return_statement (ERROR (string_literal (string_fragment))) (identifier)))))\n**\n\n--\npublic String transformLowSecurity(String input) {\n        \n        String output = \"\";\n\n        \n        if (input != null && !input.isEmpty()) {\n            \n            boolean transformed = false;\n\n            \n            for (int i = 0; i < 4; i++) {\n                \n                int transparencyLevel = i + 1;\n\n                \n                if (transparencyLevel >= 3) {\n                    \n                    transformed = true;\n\n                    \n                    break;\n                }\n            }\n\n            \n            if (!transformed) {\n                output = \"No transformations applied\";\n            } else {\n                \n                StringBuilder sb = new StringBuilder();\n                sb.append(\"Transformed from \");\n                sb.append(input);\n                sb.append(\" to Level \");\n                sb.append(transparencyLevel);\n                output = sb.toString();\n            }\n        } else {\n            \n            output = \"Invalid input provided\";\n        }\n        \n        \n        return \"\n               \"\n               \"\n               output;\n    }\n--\n",
        "text": "8",
        "token_cnt": 946
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Transform {\n\n    public String extremeNailCare(String consent) throws Exception{\n        \n        if (consent == null || consent.isEmpty())\n            throw new IllegalArgumentException(\"Invalid argument - missing or empty 'consent'.\");\n\n        \n        switch (consent){\n            case \"yes\":\n                return performExtremeNailCare();\n                \n            case \"no\":\n                return noConsentTransform();\n\n            default: \n                throw new IllegalStateException(\"Unexpected value: '\" + consent + \"'\");    \n        }\n    }\n    \n    private String performExtremeNailCare() throws Exception {\n        System.out.println(\"Applying intense nourishment & strengthening treatment.\");\n        Thread.sleep(5000);\n        System.out.println(\"Finished applying extreme nailcare procedure.\");\n        return \"Success\"; \n    }\n\n    private String noConsentTransform(){\n        System.out.println(\"No consent provided. Skipping this step.\");\n        return \"Skipped\";    \n    }\n    \n}",
            "id": 836
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) (throws (type_identifier)) body: (block (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (null_literal)) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) consequence: (throw_statement (object_creation_expression type: (type_identifier) arguments: (argument_list (string_literal (string_fragment)))))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (return_statement (method_invocation name: (identifier) arguments: (argument_list)))) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (return_statement (method_invocation name: (identifier) arguments: (argument_list)))) (switch_block_statement_group (switch_label) (throw_statement (object_creation_expression type: (type_identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment))))))))))) (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters) (throws (type_identifier)) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (decimal_integer_literal)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement (string_literal (string_fragment))))) (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement (string_literal (string_fragment))))))))\n**\n\n--\npublic class Transform {\n\n    public String extremeNailCare(String consent) throws Exception{\n        \n        if (consent == null || consent.isEmpty())\n            throw new IllegalArgumentException(\"Invalid argument - missing or empty 'consent'.\");\n\n        \n        switch (consent){\n            case \"yes\":\n                return performExtremeNailCare();\n                \n            case \"no\":\n                return noConsentTransform();\n\n            default: \n                throw new IllegalStateException(\"Unexpected value: '\" + consent + \"'\");    \n        }\n    }\n    \n    private String performExtremeNailCare() throws Exception {\n        System.out.println(\"Applying intense nourishment & strengthening treatment.\");\n        Thread.sleep(5000);\n        System.out.println(\"Finished applying extreme nailcare procedure.\");\n        return \"Success\"; \n    }\n\n    private String noConsentTransform(){\n        System.out.println(\"No consent provided. Skipping this step.\");\n        return \"Skipped\";    \n    }\n    \n}\n--\n",
        "text": "31",
        "token_cnt": 873
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public boolean determineHighFoodHygiene(String foodType, String storageMethod) {\n    \n    double temperature = 0;\n    int time = 0;\n\n    \n    if (foodType == \"meat\") {\n        \n        if (storageMethod == \"refrigeration\") {\n            \n            temperature = 41F;\n            time = 2;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n    \n    \n    double logReductionValue = Math.log((Math.pow(10,6)) / ((time * 86400) + (temperature - 41)));\n\n    \n    return logReductionValue >= 3;\n}",
            "id": 842
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_floating_point_literal))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (block (return_statement (false))))) alternative: (block (return_statement (false)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (binary_expression left: (parenthesized_expression (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (decimal_integer_literal) (decimal_integer_literal)))) right: (parenthesized_expression (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal))) right: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal)))))))))) (return_statement (binary_expression left: (identifier) right: (decimal_integer_literal))))))\n**\n\n--\npublic boolean determineHighFoodHygiene(String foodType, String storageMethod) {\n    \n    double temperature = 0;\n    int time = 0;\n\n    \n    if (foodType == \"meat\") {\n        \n        if (storageMethod == \"refrigeration\") {\n            \n            temperature = 41F;\n            time = 2;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n    \n    \n    double logReductionValue = Math.log((Math.pow(10,6)) / ((time * 86400) + (temperature - 41)));\n\n    \n    return logReductionValue >= 3;\n}\n--\n",
        "text": "5\nДля вычисления цикломатической сложности необходимо учесть все пути через код, которые могут быть пройдены",
        "token_cnt": 665
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class CalculateHighBathingTemperature {\n\n    public static void main(String[] args) {\n        double transparency = Double.parseDouble(args[0]);\n\n        \n        String condition;\n        if (transparency >= 75 && transparency <= 100) {\n            condition = \"Clear\";\n            System.out.println(\"The recommended maximum bathing\" +\n                    \"temperature under these conditions is:\" + \n                    calculateTemp(condition));\n        } else if (transparency > 40 && transparency < 75) {\n            condition = \"Partly Cloudy\";\n            System.out.println(\"The recommended maximum bathing\" +\n                    \"temperature under these conditions is:\" + \n                    calculateTemp(condition));\n        } else {\n            condition = \"Cloudy\";\n            System.out.println(\"The recommended maximum bathing\" +\n                    \"temperature under these conditions is:\" + \n                    calculateTemp(condition));\n        }\n    }\n\n    private static int calculateTemp(String conditon){\n        int temp;\n        switch (conditon) {\n            case \"Clear\":\n                temp = 86F;\n                break;\n            case \"Partly Cloudy\":\n                temp = 82F;\n                break;\n            default: \n                temp = 79F;\n        }\n        return temp;\n    }\n}",
            "id": 846
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (string_literal (string_fragment))) right: (method_invocation name: (identifier) arguments: (argument_list (identifier)))))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (string_literal (string_fragment))) right: (method_invocation name: (identifier) arguments: (argument_list (identifier)))))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (string_literal (string_fragment))) right: (method_invocation name: (identifier) arguments: (argument_list (identifier)))))))))))) (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (decimal_floating_point_literal))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (decimal_floating_point_literal))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (assignment_expression left: (identifier) right: (decimal_floating_point_literal)))))) (return_statement (identifier)))))))\n**\n\n--\npublic class CalculateHighBathingTemperature {\n\n    public static void main(String[] args) {\n        double transparency = Double.parseDouble(args[0]);\n\n        \n        String condition;\n        if (transparency >= 75 && transparency <= 100) {\n            condition = \"Clear\";\n            System.out.println(\"The recommended maximum bathing\" +\n                    \"temperature under these conditions is:\" + \n                    calculateTemp(condition));\n        } else if (transparency > 40 && transparency < 75) {\n            condition = \"Partly Cloudy\";\n            System.out.println(\"The recommended maximum bathing\" +\n                    \"temperature under these conditions is:\" + \n                    calculateTemp(condition));\n        } else {\n            condition = \"Cloudy\";\n            System.out.println(\"The recommended maximum bathing\" +\n                    \"temperature under these conditions is:\" + \n                    calculateTemp(condition));\n        }\n    }\n\n    private static int calculateTemp(String conditon){\n        int temp;\n        switch (conditon) {\n            case \"Clear\":\n                temp = 86F;\n                break;\n            case \"Partly Cloudy\":\n                temp = 82F;\n                break;\n            default: \n                temp = 79F;\n        }\n        return temp;\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 1233
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class IllnessChecker {\n\n    public static void main(String[] args) {\n        boolean isSick = true; \n\n        if (isSick){\n            System.out.println(\"Following Extreme Hygiene Protocol\");\n\n            \n            \n\n        } else{\n            System.out.println(\"Following Normal Routine \");\n\n            \n        }\n    }\n}",
            "id": 847
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (true))) (if_statement condition: (condition (identifier)) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))))\n**\n\n--\npublic class IllnessChecker {\n\n    public static void main(String[] args) {\n        boolean isSick = true; \n\n        if (isSick){\n            System.out.println(\"Following Extreme Hygiene Protocol\");\n\n            \n            \n\n        } else{\n            System.out.println(\"Following Normal Routine \");\n\n            \n        }\n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 347
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script \n\nfunction updateHighFitnessWorkoutPlanForEngineerProfessional(safety) {\n  let plan = [];\n\n  \n  switch (safety) {\n    case 'low':\n      plan = [\n        'Walking at a brisk pace for 30 minutes', \n        'Doing calisthenics such as pushups, sit ups, and squats'\n      ];\n      break;\n\n    case 'medium':\n      plan = [\n        'Playing basketball for one hour',\n        'Swimming laps for 45 minutes',\n        'Riding a bike for 1 hour'\n      ];\n      break;\n\n    case 'high':\n      plan = [\n        'Rock climbing for two hours',\n        'CrossFit training for an hour',\n        'Competitive soccer game for 90 minutes'\n      ];\n      break;\n    \n    default: \n      console.log('Invalid input'); \n  }\n  \n  return plan;\n}",
            "id": 853
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (ERROR (array_type element: (MISSING type_identifier) dimensions: (dimensions)))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (character_literal)) (ERROR (assignment_expression left: (identifier) (ERROR) right: (character_literal))) (expression_statement (character_literal) (ERROR)) (break_statement)) (switch_block_statement_group (switch_label (character_literal)) (expression_statement (assignment_expression left: (identifier) (ERROR) right: (character_literal)) (ERROR (character_literal) (character_literal))) (break_statement)) (switch_block_statement_group (switch_label (character_literal)) (ERROR (assignment_expression left: (identifier) (ERROR) right: (character_literal)) (character_literal)) (expression_statement (character_literal) (ERROR)) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal))))))) (return_statement (identifier))))\n**\n\n--\nscript \n\nfunction updateHighFitnessWorkoutPlanForEngineerProfessional(safety) {\n  let plan = [];\n\n  \n  switch (safety) {\n    case 'low':\n      plan = [\n        'Walking at a brisk pace for 30 minutes', \n        'Doing calisthenics such as pushups, sit ups, and squats'\n      ];\n      break;\n\n    case 'medium':\n      plan = [\n        'Playing basketball for one hour',\n        'Swimming laps for 45 minutes',\n        'Riding a bike for 1 hour'\n      ];\n      break;\n\n    case 'high':\n      plan = [\n        'Rock climbing for two hours',\n        'CrossFit training for an hour',\n        'Competitive soccer game for 90 minutes'\n      ];\n      break;\n    \n    default: \n      console.log('Invalid input'); \n  }\n  \n  return plan;\n}\n--\n",
        "text": "6\n\nОбъяснение:\n\nЦикломатическая сложность — это мера сложности программного кода, которая",
        "token_cnt": 618
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class SMMCheck {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number of preference options (1,2,3): \");\n        int numOptions = scan.nextInt();\n        ArrayList<Integer> optionList = new ArrayList<>();\n\n        \n        for (int i=0;i<numOptions;i++) {\n            System.out.print(\"Option \" + (i+1) + \": \");\n            int option = scan.nextInt();\n            optionList.add(option);\n        }\n        \n        \n        Collections.sort(optionList,Collections.reverseOrder());\n\n        double engContentScore = 0;\n        String result = \"\";\n\n        \n        for (int i : optionList){\n            switch (i) {\n                case 1:\n                    engContentScore += .5;\n                    break;\n                case 2:\n                    engContentScore += 1;\n                    break;\n                case 3:\n                    engContentScore += 1.5;\n                    break;\n                \n            }\n        }\n\n        \n        if (engContentScore >= 4) {\n            result = \"Low Engineering Content\";\n        } else {\n            result = \"High Engineering Content\";\n        }\n\n        System.out.println(\"Social Media Trends Result: \"+result);\n\n    }\n}",
            "id": 856
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (generic_type (type_identifier) (type_arguments (type_identifier))) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (generic_type (type_identifier) (type_arguments)) arguments: (argument_list)))) (for_statement init: (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) condition: (binary_expression left: (identifier) right: (identifier)) update: (update_expression (identifier)) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal)))) right: (string_literal (string_fragment)))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier) (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal))) (enhanced_for_statement type: (integral_type) name: (identifier) value: (identifier) body: (block (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (assignment_expression left: (identifier) right: (decimal_floating_point_literal))) (break_statement)) (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (break_statement)) (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (assignment_expression left: (identifier) right: (decimal_floating_point_literal))) (break_statement)))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))))))\n**\n\n--\nimport java.util.*;\npublic class SMMCheck {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number of preference options (1,2,3): \");\n        int numOptions = scan.nextInt();\n        ArrayList<Integer> optionList = new ArrayList<>();\n\n        \n        for (int i=0;i<numOptions;i++) {\n            System.out.print(\"Option \" + (i+1) + \": \");\n            int option = scan.nextInt();\n            optionList.add(option);\n        }\n        \n        \n        Collections.sort(optionList,Collections.reverseOrder());\n\n        double engContentScore = 0;\n        String result = \"\";\n\n        \n        for (int i : optionList){\n            switch (i) {\n                case 1:\n                    engContentScore += .5;\n                    break;\n                case 2:\n                    engContentScore += 1;\n                    break;\n                case 3:\n                    engContentScore += 1.5;\n                    break;\n                \n            }\n        }\n\n        \n        if (engContentScore >= 4) {\n            result = \"Low Engineering Content\";\n        } else {\n            result = \"High Engineering Content\";\n        }\n\n        System.out.println(\"Social Media Trends Result: \"+result);\n\n    }\n}\n--\n",
        "text": "25",
        "token_cnt": 1400
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public double calculateExtremeOralHealthHabits(double dailySugarIntake, boolean smoker, int coffeeConsumed) {\n    \n    \n    \n    \n}",
            "id": 858
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (floating_point_type) name: (identifier)) (formal_parameter type: (boolean_type) name: (identifier)) (formal_parameter type: (integral_type) name: (identifier))) body: (block)))\n**\n\n--\npublic double calculateExtremeOralHealthHabits(double dailySugarIntake, boolean smoker, int coffeeConsumed) {\n    \n    \n    \n    \n}\n--\n",
        "text": "6\n\nОбъяснение:\n\nЦикломатическая сложность — это мера сложности программного кода, которая",
        "token_cnt": 163
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class TransformHygiene {\n\n    public static String respectHygiene(String input) {\n        \n        enum TrustLevel{\n            LOW, MEDIUM, HIGH;\n        }\n\n        \n        TrustLevel trust = TrustLevel.MEDIUM;\n        \n        \n        if (input != null && !input.isEmpty()) {\n            try {\n                trust = TrustLevel.valueOf(input);\n                \n            } catch (IllegalArgumentException e) {\n                System.out.println(\"Invalid argument passed for trust level. Using default.\");\n            }\n        }\n    \n        switch (trust){\n            case LOW: \n                return \"Wear gloves while handling objects\"; \n            case MEDIUM: \n                return \"Regular hand washing before and after use\"; \n            case HIGH: \n                return \"Use disinfectant spray regularly and maintain social distancing.\"; \n        }\n    }\n    \n}",
            "id": 859
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (enum_declaration name: (identifier) body: (enum_body (enum_constant name: (identifier)) (enum_constant name: (identifier)) (enum_constant name: (identifier)) (enum_body_declarations))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (field_access object: (identifier) field: (identifier)))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (null_literal)) right: (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))))) consequence: (block (try_statement body: (block (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))))) (catch_clause (catch_formal_parameter (catch_type (type_identifier)) name: (identifier)) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (identifier)) (return_statement (string_literal (string_fragment)))) (switch_block_statement_group (switch_label (identifier)) (return_statement (string_literal (string_fragment)))) (switch_block_statement_group (switch_label (identifier)) (return_statement (string_literal (string_fragment)))))))))))\n**\n\n--\npublic class TransformHygiene {\n\n    public static String respectHygiene(String input) {\n        \n        enum TrustLevel{\n            LOW, MEDIUM, HIGH;\n        }\n\n        \n        TrustLevel trust = TrustLevel.MEDIUM;\n        \n        \n        if (input != null && !input.isEmpty()) {\n            try {\n                trust = TrustLevel.valueOf(input);\n                \n            } catch (IllegalArgumentException e) {\n                System.out.println(\"Invalid argument passed for trust level. Using default.\");\n            }\n        }\n    \n        switch (trust){\n            case LOW: \n                return \"Wear gloves while handling objects\"; \n            case MEDIUM: \n                return \"Regular hand washing before and after use\"; \n            case HIGH: \n                return \"Use disinfectant spray regularly and maintain social distancing.\"; \n        }\n    }\n    \n}\n--\n",
        "text": "6",
        "token_cnt": 695
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class FabricCleaner {\n\n    public static void main(String[] args) {\n        \n        double dirtiness = Double.parseDouble(args[0]);\n        boolean hasBias = Boolean.parseBoolean(args[1]);\n\n        \n        double cleanedDirtiness;\n        if (!hasBias){\n            cleanedDirtiness = Math.max(-5, dirtiness - .2 * dirtiness);\n        } \n        else if (bias > 0){\n            cleanedDirtiness = dirtiness + 3*Math.abs(bias);\n        } \n        else{\n            cleanedDirtiness = dirtiness - 4*Math.abs(bias);\n        } \n\n        System.out.println(\"The cleaned dirtiness level is \" +cleanedDirtiness+ \".\");\n    }\n}",
            "id": 863
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (unary_expression operand: (decimal_integer_literal)) (binary_expression left: (identifier) right: (binary_expression left: (decimal_floating_point_literal) right: (identifier)))))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (binary_expression left: (decimal_integer_literal) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (binary_expression left: (decimal_integer_literal) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment)))))))))))\n**\n\n--\npublic class FabricCleaner {\n\n    public static void main(String[] args) {\n        \n        double dirtiness = Double.parseDouble(args[0]);\n        boolean hasBias = Boolean.parseBoolean(args[1]);\n\n        \n        double cleanedDirtiness;\n        if (!hasBias){\n            cleanedDirtiness = Math.max(-5, dirtiness - .2 * dirtiness);\n        } \n        else if (bias > 0){\n            cleanedDirtiness = dirtiness + 3*Math.abs(bias);\n        } \n        else{\n            cleanedDirtiness = dirtiness - 4*Math.abs(bias);\n        } \n\n        System.out.println(\"The cleaned dirtiness level is \" +cleanedDirtiness+ \".\");\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 819
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public boolean determineHighFlossing(boolean dryRun) {\n    \n    \n    \n    String userInput = \"low\";\n    \n    \n    int score = 0;\n\n    \n    switch (userInput) {\n        case \"high\":\n            score = 5;\n            break;\n        case \"medium\":\n            score = 3;\n            break;\n        default: \n            score = 1;\n    }\n\n    \n    \n    \n    if (/* Additional logic */) {\n        score += 2;\n    }\n\n    \n    System.out.println(\"Your current flossing score is: \" + score);\n    if (!dryRun) {\n        printFeedbackBasedOnScore();\n    }\n\n    return score >= 4; \n}\n\nprivate void printFeedbackBasedOnScore() {\n    switch (score) {\n        case 5:\n            System.out.println(\"Great job! Your flossing technique meets all necessary requirements.\");\n            break;\n        case 4:\n            System.out.println(\"Your flossing technique meets most requirements but there are still areas for improvement.\");\n            break;\n        case 3:\n            System.out.println(\"Your flossing technique meets some requirements but needs work in certain areas.\");\n            break;\n        case 2:\n            System.out.println(\"Your flossing technique does not meet basic requirements and requires immediate attention.\");\n            break;\n        case 1:\n            System.out.println(\"Please seek professional dental advice immediately due to severe damage caused by improper flossing techniques.\");\n            break;\n        default:\n            throw new IllegalArgumentException(\"Invalid score value encountered while printing feedback\");\n    }\n}",
            "id": 865
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))))) (if_statement condition: (condition (block_comment) (MISSING identifier)) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))) (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list))))) (return_statement (binary_expression left: (identifier) right: (decimal_integer_literal))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters) body: (block (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label) (throw_statement (object_creation_expression type: (type_identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))\n**\n\n--\npublic boolean determineHighFlossing(boolean dryRun) {\n    \n    \n    \n    String userInput = \"low\";\n    \n    \n    int score = 0;\n\n    \n    switch (userInput) {\n        case \"high\":\n            score = 5;\n            break;\n        case \"medium\":\n            score = 3;\n            break;\n        default: \n            score = 1;\n    }\n\n    \n    \n    \n    if (/* Additional logic */) {\n        score += 2;\n    }\n\n    \n    System.out.println(\"Your current flossing score is: \" + score);\n    if (!dryRun) {\n        printFeedbackBasedOnScore();\n    }\n\n    return score >= 4; \n}\n\nprivate void printFeedbackBasedOnScore() {\n    switch (score) {\n        case 5:\n            System.out.println(\"Great job! Your flossing technique meets all necessary requirements.\");\n            break;\n        case 4:\n            System.out.println(\"Your flossing technique meets most requirements but there are still areas for improvement.\");\n            break;\n        case 3:\n            System.out.println(\"Your flossing technique meets some requirements but needs work in certain areas.\");\n            break;\n        case 2:\n            System.out.println(\"Your flossing technique does not meet basic requirements and requires immediate attention.\");\n            break;\n        case 1:\n            System.out.println(\"Please seek professional dental advice immediately due to severe damage caused by improper flossing techniques.\");\n            break;\n        default:\n            throw new IllegalArgumentException(\"Invalid score value encountered while printing feedback\");\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 1315
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static double calculateHighTransportationCost(String userName, String userExpertise) {\n    \n    double basicCost = 10;\n\n    \n    double premiumCost = 25;\n\n    if (userExpertise == \"Beginner\") {\n        return basicCost + Math.random() * 3;\n    } else if (userExpertise == \"Intermediate\") {\n        return basicCost + ((premiumCost - basicCost) / 4) * 3;\n    } else if (userExpertise == \"Advanced\") {\n        return premiumCost + Math.random() * 7;\n    } else {\n        System.out.println(\"Invalid User Input\");\n        return Double.NaN;\n    }\n}",
            "id": 868
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (return_statement (binary_expression left: (identifier) right: (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (decimal_integer_literal))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (return_statement (binary_expression left: (identifier) right: (binary_expression left: (parenthesized_expression (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (identifier))) right: (decimal_integer_literal))) right: (decimal_integer_literal))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (return_statement (binary_expression left: (identifier) right: (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (decimal_integer_literal))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement (field_access object: (identifier) field: (identifier))))))))))\n**\n\n--\npublic static double calculateHighTransportationCost(String userName, String userExpertise) {\n    \n    double basicCost = 10;\n\n    \n    double premiumCost = 25;\n\n    if (userExpertise == \"Beginner\") {\n        return basicCost + Math.random() * 3;\n    } else if (userExpertise == \"Intermediate\") {\n        return basicCost + ((premiumCost - basicCost) / 4) * 3;\n    } else if (userExpertise == \"Advanced\") {\n        return premiumCost + Math.random() * 7;\n    } else {\n        System.out.println(\"Invalid User Input\");\n        return Double.NaN;\n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 690
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class CheckHygiene {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number of people present\");\n        int n = scan.nextInt();\n        List<Integer> ratings = new ArrayList<>();\n\n        \n        for (int i=0; i <n ; i++) {\n            System.out.print(\"Person \" + (i+1)+ \": \");\n            int rating = scan.nextInt();\n            ratings.add(rating);\n        }\n        \n        \n        double avgRating = calculateAverage(ratings);\n        System.out.println(\"\\nOverall Average Score: \"+avgRating);\n\n        \n        if (avgRating >=75 && avgRating <=84 ) {\n           System.out.println(\"No Action Required!\");\n        } else if (avgRating > 84){\n          System.out.println(\"Congratulations! Everyone followed guidelines.\");\n        } else{\n             System.out.println(\"Take necessary steps to improve hygiene conditions.\");\n        }\n\n    }\n    \n    private static double calculateAverage(List<Integer> scores) {\n       double sum = 0;\n       for (int score :scores) {\n         sum +=score;\n       }\n       return sum /scores.size();\n     }\n}",
            "id": 869
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (generic_type (type_identifier) (type_arguments (type_identifier))) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (generic_type (type_identifier) (type_arguments)) arguments: (argument_list)))) (for_statement init: (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) condition: (binary_expression left: (identifier) right: (identifier)) update: (update_expression (identifier)) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal)))) right: (string_literal (string_fragment)))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (identifier))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (escape_sequence) (string_fragment)) right: (identifier))))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))) (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (generic_type (type_identifier) (type_arguments (type_identifier))) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (enhanced_for_statement type: (integral_type) name: (identifier) value: (identifier) body: (block (expression_statement (assignment_expression left: (identifier) right: (identifier))))) (return_statement (binary_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))))))\n**\n\n--\nimport java.util.*;\npublic class CheckHygiene {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number of people present\");\n        int n = scan.nextInt();\n        List<Integer> ratings = new ArrayList<>();\n\n        \n        for (int i=0; i <n ; i++) {\n            System.out.print(\"Person \" + (i+1)+ \": \");\n            int rating = scan.nextInt();\n            ratings.add(rating);\n        }\n        \n        \n        double avgRating = calculateAverage(ratings);\n        System.out.println(\"\\nOverall Average Score: \"+avgRating);\n\n        \n        if (avgRating >=75 && avgRating <=84 ) {\n           System.out.println(\"No Action Required!\");\n        } else if (avgRating > 84){\n          System.out.println(\"Congratulations! Everyone followed guidelines.\");\n        } else{\n             System.out.println(\"Take necessary steps to improve hygiene conditions.\");\n        }\n\n    }\n    \n    private static double calculateAverage(List<Integer> scores) {\n       double sum = 0;\n       for (int score :scores) {\n         sum +=score;\n       }\n       return sum /scores.size();\n     }\n}\n--\n",
        "text": "30",
        "token_cnt": 1445
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class ExtremeWeather {\n    public static void main(String[] args) {\n        double windSpeed = Double.parseDouble(args[0]);\n\n        \n        if (windSpeed == null){\n            System.out.println(\"Invalid Input! Please enter valid number.\");\n            return;\n        }\n        \n        \n        else if (windSpeed >= 15 && windSpeed <= 30) \n            System.out.println(\"Normal Range\"); \n\n        \n        else if (windSpeed > 40) \n            System.out.println(\"High Wind Warning!\"); \n\n        \n        else if (windSpeed > 60) \n            System.out.println(\"Extreme Wind Alert!!!\"); \n    }\n}",
            "id": 872
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (null_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement)) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))))))\n**\n\n--\npublic class ExtremeWeather {\n    public static void main(String[] args) {\n        double windSpeed = Double.parseDouble(args[0]);\n\n        \n        if (windSpeed == null){\n            System.out.println(\"Invalid Input! Please enter valid number.\");\n            return;\n        }\n        \n        \n        else if (windSpeed >= 15 && windSpeed <= 30) \n            System.out.println(\"Normal Range\"); \n\n        \n        else if (windSpeed > 40) \n            System.out.println(\"High Wind Warning!\"); \n\n        \n        else if (windSpeed > 60) \n            System.out.println(\"Extreme Wind Alert!!!\"); \n    }\n}\n--\n",
        "text": "7",
        "token_cnt": 687
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class ExtremePersonalItemCleaner {\n    public static void updateExtremeHandling(boolean hasLabCoat, boolean hasGoggles) {\n        \n        System.out.println(\"Should \" + (hasLabCoat ? \"\" : \"not \") + \"wear Lab Coat?\");\n\n        \n        if (hasLabCoat && !askUserToWearLabCoat()) return;\n        \n        \n        System.out.println(\"Should \" + (hasGoggles ? \"\" : \"not \") + \"use Goggles?\");\n\n        \n        if (hasGoggles && !askUserToUseGoggles()) return;\n\n        \n        System.out.println(\"No PPE Required!\");\n\n    }\n\n    private static boolean askUserToWearLabCoat() {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Do you want to wear the lab coat? [y/n]: \");\n        String input = scanner.nextLine();\n        return input.toLowerCase().startsWith(\"y\");\n    }\n\n    private static boolean askUserToUseGoggles() {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Do you want to put on the goggles? [y/n]: \");\n        String input = scanner.nextLine();\n        return input.toLowerCase().startsWith(\"y\");\n    }\n}",
            "id": 878
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier)) (formal_parameter type: (boolean_type) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (parenthesized_expression (ternary_expression condition: (identifier) consequence: (string_literal) alternative: (string_literal (string_fragment))))) right: (string_literal (string_fragment)))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (unary_expression operand: (method_invocation name: (identifier) arguments: (argument_list))))) consequence: (return_statement)) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (parenthesized_expression (ternary_expression condition: (identifier) consequence: (string_literal) alternative: (string_literal (string_fragment))))) right: (string_literal (string_fragment)))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (unary_expression operand: (method_invocation name: (identifier) arguments: (argument_list))))) consequence: (return_statement)) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (return_statement (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (return_statement (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))\n**\n\n--\npublic class ExtremePersonalItemCleaner {\n    public static void updateExtremeHandling(boolean hasLabCoat, boolean hasGoggles) {\n        \n        System.out.println(\"Should \" + (hasLabCoat ? \"\" : \"not \") + \"wear Lab Coat?\");\n\n        \n        if (hasLabCoat && !askUserToWearLabCoat()) return;\n        \n        \n        System.out.println(\"Should \" + (hasGoggles ? \"\" : \"not \") + \"use Goggles?\");\n\n        \n        if (hasGoggles && !askUserToUseGoggles()) return;\n\n        \n        System.out.println(\"No PPE Required!\");\n\n    }\n\n    private static boolean askUserToWearLabCoat() {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Do you want to wear the lab coat? [y/n]: \");\n        String input = scanner.nextLine();\n        return input.toLowerCase().startsWith(\"y\");\n    }\n\n    private static boolean askUserToUseGoggles() {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Do you want to put on the goggles? [y/n]: \");\n        String input = scanner.nextLine();\n        return input.toLowerCase().startsWith(\"y\");\n    }\n}\n--\n",
        "text": "5",
        "token_cnt": 1269
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n\n        \n        System.out.println(\"Enter number of times daily person washes hands at home:\");\n        int hHandWashes = scan.nextInt();\n        System.out.println(\"Enter number of times daily person commutes:\");\n        int hCommuteTime = scan.nextInt();\n        System.out.println(\"What is probabiltiy that someone will use hand sanitizer during commute?\");\n        double pHandsan = scan.nextDouble();\n        System.out.println(\"Do you wish to prioritze saving more peoples' live than protecting personal information? [y/n]\");\n        String ans = scan.nextLine().toLowerCase();\n        \n        \n        double expReduction = ((hHandwashes - hCommuteTime)*0.5)*(1-(pHandsan));\n\n        \n        System.out.println(\"Expected Cases Reduced Due To Hand Washing: \" + Math.round(expReduction*100)/100);\n        System.out.print(\"Should we encourage usage of han sanitizers even though there might not be enough \");\n        System.out.println(\"handwashing occurences compared to non users? \");\n        if (ans == 'y')\n            System.out.println(\"Yes! This can help reduce the spread of COVID-19.\");\n        else \n            System.out.println(\"No! Encouraging frequent handwashing without proper alternatives could cause\");\n            System.out.println(\"more harm than good especially since many may feel uncomfortable using them.\");\n\n    }\n}",
            "id": 887
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (parenthesized_expression (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (identifier))) right: (decimal_floating_point_literal))) right: (parenthesized_expression (binary_expression left: (decimal_integer_literal) right: (parenthesized_expression (identifier))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (binary_expression left: (identifier) right: (decimal_integer_literal)))) right: (decimal_integer_literal)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (character_literal))) consequence: (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) alternative: (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n\n        \n        System.out.println(\"Enter number of times daily person washes hands at home:\");\n        int hHandWashes = scan.nextInt();\n        System.out.println(\"Enter number of times daily person commutes:\");\n        int hCommuteTime = scan.nextInt();\n        System.out.println(\"What is probabiltiy that someone will use hand sanitizer during commute?\");\n        double pHandsan = scan.nextDouble();\n        System.out.println(\"Do you wish to prioritze saving more peoples' live than protecting personal information? [y/n]\");\n        String ans = scan.nextLine().toLowerCase();\n        \n        \n        double expReduction = ((hHandwashes - hCommuteTime)*0.5)*(1-(pHandsan));\n\n        \n        System.out.println(\"Expected Cases Reduced Due To Hand Washing: \" + Math.round(expReduction*100)/100);\n        System.out.print(\"Should we encourage usage of han sanitizers even though there might not be enough \");\n        System.out.println(\"handwashing occurences compared to non users? \");\n        if (ans == 'y')\n            System.out.println(\"Yes! This can help reduce the spread of COVID-19.\");\n        else \n            System.out.println(\"No! Encouraging frequent handwashing without proper alternatives could cause\");\n            System.out.println(\"more harm than good especially since many may feel uncomfortable using them.\");\n\n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 1459
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public void updateLowHandHygieneOutsideTheHome(String ethic) {\n        \n        int currHandWashFreq;\n    \n        \n        switch (ethnic) {\n            case \"Caucasian\":\n                currHandWashFreq = 4;\n                break;\n            case \"African American\":\n                currHandWashFreq = 6;\n                break;\n            default:\n                System.out.println(\"Invalid input - please enter 'Caucasian' or 'African American'\");\n                return;\n        }\n    \n        \n        if (currHandWashFreq < MIN_HANDWASHING_FREQUENCY) {\n            \n            setLowHandHygieneOutsideTheHomeFlag(true);\n        \n            \n            System.out.println(\"WARNING: Insufficient handwashing frequency detected for ethnic group '\" + ethnic + \"'\");\n        } else {\n            \n            setLowHandHygieneOutsideTheHomeFlag(false);\n        }    \n    }",
            "id": 901
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (identifier))) consequence: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list (true)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment))))))) alternative: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list (false)))))))))\n**\n\n--\npublic void updateLowHandHygieneOutsideTheHome(String ethic) {\n        \n        int currHandWashFreq;\n    \n        \n        switch (ethnic) {\n            case \"Caucasian\":\n                currHandWashFreq = 4;\n                break;\n            case \"African American\":\n                currHandWashFreq = 6;\n                break;\n            default:\n                System.out.println(\"Invalid input - please enter 'Caucasian' or 'African American'\");\n                return;\n        }\n    \n        \n        if (currHandWashFreq < MIN_HANDWASHING_FREQUENCY) {\n            \n            setLowHandHygieneOutsideTheHomeFlag(true);\n        \n            \n            System.out.println(\"WARNING: Insufficient handwashing frequency detected for ethnic group '\" + ethnic + \"'\");\n        } else {\n            \n            setLowHandHygieneOutsideTheHomeFlag(false);\n        }    \n    }\n--\n",
        "text": "5\n\nОбъяснение: цикломатическая сложность определяется как количество различных путей выполнения, достигающих всех блоков",
        "token_cnt": 662
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n\nfunction getExtremeHygieneScore(transparency) {\n  let score = 0;\n\n  \n  if (transparency === 'low') {\n    \n    score += 10;\n\n    \n    score -= 25;\n  } else if (transparency === 'medium') {\n    \n    score += 30;\n\n    \n  } else if (transparency === 'high') {\n    \n    score += 40;\n\n    \n    score += 25;\n  }\n  \n  return score;\n}",
            "id": 902
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))))))) (return_statement (identifier))))\n**\n\n--\nscript\n\nfunction getExtremeHygieneScore(transparency) {\n  let score = 0;\n\n  \n  if (transparency === 'low') {\n    \n    score += 10;\n\n    \n    score -= 25;\n  } else if (transparency === 'medium') {\n    \n    score += 30;\n\n    \n  } else if (transparency === 'high') {\n    \n    score += 40;\n\n    \n    score += 25;\n  }\n  \n  return score;\n}\n--\n",
        "text": "8",
        "token_cnt": 485
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public double calculateExtremeToiletHygiene(int flushesPerDay, boolean handwashingAfterUsingBathroom, boolean regularCleaning) {\r\n    \n    double score = 0;\r\n    \r\n    \n    if (flushesPerDay >= 2) {\r\n        score += 1;\r\n    }\r\n    \r\n    \n    if (!handwashingAfterUsingBathroom) {\r\n        score -= .5;\r\n    }\r\n    \r\n    \n    if (regularCleaning) {\r\n        score += 3; \r\n    } else if (regularCleaning == false && flushesPerDay < 6){ \r\n        score += 2; \r\n    } else if (regularCleaning == false && flushesPerDay >= 6) {\r\n        score += 1;   \r\n    }\r\n    \r\n    return score;\r\n    \r\n}",
            "id": 903
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (integral_type) name: (identifier)) (formal_parameter type: (boolean_type) name: (identifier)) (formal_parameter type: (boolean_type) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))))) (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_floating_point_literal))))) (if_statement condition: (condition (identifier)) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (false)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (false)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))))))) (return_statement (identifier)))))\n**\n\n--\npublic double calculateExtremeToiletHygiene(int flushesPerDay, boolean handwashingAfterUsingBathroom, boolean regularCleaning) {\r\n    \n    double score = 0;\r\n    \r\n    \n    if (flushesPerDay >= 2) {\r\n        score += 1;\r\n    }\r\n    \r\n    \n    if (!handwashingAfterUsingBathroom) {\r\n        score -= .5;\r\n    }\r\n    \r\n    \n    if (regularCleaning) {\r\n        score += 3; \r\n    } else if (regularCleaning == false && flushesPerDay < 6){ \r\n        score += 2; \r\n    } else if (regularCleaning == false && flushesPerDay >= 6) {\r\n        score += 1;   \r\n    }\r\n    \r\n    return score;\r\n    \r\n}\n--\n",
        "text": "4",
        "token_cnt": 644
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class CalculateLowEyeHygiene {\n\n    public static void main(String[] args) {\n        \n        double lidCleaning = Double.parseDouble(args[0]); \n        double puffinessReduction = Double.parseDouble(args[1]); \n        boolean trustExpert = Boolean.parseBoolean(args[2]); \n\n        \n        double totalCleaning = lidCleaning + puffinessReduction; \n        int score;\n        if (!trustExpert){\n            score = (int)(totalCleaning * 5); \n        } else{ \n            score = (int)((lidCleaning / totalCleaning) * 80 + puffinessReduction * 20); \n        }\n        \n        System.out.println(\"Score: \" + score);\n    }\n}",
            "id": 905
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (identifier) right: (identifier)))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (cast_expression type: (integral_type) value: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal))))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (cast_expression type: (integral_type) value: (parenthesized_expression (binary_expression left: (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (identifier))) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal))))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))))))\n**\n\n--\npublic class CalculateLowEyeHygiene {\n\n    public static void main(String[] args) {\n        \n        double lidCleaning = Double.parseDouble(args[0]); \n        double puffinessReduction = Double.parseDouble(args[1]); \n        boolean trustExpert = Boolean.parseBoolean(args[2]); \n\n        \n        double totalCleaning = lidCleaning + puffinessReduction; \n        int score;\n        if (!trustExpert){\n            score = (int)(totalCleaning * 5); \n        } else{ \n            score = (int)((lidCleaning / totalCleaning) * 80 + puffinessReduction * 20); \n        }\n        \n        System.out.println(\"Score: \" + score);\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 807
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static void main(String[] args) {\n        \n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter moisturizer type:\");\n        String moisturizerType = scan.nextLine();\n\n        \n        double price;\n        if (moisturizerType.equals(\"Cream\")) {\n            price = calculatePriceForCream();\n        } else if (moisturizerType.equals(\"Oil\")) {\n            price = calculatePriceForOil();\n        } else {\n            System.out.println(\"Invalid input.\");\n            return;\n        }\n\n        \n        System.out.printf(\"The price of %s is $%.2f\", moisturizerType, price);\n    }\n\n    private static double calculatePriceForCream() {\n        return 10.95;\n    }\n\n    private static double calculatePriceForOil() {\n        return 6.47;\n    }",
            "id": 911
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (method_invocation name: (identifier) arguments: (argument_list))))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (method_invocation name: (identifier) arguments: (argument_list))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (identifier) (identifier)))))) (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters) body: (block (return_statement (decimal_floating_point_literal)))) (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters) body: (block (return_statement (decimal_floating_point_literal)))))\n**\n\n--\npublic static void main(String[] args) {\n        \n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter moisturizer type:\");\n        String moisturizerType = scan.nextLine();\n\n        \n        double price;\n        if (moisturizerType.equals(\"Cream\")) {\n            price = calculatePriceForCream();\n        } else if (moisturizerType.equals(\"Oil\")) {\n            price = calculatePriceForOil();\n        } else {\n            System.out.println(\"Invalid input.\");\n            return;\n        }\n\n        \n        System.out.printf(\"The price of %s is $%.2f\", moisturizerType, price);\n    }\n\n    private static double calculatePriceForCream() {\n        return 10.95;\n    }\n\n    private static double calculatePriceForOil() {\n        return 6.47;\n    }\n--\n",
        "text": "8",
        "token_cnt": 846
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script \n\nvar schedule = \"Every day at 8 AM\";\nvar currentTime = new Date();\n\n\nif (checkScheduleReliability(schedule)) {\n  console.log(\"The bus will arrive at\", getBusArrivalTime(schedule));\n} else {\n  console.log(\"Please revisit your decision as the schedule seems unreliable.\");\n}\n\nfunction checkScheduleReliability(schedule) {\n  \n  \n  return true;\n}\n\nfunction getBusArrivalTime(schedule) {\n  \n  \n  return new Date();\n}",
            "id": 919
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list)))) (if_statement condition: (condition (method_invocation name: (identifier) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (method_invocation name: (identifier) arguments: (argument_list (identifier))))))) alternative: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) (method_declaration type: (type_identifier) name: (identifier) parameters: (formal_parameters (ERROR (type_identifier))) body: (block (return_statement (true)))) (method_declaration type: (type_identifier) name: (identifier) parameters: (formal_parameters (ERROR (type_identifier))) body: (block (return_statement (object_creation_expression type: (type_identifier) arguments: (argument_list))))))\n**\n\n--\nscript \n\nvar schedule = \"Every day at 8 AM\";\nvar currentTime = new Date();\n\n\nif (checkScheduleReliability(schedule)) {\n  console.log(\"The bus will arrive at\", getBusArrivalTime(schedule));\n} else {\n  console.log(\"Please revisit your decision as the schedule seems unreliable.\");\n}\n\nfunction checkScheduleReliability(schedule) {\n  \n  \n  return true;\n}\n\nfunction getBusArrivalTime(schedule) {\n  \n  \n  return new Date();\n}\n--\n",
        "text": "9\n\nОбъяснение:\n\nЦикломатическая сложность — это мера сложности программы, которая показывает",
        "token_cnt": 480
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class PersonalItemTransformer {\n\n    public String transform(String item) {\n        \n        StringBuilder transformed = new StringBuilder();\n\n        boolean hasBatteries = false;\n        int batteriesCount = 0;\n        while (item != null && !hasBatteries) {\n            if (item.contains(\"AA\") || item.contains(\"aaa\")) {\n                hasBatteries = true;\n                batteriesCount++;\n            } else {\n                item = getNextItem(item);\n            }\n        }\n        \n        if (!hasBatteries){\n            return \"No Batteries Found\";\n        }\n        \n        \n        \n        \n        switch (batteriesCount) {\n            case 1 -> transformed.append(\"Replace \").append(batteriesCount).append(\" battery\");\n            default -> transformed.append(\"Clean all \")\n                    .append(batteriesCount).append(\" batteries\");\n        }\n        \n        \n\n        \n        transformed.insert(0, \"\\nTransforming '\").append(\"' into \");\n        return transformed.toString();\n    }\n    \n    private static String getNextItem(String remainingItem) {\n        \n        String noBatteryItem = remainingItem.replaceFirst(\"[Aa][aA]+\", \"\");\n        \n        String[] words = noBatteryItem.split(\"\\\\s+\");\n        return words[0];\n    }\n}",
            "id": 922
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list)))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (while_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (null_literal)) right: (unary_expression operand: (identifier)))) body: (block (if_statement condition: (condition (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true))) (expression_statement (update_expression (identifier)))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (method_invocation name: (identifier) arguments: (argument_list (identifier))))))))) (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (block (return_statement (string_literal (string_fragment))))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_rule (switch_label (decimal_integer_literal)) (expression_statement (method_invocation object: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) name: (identifier) arguments: (argument_list (identifier))) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (switch_rule (switch_label) (expression_statement (method_invocation object: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) name: (identifier) arguments: (argument_list (identifier))) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))) (expression_statement (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (decimal_integer_literal) (string_literal (escape_sequence) (string_fragment)))) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))))) (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal))))) (local_variable_declaration type: (array_type element: (type_identifier) dimensions: (dimensions)) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (escape_sequence) (string_fragment)))))) (return_statement (array_access array: (identifier) index: (decimal_integer_literal))))))))\n**\n\n--\npublic class PersonalItemTransformer {\n\n    public String transform(String item) {\n        \n        StringBuilder transformed = new StringBuilder();\n\n        boolean hasBatteries = false;\n        int batteriesCount = 0;\n        while (item != null && !hasBatteries) {\n            if (item.contains(\"AA\") || item.contains(\"aaa\")) {\n                hasBatteries = true;\n                batteriesCount++;\n            } else {\n                item = getNextItem(item);\n            }\n        }\n        \n        if (!hasBatteries){\n            return \"No Batteries Found\";\n        }\n        \n        \n        \n        \n        switch (batteriesCount) {\n            case 1 -> transformed.append(\"Replace \").append(batteriesCount).append(\" battery\");\n            default -> transformed.append(\"Clean all \")\n                    .append(batteriesCount).append(\" batteries\");\n        }\n        \n        \n\n        \n        transformed.insert(0, \"\\nTransforming '\").append(\"' into \");\n        return transformed.toString();\n    }\n    \n    private static String getNextItem(String remainingItem) {\n        \n        String noBatteryItem = remainingItem.replaceFirst(\"[Aa][aA]+\", \"\");\n        \n        String[] words = noBatteryItem.split(\"\\\\s+\");\n        return words[0];\n    }\n}\n--\n",
        "text": "5",
        "token_cnt": 1277
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class ToiletHygiene {\n    public static void main(String[] args) {\n        \n        System.out.println(\"Please enter number of days since last toilet clean:\");\n        int numDays = scan.nextInt();\n\n        \n        double score;\n        if (numDays <= 3) {\n            score = 5 * Math.pow((1 - ((double) numDays / 3)), 2);\n        } else if (numDays > 3 && numDays < 7) {\n            score = 4 * Math.pow((1 - ((double) numDays / 7)), 2);\n        } else {\n            score = 0;\n        }\n\n        \n        System.out.printf(\"Toilet hygiene score: %.2f\", score);\n    }\n}",
            "id": 931
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (decimal_integer_literal) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (parenthesized_expression (binary_expression left: (decimal_integer_literal) right: (parenthesized_expression (binary_expression left: (cast_expression type: (floating_point_type) value: (identifier)) right: (decimal_integer_literal))))) (decimal_integer_literal))))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (decimal_integer_literal) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (parenthesized_expression (binary_expression left: (decimal_integer_literal) right: (parenthesized_expression (binary_expression left: (cast_expression type: (floating_point_type) value: (identifier)) right: (decimal_integer_literal))))) (decimal_integer_literal))))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (identifier)))))))))\n**\n\n--\npublic class ToiletHygiene {\n    public static void main(String[] args) {\n        \n        System.out.println(\"Please enter number of days since last toilet clean:\");\n        int numDays = scan.nextInt();\n\n        \n        double score;\n        if (numDays <= 3) {\n            score = 5 * Math.pow((1 - ((double) numDays / 3)), 2);\n        } else if (numDays > 3 && numDays < 7) {\n            score = 4 * Math.pow((1 - ((double) numDays / 7)), 2);\n        } else {\n            score = 0;\n        }\n\n        \n        System.out.printf(\"Toilet hygiene score: %.2f\", score);\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 824
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class UpdateBathRoutine {\n\n    public static void main(String[] args) {\n        int transparency = getWaterTransparency();\n\n        \n        switch (transparency){\n            case 0 -> System.out.println(\"Use Mild Soap\"); \n            case 1 -> System.out.println(\"Use Moderate soap\"); \n            default -> System.out.println(\"Use Strong Soap\") ;    \n        }\n    }\n\n    private static int getWaterTransparency() {\n        return 2; \n    }\n}",
            "id": 934
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list)))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_rule (switch_label (decimal_integer_literal)) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (switch_rule (switch_label (decimal_integer_literal)) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (switch_rule (switch_label) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))) (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters) body: (block (return_statement (decimal_integer_literal)))))))\n**\n\n--\npublic class UpdateBathRoutine {\n\n    public static void main(String[] args) {\n        int transparency = getWaterTransparency();\n\n        \n        switch (transparency){\n            case 0 -> System.out.println(\"Use Mild Soap\"); \n            case 1 -> System.out.println(\"Use Moderate soap\"); \n            default -> System.out.println(\"Use Strong Soap\") ;    \n        }\n    }\n\n    private static int getWaterTransparency() {\n        return 2; \n    }\n}\n--\n",
        "text": "5",
        "token_cnt": 525
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) {\n        \n        System.out.println(\"Enter humidity level (between 0 and 100): \");\n        double humidity = Double.parseDouble(Scanne.nextLine());\n\n        boolean isLowHumidity;\n        \n        if (humidity < 30){\n            isLowHumidity = true;\n        } else{\n            isLowHumidity = false;\n        }\n    \n        System.out.println(\"Is humidity low? \" + isLowHumidity);\n\n    }\n}",
            "id": 937
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true)))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (false))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) {\n        \n        System.out.println(\"Enter humidity level (between 0 and 100): \");\n        double humidity = Double.parseDouble(Scanne.nextLine());\n\n        boolean isLowHumidity;\n        \n        if (humidity < 30){\n            isLowHumidity = true;\n        } else{\n            isLowHumidity = false;\n        }\n    \n        System.out.println(\"Is humidity low? \" + isLowHumidity);\n\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 524
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public boolean checkClothCleanliness(String typeOfClothe, int daysSinceWash) {\n    \n    System.out.println(\"Checking \" + typeOfClothe + \".\");\n\n    if (typeOfClothe == null || daysSinceWash < 0){\n        return false;\n    } else if ((typeOfClothe.equals(\"shirt\") && daysSinceWash <=7 )|| \n            (typeOfClothe.equals(\"jeans\") && daysSinceWash<=3)){\n        return true;\n    } else{ \n        return false;\n    }\n}",
            "id": 938
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (integral_type) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment)))))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (null_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (return_statement (false))) alternative: (if_statement condition: (condition (binary_expression left: (parenthesized_expression (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) right: (parenthesized_expression (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))))) consequence: (block (return_statement (true))) alternative: (block (return_statement (false))))))))\n**\n\n--\npublic boolean checkClothCleanliness(String typeOfClothe, int daysSinceWash) {\n    \n    System.out.println(\"Checking \" + typeOfClothe + \".\");\n\n    if (typeOfClothe == null || daysSinceWash < 0){\n        return false;\n    } else if ((typeOfClothe.equals(\"shirt\") && daysSinceWash <=7 )|| \n            (typeOfClothe.equals(\"jeans\") && daysSinceWash<=3)){\n        return true;\n    } else{ \n        return false;\n    }\n}\n--\n",
        "text": "4",
        "token_cnt": 534
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) throws IOException{\n        \n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Enter 'yes' or 'no': \");\n        String answer = scan.nextLine();\n        \n        boolean consentGiven;\n        try {\n            consentGiven = Boolean.parseBoolean(answer);    \n        } catch (Exception e){\n            System.err.println(\"Invalid entry! Please enter either 'yes' or 'no'.\");\n            return;\n        }\n    \n        int flossedDays = calculateFlossedDays(consentGiven);\n        System.out.printf(\"%d days\",flossedDays);\n        \n    }\n    \n    private static int calculateFlossedDays(boolean consentGiven) {\n        if (!consentGiven) {\n            return 0;\n        } else {\n            \n            return 365; \n        }\n    }\n    \n}",
            "id": 941
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier))) (try_statement body: (block (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))))) (catch_clause (catch_formal_parameter (catch_type (type_identifier)) name: (identifier)) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement)))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (identifier))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (identifier)))))) (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier))) body: (block (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (block (return_statement (decimal_integer_literal))) alternative: (block (return_statement (decimal_integer_literal)))))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) throws IOException{\n        \n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Enter 'yes' or 'no': \");\n        String answer = scan.nextLine();\n        \n        boolean consentGiven;\n        try {\n            consentGiven = Boolean.parseBoolean(answer);    \n        } catch (Exception e){\n            System.err.println(\"Invalid entry! Please enter either 'yes' or 'no'.\");\n            return;\n        }\n    \n        int flossedDays = calculateFlossedDays(consentGiven);\n        System.out.printf(\"%d days\",flossedDays);\n        \n    }\n    \n    private static int calculateFlossedDays(boolean consentGiven) {\n        if (!consentGiven) {\n            return 0;\n        } else {\n            \n            return 365; \n        }\n    }\n    \n}\n--\n",
        "text": "7",
        "token_cnt": 853
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Enter temperature in celsius:\");\n        double tempC = scan.nextDouble();\n\n        \n        double tempF = (tempC * 9 / 5) + 32;\n\n        System.out.printf(\"%.1f°C is %.1f°F\", tempC, tempF);\n\n        \n        String condition = \"\";\n        if (tempF < -40 || tempF > 120)\n            condition = \"Unreliable\";\n        else if (-40 <= tempF && tempF < 0) \n            condition = \"Very Unlikely\";\n        else if (0 <= tempF && tempF < 8) \n            condition = \"Unlikely\";\n        else if (8 <= tempF && tempF < 26) \n            condition = \"Possible\";\n        else if (26 <= tempF && tempF < 47) \n            condition = \"Likely\";\n        else if (47 <= tempF && tempF < 71) \n            condition = \"Very Likely\";\n        else if (71 <= tempF) \n            condition = \"Extremely Likely\";\n        \n        System.out.print(\"\\n\\nReliability of forecast: \");\n        System.out.println(condition);\n\n    }\n}",
            "id": 943
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (decimal_integer_literal))) right: (decimal_integer_literal)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (identifier) (identifier)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (unary_expression operand: (decimal_integer_literal))) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (unary_expression operand: (decimal_integer_literal)) right: (identifier)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (decimal_integer_literal) right: (identifier)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (decimal_integer_literal) right: (identifier)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (decimal_integer_literal) right: (identifier)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (decimal_integer_literal) right: (identifier)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) alternative: (if_statement condition: (condition (binary_expression left: (decimal_integer_literal) right: (identifier))) consequence: (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (escape_sequence) (escape_sequence) (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (identifier)))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Enter temperature in celsius:\");\n        double tempC = scan.nextDouble();\n\n        \n        double tempF = (tempC * 9 / 5) + 32;\n\n        System.out.printf(\"%.1f°C is %.1f°F\", tempC, tempF);\n\n        \n        String condition = \"\";\n        if (tempF < -40 || tempF > 120)\n            condition = \"Unreliable\";\n        else if (-40 <= tempF && tempF < 0) \n            condition = \"Very Unlikely\";\n        else if (0 <= tempF && tempF < 8) \n            condition = \"Unlikely\";\n        else if (8 <= tempF && tempF < 26) \n            condition = \"Possible\";\n        else if (26 <= tempF && tempF < 47) \n            condition = \"Likely\";\n        else if (47 <= tempF && tempF < 71) \n            condition = \"Very Likely\";\n        else if (71 <= tempF) \n            condition = \"Extremely Likely\";\n        \n        System.out.print(\"\\n\\nReliability of forecast: \");\n        System.out.println(condition);\n\n    }\n}\n--\n",
        "text": "14",
        "token_cnt": 1452
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class FlossChecker {\n\n    public static void main(String[] args){\n        int transparency = Integer.parseInt(args[0]);\n\n        String result;\n        \n        \n        if(transparency == 1 || transparency==4){\n            System.out.println(\"Highly transparent options include\");\n            System.out.println(\"-Superfloss\");\n            System.out.println(\"-Waterpik Water Flosser\");\n            result=\"Option chosen\";\n        }\n        \n        else if(transparency == 2||transparency==5){\n            System.out.println(\"Semi transparent options include \");\n            System.out.println(\"-Glide Floss\");\n            System.out.println(\"-Oral B Satin Floss\");\n            result=\"Option chosen\";\n        }\n        \n        else{\n            System.out.println(\"Least transparent option includes \");\n            System.out.println(\"-Dentemp Plastic Filament Floss\");\n            result=\"Option chosen\";\n        }\n        System.out.print(result);\n    }\n}",
            "id": 945
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (identifier)))))))))\n**\n\n--\npublic class FlossChecker {\n\n    public static void main(String[] args){\n        int transparency = Integer.parseInt(args[0]);\n\n        String result;\n        \n        \n        if(transparency == 1 || transparency==4){\n            System.out.println(\"Highly transparent options include\");\n            System.out.println(\"-Superfloss\");\n            System.out.println(\"-Waterpik Water Flosser\");\n            result=\"Option chosen\";\n        }\n        \n        else if(transparency == 2||transparency==5){\n            System.out.println(\"Semi transparent options include \");\n            System.out.println(\"-Glide Floss\");\n            System.out.println(\"-Oral B Satin Floss\");\n            result=\"Option chosen\";\n        }\n        \n        else{\n            System.out.println(\"Least transparent option includes \");\n            System.out.println(\"-Dentemp Plastic Filament Floss\");\n            result=\"Option chosen\";\n        }\n        System.out.print(result);\n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 1040
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public int calculateLowSneezeAndCoughEtiquette(boolean trust) {\n        \n        int score = 0;\n\n        \n        if (trust == true) {\n            \n            score += 5;\n\n            \n            String lastAction = getLastAction();\n\n            \n            if (lastAction.equals(\"sneeze\")) {\n                \n                score += 3;\n\n                \n                boolean usedTissue = didUserUseTissueAfterSneezing();\n\n                \n                if (usedTissue == false) {\n                    score += 2;\n                } else {\n                    score -= 1;\n                }\n                \n            } else if (lastAction.equals(\"cough\")) {\n                \n                score -= 2;\n\n                \n                boolean usedTissue = didUserUseTissueAfterCoughing();\n\n                \n                if (usedTissue == false) {\n                    score -= 2;\n                } else {\n                    score += 1;\n                }\n                \n            } else {\n                System.out.println(\"Invalid input\");\n            }\n            \n        } else {\n            \n            score -= 3;\n\n            \n            boolean usedTissueDuringInteraction = didUserUseTissueDuringInteraction();\n\n            \n            if (usedTissueDuringInteraction == true) {\n                score -= 4;\n            } else {\n                score += 2;\n            }\n        }\n        \n        return score;\n    }",
            "id": 947
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (if_statement condition: (condition (binary_expression left: (identifier) right: (true))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (false))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (false))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (true))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))))))) (return_statement (identifier)))))\n**\n\n--\npublic int calculateLowSneezeAndCoughEtiquette(boolean trust) {\n        \n        int score = 0;\n\n        \n        if (trust == true) {\n            \n            score += 5;\n\n            \n            String lastAction = getLastAction();\n\n            \n            if (lastAction.equals(\"sneeze\")) {\n                \n                score += 3;\n\n                \n                boolean usedTissue = didUserUseTissueAfterSneezing();\n\n                \n                if (usedTissue == false) {\n                    score += 2;\n                } else {\n                    score -= 1;\n                }\n                \n            } else if (lastAction.equals(\"cough\")) {\n                \n                score -= 2;\n\n                \n                boolean usedTissue = didUserUseTissueAfterCoughing();\n\n                \n                if (usedTissue == false) {\n                    score -= 2;\n                } else {\n                    score += 1;\n                }\n                \n            } else {\n                System.out.println(\"Invalid input\");\n            }\n            \n        } else {\n            \n            score -= 3;\n\n            \n            boolean usedTissueDuringInteraction = didUserUseTissueDuringInteraction();\n\n            \n            if (usedTissueDuringInteraction == true) {\n                score -= 4;\n            } else {\n                score += 2;\n            }\n        }\n        \n        return score;\n    }\n--\n",
        "text": "6",
        "token_cnt": 1123
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public void updatePersonalOrganization(String name, String phoneNumber) {\n        \n        boolean consentGiven = false;\n        \n        \n        while (!consentGiven) {\n            System.out.println(\"Do you give permission to send reminder notifications to \" + name + \"'s phone number? (y/n)\");\n            Scanner scanner = new Scanner(System.in);\n            String input = scanner.nextLine();\n            \n            if (input.equalsIgnoreCase(\"y\")) {\n                consentGiven = true;\n            } else if (input.equalsIgnoreCase(\"n\")){\n                System.out.println(\"Please provide their contact information again.\");\n            } else {\n                System.out.println(\"Invalid Input. Please enter y for yes or n for no\");\n            }\n        }\n    \n        \n        if (consentGiven) {\n            \n            sendReminderSMS(phoneNumber);\n        } else {\n            \n            storeInfoInDatabase(name, phoneNumber);\n        }    \n    }\n    \n    private void sendReminderSMS(String phoneNumber) {\n        \n        \n    }\n\n    private void storeInfoInDatabase(String name, String phoneNumber) {\n        \n        \n    }\n}",
            "id": 953
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (while_statement condition: (condition (unary_expression operand: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment)))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true)))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))) (if_statement condition: (condition (identifier)) consequence: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))))) alternative: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier)))))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block)) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (type_identifier) name: (identifier))) body: (block)) (ERROR))\n**\n\n--\npublic void updatePersonalOrganization(String name, String phoneNumber) {\n        \n        boolean consentGiven = false;\n        \n        \n        while (!consentGiven) {\n            System.out.println(\"Do you give permission to send reminder notifications to \" + name + \"'s phone number? (y/n)\");\n            Scanner scanner = new Scanner(System.in);\n            String input = scanner.nextLine();\n            \n            if (input.equalsIgnoreCase(\"y\")) {\n                consentGiven = true;\n            } else if (input.equalsIgnoreCase(\"n\")){\n                System.out.println(\"Please provide their contact information again.\");\n            } else {\n                System.out.println(\"Invalid Input. Please enter y for yes or n for no\");\n            }\n        }\n    \n        \n        if (consentGiven) {\n            \n            sendReminderSMS(phoneNumber);\n        } else {\n            \n            storeInfoInDatabase(name, phoneNumber);\n        }    \n    }\n    \n    private void sendReminderSMS(String phoneNumber) {\n        \n        \n    }\n\n    private void storeInfoInDatabase(String name, String phoneNumber) {\n        \n        \n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 998
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) {\n        \n        int maths = 80;\n        int physics = 95;\n        int chemistry = 72;\n\n        \n        float percMaths = (float)maths / 100;\n        float percPhysics = (float)physics / 100;\n        float percChemistry = (float)chemistry / 100;\n        \n        \n        float avgMarks = (percMaths + percPhysics + percChemistry) / 3; \n\n        System.out.println(\"Overall Average Marks Obtained By The Student Is \" +avgMarks);\n\n        \n        if (avgMarks >= 40){\n            System.out.println(\"Student Passed With Distinction\");\n        } else if (avgMarks < 40 && avgMarks >= 36) {\n            System.out.println(\"Student Passed With First Class Honors\");\n        } else if (avgMarks < 36 && avgMarks >= 32) {\n            System.out.println(\"Student Passed With Second Class Upper Division\");\n        } else if (avgMarks < 32 && avgMarks >= 28) {\n            System.out.println(\"Student Passed With Second Class Lower Division\");\n        } else{\n            System.out.println(\"Failed To Clear The Course\");\n        }\n\n    }\n}",
            "id": 957
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (cast_expression type: (floating_point_type) value: (identifier)) right: (decimal_integer_literal)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (cast_expression type: (floating_point_type) value: (identifier)) right: (decimal_integer_literal)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (cast_expression type: (floating_point_type) value: (identifier)) right: (decimal_integer_literal)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (identifier))) right: (decimal_integer_literal)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) {\n        \n        int maths = 80;\n        int physics = 95;\n        int chemistry = 72;\n\n        \n        float percMaths = (float)maths / 100;\n        float percPhysics = (float)physics / 100;\n        float percChemistry = (float)chemistry / 100;\n        \n        \n        float avgMarks = (percMaths + percPhysics + percChemistry) / 3; \n\n        System.out.println(\"Overall Average Marks Obtained By The Student Is \" +avgMarks);\n\n        \n        if (avgMarks >= 40){\n            System.out.println(\"Student Passed With Distinction\");\n        } else if (avgMarks < 40 && avgMarks >= 36) {\n            System.out.println(\"Student Passed With First Class Honors\");\n        } else if (avgMarks < 36 && avgMarks >= 32) {\n            System.out.println(\"Student Passed With Second Class Upper Division\");\n        } else if (avgMarks < 32 && avgMarks >= 28) {\n            System.out.println(\"Student Passed With Second Class Lower Division\");\n        } else{\n            System.out.println(\"Failed To Clear The Course\");\n        }\n\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 1323
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public boolean checkHealth() {\n        \n        double bp = getBloodPressure();\n        if (bp > 130 || bp < 90){\n            return false;\n        }\n        \n        \n        double chol = getCholesterolLevel();\n        if(chol >200){\n            return false;\n        }\n\n        \n        double wt=getWeight();\n        if(wt>185){\n            return false;\n        }\n\n        \n        double glucose = getSugarLevel();\n        if(glucose>200){\n            return false;\n        }\n\n        System.out.println(\"All healthy!\");\n        return true;\n\n    }",
            "id": 958
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (return_statement (false)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (return_statement (false)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (return_statement (false)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (return_statement (false)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement (true)))))\n**\n\n--\npublic boolean checkHealth() {\n        \n        double bp = getBloodPressure();\n        if (bp > 130 || bp < 90){\n            return false;\n        }\n        \n        \n        double chol = getCholesterolLevel();\n        if(chol >200){\n            return false;\n        }\n\n        \n        double wt=getWeight();\n        if(wt>185){\n            return false;\n        }\n\n        \n        double glucose = getSugarLevel();\n        if(glucose>200){\n            return false;\n        }\n\n        System.out.println(\"All healthy!\");\n        return true;\n\n    }\n--\n",
        "text": "8",
        "token_cnt": 647
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) throws InterruptedException{\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number of days since last inspection:\");\n        int dayssinceinspection = scan.nextInt();\n\n        \n        if (dayssinceinspection <=0){\n            System.out.println(\"Invalid Input! Please enter positive integer value.\");\n            return;\n        }\n        \n        Random rand = new Random();\n        double probability_of_failure = .15;\n\n        boolean failure=false;\n        while (!failure && dayssinceinspection>0){\n            Thread.sleep((long)(rand.nextDouble()*24*60*60*1000));\n\n            if (Math.random()<probability_of_failure)\n                failure=true;\n            else \n                dayssinceinspection--;\n        }\n        \n       if (failure)\n          System.out.println(\"Failed after \"+dayssinceinspection+\"days\"); \n       else \n          System.out.println(\"Success!\"); \n    }\n}",
            "id": 959
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_floating_point_literal))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (while_statement condition: (condition (binary_expression left: (unary_expression operand: (identifier)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) body: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (cast_expression type: (integral_type) value: (parenthesized_expression (binary_expression left: (binary_expression left: (binary_expression left: (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (decimal_integer_literal)) right: (decimal_integer_literal)) right: (decimal_integer_literal)) right: (decimal_integer_literal))))))) (if_statement condition: (condition (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (identifier))) consequence: (expression_statement (assignment_expression left: (identifier) right: (true))) alternative: (expression_statement (update_expression (identifier)))))) (if_statement condition: (condition (identifier)) consequence: (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment)))))) alternative: (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) throws InterruptedException{\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number of days since last inspection:\");\n        int dayssinceinspection = scan.nextInt();\n\n        \n        if (dayssinceinspection <=0){\n            System.out.println(\"Invalid Input! Please enter positive integer value.\");\n            return;\n        }\n        \n        Random rand = new Random();\n        double probability_of_failure = .15;\n\n        boolean failure=false;\n        while (!failure && dayssinceinspection>0){\n            Thread.sleep((long)(rand.nextDouble()*24*60*60*1000));\n\n            if (Math.random()<probability_of_failure)\n                failure=true;\n            else \n                dayssinceinspection--;\n        }\n        \n       if (failure)\n          System.out.println(\"Failed after \"+dayssinceinspection+\"days\"); \n       else \n          System.out.println(\"Success!\"); \n    }\n}\n--\n",
        "text": "7",
        "token_cnt": 1151
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n    const TOILET_PAPER_THRESHOLD = 1;\n    \n    function checkToiletPaperLevel(toiletPaperCount) {\n      if (toiletPaperCount < TOILET_PAPER_THRESHOLD) {\n        console.log(`There isn't enough toilet paper! Please buy more`);\n      } else {\n        console.log(\"The toilet paper level looks good!\");\n      }\n    }\n    \n    function dryRunCheckToiletHygiene() {\n      \n      let toiletPaperCount = 2;\n      \n      \n      checkToiletPaperLevel(toiletPaperCount);\n    }\n    \n    function wetRunCheckToiletHygiene() {\n      \n      \n      \n      \n      checkToiletPaperLevel(actualToiletPaperCount);\n    }\n    \n    function checkToiletHygiene() {\n      try {\n        dryRunCheckToiletHygiene();\n        wetRunCheckToiletHygiene();\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    \n    checkToiletHygiene();",
            "id": 963
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (method_declaration type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (MISSING identifier))) body: (block (if_statement condition: (condition (binary_expression left: (identifier) right: (identifier))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (UNEXPECTED '\\n')) (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \")\")))))))) (method_declaration type: (type_identifier) name: (identifier) parameters: (formal_parameters) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier)))))) (method_declaration type: (type_identifier) name: (identifier) parameters: (formal_parameters) body: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier)))))) (method_declaration type: (type_identifier) name: (identifier) parameters: (formal_parameters) body: (block (try_statement body: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list)))) (catch_clause (catch_formal_parameter (catch_type (type_identifier)) name: (MISSING identifier)) body: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list))))\n**\n\n--\nscript\n    const TOILET_PAPER_THRESHOLD = 1;\n    \n    function checkToiletPaperLevel(toiletPaperCount) {\n      if (toiletPaperCount < TOILET_PAPER_THRESHOLD) {\n        console.log(`There isn't enough toilet paper! Please buy more`);\n      } else {\n        console.log(\"The toilet paper level looks good!\");\n      }\n    }\n    \n    function dryRunCheckToiletHygiene() {\n      \n      let toiletPaperCount = 2;\n      \n      \n      checkToiletPaperLevel(toiletPaperCount);\n    }\n    \n    function wetRunCheckToiletHygiene() {\n      \n      \n      \n      \n      checkToiletPaperLevel(actualToiletPaperCount);\n    }\n    \n    function checkToiletHygiene() {\n      try {\n        dryRunCheckToiletHygiene();\n        wetRunCheckToiletHygiene();\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    \n    checkToiletHygiene();\n--\n",
        "text": "8\n\nОбъяснение:\n\nЦикломатическая сложность — это мера сложности программного кода, которая",
        "token_cnt": 785
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Have you given us permission?\");\n        String answer = scan.nextLine();\n\n        \n        if (answer.equalsIgnoreCase(\"yes\")) {\n            System.out.println(\"Great! We can now continue.\");\n        } else if (answer.equalsIgnoreCase(\"no\")){\n            System.out.println(\"We cannot proceed without this information. Please contact our support team at [email protected] \");\n        } else { \n            System.out.println(\"Invalid Input\");\n        }\n\n    }\n}",
            "id": 964
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Have you given us permission?\");\n        String answer = scan.nextLine();\n\n        \n        if (answer.equalsIgnoreCase(\"yes\")) {\n            System.out.println(\"Great! We can now continue.\");\n        } else if (answer.equalsIgnoreCase(\"no\")){\n            System.out.println(\"We cannot proceed without this information. Please contact our support team at [email protected] \");\n        } else { \n            System.out.println(\"Invalid Input\");\n        }\n\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 681
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class HealthCheck {\n\n    public static void main(String[] args) {\n        int age = Integer.parseInt(args[0]); \n\n        String result;\n\n        if (age < 18) {\n            System.out.println(\"Sorry \" + args[0] + \", but you must be at least 18 years old to participate.\");\n            return;\n        } \n\n        if ((age % 4 == 0 && age % 100 != 0) || age % 400 == 0) { \n            \n            result = \"Happy birthday! Since this is a leap year, you can expect another whole month of celebrations!\"; \n        } else {\n            result = \"Happy Birthday! Enjoy your special day.\";    \n        }\n        \n        System.out.println(result);\n    }\n}",
            "id": 971
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (array_access array: (identifier) index: (decimal_integer_literal))) right: (string_literal (string_fragment)))))) (return_statement))) (if_statement condition: (condition (binary_expression left: (parenthesized_expression (binary_expression left: (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (decimal_integer_literal)) right: (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (decimal_integer_literal)))) right: (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (identifier)))))))))\n**\n\n--\npublic class HealthCheck {\n\n    public static void main(String[] args) {\n        int age = Integer.parseInt(args[0]); \n\n        String result;\n\n        if (age < 18) {\n            System.out.println(\"Sorry \" + args[0] + \", but you must be at least 18 years old to participate.\");\n            return;\n        } \n\n        if ((age % 4 == 0 && age % 100 != 0) || age % 400 == 0) { \n            \n            result = \"Happy birthday! Since this is a leap year, you can expect another whole month of celebrations!\"; \n        } else {\n            result = \"Happy Birthday! Enjoy your special day.\";    \n        }\n        \n        System.out.println(result);\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 756
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\nfunction determineToiletHygiene(reliability) {\n  \n  if (typeof reliability !== 'number') {\n    return 'Invalid input';\n  }\n  \n  \n  let levelOfConcern;\n  if (reliability >= 0 && reliability <= .33) {\n    levelOfConcern = 'Low';\n  } else if (reliability > .33 && reliability < .67) {\n    levelOfConcern = 'Medium';\n  } else if (reliability >= .67) {\n    levelOfConcern = 'High';\n  } else {\n    return 'Error calculating level of concern';\n  }\n\n  \n  switch (levelOfConcern) {\n    case 'Low':\n      console.log('Inform user about proper cleaning techniques');\n      break;\n    case 'Medium':\n      console.log('Recommend additional disinfectant products');\n      break;\n    case 'High':\n      console.log('Suggest professional cleaning service');\n      break;\n    default:\n      return 'Unknown error occurred';\n  }\n\n  return `Level of concern determined as ${levelOfConcern}`;\n}",
            "id": 975
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (if_statement condition: (condition (ERROR (type_identifier)) (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (return_statement (character_literal)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_floating_point_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_floating_point_literal)) right: (binary_expression left: (identifier) right: (decimal_floating_point_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_floating_point_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal)))) alternative: (block (return_statement (character_literal)))))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (character_literal)) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal)))) (break_statement)) (switch_block_statement_group (switch_label (character_literal)) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal)))) (break_statement)) (switch_block_statement_group (switch_label (character_literal)) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal)))) (break_statement)) (switch_block_statement_group (switch_label) (return_statement (character_literal))))) (return_statement (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier)) (identifier) (ERROR (UNEXPECTED '`')))))\n**\n\n--\nscript\nfunction determineToiletHygiene(reliability) {\n  \n  if (typeof reliability !== 'number') {\n    return 'Invalid input';\n  }\n  \n  \n  let levelOfConcern;\n  if (reliability >= 0 && reliability <= .33) {\n    levelOfConcern = 'Low';\n  } else if (reliability > .33 && reliability < .67) {\n    levelOfConcern = 'Medium';\n  } else if (reliability >= .67) {\n    levelOfConcern = 'High';\n  } else {\n    return 'Error calculating level of concern';\n  }\n\n  \n  switch (levelOfConcern) {\n    case 'Low':\n      console.log('Inform user about proper cleaning techniques');\n      break;\n    case 'Medium':\n      console.log('Recommend additional disinfectant products');\n      break;\n    case 'High':\n      console.log('Suggest professional cleaning service');\n      break;\n    default:\n      return 'Unknown error occurred';\n  }\n\n  return `Level of concern determined as ${levelOfConcern}`;\n}\n--\n",
        "text": "12",
        "token_cnt": 916
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\nfunction checkHealth(bias) {\n  \n  console.log(\"Dry Run:\")\n\n  if (bias === \"very optimistic\") {\n    console.log(\"* Take vitamins every morning.\")\n    console.log(\"* Get enough sleep each night.\")\n    console.log(\"* Exercise for at least 30 minutes daily.\")\n  } else if (bias === \"optimistic\") {\n    console.log(\"* Schedule routine doctor visits.\")\n    console.log(\"* Eat balanced meals throughout the day.\")\n    console.log(\"* Limit screen time before bedtime.\")\n  } else if (bias === \"realistc\") {\n    console.log(\"* Monitor symptoms for any changes.\")\n    console.log(\"* Adjust lifestyle habits as needed.\")\n    console.log(\"* Reach out for support when struggling.\")\n  } else {\n    console.log(\"* Seek immediate medical attention.\")\n    console.log(\"* Rest and recover until feeling better.\")\n    console.log(\"* Avoid all strenuous activity.\")\n  }\n  \n  \n\n  \n  if (bias === 'very optimistic') {\n    return `Take your vitamins! And get some exercise while you’re at it.`\n  } \n  else if (bias === 'optimistic') { \n    return `Make sure to schedule those yearly physicals, eat right, and limit screen time!`\n  } \n  else if (bias === 'realistic') { \n    return `Keep track of any new symptoms and adjust accordingly`\n  } \n  else { \n    return `Go see a professional ASAP!`\n  }\n}",
            "id": 978
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\")) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (method_invocation object: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (ERROR (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (ERROR (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\"))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (method_invocation object: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (ERROR (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (ERROR (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\"))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (method_invocation object: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (ERROR (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (ERROR (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\"))) alternative: (block (expression_statement (method_invocation object: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (ERROR (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (ERROR (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\")))))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (return_statement (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (identifier)) (unary_expression (ERROR (type_identifier) (identifier) (type_identifier) (identifier)) operand: (method_invocation name: (identifier) (ERROR (UNEXPECTED 8217) (identifier) (identifier) (identifier) (UNEXPECTED '`')) arguments: (argument_list (binary_expression left: (identifier) (ERROR) right: (character_literal))))) (MISSING \";\")) (block (ERROR (ERROR (UNEXPECTED '`') (type_identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier)) (UNEXPECTED '`'))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (parenthesized_expression (binary_expression left: (identifier) (ERROR) right: (character_literal))) (MISSING \";\")) (block (ERROR (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier)) (ERROR (identifier) (identifier) (identifier) (identifier) (UNEXPECTED '`') (UNEXPECTED '`') (identifier) (identifier) (identifier) (identifier)) (identifier) (UNEXPECTED '`'))))) (MISSING \"}\")))\n**\n\n--\nscript\nfunction checkHealth(bias) {\n  \n  console.log(\"Dry Run:\")\n\n  if (bias === \"very optimistic\") {\n    console.log(\"* Take vitamins every morning.\")\n    console.log(\"* Get enough sleep each night.\")\n    console.log(\"* Exercise for at least 30 minutes daily.\")\n  } else if (bias === \"optimistic\") {\n    console.log(\"* Schedule routine doctor visits.\")\n    console.log(\"* Eat balanced meals throughout the day.\")\n    console.log(\"* Limit screen time before bedtime.\")\n  } else if (bias === \"realistc\") {\n    console.log(\"* Monitor symptoms for any changes.\")\n    console.log(\"* Adjust lifestyle habits as needed.\")\n    console.log(\"* Reach out for support when struggling.\")\n  } else {\n    console.log(\"* Seek immediate medical attention.\")\n    console.log(\"* Rest and recover until feeling better.\")\n    console.log(\"* Avoid all strenuous activity.\")\n  }\n  \n  \n\n  \n  if (bias === 'very optimistic') {\n    return `Take your vitamins! And get some exercise while you’re at it.`\n  } \n  else if (bias === 'optimistic') { \n    return `Make sure to schedule those yearly physicals, eat right, and limit screen time!`\n  } \n  else if (bias === 'realistic') { \n    return `Keep track of any new symptoms and adjust accordingly`\n  } \n  else { \n    return `Go see a professional ASAP!`\n  }\n}\n--\n",
        "text": "14",
        "token_cnt": 1406
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class HandWash {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Enter time spent washing hand:\");\n        int timeSpentWashingHand = scan.nextInt();\n\n        System.out.println(\"Enter number of times water splashed during handwash\");\n        int numberOfWaterSplashesDuringHandwash = scan.nextInt();\n\n        \n        int totalPoints = (timeSpentWashingHand / 20) + ((numberOfWaterSplashesDuringHandwash * 3) / 10);\n        \n        \n        System.out.println(\"Total Score: \" +totalPoints);\n        if (totalPoints >=85){\n            System.out.println(\"Good job! Your overall health risk from poor handwashing habits appears to be LOW.\");\n        } else if (totalPoints < 40 ){\n            System.out.println(\"Your overall health risk from poor handwashing habits appears to be HIGH!\");\n        } else{\n            System.out.println(\"Your overall health risk from poor handwashing habits falls between MODERATE and HIGH.\");\n        }\n\n    }\n}",
            "id": 979
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal))) right: (parenthesized_expression (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal))) right: (decimal_integer_literal)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))))\n**\n\n--\nimport java.util.*;\npublic class HandWash {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Enter time spent washing hand:\");\n        int timeSpentWashingHand = scan.nextInt();\n\n        System.out.println(\"Enter number of times water splashed during handwash\");\n        int numberOfWaterSplashesDuringHandwash = scan.nextInt();\n\n        \n        int totalPoints = (timeSpentWashingHand / 20) + ((numberOfWaterSplashesDuringHandwash * 3) / 10);\n        \n        \n        System.out.println(\"Total Score: \" +totalPoints);\n        if (totalPoints >=85){\n            System.out.println(\"Good job! Your overall health risk from poor handwashing habits appears to be LOW.\");\n        } else if (totalPoints < 40 ){\n            System.out.println(\"Your overall health risk from poor handwashing habits appears to be HIGH!\");\n        } else{\n            System.out.println(\"Your overall health risk from poor handwashing habits falls between MODERATE and HIGH.\");\n        }\n\n    }\n}\n--\n",
        "text": "9",
        "token_cnt": 1031
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "/**\n     * This method determines whether extreme dental hygiene including flossing is appropriate based \n     * on the reliability level provided by the user (expert). If the reliability level is 1 or less, \n     * then no recommendation will be made. Otherwise, if the reliability level is between 2 and 4, \n     * then a strong recommendation will be given to include flossing as part of their daily routine.\n     * If the reliability level is 5 or more, then a very strong recommendation will be made to include \n     * flossing as well as additional tips on improving overall dental health. The method returns a \n     * string containing the recommended action along with a confidence score.\n     */\n    public String determineExtremeDentalHygiene(int reliabilityLevel) {\n        \n        boolean recommendFlossing = false;\n        int minReliabilityLevel = 1;\n        int maxReliabilityLevel = 5;\n        double confidenceScore = 0.0d;\n        \n        \n        if (reliabilityLevel >= minReliabilityLevel && reliabilityLevel <= maxReliabilityLevel) {\n            \n            if (reliabilityLevel == minReliabilityLevel) {\n                confidenceScore = 0.0d;\n            } else if (reliabilityLevel == maxReliabilityLevel) {\n                confidenceScore = 1.0d;\n            } else {\n                confidenceScore = ((double)(maxReliabilityLevel - reliabilityLevel)) / \n                    ((double)(maxReliabilityLevel - minReliabilityLevel));\n            }\n            \n            \n            \n            if (confidenceScore < 0.6d) {\n                recommendFlossing = false;\n                return \"No recommendation (\" + confidenceScore + \")\";\n            } else if (confidenceScore >= 0.6d && confidenceScore < 0.8d) {\n                recommendFlossing = true;\n                return \"Strong recommendation to incorporate flossing into daily routine (\" +\n                    confidenceScore + \")\";\n            } else {\n                recommendFlossing = true;\n                return \"Very strong recommendation to incorporate flossing and improve overall\" +\n                        \" dental health (\" + confidenceScore + \")\";\n            }\n        } else {\n            return \"Invalid reliability level\";\n        }\n    }",
            "id": 989
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (block_comment) (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (integral_type) name: (identifier))) body: (block (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_floating_point_literal))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (binary_expression left: (identifier) right: (identifier)))) consequence: (block (if_statement condition: (condition (binary_expression left: (identifier) right: (identifier))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_floating_point_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (identifier))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_floating_point_literal)))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (parenthesized_expression (cast_expression type: (floating_point_type) value: (parenthesized_expression (binary_expression left: (identifier) right: (identifier))))) right: (parenthesized_expression (cast_expression type: (floating_point_type) value: (parenthesized_expression (binary_expression left: (identifier) right: (identifier))))))))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_floating_point_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (false))) (return_statement (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_floating_point_literal)) right: (binary_expression left: (identifier) right: (decimal_floating_point_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true))) (return_statement (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (true))) (return_statement (binary_expression left: (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (string_literal (string_fragment))) right: (identifier)) right: (string_literal (string_fragment)))))))) alternative: (block (return_statement (string_literal (string_fragment))))))))\n**\n\n--\n/**\n     * This method determines whether extreme dental hygiene including flossing is appropriate based \n     * on the reliability level provided by the user (expert). If the reliability level is 1 or less, \n     * then no recommendation will be made. Otherwise, if the reliability level is between 2 and 4, \n     * then a strong recommendation will be given to include flossing as part of their daily routine.\n     * If the reliability level is 5 or more, then a very strong recommendation will be made to include \n     * flossing as well as additional tips on improving overall dental health. The method returns a \n     * string containing the recommended action along with a confidence score.\n     */\n    public String determineExtremeDentalHygiene(int reliabilityLevel) {\n        \n        boolean recommendFlossing = false;\n        int minReliabilityLevel = 1;\n        int maxReliabilityLevel = 5;\n        double confidenceScore = 0.0d;\n        \n        \n        if (reliabilityLevel >= minReliabilityLevel && reliabilityLevel <= maxReliabilityLevel) {\n            \n            if (reliabilityLevel == minReliabilityLevel) {\n                confidenceScore = 0.0d;\n            } else if (reliabilityLevel == maxReliabilityLevel) {\n                confidenceScore = 1.0d;\n            } else {\n                confidenceScore = ((double)(maxReliabilityLevel - reliabilityLevel)) / \n                    ((double)(maxReliabilityLevel - minReliabilityLevel));\n            }\n            \n            \n            \n            if (confidenceScore < 0.6d) {\n                recommendFlossing = false;\n                return \"No recommendation (\" + confidenceScore + \")\";\n            } else if (confidenceScore >= 0.6d && confidenceScore < 0.8d) {\n                recommendFlossing = true;\n                return \"Strong recommendation to incorporate flossing into daily routine (\" +\n                    confidenceScore + \")\";\n            } else {\n                recommendFlossing = true;\n                return \"Very strong recommendation to incorporate flossing and improve overall\" +\n                        \" dental health (\" + confidenceScore + \")\";\n            }\n        } else {\n            return \"Invalid reliability level\";\n        }\n    }\n--\n",
        "text": "31",
        "token_cnt": 1314
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) throws IOException{\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Enter nail condition (0 - Poor, 1 - Fair, 2 - Good, 3 - Very good): \");\n        int condition = scan.nextInt();\n        \n        String result;\n        switch (condition){\n            case 0:\n                result = \"Poor\";\n                break;\n            case 1:\n                result = \"Fair\";\n                break;\n            case 2:\n                result = \"Good\";\n                break;\n            default: \n                result = \"Very good\";\n        }\n    \n        \n        System.out.printf(\"Your entered score was %s \\n\",result);\n\n    }\n}",
            "id": 992
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (break_statement)) (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (break_statement)) (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence)) (identifier)))))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) throws IOException{\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Enter nail condition (0 - Poor, 1 - Fair, 2 - Good, 3 - Very good): \");\n        int condition = scan.nextInt();\n        \n        String result;\n        switch (condition){\n            case 0:\n                result = \"Poor\";\n                break;\n            case 1:\n                result = \"Fair\";\n                break;\n            case 2:\n                result = \"Good\";\n                break;\n            default: \n                result = \"Very good\";\n        }\n    \n        \n        System.out.printf(\"Your entered score was %s \\n\",result);\n\n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 751
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Etiquette {\n\n    public static void main(String[] args) {\n        String action = takeAction();\n        System.out.println(\"The proper way to \" + action + \" is:\");\n\n        \n        if (action.equals(\"cough\")) {\n            System.out.println(\"- Use a tissue and cover mouth.\");\n            System.out.println(\"- Throw used tissue away properly.\");\n        } \n        \n        else if (action.equals(\"sneeze\")){ \n            System.out.println(\"- Cough or sneeze into elbow\");\n            System.out.println(\"- Dispose of used tissue responsibly.\");\n        } \n    }\n\n    private static String takeAction() {\n        Scanner scan = new Scanner(System.in);\n        System.out.print(\"Would you like to cough or sneeze? \");\n        return scan.nextLine().toLowerCase();\n    }\n}",
            "id": 993
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment)))))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))) (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list))))))))\n**\n\n--\npublic class Etiquette {\n\n    public static void main(String[] args) {\n        String action = takeAction();\n        System.out.println(\"The proper way to \" + action + \" is:\");\n\n        \n        if (action.equals(\"cough\")) {\n            System.out.println(\"- Use a tissue and cover mouth.\");\n            System.out.println(\"- Throw used tissue away properly.\");\n        } \n        \n        else if (action.equals(\"sneeze\")){ \n            System.out.println(\"- Cough or sneeze into elbow\");\n            System.out.println(\"- Dispose of used tissue responsibly.\");\n        } \n    }\n\n    private static String takeAction() {\n        Scanner scan = new Scanner(System.in);\n        System.out.print(\"Would you like to cough or sneeze? \");\n        return scan.nextLine().toLowerCase();\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 895
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n    const checkPricing = (consent) => {\n      \n      console.log(`Current consent status: ${consent ? 'Yes' : 'No'}`)\n  \n      let action;\n      if (consent === true) {\n        action = `Show professional prices`\n      } else if (consent === false) {\n        action = `Hide professional prices`\n      } else {\n        action = `Unknown consent status`;\n      }\n  \n      return action;\n    };\n    \n    module.exports = checkPricing;",
            "id": 996
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier) (ERROR (inferred_parameters (identifier))) (ERROR) value: (array_initializer (ERROR (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (identifier)) (ternary_expression condition: (identifier) (ERROR (identifier)) consequence: (character_literal) alternative: (character_literal)) (ERROR (UNEXPECTED '`')))) (identifier) (identifier) (parenthesized_expression (binary_expression left: (identifier) (ERROR) right: (true))) (array_initializer (assignment_expression left: (identifier) (ERROR (UNEXPECTED '`') (type_identifier) (identifier)) right: (identifier)) (ERROR (UNEXPECTED '`'))) (identifier) (parenthesized_expression (binary_expression left: (identifier) (ERROR) right: (false))) (array_initializer (assignment_expression left: (identifier) (ERROR (UNEXPECTED '`') (type_identifier) (identifier)) right: (identifier)) (ERROR (UNEXPECTED '`'))) (identifier) (array_initializer (assignment_expression left: (identifier) (ERROR (UNEXPECTED '`') (type_identifier) (identifier)) right: (identifier)) (ERROR (UNEXPECTED '`'))) (identifier)) (identifier) (ERROR)))) (expression_statement (assignment_expression left: (field_access object: (identifier) field: (identifier)) right: (identifier))))\n**\n\n--\nscript\n    const checkPricing = (consent) => {\n      \n      console.log(`Current consent status: ${consent ? 'Yes' : 'No'}`)\n  \n      let action;\n      if (consent === true) {\n        action = `Show professional prices`\n      } else if (consent === false) {\n        action = `Hide professional prices`\n      } else {\n        action = `Unknown consent status`;\n      }\n  \n      return action;\n    };\n    \n    module.exports = checkPricing;\n--\n",
        "text": "6\n\nОбъяснение:\nВ приведённом фрагменте кода цикломатическая сложность равна количеству линей",
        "token_cnt": 531
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class FinancialAdvisor {\n\n    public static String determineBudgetingRecommendation(String customerBias) {\n        \n        String noRecommend = \"No specific recommendation provided.\";\n        String conservativeRec = \"Consider seeking guidance from a financial adviser who has experience managing \";\n        String moderateRec = \"A balanced portfolio might suit someone with a \"+customerBias+\".\";\n        String aggressiveRec = \"An aggresive investment strategy may not be suitable for those with a \"+customerBias;\n\n        \n        if (customerBias == null || customerBias.equals(\"\")) \n            return noRecommend;\n        else if (customerBias.equalsIgnoreCase(\"conservative\"))\n            return conservativeRec;\n        else if (customerBias.equalsIgnoreCase(\"moderate\"))\n            return moderateRec;\n        else \n            return aggressiveRec;\n    }\n}",
            "id": 997
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (string_literal (string_fragment)) right: (identifier)))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (null_literal)) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal))))) consequence: (return_statement (identifier)) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (return_statement (identifier)) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (return_statement (identifier)) alternative: (return_statement (identifier))))))))))\n**\n\n--\npublic class FinancialAdvisor {\n\n    public static String determineBudgetingRecommendation(String customerBias) {\n        \n        String noRecommend = \"No specific recommendation provided.\";\n        String conservativeRec = \"Consider seeking guidance from a financial adviser who has experience managing \";\n        String moderateRec = \"A balanced portfolio might suit someone with a \"+customerBias+\".\";\n        String aggressiveRec = \"An aggresive investment strategy may not be suitable for those with a \"+customerBias;\n\n        \n        if (customerBias == null || customerBias.equals(\"\")) \n            return noRecommend;\n        else if (customerBias.equalsIgnoreCase(\"conservative\"))\n            return conservativeRec;\n        else if (customerBias.equalsIgnoreCase(\"moderate\"))\n            return moderateRec;\n        else \n            return aggressiveRec;\n    }\n}\n--\n",
        "text": "6\n\nОбъяснение:\nВ приведённом фрагменте кода можно выделить шесть блоков, которые",
        "token_cnt": 656
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class CheckExtremeWeather {\n\n    public static boolean checkHumidity(double humidity) {\n        \n        if (humidity <= 30) {\n            System.out.println(\"Low humidity detected! Alerting engineer.\");\n            return true;\n        }\n\n        \n        else if (humidity >= 85) {\n            System.out.println(\"High humidity detected! Alerting maintenance team.\");\n            return true;\n        }\n\n        \n        System.out.println(\"Normal humidity level. Nothing to report.\");\n        return false;\n    }\n\n    public static void main(String[] args) {\n        double humidity = 60; \n        boolean result = checkHumidity(humidity);\n        System.out.println(\"Result: \" + result);\n    }\n}",
            "id": 1004
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (floating_point_type) name: (identifier))) body: (block (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement (true))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement (true))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement (false)))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (identifier))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))))))\n**\n\n--\npublic class CheckExtremeWeather {\n\n    public static boolean checkHumidity(double humidity) {\n        \n        if (humidity <= 30) {\n            System.out.println(\"Low humidity detected! Alerting engineer.\");\n            return true;\n        }\n\n        \n        else if (humidity >= 85) {\n            System.out.println(\"High humidity detected! Alerting maintenance team.\");\n            return true;\n        }\n\n        \n        System.out.println(\"Normal humidity level. Nothing to report.\");\n        return false;\n    }\n\n    public static void main(String[] args) {\n        double humidity = 60; \n        boolean result = checkHumidity(humidity);\n        System.out.println(\"Result: \" + result);\n    }\n}\n--\n",
        "text": "9",
        "token_cnt": 709
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public boolean determineLowSneezeAndCoughEtiquette(String trust) {\n    \n    String handWashing = \"None\";\n    \n    \n    if (trust == \"expert\") {\n        \n        if (methodOfSneezingOrCoughing == \"sneeze\") {\n            \n            handwashing = \"Hand wash\";\n        } else if (methodOfSneezingOrCoughing == \"cough\") {\n            \n            handwashing = \"Hand wash\";\n        }\n        \n        return true;\n        \n    } else {\n        \n        return false;\n    }\n    \n}",
            "id": 1006
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))))) (return_statement (true))) alternative: (block (return_statement (false)))))))\n**\n\n--\npublic boolean determineLowSneezeAndCoughEtiquette(String trust) {\n    \n    String handWashing = \"None\";\n    \n    \n    if (trust == \"expert\") {\n        \n        if (methodOfSneezingOrCoughing == \"sneeze\") {\n            \n            handwashing = \"Hand wash\";\n        } else if (methodOfSneezingOrCoughing == \"cough\") {\n            \n            handwashing = \"Hand wash\";\n        }\n        \n        return true;\n        \n    } else {\n        \n        return false;\n    }\n    \n}\n--\n",
        "text": "6\n\nОбъяснение:\n\nЦикломатическая сложность — это мера сложности программы, которая учитывает",
        "token_cnt": 431
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class SpaceHygiene {\n\n    public static void main(String[] args) throws IOException{\n        \n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number of people present:\");\n        int numPeople = scan.nextInt();\n\n        \n        String result;\n        if (numPeople <=3){\n            result=\"Low\";\n        } else if (numPeople > 3 && numPeople <6 ){\n            result =\"Medium\";\n        } else {\n           result= \"High\";}\n        \n        \n        System.out.println(\"Hygiene Level: \"+result);\n    }\n}",
            "id": 1017
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))))))\n**\n\n--\npublic class SpaceHygiene {\n\n    public static void main(String[] args) throws IOException{\n        \n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number of people present:\");\n        int numPeople = scan.nextInt();\n\n        \n        String result;\n        if (numPeople <=3){\n            result=\"Low\";\n        } else if (numPeople > 3 && numPeople <6 ){\n            result =\"Medium\";\n        } else {\n           result= \"High\";}\n        \n        \n        System.out.println(\"Hygiene Level: \"+result);\n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 677
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) throws IOException {\n        \n        InputStream inputStream = System.in;\n        byte[] buffer = new byte[inputStream.available()];\n        inputStream.read(buffer);\n        String input = new String(buffer, StandardCharsets.UTF_8);\n\n        JSONObject jsonInput = new JSONObject(input);\n        boolean marketingConsent = jsonInput.getBoolean(\"marketingConsent\");\n\n        if (marketingConsent){\n            \n            System.out.println(\"Marketing Consent Given!\");\n\n            \n            Database db = new Database();\n            db.updateCustomerRecord(customerID, \"OptedIn\", null);\n        } \n        else{\n            \n            System.out.println(\"No Marketing Consent Given.\");\n\n            \n            Database db = new Database();\n            db.updateCustomerRecord(customerID, \"OptedOut\", null);\n        } \n    }\n}",
            "id": 1021
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (field_access object: (identifier) field: (identifier)))) (local_variable_declaration type: (array_type element: (integral_type) dimensions: (dimensions)) declarator: (variable_declarator name: (identifier) value: (array_creation_expression type: (integral_type) dimensions: (dimensions_expr (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (identifier) (field_access object: (identifier) field: (identifier)))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (identifier))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (if_statement condition: (condition (identifier)) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier) (string_literal (string_fragment)) (null_literal))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier) (string_literal (string_fragment)) (null_literal)))))))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        \n        InputStream inputStream = System.in;\n        byte[] buffer = new byte[inputStream.available()];\n        inputStream.read(buffer);\n        String input = new String(buffer, StandardCharsets.UTF_8);\n\n        JSONObject jsonInput = new JSONObject(input);\n        boolean marketingConsent = jsonInput.getBoolean(\"marketingConsent\");\n\n        if (marketingConsent){\n            \n            System.out.println(\"Marketing Consent Given!\");\n\n            \n            Database db = new Database();\n            db.updateCustomerRecord(customerID, \"OptedIn\", null);\n        } \n        else{\n            \n            System.out.println(\"No Marketing Consent Given.\");\n\n            \n            Database db = new Database();\n            db.updateCustomerRecord(customerID, \"OptedOut\", null);\n        } \n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 958
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n    \n    \n    function checkLowHandlingPersonalItems(ethics){\n      let cleaned = false;\n  \n      \n      if (ethics === 'utilitarian') {\n        \n        \n        \n        cleaned = true;\n      } else if (ethics === 'deontological') {\n        \n        \n        if (lowHandlingItemIsDirty()) {\n          cleaned = true;\n        }\n      } \n  \n      return cleaned;\n    }\n    \n    \n    const utilitarianResult = checkLowHandlingPersonalItems('utilitarian');\n    console.log(`A utilitarian decision maker would ${utilitarianResult ? '' : 'not '}clean \n    \ta pen prior to use depending on outcome`);\n    \n    const deontologicalResult = checkLowHandlingPersonalItems('deontological');\n    console.log(`A deontological decision maker would ${deontologicalResult ? '' : 'not '}clean \n    \ta pen prior to use if it was visibly dirty`);",
            "id": 1037
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (false))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true)))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (if_statement condition: (condition (method_invocation name: (identifier) arguments: (argument_list))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true)))))))) (return_statement (identifier))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (character_literal))))) (ERROR (identifier) (identifier) (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier)) (identifier) (ERROR (UNEXPECTED ''') (character_literal) (identifier) (UNEXPECTED '\\n') (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (UNEXPECTED '`') (type_identifier) (assignment_expression left: (identifier) right: (method_invocation name: (identifier) arguments: (argument_list (character_literal))))) (identifier) (identifier) (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier)) (identifier) (ERROR (UNEXPECTED ''') (character_literal) (identifier) (UNEXPECTED '\\n') (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier)) (type_identifier) (identifier) (UNEXPECTED '`')))\n**\n\n--\nscript\n    \n    \n    function checkLowHandlingPersonalItems(ethics){\n      let cleaned = false;\n  \n      \n      if (ethics === 'utilitarian') {\n        \n        \n        \n        cleaned = true;\n      } else if (ethics === 'deontological') {\n        \n        \n        if (lowHandlingItemIsDirty()) {\n          cleaned = true;\n        }\n      } \n  \n      return cleaned;\n    }\n    \n    \n    const utilitarianResult = checkLowHandlingPersonalItems('utilitarian');\n    console.log(`A utilitarian decision maker would ${utilitarianResult ? '' : 'not '}clean \n    \ta pen prior to use depending on outcome`);\n    \n    const deontologicalResult = checkLowHandlingPersonalItems('deontological');\n    console.log(`A deontological decision maker would ${deontologicalResult ? '' : 'not '}clean \n    \ta pen prior to use if it was visibly dirty`);\n--\n",
        "text": "4\n\nОбъяснение:\nВ приведённом фрагменте кода цикломатическая сложность определяется количеством различных",
        "token_cnt": 808
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) throws IOException {\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Enter user age:\");\n        int age = scan.nextInt();\n\n        \n        if (age < 18) {\n            System.out.println(\"User is considered as minor.\");\n\n            \n            System.out.println(\"Enter user trust level [0 - 5]:\");\n            int trustLevel = scan.nextInt();\n\n            \n            if (trustLevel <= 2){\n                System.out.println(\"Lowest risk option available will be recommended.\");\n            } else if (trustLevel > 2 && trustLevel <=4 ) {\n                System.out.println(\"Medium risk options available will be recommended.\");\n            } else {\n                System.out.println(\"Highest risk option available will be recommended.\");\n            }\n        } else {\n            System.out.println(\"User is considered as adult.\");\n\n            \n            System.out.println(\"Are you going on a solo trip? (y/n)\");\n            String soloTrip = scan.next().toLowerCase();\n\n            if (soloTrip.equals(\"yes\")) {\n                System.out.println(\"Low risk option available will be recommended.\");\n            } else {\n                System.out.println(\"Higher risk option available will be recommended.\");\n            }\n        }\n\n    }\n}",
            "id": 1040
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) throws IOException {\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Enter user age:\");\n        int age = scan.nextInt();\n\n        \n        if (age < 18) {\n            System.out.println(\"User is considered as minor.\");\n\n            \n            System.out.println(\"Enter user trust level [0 - 5]:\");\n            int trustLevel = scan.nextInt();\n\n            \n            if (trustLevel <= 2){\n                System.out.println(\"Lowest risk option available will be recommended.\");\n            } else if (trustLevel > 2 && trustLevel <=4 ) {\n                System.out.println(\"Medium risk options available will be recommended.\");\n            } else {\n                System.out.println(\"Highest risk option available will be recommended.\");\n            }\n        } else {\n            System.out.println(\"User is considered as adult.\");\n\n            \n            System.out.println(\"Are you going on a solo trip? (y/n)\");\n            String soloTrip = scan.next().toLowerCase();\n\n            if (soloTrip.equals(\"yes\")) {\n                System.out.println(\"Low risk option available will be recommended.\");\n            } else {\n                System.out.println(\"Higher risk option available will be recommended.\");\n            }\n        }\n\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 1307
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "if(engineerExists && requestedResourceIsAccessibleByEmployee){\n   \n   authorizationResponse.setPermissionStatus(\"GRANTED\");\n}\nelse{\n   \n   authorizationResponse.setPermissionStatus(\"DENIED\");\n}\nreturn authorizationResponse;",
            "id": 1052
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (if_statement condition: (condition (binary_expression left: (identifier) right: (identifier))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) (return_statement (identifier)))\n**\n\n--\nif(engineerExists && requestedResourceIsAccessibleByEmployee){\n   \n   authorizationResponse.setPermissionStatus(\"GRANTED\");\n}\nelse{\n   \n   authorizationResponse.setPermissionStatus(\"DENIED\");\n}\nreturn authorizationResponse;\n--\n",
        "text": "6\n\nОбъяснение:\nВ приведённом фрагменте кода содержится 6 условий, которые",
        "token_cnt": 202
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public boolean checkExtremeDentalHygiene(String teethBrushingFrequency) {\n        \n        boolean extremeDentalHygiene = false;\n\n        \n        if (teethBrushingFrequency == null || \"\".equals(teethBrushingFrequency)) {\n            System.out.println(\"Invalid Input\");\n        } else if (\"Once per day\".equalsIgnoreCase(teethBrushingFrequency)){\n            System.out.println(\"Moderate Hygiene\");\n        } else if (\"Twice per day\".equalsIgnoreCase(teethBrushingFrequency)){\n            System.out.println(\"Good Hygiene\");\n        } else if (\"Three times per day\".equalsIgnoreCase(teethBrushingFrequency)){\n            System.out.println(\"Very Good Hygiene\");\n        } else if (\"Four or more times per day\".equalsIgnoreCase(teethBrushingFrequency)){\n            System.out.println(\"Excellent Hygiene\");\n            extremeDentalHygiene = true;\n        } else {\n            System.out.println(\"Invalid Input\");\n        }\n        \n        return extremeDentalHygiene;\n    }",
            "id": 1058
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (null_literal)) right: (method_invocation object: (string_literal) name: (identifier) arguments: (argument_list (identifier))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (method_invocation object: (string_literal (string_fragment)) name: (identifier) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (method_invocation object: (string_literal (string_fragment)) name: (identifier) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (method_invocation object: (string_literal (string_fragment)) name: (identifier) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (method_invocation object: (string_literal (string_fragment)) name: (identifier) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (true)))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))) (return_statement (identifier)))))\n**\n\n--\npublic boolean checkExtremeDentalHygiene(String teethBrushingFrequency) {\n        \n        boolean extremeDentalHygiene = false;\n\n        \n        if (teethBrushingFrequency == null || \"\".equals(teethBrushingFrequency)) {\n            System.out.println(\"Invalid Input\");\n        } else if (\"Once per day\".equalsIgnoreCase(teethBrushingFrequency)){\n            System.out.println(\"Moderate Hygiene\");\n        } else if (\"Twice per day\".equalsIgnoreCase(teethBrushingFrequency)){\n            System.out.println(\"Good Hygiene\");\n        } else if (\"Three times per day\".equalsIgnoreCase(teethBrushingFrequency)){\n            System.out.println(\"Very Good Hygiene\");\n        } else if (\"Four or more times per day\".equalsIgnoreCase(teethBrushingFrequency)){\n            System.out.println(\"Excellent Hygiene\");\n            extremeDentalHygiene = true;\n        } else {\n            System.out.println(\"Invalid Input\");\n        }\n        \n        return extremeDentalHygiene;\n    }\n--\n",
        "text": "4",
        "token_cnt": 893
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class ExtremeHygiene {\n\n    public static void update(String symptoms) \n    {\n        \n        String[] possibleSymptoms = {\"cough\", \"fever\"};\n\n        boolean hasCough = false;\n        boolean hasFever = false;\n        \n        for (int i=0;i<possibleSymptoms.length;i++) \n            if (symptoms.contains(possibleSymptoms[i])) \n                if (possibleSymptoms[i].equals(\"cough\")) \n                    hasCough = true;\n                else\n                    hasFever = true; \n\n        if (!hasCough && !hasFever)\n            System.out.println(\"No need to self isolate.\");\n        else if (!(hasCough || hasFever))\n            System.out.println(\"Self isolation not required but take care of yourself\");\n        else if ((hasCough && !hasFever) || (!hasCough && hasFever))\n            System.out.println(\"Consider working from home if feeling unwell.\") ;\n        else\n            System.out.println(\"Stay at home and avoid contact with others until well\") ;\n    }\n}",
            "id": 1061
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (array_type element: (type_identifier) dimensions: (dimensions)) declarator: (variable_declarator name: (identifier) value: (array_initializer (string_literal (string_fragment)) (string_literal (string_fragment))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (for_statement init: (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) condition: (binary_expression left: (identifier) right: (field_access object: (identifier) field: (identifier))) update: (update_expression (identifier)) body: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (identifier))))) consequence: (if_statement condition: (condition (method_invocation object: (array_access array: (identifier) index: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (expression_statement (assignment_expression left: (identifier) right: (true))) alternative: (expression_statement (assignment_expression left: (identifier) right: (true)))))) (if_statement condition: (condition (binary_expression left: (unary_expression operand: (identifier)) right: (unary_expression operand: (identifier)))) consequence: (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (unary_expression operand: (parenthesized_expression (binary_expression left: (identifier) right: (identifier))))) consequence: (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (unary_expression operand: (identifier)))) right: (parenthesized_expression (binary_expression left: (unary_expression operand: (identifier)) right: (identifier))))) consequence: (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) alternative: (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))))\n**\n\n--\npublic class ExtremeHygiene {\n\n    public static void update(String symptoms) \n    {\n        \n        String[] possibleSymptoms = {\"cough\", \"fever\"};\n\n        boolean hasCough = false;\n        boolean hasFever = false;\n        \n        for (int i=0;i<possibleSymptoms.length;i++) \n            if (symptoms.contains(possibleSymptoms[i])) \n                if (possibleSymptoms[i].equals(\"cough\")) \n                    hasCough = true;\n                else\n                    hasFever = true; \n\n        if (!hasCough && !hasFever)\n            System.out.println(\"No need to self isolate.\");\n        else if (!(hasCough || hasFever))\n            System.out.println(\"Self isolation not required but take care of yourself\");\n        else if ((hasCough && !hasFever) || (!hasCough && hasFever))\n            System.out.println(\"Consider working from home if feeling unwell.\") ;\n        else\n            System.out.println(\"Stay at home and avoid contact with others until well\") ;\n    }\n}\n--\n",
        "text": "31",
        "token_cnt": 1047
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class SicknessHygiene {\n    public static void main(String[] args) throws Exception{\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter age of patient\");\n        int age=scan.nextInt();\n        System.out.println(\"Enter temperature of Patient (Farenheit): \");\n        double tempFahrenheit=scan.nextDouble();\n        boolean maskWear;\n        String diagnosis;\n\n        \n        if((age>=65 && tempFahrenheit>102) || (tempFahrenheit >103)){\n            diagnosis=\"Severe COVID\";\n            maskWear=true;\n        } else if ((age<65 && tempFahrenheit>100.4)||(tempFahrenheit>101)) { \n            diagnosis =\"Moderate COVID\" ;\n            maskWear=false;\n        } else if (((age >=65 && tempFahrenheit<=100.4)|| (tempFahrenheit <=102))) {\n            diagnosis=\"Mild COVD\";\n            maskWear=false;\n        } else {\n            diagnosis=\"No Symptoms \";\n            maskWear=false;\n        }\n        System.out.printf(\"Diagnosis:%s\\nMask Wearing recommendation:%b\",diagnosis,maskWear);\n\n    }\n}",
            "id": 1065
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) right: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (expression_statement (assignment_expression left: (identifier) right: (true)))) alternative: (if_statement condition: (condition (binary_expression left: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_floating_point_literal)))) right: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (expression_statement (assignment_expression left: (identifier) right: (false)))) alternative: (if_statement condition: (condition (parenthesized_expression (binary_expression left: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_floating_point_literal)))) right: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal)))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (expression_statement (assignment_expression left: (identifier) right: (false)))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (expression_statement (assignment_expression left: (identifier) right: (false))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence) (string_fragment)) (identifier) (identifier)))))))))\n**\n\n--\nimport java.util.*;\npublic class SicknessHygiene {\n    public static void main(String[] args) throws Exception{\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter age of patient\");\n        int age=scan.nextInt();\n        System.out.println(\"Enter temperature of Patient (Farenheit): \");\n        double tempFahrenheit=scan.nextDouble();\n        boolean maskWear;\n        String diagnosis;\n\n        \n        if((age>=65 && tempFahrenheit>102) || (tempFahrenheit >103)){\n            diagnosis=\"Severe COVID\";\n            maskWear=true;\n        } else if ((age<65 && tempFahrenheit>100.4)||(tempFahrenheit>101)) { \n            diagnosis =\"Moderate COVID\" ;\n            maskWear=false;\n        } else if (((age >=65 && tempFahrenheit<=100.4)|| (tempFahrenheit <=102))) {\n            diagnosis=\"Mild COVD\";\n            maskWear=false;\n        } else {\n            diagnosis=\"No Symptoms \";\n            maskWear=false;\n        }\n        System.out.printf(\"Diagnosis:%s\\nMask Wearing recommendation:%b\",diagnosis,maskWear);\n\n    }\n}\n--\n",
        "text": "7",
        "token_cnt": 1297
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) throws Exception{\n        Scanner scan = new Scanner(System.in);\n        \n        System.out.println(\"Enter patient age:\");\n        int age = scan.nextInt();\n\n        \n        boolean needsHelpCleaningEars;\n        if (age <18){\n            needsHelpCleaningEars=true;\n        } else {\n            needsHelpCleaningEars=false;\n        }\n    \n        \n        if (!needsHelpCleaningEars){\n            System.out.println(\"What kind of doctor do you wish to consult?\");\n            String docType = scan.next();\n\n            \n            if (docType == \"ENT\"){\n                System.out.println(\"An ENT specialist will examine your ears.\");\n                \n            } else if (docType == \"General Practitioner\") {\n                System.out.println(\"A general practicioner will examine your ears\");\n                \n            } else {\n                throw new IllegalArgumentException(\"Invalid Doctor Type entered!\");\n            }\n            \n        } else {\n            System.out.println(\"It seems like \"+age+\" year old does not require professional assistance at this time.\\n\" +\n                    \"\\t\\tHowever, we highly recommend regularly checking your ears for any unusual discharge or blockages.\"+\n                    \"\\n\\t\\tPlease contact us again if you notice anything out of the ordinary.\");\n        }\n        \n    }\n    \n}",
            "id": 1066
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true)))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (false))))) (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (throw_statement (object_creation_expression type: (type_identifier) arguments: (argument_list (string_literal (string_fragment))))))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment) (escape_sequence))) right: (string_literal (escape_sequence) (escape_sequence) (string_fragment))) right: (string_literal (escape_sequence) (escape_sequence) (escape_sequence) (string_fragment)))))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) throws Exception{\n        Scanner scan = new Scanner(System.in);\n        \n        System.out.println(\"Enter patient age:\");\n        int age = scan.nextInt();\n\n        \n        boolean needsHelpCleaningEars;\n        if (age <18){\n            needsHelpCleaningEars=true;\n        } else {\n            needsHelpCleaningEars=false;\n        }\n    \n        \n        if (!needsHelpCleaningEars){\n            System.out.println(\"What kind of doctor do you wish to consult?\");\n            String docType = scan.next();\n\n            \n            if (docType == \"ENT\"){\n                System.out.println(\"An ENT specialist will examine your ears.\");\n                \n            } else if (docType == \"General Practitioner\") {\n                System.out.println(\"A general practicioner will examine your ears\");\n                \n            } else {\n                throw new IllegalArgumentException(\"Invalid Doctor Type entered!\");\n            }\n            \n        } else {\n            System.out.println(\"It seems like \"+age+\" year old does not require professional assistance at this time.\\n\" +\n                    \"\\t\\tHowever, we highly recommend regularly checking your ears for any unusual discharge or blockages.\"+\n                    \"\\n\\t\\tPlease contact us again if you notice anything out of the ordinary.\");\n        }\n        \n    }\n    \n}\n--\n",
        "text": "6",
        "token_cnt": 1190
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter name of social media platform:\");\n        String platformName = scan.nextLine();\n\n        \n        switch (platformName){\n            case \"Facebook\":\n                System.out.println(\"Is Facebook safe? Enter Y/N\");\n                char ans1 = scan.next().charAt(0);\n                if (ans1 == 'Y')\n                    System.out.println(\"It is generally considered relatively safe.\");\n                else \n                    System.out.println(\"Be cautious when using Facebook due to security risks associated with sharing personal information online.\");\n                break;\n\n            case \"Instagram\":\n                System.out.println(\"Is Instagram safe? Enter Y/N\");\n                char ans2 = scan.next().charAt(0);\n                if (ans2 == 'Y'){\n                    System.out.println(\"While Instagram has made efforts to improve its safety features over time, there still remain concerns about how much personal information users share publicly.\");\n                    System.out.println(\"Consider adjusting privacy settings accordingly to limit who can view certain posts or direct messages.\");\n                } \n                else{\n                    System.out.println(\"Due to the prevalence of underage and explicit content, Instagram may not be appropriate for all audiences.\");\n                    System.out.println(\"Think carefully before posting any photos or videos that could potentially embarrass or compromise your identity later on.\");\n                }\n                break;\n                \n            default:\n                System.out.println(\"Invalid Platform Name!\");    \n        }\n\n    }\n}",
            "id": 1079
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list (decimal_integer_literal))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (character_literal))) consequence: (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) alternative: (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list (decimal_integer_literal))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (character_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter name of social media platform:\");\n        String platformName = scan.nextLine();\n\n        \n        switch (platformName){\n            case \"Facebook\":\n                System.out.println(\"Is Facebook safe? Enter Y/N\");\n                char ans1 = scan.next().charAt(0);\n                if (ans1 == 'Y')\n                    System.out.println(\"It is generally considered relatively safe.\");\n                else \n                    System.out.println(\"Be cautious when using Facebook due to security risks associated with sharing personal information online.\");\n                break;\n\n            case \"Instagram\":\n                System.out.println(\"Is Instagram safe? Enter Y/N\");\n                char ans2 = scan.next().charAt(0);\n                if (ans2 == 'Y'){\n                    System.out.println(\"While Instagram has made efforts to improve its safety features over time, there still remain concerns about how much personal information users share publicly.\");\n                    System.out.println(\"Consider adjusting privacy settings accordingly to limit who can view certain posts or direct messages.\");\n                } \n                else{\n                    System.out.println(\"Due to the prevalence of underage and explicit content, Instagram may not be appropriate for all audiences.\");\n                    System.out.println(\"Think carefully before posting any photos or videos that could potentially embarrass or compromise your identity later on.\");\n                }\n                break;\n                \n            default:\n                System.out.println(\"Invalid Platform Name!\");    \n        }\n\n    }\n}\n--\n",
        "text": "14",
        "token_cnt": 1381
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class UpdateLowBathingRoutine {\n\n    public static void main(String[] args) throws IOException{\n        \n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter name of person for whom bathing schedule needs updating (e.g., John Doe): \");\n        String name = scan.nextLine();\n        System.out.println(\"Enter day of week (1=Monday, 2=Tuesday, etc.) when low bathing routine will start:\");\n        int startingDay = scan.nextInt();\n        System.out.println(\"Enter time of day (HH:MM format) when low bathing routine will begin:\");\n        String startTime = scan.next();\n        System.out.println(\"Enter duration of low bathing routine in hours:\");\n        double durationHours = scan.nextDouble();\n\n        \n        List<String> daysOfWeek = Arrays.asList(\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\");\n        \n        \n        if (!daysOfWeek.contains((startingDay+\"\"))) {\n            throw new IllegalArgumentException(\"Invalid day of week entered.\");\n        }\n    \n        \n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"HH:mm\");\n        LocalTime startTimeObj = LocalTime.parse(startTime,formatter);\n    \n        \n        LocalDateTime endTime = startTimeObj.plusHours(durationHours).atDate(LocalDate.now());\n    \n        \n        System.out.printf(\"%s's low bathing routine starts on %s at %s and lasts for %.2f hour(s).\\n\", \n                name, daysOfWeek.get(startingDay), startTime, durationHours);\n    }\n}",
            "id": 1080
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (generic_type (type_identifier) (type_arguments (type_identifier))) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal (string_fragment)) (string_literal (string_fragment)) (string_literal (string_fragment)) (string_literal (string_fragment)) (string_literal (string_fragment)) (string_literal (string_fragment)))))) (if_statement condition: (condition (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (parenthesized_expression (binary_expression left: (identifier) right: (string_literal))))))) consequence: (block (throw_statement (object_creation_expression type: (type_identifier) arguments: (argument_list (string_literal (string_fragment))))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier) (identifier))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))) name: (identifier) arguments: (argument_list (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence)) (identifier) (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))) (identifier) (identifier)))))))))\n**\n\n--\npublic class UpdateLowBathingRoutine {\n\n    public static void main(String[] args) throws IOException{\n        \n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter name of person for whom bathing schedule needs updating (e.g., John Doe): \");\n        String name = scan.nextLine();\n        System.out.println(\"Enter day of week (1=Monday, 2=Tuesday, etc.) when low bathing routine will start:\");\n        int startingDay = scan.nextInt();\n        System.out.println(\"Enter time of day (HH:MM format) when low bathing routine will begin:\");\n        String startTime = scan.next();\n        System.out.println(\"Enter duration of low bathing routine in hours:\");\n        double durationHours = scan.nextDouble();\n\n        \n        List<String> daysOfWeek = Arrays.asList(\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\");\n        \n        \n        if (!daysOfWeek.contains((startingDay+\"\"))) {\n            throw new IllegalArgumentException(\"Invalid day of week entered.\");\n        }\n    \n        \n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"HH:mm\");\n        LocalTime startTimeObj = LocalTime.parse(startTime,formatter);\n    \n        \n        LocalDateTime endTime = startTimeObj.plusHours(durationHours).atDate(LocalDate.now());\n    \n        \n        System.out.printf(\"%s's low bathing routine starts on %s at %s and lasts for %.2f hour(s).\\n\", \n                name, daysOfWeek.get(startingDay), startTime, durationHours);\n    }\n}\n--\n",
        "text": "7",
        "token_cnt": 1477
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script \n\nlet trust = 'low'; \nlet action; \n\n\nif (!trust || trust === '') {\n  trust = 'low';\n}\nconsole.log(`Dry Run Mode: Transforming ${trust} levels of handwashing behavior`);\n\n\nswitch(trust){\n    case 'high':\n        console.log('No change required');\n        break;\n    case 'medium':\n        console.log('Recommend increasing education efforts around proper handwashing techniques');\n        break;\n    case 'low':    \n        console.log('Implement mandatory handwashing policies at workplace & provide regular reminders to employees about importance of good hygiene practices');\n        break;    \n    default: \n        console.error(\"Invalid Input! Please enter either 'High', 'Medium' or 'Low'\");    \n}\n\n\nconsole.groupEnd();\nconsole.info(`\\nBased on the above inputs, following recommendations will be made:`);\nconsole.log(`${action}`);",
            "id": 1087
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier) value: (character_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (ERROR (binary_expression left: (unary_expression operand: (identifier)) right: (binary_expression left: (identifier) (ERROR (UNEXPECTED ''')) right: (assignment_expression left: (identifier) right: (character_literal)))) (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (identifier) (type_identifier) (identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (UNEXPECTED '`'))))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (character_literal)) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal)))) (break_statement)) (switch_block_statement_group (switch_label (character_literal)) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal)))) (break_statement)) (switch_block_statement_group (switch_label (character_literal)) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal)))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))) (MISSING \")\")) consequence: (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (escape_sequence) (type_identifier) (identifier) (type_identifier) (identifier)) (identifier) (ERROR (type_identifier) (identifier) (identifier) (identifier) (identifier) (UNEXPECTED '`'))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`')) (identifier) (ERROR (identifier) (UNEXPECTED '`'))))))\n**\n\n--\nscript \n\nlet trust = 'low'; \nlet action; \n\n\nif (!trust || trust === '') {\n  trust = 'low';\n}\nconsole.log(`Dry Run Mode: Transforming ${trust} levels of handwashing behavior`);\n\n\nswitch(trust){\n    case 'high':\n        console.log('No change required');\n        break;\n    case 'medium':\n        console.log('Recommend increasing education efforts around proper handwashing techniques');\n        break;\n    case 'low':    \n        console.log('Implement mandatory handwashing policies at workplace & provide regular reminders to employees about importance of good hygiene practices');\n        break;    \n    default: \n        console.error(\"Invalid Input! Please enter either 'High', 'Medium' or 'Low'\");    \n}\n\n\nconsole.groupEnd();\nconsole.info(`\\nBased on the above inputs, following recommendations will be made:`);\nconsole.log(`${action}`);\n--\n",
        "text": "3\n\nОбъяснение:\n\nВ приведённом фрагменте кода можно выделить три базовых пути",
        "token_cnt": 854
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static int calculateBathingRoutine(int age, String gender) {\n    \n    double totalTime = 0;\n    boolean isValidAge = false;\n\n    \n    if (age >= 18 && age <= 65) {\n        isValidAge = true;\n    } else {\n        System.out.println(\"Invalid Age! Setting age to 30 minutes.\");\n        age = 30;\n    }\n\n    \n    if (gender == \"Male\" && isValidAge) {\n\n        /* BEGINNER MALE ROUTINE */\n        System.out.println(\"\\nBeginner Male Routine\");\n        System.out.println(\"------------------------------\\n\");\n\n        \n        totalTime += 5; \n\n        \n        totalTime += 20; \n\n    } else if (gender == \"Female\" && isValidAge) {\n\n        /* BEGINNER FEMALE ROUTINE */\n        System.out.println(\"\\nBeginner Female Routine\");\n        System.out.println(\"---------------------------------\\n\");\n\n        \n        totalTime += 7; \n\n        \n        totalTime += 25; \n\n    } else if (isValidAge){\n        \n        /* GENERAL ROUTINE FOR BOTH GENDERS */\n        System.out.println(\"\\nGeneral Routine For Both Genders\");\n        System.out.println(\"--------------------------------------------------\\n\");\n\n        \n        totalTime += 4; \n\n        \n        totalTime += 30; \n\n    } else {\n        System.out.println(\"Invalid Input!\");\n    }\n\n    return (int)totalTime;\n}",
            "id": 1088
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (integral_type) name: (identifier)) (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true)))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (string_literal (string_fragment))) right: (identifier))) consequence: (block (block_comment) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (escape_sequence) (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence))))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (string_literal (string_fragment))) right: (identifier))) consequence: (block (block_comment) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (escape_sequence) (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence))))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (if_statement condition: (condition (identifier)) consequence: (block (block_comment) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (escape_sequence) (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence))))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal)))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))) (return_statement (cast_expression type: (integral_type) value: (identifier))))))\n**\n\n--\npublic static int calculateBathingRoutine(int age, String gender) {\n    \n    double totalTime = 0;\n    boolean isValidAge = false;\n\n    \n    if (age >= 18 && age <= 65) {\n        isValidAge = true;\n    } else {\n        System.out.println(\"Invalid Age! Setting age to 30 minutes.\");\n        age = 30;\n    }\n\n    \n    if (gender == \"Male\" && isValidAge) {\n\n        /* BEGINNER MALE ROUTINE */\n        System.out.println(\"\\nBeginner Male Routine\");\n        System.out.println(\"------------------------------\\n\");\n\n        \n        totalTime += 5; \n\n        \n        totalTime += 20; \n\n    } else if (gender == \"Female\" && isValidAge) {\n\n        /* BEGINNER FEMALE ROUTINE */\n        System.out.println(\"\\nBeginner Female Routine\");\n        System.out.println(\"---------------------------------\\n\");\n\n        \n        totalTime += 7; \n\n        \n        totalTime += 25; \n\n    } else if (isValidAge){\n        \n        /* GENERAL ROUTINE FOR BOTH GENDERS */\n        System.out.println(\"\\nGeneral Routine For Both Genders\");\n        System.out.println(\"--------------------------------------------------\\n\");\n\n        \n        totalTime += 4; \n\n        \n        totalTime += 30; \n\n    } else {\n        System.out.println(\"Invalid Input!\");\n    }\n\n    return (int)totalTime;\n}\n--\n",
        "text": "8",
        "token_cnt": 1330
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args){\n        Scanner scan = new Scanner(System.in);\n        \n        \n        System.out.print(\"Enter Principal Amount: \");\n        double p = scan.nextDouble();\n\n        \n        System.out.print(\"Enter Interest Rate: \");\n        double r = scan.nextDouble();\n\n        \n        System.out.print(\"Enter Time Period (in Years): \");\n        int t = scan.nextInt();\n\n        \n        doubleMonthlyPayment = p * (((1 + r / 100) ^ (t * 12)) - 1) / ((r / 100) * Math.pow((1 + r / 100), t * 12)); \n\n        \n        System.out.println(\"Monthly Payment: \" + String.format(\"%.2f\",doubleMonthlyPayment));\n\n    }\n}",
            "id": 1089
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (binary_expression left: (identifier) right: (parenthesized_expression (binary_expression left: (parenthesized_expression (binary_expression left: (parenthesized_expression (binary_expression left: (decimal_integer_literal) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) right: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal))))) right: (decimal_integer_literal)))) right: (parenthesized_expression (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal))) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (parenthesized_expression (binary_expression left: (decimal_integer_literal) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) (binary_expression left: (identifier) right: (decimal_integer_literal))))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (identifier))))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args){\n        Scanner scan = new Scanner(System.in);\n        \n        \n        System.out.print(\"Enter Principal Amount: \");\n        double p = scan.nextDouble();\n\n        \n        System.out.print(\"Enter Interest Rate: \");\n        double r = scan.nextDouble();\n\n        \n        System.out.print(\"Enter Time Period (in Years): \");\n        int t = scan.nextInt();\n\n        \n        doubleMonthlyPayment = p * (((1 + r / 100) ^ (t * 12)) - 1) / ((r / 100) * Math.pow((1 + r / 100), t * 12)); \n\n        \n        System.out.println(\"Monthly Payment: \" + String.format(\"%.2f\",doubleMonthlyPayment));\n\n    }\n}\n--\n",
        "text": "34",
        "token_cnt": 1044
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Transformer {\n    public static void main(String[] args){\n        Scanner scan = new Scanner(System.in);\n        String itemName = scan.next(); \n        String treatmentOption = scan.next(); \n\n        if(treatmentOption.equals(\"heatSterilize\")){\n            System.out.println(\"Before Heat Sterilizing \" +itemName+ \":\");\n            heatSterilizeItem(itemName); \n            System.out.println(\"\\nAfter Heat Sterilizing \"+itemName+\":\");\n            printItemDetails(itemName);\n        } else if(treatmentOption.equals(\"coldStorage\")){\n            System.out.println(\"Before Cold Storage \" +itemName+ \":\");\n            coldStoreItem(itemName); \n            System.out.println(\"\\nAfter Cold Storage \"+itemName+\":\");\n            printItemDetails(itemName);\n        } else{\n            System.out.println(\"Invalid Input!\");\n        }\n\n    }\n    \n    private static void heatSterilizeItem(String itemName){\n        \n    }\n    \n    private static void coldStoreItem(String itemName){\n        \n    }\n    \n    private static void printItemDetails(String itemName){\n        \n    }\n    \n}",
            "id": 1096
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment)))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (escape_sequence) (string_fragment)) right: (identifier)) right: (string_literal (string_fragment)))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment)))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (escape_sequence) (string_fragment)) right: (identifier)) right: (string_literal (string_fragment)))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block)) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block)) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block)))))\n**\n\n--\nimport java.util.*;\npublic class Transformer {\n    public static void main(String[] args){\n        Scanner scan = new Scanner(System.in);\n        String itemName = scan.next(); \n        String treatmentOption = scan.next(); \n\n        if(treatmentOption.equals(\"heatSterilize\")){\n            System.out.println(\"Before Heat Sterilizing \" +itemName+ \":\");\n            heatSterilizeItem(itemName); \n            System.out.println(\"\\nAfter Heat Sterilizing \"+itemName+\":\");\n            printItemDetails(itemName);\n        } else if(treatmentOption.equals(\"coldStorage\")){\n            System.out.println(\"Before Cold Storage \" +itemName+ \":\");\n            coldStoreItem(itemName); \n            System.out.println(\"\\nAfter Cold Storage \"+itemName+\":\");\n            printItemDetails(itemName);\n        } else{\n            System.out.println(\"Invalid Input!\");\n        }\n\n    }\n    \n    private static void heatSterilizeItem(String itemName){\n        \n    }\n    \n    private static void coldStoreItem(String itemName){\n        \n    }\n    \n    private static void printItemDetails(String itemName){\n        \n    }\n    \n}\n--\n",
        "text": "6",
        "token_cnt": 1270
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public int calculateLowSecurityDataEncryptionForEngineer(String gender) {\n    \n    int result = -1;\n\n    /* \n     * Use Switch statement to check value of 'gender' parameter\n     * If gender == \"Male\", set result to 80 else if gender == \"Female\" set result to 65 else set result to -1 (Invalid input)\n     */\n    switch (gender){\n        case \"Male\":\n            result = 80; \n            break; \n        case \"Female\":\n            result = 65; \n            break;    \n        default:\n           result = -1; \n           break;    \n    }\n    \n    return result;\n}",
            "id": 1100
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (unary_expression operand: (decimal_integer_literal)))) (block_comment) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (assignment_expression left: (identifier) right: (unary_expression operand: (decimal_integer_literal)))) (break_statement)))) (return_statement (identifier)))))\n**\n\n--\npublic int calculateLowSecurityDataEncryptionForEngineer(String gender) {\n    \n    int result = -1;\n\n    /* \n     * Use Switch statement to check value of 'gender' parameter\n     * If gender == \"Male\", set result to 80 else if gender == \"Female\" set result to 65 else set result to -1 (Invalid input)\n     */\n    switch (gender){\n        case \"Male\":\n            result = 80; \n            break; \n        case \"Female\":\n            result = 65; \n            break;    \n        default:\n           result = -1; \n           break;    \n    }\n    \n    return result;\n}\n--\n",
        "text": "7\n\nОбъяснение: цикломатическая сложность — это количество различных путей выполнения программы. В данном случае",
        "token_cnt": 471
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number\");\n        int num = scan.nextInt();\n\n        \n        switch (num){\n            case 1:\n                System.out.println(\"One\");\n                break;\n            case 2: \n                System.out.println(\"Two\");\n                break; \n            default:\n                System.out.println(\"Invalid input!\");\n        }\n\n    }\n}",
            "id": 1112
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter number\");\n        int num = scan.nextInt();\n\n        \n        switch (num){\n            case 1:\n                System.out.println(\"One\");\n                break;\n            case 2: \n                System.out.println(\"Two\");\n                break; \n            default:\n                System.out.println(\"Invalid input!\");\n        }\n\n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 648
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args){\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter 't' for toothbrush or 'f' for floss.\");\n        String choice = scan.nextLine();\n\n        \n        if (choice.equals(\"t\")){\n            System.out.println(\"It is recommended to brush teeth twice daily, once in the morning before breakfast and again at night before bedtime.\");\n            System.out.println(\"Make sure to brush all surfaces of your teeth, including the outer, inner, chewing surface, and biting edges, for two minutes using soft bristled toothbrush.\");\n        }\n        else if (choice.equals(\"f\")) {\n            System.out.println(\"Flossing is just as important as brushing because it removes plaque from places where a toothbrush cannot reach.\");\n            System.out.println(\"Choose a piece of floss that is about 18 inches long and wrap it around both middle fingers.\");\n            System.out.println(\"Gently move the floss up and down between each tooth, being careful not to snap it.\");\n        }\n        else{\n            System.out.println(\"Invalid Input\");\n        }\n\n    }\n}",
            "id": 1119
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args){\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter 't' for toothbrush or 'f' for floss.\");\n        String choice = scan.nextLine();\n\n        \n        if (choice.equals(\"t\")){\n            System.out.println(\"It is recommended to brush teeth twice daily, once in the morning before breakfast and again at night before bedtime.\");\n            System.out.println(\"Make sure to brush all surfaces of your teeth, including the outer, inner, chewing surface, and biting edges, for two minutes using soft bristled toothbrush.\");\n        }\n        else if (choice.equals(\"f\")) {\n            System.out.println(\"Flossing is just as important as brushing because it removes plaque from places where a toothbrush cannot reach.\");\n            System.out.println(\"Choose a piece of floss that is about 18 inches long and wrap it around both middle fingers.\");\n            System.out.println(\"Gently move the floss up and down between each tooth, being careful not to snap it.\");\n        }\n        else{\n            System.out.println(\"Invalid Input\");\n        }\n\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 946
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n\nfunction analyzeNailCare(privacy) {\n  \n  console.log(`Privacy setting: ${privacy ? 'public' : 'private'}`);\n\n  let result;\n  \n  if (privacy === true) {\n    \n    result = \"Use a hand cream with at least SPF 15 daily.\";\n  } else if (privacy === false) {\n    \n    result = \"Add a few drops of vitamin E oil to your cuticles every night before bedtime.\"\n  } else {\n    \n    result = \"Invalid privacy setting provided. Please try again.\";\n  }\n  \n  return result;\n}",
            "id": 1121
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier)) (ternary_expression condition: (identifier) (ERROR (identifier)) consequence: (character_literal) alternative: (character_literal)) (ERROR (UNEXPECTED '`'))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (true))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (false))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))) (MISSING \";\"))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))))) (return_statement (identifier))))\n**\n\n--\nscript\n\nfunction analyzeNailCare(privacy) {\n  \n  console.log(`Privacy setting: ${privacy ? 'public' : 'private'}`);\n\n  let result;\n  \n  if (privacy === true) {\n    \n    result = \"Use a hand cream with at least SPF 15 daily.\";\n  } else if (privacy === false) {\n    \n    result = \"Add a few drops of vitamin E oil to your cuticles every night before bedtime.\"\n  } else {\n    \n    result = \"Invalid privacy setting provided. Please try again.\";\n  }\n  \n  return result;\n}\n--\n",
        "text": "8",
        "token_cnt": 501
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n    \n    const updateHygiene = (bias) => {\n      let updatedHygeine;\n  \n      if (bias === \"high\") {\n        updatedHygeine = \"Very clean\";\n      } else if (bias === \"medium\") {\n        updatedHygeine = \"Clean but some dirt visible\";\n      } else if (bias === \"low\") {\n        updatedHygeine = \"Somewhat dirty\";\n      } else {\n        throw new Error(\"Invalid bias value\");\n      }\n  \n      console.log(`Updated Hygiene level: ${updatedHygeine}`);\n    };\n    \n    \n    try {\n      updateHygiene(\"high\");\n      updateHygiene(\"medium\");\n      updateHygiene(\"low\");\n    } catch(error) {\n      console.error(error);\n    }",
            "id": 1126
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier)) (ERROR (inferred_parameters (identifier)) (ERROR) (type_identifier) (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (throw_statement (object_creation_expression type: (type_identifier) arguments: (argument_list (string_literal (string_fragment))))))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (identifier)) (identifier) (ERROR (identifier) (UNEXPECTED '`'))))) (ERROR) (try_statement body: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (catch_clause (catch_formal_parameter (catch_type (type_identifier)) name: (MISSING identifier)) body: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))))))\n**\n\n--\nscript\n    \n    const updateHygiene = (bias) => {\n      let updatedHygeine;\n  \n      if (bias === \"high\") {\n        updatedHygeine = \"Very clean\";\n      } else if (bias === \"medium\") {\n        updatedHygeine = \"Clean but some dirt visible\";\n      } else if (bias === \"low\") {\n        updatedHygeine = \"Somewhat dirty\";\n      } else {\n        throw new Error(\"Invalid bias value\");\n      }\n  \n      console.log(`Updated Hygiene level: ${updatedHygeine}`);\n    };\n    \n    \n    try {\n      updateHygiene(\"high\");\n      updateHygiene(\"medium\");\n      updateHygiene(\"low\");\n    } catch(error) {\n      console.error(error);\n    }\n--\n",
        "text": "6\nОбъяснение:\nВ приведённом фрагменте кода можно выделить шесть путей выполнения, которые",
        "token_cnt": 719
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static String transformExtremeEarHygiene(String trust) {\n        \n        String transformedMessage = \"\";\n    \n        \n        if (!trust.equals(\"Low\") && !trust.equals(\"Medium\") && !trust.equals(\"High\")) {\n            return \"Invalid Input Value\";\n        }    \n        \n        \n        switch (trust) {\n            case \"Low\":\n                transformedMessage = \"Seek professional help from experts for analysis.\";\n                break;\n                \n            case \"Medium\":\n                transformedMessage = \"Consider seeking professional advice but perform additional research before taking action.\";\n                break;\n                \n            default: \n                transformedMessage = \"Take immediate steps to address extreme ear hygiene issues without further delay.\";\n                break;\n        }        \n    \n        \n        return transformedMessage;    \n    }",
            "id": 1127
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) right: (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) right: (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) consequence: (block (return_statement (string_literal (string_fragment))))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (break_statement)))) (return_statement (identifier)))))\n**\n\n--\npublic static String transformExtremeEarHygiene(String trust) {\n        \n        String transformedMessage = \"\";\n    \n        \n        if (!trust.equals(\"Low\") && !trust.equals(\"Medium\") && !trust.equals(\"High\")) {\n            return \"Invalid Input Value\";\n        }    \n        \n        \n        switch (trust) {\n            case \"Low\":\n                transformedMessage = \"Seek professional help from experts for analysis.\";\n                break;\n                \n            case \"Medium\":\n                transformedMessage = \"Consider seeking professional advice but perform additional research before taking action.\";\n                break;\n                \n            default: \n                transformedMessage = \"Take immediate steps to address extreme ear hygiene issues without further delay.\";\n                break;\n        }        \n    \n        \n        return transformedMessage;    \n    }\n--\n",
        "text": "6",
        "token_cnt": 627
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "if(trustLevel < LOW){\n    System.out.println(\"Enforce Mandatory Hand Wash Before Leaving Work Place\");\n}",
            "id": 1134
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (if_statement condition: (condition (binary_expression left: (identifier) right: (identifier))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))\n**\n\n--\nif(trustLevel < LOW){\n    System.out.println(\"Enforce Mandatory Hand Wash Before Leaving Work Place\");\n}\n--\n",
        "text": "6\n\nОбъяснение:\nВ приведённом фрагменте цикломатическая сложность равна количеству рёбер",
        "token_cnt": 142
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter marks of subject1\");\n        int mark1=scan.nextInt();\n        System.out.println(\"Enter marks of subject2\");\n        int mark2=scan.nextInt();\n        double per=(mark1+mark2)/2;\n        String grade=\"\";\n        if (per>=90){\n            grade=\"A\";\n        } else if (per >=80 && per<90){\n            grade=\"B\";\n        } else if (per >=70 && per <80){\n            grade=\"C\";\n        } else if (per >=60 && per <70){\n            grade=\"D\";\n        } else{\n            grade=\"F\";\n        }\n        System.out.print(\"percentage=\"+per+\" Grade=\"+grade+\"\\n\");\n        \n    }\n}",
            "id": 1136
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (identifier))) right: (decimal_integer_literal)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment))) right: (identifier)) right: (string_literal (escape_sequence)))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter marks of subject1\");\n        int mark1=scan.nextInt();\n        System.out.println(\"Enter marks of subject2\");\n        int mark2=scan.nextInt();\n        double per=(mark1+mark2)/2;\n        String grade=\"\";\n        if (per>=90){\n            grade=\"A\";\n        } else if (per >=80 && per<90){\n            grade=\"B\";\n        } else if (per >=70 && per <80){\n            grade=\"C\";\n        } else if (per >=60 && per <70){\n            grade=\"D\";\n        } else{\n            grade=\"F\";\n        }\n        System.out.print(\"percentage=\"+per+\" Grade=\"+grade+\"\\n\");\n        \n    }\n}\n--\n",
        "text": "5",
        "token_cnt": 1151
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void updateHighEyeHygiene(String lensType) {\n        \n        System.out.println(\"Dry Run\");\n\n        String updatedStatus = \" \";\n        boolean isInUse;\n        \n        if (lensType == null || lensType.equals(\"\")) {\n            isInUse = false;\n        } else if (lensType.equalsIgnoreCase(\"transparent\")) {\n            isInUse = true;\n            updatedStatus = \"(In Use)\";\n        } else {\n            isInUse = false;\n            updatedStatus = \"(Not In Use)\";\n        }\n    \n        System.out.println(\"Lens Type : \"+ lensType +updatedStatus);\n\n    }\n    \n    public static void main(String[] args) {\n        updateHighEyeHygiene(\" \");\n        updateHighEyeHygiene(\"clear\");\n        updateHighEyeHygiene(\"prescription\");\n        updateHighEyeHygiene(\"colored\");\n        updateHighEyeHygiene(\"tinted\");\n        updateHighEyeHygiene(\"gradient\");\n        updateHighEyeHygiene(\"transitional\");\n        updateHighEyeHygiene(\"photochromic\");\n        updateHighEyeHygiene(\"mirrored\");\n        updateHighEyeHygiene(\"transparent\");\n        \n    }\n    \n}",
            "id": 1143
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (null_literal)) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (false)))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true))) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (false))) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (identifier))))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))\n**\n\n--\npublic class Main {\n    public static void updateHighEyeHygiene(String lensType) {\n        \n        System.out.println(\"Dry Run\");\n\n        String updatedStatus = \" \";\n        boolean isInUse;\n        \n        if (lensType == null || lensType.equals(\"\")) {\n            isInUse = false;\n        } else if (lensType.equalsIgnoreCase(\"transparent\")) {\n            isInUse = true;\n            updatedStatus = \"(In Use)\";\n        } else {\n            isInUse = false;\n            updatedStatus = \"(Not In Use)\";\n        }\n    \n        System.out.println(\"Lens Type : \"+ lensType +updatedStatus);\n\n    }\n    \n    public static void main(String[] args) {\n        updateHighEyeHygiene(\" \");\n        updateHighEyeHygiene(\"clear\");\n        updateHighEyeHygiene(\"prescription\");\n        updateHighEyeHygiene(\"colored\");\n        updateHighEyeHygiene(\"tinted\");\n        updateHighEyeHygiene(\"gradient\");\n        updateHighEyeHygiene(\"transitional\");\n        updateHighEyeHygiene(\"photochromic\");\n        updateHighEyeHygiene(\"mirrored\");\n        updateHighEyeHygiene(\"transparent\");\n        \n    }\n    \n}\n--\n",
        "text": "10",
        "token_cnt": 1131
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static String determineExtremeWeather(double precipitationInches) {\n        if (precipitationInches < 0.25)\n            return \"Very Dry\";\n        else if (precipitationInches >= 0.25 && precipitationInches <= 1.0)\n            return \"Dry\";\n        else if (precipitationInches > 1.0 && precipitationInches < 4.0) \n            return \"Normal Rainfall\";\n        else\n            return \"Heavy Rainfall\";\n    }",
            "id": 1145
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (floating_point_type) name: (identifier))) body: (block (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_floating_point_literal))) consequence: (return_statement (string_literal (string_fragment))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_floating_point_literal)) right: (binary_expression left: (identifier) right: (decimal_floating_point_literal)))) consequence: (return_statement (string_literal (string_fragment))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_floating_point_literal)) right: (binary_expression left: (identifier) right: (decimal_floating_point_literal)))) consequence: (return_statement (string_literal (string_fragment))) alternative: (return_statement (string_literal (string_fragment)))))))))\n**\n\n--\npublic static String determineExtremeWeather(double precipitationInches) {\n        if (precipitationInches < 0.25)\n            return \"Very Dry\";\n        else if (precipitationInches >= 0.25 && precipitationInches <= 1.0)\n            return \"Dry\";\n        else if (precipitationInches > 1.0 && precipitationInches < 4.0) \n            return \"Normal Rainfall\";\n        else\n            return \"Heavy Rainfall\";\n    }\n--\n",
        "text": "5\nОбъяснение:\nПредставленный фрагмент содержит один метод `determineExtremeWeather`, который имеет",
        "token_cnt": 410
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class NailCare {\n\n    public static void main(String[] args) {\n        String userInput = \"Beginner\";\n\n        \n        switch (userInput){\n            case \"Beginner\":\n                System.out.println(\"In this beginner level course we will cover all basic concepts related to preventive measures against common nail problems.\");\n                break;\n\n            case \"Intermediate\": \n                System.out.println(\"In this intermediate level course we will delve deeper into more complex aspects such as identifying underlying causes of specific nail disorders and exploring alternative treatments.\");\n                break;\n                \n            default:\n                System.out.println(\"Invalid Input! Please enter either 'beginner' or 'intermediate'.\");\n        }\n    }\n}",
            "id": 1154
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))))\n**\n\n--\npublic class NailCare {\n\n    public static void main(String[] args) {\n        String userInput = \"Beginner\";\n\n        \n        switch (userInput){\n            case \"Beginner\":\n                System.out.println(\"In this beginner level course we will cover all basic concepts related to preventive measures against common nail problems.\");\n                break;\n\n            case \"Intermediate\": \n                System.out.println(\"In this intermediate level course we will delve deeper into more complex aspects such as identifying underlying causes of specific nail disorders and exploring alternative treatments.\");\n                break;\n                \n            default:\n                System.out.println(\"Invalid Input! Please enter either 'beginner' or 'intermediate'.\");\n        }\n    }\n}\n--\n",
        "text": "4",
        "token_cnt": 542
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*; \n class Main { \n    public static void main(String[] args) { \n        String input = \"read\"; \n \n        \n        Map<String, Integer> allowedActions = new HashMap<>(); \n        allowedActions.put(\"create\", 2); \n        allowedActions.put(\"delete\", 3); \n        allowedActions.put(\"update\", 4); \n        allowedActions.put(\"read\", 1); \n \n        int permissionLevel = checkPermission(input, allowedActions); \n \n        System.out.println(\"The permission level for action '\" + input \n                + \"' is \" + permissionLevel); \n    } \n \n    private static int checkPermission(String action, \n            Map<String, Integer> allowedActions) { \n        if (allowedActions.containsKey(action)) { \n            return allowedActions.get(action); \n        } else { \n            return -1; \n        } \n    } \n }",
            "id": 1157
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (local_variable_declaration type: (generic_type (type_identifier) (type_arguments (type_identifier) (type_identifier))) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (generic_type (type_identifier) (type_arguments)) arguments: (argument_list)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (decimal_integer_literal)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (decimal_integer_literal)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (decimal_integer_literal)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (decimal_integer_literal)))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment))) right: (identifier))))))) (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (generic_type (type_identifier) (type_arguments (type_identifier) (type_identifier))) name: (identifier))) body: (block (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))) consequence: (block (return_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))) alternative: (block (return_statement (unary_expression operand: (decimal_integer_literal))))))))))\n**\n\n--\nimport java.util.*; \n class Main { \n    public static void main(String[] args) { \n        String input = \"read\"; \n \n        \n        Map<String, Integer> allowedActions = new HashMap<>(); \n        allowedActions.put(\"create\", 2); \n        allowedActions.put(\"delete\", 3); \n        allowedActions.put(\"update\", 4); \n        allowedActions.put(\"read\", 1); \n \n        int permissionLevel = checkPermission(input, allowedActions); \n \n        System.out.println(\"The permission level for action '\" + input \n                + \"' is \" + permissionLevel); \n    } \n \n    private static int checkPermission(String action, \n            Map<String, Integer> allowedActions) { \n        if (allowedActions.containsKey(action)) { \n            return allowedActions.get(action); \n        } else { \n            return -1; \n        } \n    } \n }\n--\n",
        "text": "6",
        "token_cnt": 949
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n    const checkExtremeSecurity = (reliability) => {\n      let action;\n  \n      \n      if (reliability === 'HIGH') {\n        console.log('User must authenticate themselves before performing this operation');\n        return false;\n      } else if (reliability === 'MEDIUM' || reliability === 'LOW') {\n        console.log('User can proceed without authentication but audit logs will record their activity');\n        return true;\n      }\n  \n      throw new Error(`Invalid reliability level: ${reliability}`);\n    };\n    \n    module.exports = checkExtremeSecurity;",
            "id": 1158
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier)) (ERROR (inferred_parameters (identifier)) (ERROR) (type_identifier) (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal)))) (return_statement (false))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) (ERROR) right: (character_literal)) right: (binary_expression left: (identifier) (ERROR) right: (character_literal)))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal)))) (return_statement (true))))) (throw_statement (object_creation_expression type: (type_identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (identifier)) (identifier) (MISSING \")\")) (class_body (ERROR (identifier) (UNEXPECTED '`'))))) (expression_statement (assignment_expression left: (field_access object: (identifier) field: (identifier)) right: (identifier))))\n**\n\n--\nscript\n    const checkExtremeSecurity = (reliability) => {\n      let action;\n  \n      \n      if (reliability === 'HIGH') {\n        console.log('User must authenticate themselves before performing this operation');\n        return false;\n      } else if (reliability === 'MEDIUM' || reliability === 'LOW') {\n        console.log('User can proceed without authentication but audit logs will record their activity');\n        return true;\n      }\n  \n      throw new Error(`Invalid reliability level: ${reliability}`);\n    };\n    \n    module.exports = checkExtremeSecurity;\n--\n",
        "text": "8\n\nДля вычисления цикломатической сложности используется формула: **V(G) = P -",
        "token_cnt": 491
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class UpdateLowFlossingTypes {\n\n    public static void main(String[] args) {\n        String typeOfFloss = \"Waxed\";\n\n        \n        if (typeOfFloss.equals(\"Unwaxed\")) {\n            System.out.println(\"Unwaxed dental flosses can get stuck between teeth and gums.\");\n        } else if (typeOfFloss.equals(\"Woven\")) {\n            System.out.println(\"Woven flosses have many threads that help remove plaque effectively from tight spaces.\");\n        } else if (typeOfFloss.equals(\"Thread\")) {\n            System.out.println(\"Nylon thread flosses are very effective at removing food particles and plaque from between teeth\");\n        } else {\n            System.out.println(\"Given floss type does not belong to any known low flossing categories!\");\n        }\n    }\n}",
            "id": 1160
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))))))\n**\n\n--\npublic class UpdateLowFlossingTypes {\n\n    public static void main(String[] args) {\n        String typeOfFloss = \"Waxed\";\n\n        \n        if (typeOfFloss.equals(\"Unwaxed\")) {\n            System.out.println(\"Unwaxed dental flosses can get stuck between teeth and gums.\");\n        } else if (typeOfFloss.equals(\"Woven\")) {\n            System.out.println(\"Woven flosses have many threads that help remove plaque effectively from tight spaces.\");\n        } else if (typeOfFloss.equals(\"Thread\")) {\n            System.out.println(\"Nylon thread flosses are very effective at removing food particles and plaque from between teeth\");\n        } else {\n            System.out.println(\"Given floss type does not belong to any known low flossing categories!\");\n        }\n    }\n}\n--\n",
        "text": "4",
        "token_cnt": 673
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static boolean determineExtremeFootCare(String footCondition) {\n        \n        boolean extreme = false;\n\n        /* Use if else statement to check whether condition is dry cracked skin\n         * If yes then set extreme as true */\n        if (footCondition.equals(\"Dry Cracked Skin\")) {\n            extreme = true;\n        } \n\n        return extreme;\n    }",
            "id": 1169
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (block_comment) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true))))) (return_statement (identifier)))))\n**\n\n--\npublic static boolean determineExtremeFootCare(String footCondition) {\n        \n        boolean extreme = false;\n\n        /* Use if else statement to check whether condition is dry cracked skin\n         * If yes then set extreme as true */\n        if (footCondition.equals(\"Dry Cracked Skin\")) {\n            extreme = true;\n        } \n\n        return extreme;\n    }\n--\n",
        "text": "5\n\nОбъяснение:\nВ приведённом фрагменте кода содержится 5 блоков, которые",
        "token_cnt": 278
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class TissueDisposal {\n    public static void main(String[] args) throws Exception{\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter name:\");\n        String name = scan.nextLine();\n\n        \n        boolean requiresSpecialPrecautions = false;\n        do {\n            System.out.print(\"Do you have any known allergies? (y/n): \");\n            char ans = scan.next().toLowerCase().charAt(0);\n            if (ans == 'y') {\n                System.out.print(\"Please enter the specific allergy: \");\n                String allergy = scan.next();\n                \n                List<String> commonAllergens = Arrays.asList(\"peanuts\", \"tree nuts\", \"soy\", \"milk\");\n                requiresSpecialPrecautions = commonAllergens.contains(allergy);\n            } else if (ans != 'n'){\n                System.out.println(\"Invalid input.\");\n            }\n        } while (requiresSpecialPrecautions && ans != 'n');\n        \n        \n        if (requiresSpecialPrecautions){\n            System.out.println(\"In this case we will need to seal the used tissues inside a plastic bag before disposing them.\");\n        }\n    \n        \n        System.out.printf(\"Hello %s! Please place the used tissues into the provided bin.\", name);\n        System.out.println(\"\\nIf required, please also place the sealed plastic bag containing the used tissues next to the bin.\\n\");\n        System.out.println(\"Thank you!\");\n        scan.close();\n    }\n}",
            "id": 1176
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (do_statement body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list (decimal_integer_literal))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (character_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (generic_type (type_identifier) (type_arguments (type_identifier))) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal (string_fragment)) (string_literal (string_fragment)) (string_literal (string_fragment)))))) (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (character_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))) condition: (parenthesized_expression (binary_expression left: (identifier) right: (binary_expression left: (identifier) right: (character_literal))))) (if_statement condition: (condition (identifier)) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (identifier)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (escape_sequence) (string_fragment) (escape_sequence))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))))))))\n**\n\n--\nimport java.util.*;\npublic class TissueDisposal {\n    public static void main(String[] args) throws Exception{\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter name:\");\n        String name = scan.nextLine();\n\n        \n        boolean requiresSpecialPrecautions = false;\n        do {\n            System.out.print(\"Do you have any known allergies? (y/n): \");\n            char ans = scan.next().toLowerCase().charAt(0);\n            if (ans == 'y') {\n                System.out.print(\"Please enter the specific allergy: \");\n                String allergy = scan.next();\n                \n                List<String> commonAllergens = Arrays.asList(\"peanuts\", \"tree nuts\", \"soy\", \"milk\");\n                requiresSpecialPrecautions = commonAllergens.contains(allergy);\n            } else if (ans != 'n'){\n                System.out.println(\"Invalid input.\");\n            }\n        } while (requiresSpecialPrecautions && ans != 'n');\n        \n        \n        if (requiresSpecialPrecautions){\n            System.out.println(\"In this case we will need to seal the used tissues inside a plastic bag before disposing them.\");\n        }\n    \n        \n        System.out.printf(\"Hello %s! Please place the used tissues into the provided bin.\", name);\n        System.out.println(\"\\nIf required, please also place the sealed plastic bag containing the used tissues next to the bin.\\n\");\n        System.out.println(\"Thank you!\");\n        scan.close();\n    }\n}\n--\n",
        "text": "5",
        "token_cnt": 1458
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\n    \n    public class Main {\n        static Scanner scan = new Scanner(System.in);\n    \n        public static void main(String[] args) {\n            System.out.println(\"Enter number of days since last manicure:\");\n            int numDays = scan.nextInt();\n    \n            \n            boolean conditionMet = true; \n            if (numDays < 30){\n                System.out.println(\"Low nail care recommended.\");\n            } else{\n                System.out.println(\"High nail care not necessary.\");\n            }\n        \n            \n            /*switch (conditionMet){\n                case true:\n                    System.out.println(\"Low nail care recommended.\");\n                    break;\n    \n                default: \n                    System.out.println(\"High nail care not necessary.\");\n            }*/\n        }\n    }",
            "id": 1181
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (field_declaration (modifiers) type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (true))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) (block_comment))))))\n**\n\n--\nimport java.util.*;\n    \n    public class Main {\n        static Scanner scan = new Scanner(System.in);\n    \n        public static void main(String[] args) {\n            System.out.println(\"Enter number of days since last manicure:\");\n            int numDays = scan.nextInt();\n    \n            \n            boolean conditionMet = true; \n            if (numDays < 30){\n                System.out.println(\"Low nail care recommended.\");\n            } else{\n                System.out.println(\"High nail care not necessary.\");\n            }\n        \n            \n            /*switch (conditionMet){\n                case true:\n                    System.out.println(\"Low nail care recommended.\");\n                    break;\n    \n                default: \n                    System.out.println(\"High nail care not necessary.\");\n            }*/\n        }\n    }\n--\n",
        "text": "8",
        "token_cnt": 660
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) {\n        \n        double reliability = 0.9;\n        int numTrips = 15;\n\n        \n        double expectedRevenue = getExpectedRevenue(reliability, numTrips);\n\n        \n        boolean highTravelRequired = false;\n        if (expectedRevenue < 2 * getAverageTripCost(numTrips)) {\n            highTravelRequired = true;\n        } else if (expectedRevenue > 4 * getAverageTripCost(numTrips)) {\n            highTravelRequired = true;\n        } \n\n        System.out.println(\"High travel is \" + (highTravelRequired ? \"\" : \"not \") + \"required.\"); \n    }\n\n    private static double getExpectedRevenue(double reliability, int numTrips) {\n        return reliability * getNumSuccessfulTrips(numTrips) * getAverageTripProfit();\n    }\n\n    private static double getAverageTripCost(int numTrips) {\n        return 300 * numTrips / 1000;\n    }\n\n    private static double getAverageTripProfit() {\n        return 800;\n    }\n\n    private static int getNumSuccessfulTrips(int numTrips) {\n        return (int)(Math.random() * numTrips);\n    }\n}",
            "id": 1182
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_floating_point_literal))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (identifier) (identifier))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (if_statement condition: (condition (binary_expression left: (identifier) right: (binary_expression left: (decimal_integer_literal) right: (method_invocation name: (identifier) arguments: (argument_list (identifier)))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true)))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (binary_expression left: (decimal_integer_literal) right: (method_invocation name: (identifier) arguments: (argument_list (identifier)))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (parenthesized_expression (ternary_expression condition: (identifier) consequence: (string_literal) alternative: (string_literal (string_fragment))))) right: (string_literal (string_fragment)))))))) (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (floating_point_type) name: (identifier)) (formal_parameter type: (integral_type) name: (identifier))) body: (block (return_statement (binary_expression left: (binary_expression left: (identifier) right: (method_invocation name: (identifier) arguments: (argument_list (identifier)))) right: (method_invocation name: (identifier) arguments: (argument_list)))))) (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (integral_type) name: (identifier))) body: (block (return_statement (binary_expression left: (binary_expression left: (decimal_integer_literal) right: (identifier)) right: (decimal_integer_literal))))) (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters) body: (block (return_statement (decimal_integer_literal)))) (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (integral_type) name: (identifier))) body: (block (return_statement (cast_expression type: (integral_type) value: (parenthesized_expression (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (identifier))))))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) {\n        \n        double reliability = 0.9;\n        int numTrips = 15;\n\n        \n        double expectedRevenue = getExpectedRevenue(reliability, numTrips);\n\n        \n        boolean highTravelRequired = false;\n        if (expectedRevenue < 2 * getAverageTripCost(numTrips)) {\n            highTravelRequired = true;\n        } else if (expectedRevenue > 4 * getAverageTripCost(numTrips)) {\n            highTravelRequired = true;\n        } \n\n        System.out.println(\"High travel is \" + (highTravelRequired ? \"\" : \"not \") + \"required.\"); \n    }\n\n    private static double getExpectedRevenue(double reliability, int numTrips) {\n        return reliability * getNumSuccessfulTrips(numTrips) * getAverageTripProfit();\n    }\n\n    private static double getAverageTripCost(int numTrips) {\n        return 300 * numTrips / 1000;\n    }\n\n    private static double getAverageTripProfit() {\n        return 800;\n    }\n\n    private static int getNumSuccessfulTrips(int numTrips) {\n        return (int)(Math.random() * numTrips);\n    }\n}\n--\n",
        "text": "7",
        "token_cnt": 1207
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public double calculateHighOnlineShoppingDiscount(double purchaseAmount){\n    \n    double finalDiscount = 0;\n    \n    if(purchaseAmount > 500){\n        finalDiscount = purchaseAmount * .02;\n    }else if(purchaseAmount >= 300 && purchaseAmount <= 499){\n        finalDiscount = purchaseAmount *.015;\n    }else{\n        finalDiscount = purchaseAmount*.1;\n    }\n    return finalDiscount;\n    \n}",
            "id": 1184
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (floating_point_type) name: (identifier))) body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (decimal_floating_point_literal))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (decimal_floating_point_literal))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (decimal_floating_point_literal))))))) (return_statement (identifier)))))\n**\n\n--\npublic double calculateHighOnlineShoppingDiscount(double purchaseAmount){\n    \n    double finalDiscount = 0;\n    \n    if(purchaseAmount > 500){\n        finalDiscount = purchaseAmount * .02;\n    }else if(purchaseAmount >= 300 && purchaseAmount <= 499){\n        finalDiscount = purchaseAmount *.015;\n    }else{\n        finalDiscount = purchaseAmount*.1;\n    }\n    return finalDiscount;\n    \n}\n--\n",
        "text": "6",
        "token_cnt": 447
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class DisplayHighFootCare {\n\n    public static void main(String[] args) {\n        \n        System.out.println(\"Please enter your shoe size (e.g., 8): \");\n        Scanner scanner = new Scanner(System.in);\n        int shoeSize = Integer.parseInt(scanner.nextLine());\n\n        \n        boolean needsWideWidthShoes = false;\n        if (shoeSize >= 10 && shoeSize <= 12) {\n            needsWideWidthShoes = true;\n        } else if (shoeSize == 43 || shoeSize == 44) {\n            needsWideWidthShoes = true;\n        } \n\n        \n        if (needsWideWidthShoes) {\n            System.out.println(\"It looks like you may need wide width shoes.\");\n        } else {\n            System.out.println(\"Based on your shoe size, it doesn't appear that wide width shoes are necessary.\");\n        }\n    }\n}",
            "id": 1186
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true)))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true)))))) (if_statement condition: (condition (identifier)) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))))\n**\n\n--\npublic class DisplayHighFootCare {\n\n    public static void main(String[] args) {\n        \n        System.out.println(\"Please enter your shoe size (e.g., 8): \");\n        Scanner scanner = new Scanner(System.in);\n        int shoeSize = Integer.parseInt(scanner.nextLine());\n\n        \n        boolean needsWideWidthShoes = false;\n        if (shoeSize >= 10 && shoeSize <= 12) {\n            needsWideWidthShoes = true;\n        } else if (shoeSize == 43 || shoeSize == 44) {\n            needsWideWidthShoes = true;\n        } \n\n        \n        if (needsWideWidthShoes) {\n            System.out.println(\"It looks like you may need wide width shoes.\");\n        } else {\n            System.out.println(\"Based on your shoe size, it doesn't appear that wide width shoes are necessary.\");\n        }\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 814
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        \n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter patient ID:\");\n        String id = scan.nextLine();\n        System.out.println(\"Enter treatment plan (Y/N):\");\n        char choice = scan.next().charAt(0);\n\n        \n        if (choice == 'y' || choice == 'Y') {\n            \n            System.out.println(\"Enter description of updated habit:\");\n            String habit = scan.nextLine();\n\n            \n            System.out.printf(\"Patient %s will start following updated habit:\\n%s\\n\", id, habit);\n        } else {\n            \n            System.out.printf(\"Patient %s declined to update their habit.\\n\", id);\n        }\n        \n        \n        scan.close();\n    }\n}",
            "id": 1188
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list (decimal_integer_literal))))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (character_literal)) right: (binary_expression left: (identifier) right: (character_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence) (string_fragment) (escape_sequence)) (identifier) (identifier))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence)) (identifier)))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        \n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter patient ID:\");\n        String id = scan.nextLine();\n        System.out.println(\"Enter treatment plan (Y/N):\");\n        char choice = scan.next().charAt(0);\n\n        \n        if (choice == 'y' || choice == 'Y') {\n            \n            System.out.println(\"Enter description of updated habit:\");\n            String habit = scan.nextLine();\n\n            \n            System.out.printf(\"Patient %s will start following updated habit:\\n%s\\n\", id, habit);\n        } else {\n            \n            System.out.printf(\"Patient %s declined to update their habit.\\n\", id);\n        }\n        \n        \n        scan.close();\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 930
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n    \n    \n    const updateLowClothingCleanliness = (bias) => {\n      let updatedBias;\n    \n      \n      if (typeof(bias) === 'number') {\n        console.log(`Current low clothing cleaning level: ${bias}`);\n    \n        \n        if (expertLevel === 'beginner') {\n          updatedBias = Math.max(0, bias + 1);\n          console.log('New low clothing cleaning level for beginners:', updatedBias);\n        } else if (expertLevel === 'intermediate') {\n          updatedBias = Math.max(0, bias + 2);\n          console.log('New low clothing cleaning level for intermediates:', updatedBias);\n        } else if (expertLevel === 'advanced' || expertLevel === 'expert') {\n          updatedBias = Math.max(0, bias + 3);\n          console.log('New low clothing cleaning level for advanced/experts:', updatedBias);\n        } else {\n          throw Error(\"Invalid expert level specified!\");\n        }\n    \n        return updatedBias;\n      } else {\n        throw TypeError(\"Expected number as argument but got something else!\");\n      }\n    };\n    \n    module.exports = {updateLowClothingCleanliness};",
            "id": 1189
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier)) (ERROR (inferred_parameters (identifier)) (ERROR) (type_identifier) (identifier))) (if_statement condition: (condition (binary_expression left: (method_invocation name: (identifier) arguments: (argument_list (identifier))) (ERROR) right: (character_literal))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier) (identifier)) (identifier) (ERROR (identifier) (UNEXPECTED '`'))))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (decimal_integer_literal) (binary_expression left: (identifier) right: (decimal_integer_literal)))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal) (identifier))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (decimal_integer_literal) (binary_expression left: (identifier) right: (decimal_integer_literal)))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal) (identifier))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) (ERROR) right: (character_literal)) right: (binary_expression left: (identifier) (ERROR) right: (character_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (decimal_integer_literal) (binary_expression left: (identifier) right: (decimal_integer_literal)))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal) (identifier))))) alternative: (block (throw_statement (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))) (return_statement (identifier))) alternative: (block (throw_statement (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) (ERROR) (expression_statement (assignment_expression left: (field_access object: (identifier) field: (identifier)) (ERROR) right: (identifier)) (ERROR)))\n**\n\n--\nscript\n    \n    \n    const updateLowClothingCleanliness = (bias) => {\n      let updatedBias;\n    \n      \n      if (typeof(bias) === 'number') {\n        console.log(`Current low clothing cleaning level: ${bias}`);\n    \n        \n        if (expertLevel === 'beginner') {\n          updatedBias = Math.max(0, bias + 1);\n          console.log('New low clothing cleaning level for beginners:', updatedBias);\n        } else if (expertLevel === 'intermediate') {\n          updatedBias = Math.max(0, bias + 2);\n          console.log('New low clothing cleaning level for intermediates:', updatedBias);\n        } else if (expertLevel === 'advanced' || expertLevel === 'expert') {\n          updatedBias = Math.max(0, bias + 3);\n          console.log('New low clothing cleaning level for advanced/experts:', updatedBias);\n        } else {\n          throw Error(\"Invalid expert level specified!\");\n        }\n    \n        return updatedBias;\n      } else {\n        throw TypeError(\"Expected number as argument but got something else!\");\n      }\n    };\n    \n    module.exports = {updateLowClothingCleanliness};\n--\n",
        "text": "6",
        "token_cnt": 1006
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Enter number of days since last use:\");\n        int numDays = scan.nextInt();\n\n        String instructions;\n        \n        \n        if (numDays < 7){\n            instructions = \"It looks like you've been using your nasal spray incorrectly.\\n\" +\n                \"Try following these steps:\\n\\n\" + \n                \"\\t1. Prime the pump by holding down the actuator for at least 5 seconds before first use.\\n\" +\n                \"\\t2. Tilt your head back slightly and insert the tip of the nozzle into one nostril.\\n\" +\n                \"\\t3. Press the actuator gently while keeping the nozzle in place until all the medicine has been delivered.\\n\" +\n                \"\\t4. Repeat Steps 2 and 3 for the other nostril.\\n\" +\n                \"\\t5. Dispose of used devices properly.\";\n        } else if (numDays >= 7 && numDays <= 14) {\n            instructions = \"While there may not be any immediate side effects from incorrect usage,\\n\" +\n                \"it's always best to follow the manufacturer's directions exactly as directed.\\n\\n\" +\n                \"If you experience any symptoms such as irritation, swelling, or discomfort after using\\nyour nasal spray, stop using it immediately and consult a healthcare professional.\" ;\n        } else {\n            instructions = \"Congratulations! It appears that you have been using your nasal spray correctly.\\n\" +\n                \"However, if you notice any changes in your symptoms or feel that they haven't improved,\\n\" +\n                \"don't hesitate to seek further advice from a medical professional.\";\n        }\n    \n        System.out.print(instructions);\n        scan.close();\n    }\n}",
            "id": 1193
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (binary_expression left: (binary_expression left: (binary_expression left: (binary_expression left: (binary_expression left: (string_literal (string_fragment) (escape_sequence)) right: (string_literal (string_fragment) (escape_sequence) (escape_sequence))) right: (string_literal (escape_sequence) (string_fragment) (escape_sequence))) right: (string_literal (escape_sequence) (string_fragment) (escape_sequence))) right: (string_literal (escape_sequence) (string_fragment) (escape_sequence))) right: (string_literal (escape_sequence) (string_fragment) (escape_sequence))) right: (string_literal (escape_sequence) (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (binary_expression left: (string_literal (string_fragment) (escape_sequence)) right: (string_literal (string_fragment) (escape_sequence) (escape_sequence))) right: (string_literal (string_fragment) (escape_sequence) (string_fragment)))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (binary_expression left: (string_literal (string_fragment) (escape_sequence)) right: (string_literal (string_fragment) (escape_sequence))) right: (string_literal (string_fragment)))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (identifier)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Enter number of days since last use:\");\n        int numDays = scan.nextInt();\n\n        String instructions;\n        \n        \n        if (numDays < 7){\n            instructions = \"It looks like you've been using your nasal spray incorrectly.\\n\" +\n                \"Try following these steps:\\n\\n\" + \n                \"\\t1. Prime the pump by holding down the actuator for at least 5 seconds before first use.\\n\" +\n                \"\\t2. Tilt your head back slightly and insert the tip of the nozzle into one nostril.\\n\" +\n                \"\\t3. Press the actuator gently while keeping the nozzle in place until all the medicine has been delivered.\\n\" +\n                \"\\t4. Repeat Steps 2 and 3 for the other nostril.\\n\" +\n                \"\\t5. Dispose of used devices properly.\";\n        } else if (numDays >= 7 && numDays <= 14) {\n            instructions = \"While there may not be any immediate side effects from incorrect usage,\\n\" +\n                \"it's always best to follow the manufacturer's directions exactly as directed.\\n\\n\" +\n                \"If you experience any symptoms such as irritation, swelling, or discomfort after using\\nyour nasal spray, stop using it immediately and consult a healthcare professional.\" ;\n        } else {\n            instructions = \"Congratulations! It appears that you have been using your nasal spray correctly.\\n\" +\n                \"However, if you notice any changes in your symptoms or feel that they haven't improved,\\n\" +\n                \"don't hesitate to seek further advice from a medical professional.\";\n        }\n    \n        System.out.print(instructions);\n        scan.close();\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 1250
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script \nfunction calculateHighFlossScore(steps) {\n  let score = 0;\n\n  \n  const stepCount = steps.reduce((acc, curr) => acc + (curr.type === 'floss' ? 1 : 0), 0);\n  \n  \n  for (const step of steps) {\n    switch (step.type) {\n      case \"rinse\":\n        score += step.correct ? 5 : -2;\n        break;\n      case \"brush\":\n        score += step.correct ? 3 : -1;\n        break;\n      case \"floss\":\n        score += step.correct ? 4 : -3;\n        break;\n      default:\n        throw new Error(`Invalid step type ${step.type}`);\n    }\n\n    \n    score -= Math.max(Math.floor(stepCount / 2) - 1, 0);\n  }\n\n  return score;\n}\n\n\n\nlet steps = [\n  { type: \"rinse\", correct: true },\n  { type: \"brush\", correct: false },\n  { type: \"floss\", correct: true },\n  { type: \"brush\", correct: true },\n  { type: \"floss\", correct: false },\n  { type: \"rinse\", correct: false }\n];\nconsole.log(\"Total Score:\", calculateHighFlossScore(steps));",
            "id": 1197
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (ERROR (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (inferred_parameters (identifier) (identifier))) (binary_expression left: (identifier) right: (parenthesized_expression (ternary_expression condition: (binary_expression left: (field_access object: (identifier) field: (identifier)) (ERROR) right: (character_literal)) consequence: (decimal_integer_literal) alternative: (decimal_integer_literal)))) (decimal_integer_literal))))) (ERROR (type_identifier) (ERROR (identifier) (identifier)) name: (identifier)) (switch_expression condition: (parenthesized_expression (field_access object: (identifier) field: (identifier))) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (ternary_expression condition: (field_access object: (identifier) field: (identifier)) consequence: (decimal_integer_literal) alternative: (unary_expression operand: (decimal_integer_literal))))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (ternary_expression condition: (field_access object: (identifier) field: (identifier)) consequence: (decimal_integer_literal) alternative: (unary_expression operand: (decimal_integer_literal))))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (ternary_expression condition: (field_access object: (identifier) field: (identifier)) consequence: (decimal_integer_literal) alternative: (unary_expression operand: (decimal_integer_literal))))) (break_statement)) (switch_block_statement_group (switch_label) (throw_statement (object_creation_expression type: (type_identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier) (scoped_type_identifier (scoped_type_identifier (type_identifier) (type_identifier)) (ERROR (UNEXPECTED '`') (identifier) (identifier)) (type_identifier))) (parenthesized_expression (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (binary_expression left: (identifier) right: (decimal_integer_literal)))) right: (decimal_integer_literal)) (MISSING \")\")) (decimal_integer_literal))))))) (ERROR (identifier) (ERROR (type_identifier) (assignment_expression left: (identifier) (ERROR) right: (identifier)) (string_literal (string_fragment)) (identifier)) (true)) (ERROR (identifier)) init: (string_literal (string_fragment)) init: (identifier) (ERROR (false)) (ERROR (identifier)) init: (string_literal (string_fragment)) init: (identifier) (ERROR (true)) (ERROR (identifier)) init: (string_literal (string_fragment)) init: (identifier) (ERROR (true)) (ERROR (identifier)) init: (string_literal (string_fragment)) init: (identifier) (ERROR (false)) (ERROR (identifier)) init: (string_literal (string_fragment)) init: (identifier) (ERROR (false)) (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (method_invocation name: (identifier) arguments: (argument_list (identifier)))))))\n**\n\n--\nscript \nfunction calculateHighFlossScore(steps) {\n  let score = 0;\n\n  \n  const stepCount = steps.reduce((acc, curr) => acc + (curr.type === 'floss' ? 1 : 0), 0);\n  \n  \n  for (const step of steps) {\n    switch (step.type) {\n      case \"rinse\":\n        score += step.correct ? 5 : -2;\n        break;\n      case \"brush\":\n        score += step.correct ? 3 : -1;\n        break;\n      case \"floss\":\n        score += step.correct ? 4 : -3;\n        break;\n      default:\n        throw new Error(`Invalid step type ${step.type}`);\n    }\n\n    \n    score -= Math.max(Math.floor(stepCount / 2) - 1, 0);\n  }\n\n  return score;\n}\n\n\n\nlet steps = [\n  { type: \"rinse\", correct: true },\n  { type: \"brush\", correct: false },\n  { type: \"floss\", correct: true },\n  { type: \"brush\", correct: true },\n  { type: \"floss\", correct: false },\n  { type: \"rinse\", correct: false }\n];\nconsole.log(\"Total Score:\", calculateHighFlossScore(steps));\n--\n",
        "text": "8",
        "token_cnt": 1314
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n\nconst explicitConsent = true; \n\nfunction transformLowOnlineShoppingPaymentProcessing(userInput) {\n  let message; \n  const result = {};\n\n  if (explicitConsent === true) {\n    \n    message = \"Thank you for your purchase!\"; \n    result['processed'] = true; \n  } else {\n    \n    message = \"Before we can complete your transaction, please provide explicit consent.\"; \n    result['processed'] = false; \n  }\n  \n  return [message, result]; \n}",
            "id": 1203
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier) value: (true))) (method_declaration type: (type_identifier) name: (identifier) parameters: (formal_parameters (ERROR (type_identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (array_initializer))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (true))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (expression_statement (assignment_expression left: (array_access array: (identifier) index: (character_literal)) right: (true)))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (expression_statement (assignment_expression left: (array_access array: (identifier) index: (character_literal)) right: (false))))) (return_statement (ERROR (identifier)) (identifier) (ERROR)))))\n**\n\n--\nscript\n\nconst explicitConsent = true; \n\nfunction transformLowOnlineShoppingPaymentProcessing(userInput) {\n  let message; \n  const result = {};\n\n  if (explicitConsent === true) {\n    \n    message = \"Thank you for your purchase!\"; \n    result['processed'] = true; \n  } else {\n    \n    message = \"Before we can complete your transaction, please provide explicit consent.\"; \n    result['processed'] = false; \n  }\n  \n  return [message, result]; \n}\n--\n",
        "text": "5\n\nОбъяснение:\nПредставленный фрагмент содержит 5 блоков, которые можно выделить по наличию",
        "token_cnt": 456
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script \n\nlet trustLevel = prompt(\"How much do you trust me? Choose 'High' (10) or 'Medium' (5): \");\ntrustLevel = parseInt(trustLevel);\n\nif (trustLevel === 10) {\n  \n  console.log(`\n    <h2>Extreme Hand Hygiene Instructions</h2>\n\n    <p>If soap and water aren't available:</p>\n    <ul>\n      <li>Use an alcohol-based hand sanitizer that contains at least 60% alcohol.</li>\n      <li>Apply enough product to cover all surfaces of your hands and rub them together until they feel dry.</li>\n    </ul>\n\n    <p>Afterwards, consider carrying around a small pack of moistened wipes for quick cleanups when soap and water isn't accessible.</p>\n  `);\n} else if (trustLevel === 5) {\n  \n  console.log(`\n    <h2>Handwash Instruction</h2>\n\n    <p>Wash your hands thoroughly with soap and warm running water for at least 20 seconds.</p>\n    <p>Dry your hands properly using a paper towel or air dryer.</p>\n    <p>Consider carrying around a small pack of moistened wipes as backup just in case there is no access to soap and water.</p>\n  `);\n} else {\n  \n  console.error('Invalid input');\n}",
            "id": 1205
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (expression_statement (assignment_expression left: (identifier) right: (method_invocation name: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (decimal_integer_literal))) consequence: (block (expression_statement (binary_expression left: (binary_expression left: (binary_expression left: (binary_expression left: (binary_expression left: (binary_expression left: (binary_expression left: (field_access object: (identifier) field: (identifier)) (ERROR (UNEXPECTED '`')) right: (identifier)) (ERROR (type_identifier) (identifier) (identifier)) right: (binary_expression left: (identifier) (ERROR) right: (identifier))) (ERROR) right: (identifier)) (ERROR (ERROR (type_identifier) (identifier) (type_identifier) (identifier)) (generic_type (type_identifier) (ERROR (UNEXPECTED '\\n')) (type_arguments (type_identifier)))) right: (identifier)) (ERROR (type_identifier) (identifier)) right: (binary_expression left: (identifier) (ERROR (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (identifier)) right: (binary_expression left: (binary_expression left: (decimal_integer_literal) right: (identifier)) (ERROR (ERROR (type_arguments (ERROR) (type_identifier)) (type_arguments (type_identifier)) (ERROR (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)) (identifier) (identifier)) (type_arguments (ERROR) (type_identifier))) right: (identifier)))) (ERROR) right: (identifier)) right: (identifier)) (ERROR (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (UNEXPECTED '\\n')))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (decimal_integer_literal))) consequence: (block (expression_statement (binary_expression left: (binary_expression left: (binary_expression left: (binary_expression left: (field_access object: (identifier) field: (identifier)) (ERROR (UNEXPECTED '`')) right: (identifier)) (ERROR (type_identifier)) right: (binary_expression left: (identifier) (ERROR) right: (identifier))) (ERROR) right: (identifier)) (ERROR (type_identifier) (identifier) (type_identifier) (identifier) (identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (type_identifier) (identifier) (decimal_integer_literal)) right: (identifier)) (ERROR (ERROR (type_arguments (ERROR) (type_identifier)) (type_arguments (type_identifier)) (ERROR (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)) (identifier) (type_arguments (ERROR) (type_identifier)) (type_arguments (type_identifier)) (ERROR (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)) (identifier)) (type_arguments (ERROR) (type_identifier)) (UNEXPECTED '`')))) alternative: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (character_literal))))))))\n**\n\n--\nscript \n\nlet trustLevel = prompt(\"How much do you trust me? Choose 'High' (10) or 'Medium' (5): \");\ntrustLevel = parseInt(trustLevel);\n\nif (trustLevel === 10) {\n  \n  console.log(`\n    <h2>Extreme Hand Hygiene Instructions</h2>\n\n    <p>If soap and water aren't available:</p>\n    <ul>\n      <li>Use an alcohol-based hand sanitizer that contains at least 60% alcohol.</li>\n      <li>Apply enough product to cover all surfaces of your hands and rub them together until they feel dry.</li>\n    </ul>\n\n    <p>Afterwards, consider carrying around a small pack of moistened wipes for quick cleanups when soap and water isn't accessible.</p>\n  `);\n} else if (trustLevel === 5) {\n  \n  console.log(`\n    <h2>Handwash Instruction</h2>\n\n    <p>Wash your hands thoroughly with soap and warm running water for at least 20 seconds.</p>\n    <p>Dry your hands properly using a paper towel or air dryer.</p>\n    <p>Consider carrying around a small pack of moistened wipes as backup just in case there is no access to soap and water.</p>\n  `);\n} else {\n  \n  console.error('Invalid input');\n}\n--\n",
        "text": "7",
        "token_cnt": 1290
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class NostrilBlower {\n\n    public static void main(String[] args) throws IOException{\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Enter name of person needing nostril blower assistance:\");\n        String name = scan.nextLine();\n        \n        \n        if (name.equals(\"Jane Doe\")) {\n            System.out.println(\"Hello \" + name + \", please insert Q tip into left nostril.\");\n        } else if (name.equals(\"John Smith\")){\n            System.out.println(\"Hello \" + name + \", please insert Q tip into right nostril\");    \n        } else { \n            System.out.println(\"I'm sorry but I do not know how to assist \" + name + \". Please try again.\");\n        }\n    }\n}",
            "id": 1218
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment))))))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment))))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment))))))))))))))\n**\n\n--\npublic class NostrilBlower {\n\n    public static void main(String[] args) throws IOException{\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Enter name of person needing nostril blower assistance:\");\n        String name = scan.nextLine();\n        \n        \n        if (name.equals(\"Jane Doe\")) {\n            System.out.println(\"Hello \" + name + \", please insert Q tip into left nostril.\");\n        } else if (name.equals(\"John Smith\")){\n            System.out.println(\"Hello \" + name + \", please insert Q tip into right nostril\");    \n        } else { \n            System.out.println(\"I'm sorry but I do not know how to assist \" + name + \". Please try again.\");\n        }\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 781
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n    \n    const inputData = [\n      {\n        name: 'Product A',\n        price: 100,\n        transparency: 'low'\n      },\n      {\n        name: 'Product B',\n        price: 250,\n        transparency: 'medium'\n      },\n      {\n        name: 'Product C',\n        price: 400,\n        transparency: 'high'\n      }\n    ];\n    \n    \n    function transformPricing(data) {\n      let outputData;\n    \n      \n      if (data.transparency === 'low') {\n        outputData = {\n          ...data,\n          newPrice: Math.round(data.price * 0.9)\n        };\n      } else if (data.transparency === 'medium') {\n        outputData = {\n          ...data,\n          newPrice: Math.round((data.price * 0.85) + 50)\n        };\n      } else {\n        outputData = {\n          ...data,\n          newPrice: Math.round((data.price * 0.75) - 100)\n        };\n      }\n    \n      return outputData;\n    }\n    \n    \n    const transformedData = inputData.map(item => transformPricing(item));\n    \n    console.log(transformedData);",
            "id": 1221
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier) (ERROR) value: (array_initializer (ERROR (identifier)) (character_literal) (identifier) (ERROR (decimal_integer_literal)) (identifier) (ERROR (character_literal)))) (ERROR) declarator: (variable_declarator name: (identifier)) (ERROR (character_literal)) declarator: (variable_declarator name: (identifier)) (ERROR (decimal_integer_literal)) declarator: (variable_declarator name: (identifier)) (ERROR (character_literal)) (ERROR) declarator: (variable_declarator name: (identifier)) (ERROR (character_literal)) declarator: (variable_declarator name: (identifier)) (ERROR (decimal_integer_literal)) declarator: (variable_declarator name: (identifier)) (ERROR (character_literal))) (method_declaration type: (type_identifier) name: (identifier) parameters: (formal_parameters (ERROR (type_identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (field_access object: (identifier) field: (identifier)) (ERROR) right: (character_literal))) consequence: (block (ERROR (assignment_expression left: (identifier) (ERROR) right: (identifier)) (identifier) (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (binary_expression left: (field_access object: (identifier) field: (identifier)) right: (decimal_floating_point_literal))))))))) (method_declaration type: (type_identifier) name: (identifier) parameters: (formal_parameters (spread_parameter (scoped_type_identifier (type_identifier) (type_identifier)) (ERROR (character_literal) (identifier)) (variable_declarator name: (identifier))) (formal_parameter type: (type_identifier) (ERROR (identifier) (identifier) (identifier)) name: (identifier)) (ERROR (decimal_floating_point_literal))) (MISSING \";\")) (expression_statement (unary_expression operand: (decimal_integer_literal)) (ERROR)) (ERROR) (block (ERROR (assignment_expression left: (identifier) (ERROR) right: (identifier))) (labeled_statement (identifier) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (binary_expression left: (parenthesized_expression (binary_expression left: (field_access object: (identifier) field: (identifier)) right: (decimal_floating_point_literal))) right: (decimal_integer_literal)))) (ERROR)))) (return_statement (identifier)) (ERROR) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (binary_expression left: (identifier) (ERROR) right: (method_invocation name: (identifier) arguments: (argument_list (identifier)))))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))))\n**\n\n--\nscript\n    \n    const inputData = [\n      {\n        name: 'Product A',\n        price: 100,\n        transparency: 'low'\n      },\n      {\n        name: 'Product B',\n        price: 250,\n        transparency: 'medium'\n      },\n      {\n        name: 'Product C',\n        price: 400,\n        transparency: 'high'\n      }\n    ];\n    \n    \n    function transformPricing(data) {\n      let outputData;\n    \n      \n      if (data.transparency === 'low') {\n        outputData = {\n          ...data,\n          newPrice: Math.round(data.price * 0.9)\n        };\n      } else if (data.transparency === 'medium') {\n        outputData = {\n          ...data,\n          newPrice: Math.round((data.price * 0.85) + 50)\n        };\n      } else {\n        outputData = {\n          ...data,\n          newPrice: Math.round((data.price * 0.75) - 100)\n        };\n      }\n    \n      return outputData;\n    }\n    \n    \n    const transformedData = inputData.map(item => transformPricing(item));\n    \n    console.log(transformedData);\n--\n",
        "text": "8",
        "token_cnt": 1108
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) {\n        int toothTransparency = 10; \n\n        boolean needFlossing = false; \n\n        if (toothTransparency >=75){\n            System.out.println(\"No flossing required as teeth are sufficiently transparent.\"); \n        }\n        else{ \n            System.out.println(\"It seems like you may require additional measures such as flossing to improve overall dental health.\");\n            needFlossing=true;\n        }\n        \n        if (needFlossing== true){\n             System.out.println(\"Please consult your dentist regarding suitable options for improving dental health.\") ;    \n        }\n\n    }\n}",
            "id": 1223
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (true))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (true))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) {\n        int toothTransparency = 10; \n\n        boolean needFlossing = false; \n\n        if (toothTransparency >=75){\n            System.out.println(\"No flossing required as teeth are sufficiently transparent.\"); \n        }\n        else{ \n            System.out.println(\"It seems like you may require additional measures such as flossing to improve overall dental health.\");\n            needFlossing=true;\n        }\n        \n        if (needFlossing== true){\n             System.out.println(\"Please consult your dentist regarding suitable options for improving dental health.\") ;    \n        }\n\n    }\n}\n--\n",
        "text": "6\nДля вычисления цикломатической сложности необходимо посчитать количество рёбер в графе потока управления программы. В",
        "token_cnt": 565
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Main {\n    public static void main(String[] args) {\n        \n        final String TOPIC_TITLE = \"Display Topic\";\n        final String LOW_FLOSSING_DESCRIPTION = \n                \"Low flossing can lead to several dental problems such as gum disease, tooth decay, bad breath, etc.\";\n    \n        \n        displayTopic();\n    }\n    \n    private static void displayTopic(){\n        System.out.println(\"Topic Title: \");\n        System.out.println(TOPIC_TITLE);\n        \n        System.out.println(\"\\nProblem Statement: \");\n        System.out.println(LOW_FLOSSING_DESCRIPTION);\n    }\n}",
            "id": 1225
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration (modifiers) type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (local_variable_declaration (modifiers) type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (expression_statement (method_invocation name: (identifier) arguments: (argument_list))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (identifier)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (escape_sequence) (string_fragment))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (identifier)))))))))\n**\n\n--\npublic class Main {\n    public static void main(String[] args) {\n        \n        final String TOPIC_TITLE = \"Display Topic\";\n        final String LOW_FLOSSING_DESCRIPTION = \n                \"Low flossing can lead to several dental problems such as gum disease, tooth decay, bad breath, etc.\";\n    \n        \n        displayTopic();\n    }\n    \n    private static void displayTopic(){\n        System.out.println(\"Topic Title: \");\n        System.out.println(TOPIC_TITLE);\n        \n        System.out.println(\"\\nProblem Statement: \");\n        System.out.println(LOW_FLOSSING_DESCRIPTION);\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 584
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n\nconsole.log(`[${new Date().toLocaleString()}] starting`);\n\nlet symptomSeverity = prompt(\"How severe are your symptoms?\");\n\nswitch (symptomSeverity) {\n  case \"Mild\":\n    \n    console.log(\"[mild symptoms detected]\");\n    break;\n\n  case \"Moderate\":\n    \n    console.log(\"[moderate symptoms detected]\");\n    break;\n    \n  case \"Severe\":\n    \n    console.log(\"[severe symptoms detected]\");\n    break;\n  \n  default: \n    \n    console.error(\"[invalid input received]\");\n    break;\n}\n\n\nconsole.log(`[${new Date().toLocaleString()}] exiting`);",
            "id": 1226
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration type: (type_identifier) name: (identifier) (ERROR (identifier) (UNEXPECTED '`') (identifier) (identifier) (formal_parameters) (identifier)) parameters: (formal_parameters) (ERROR (identifier) (UNEXPECTED '`'))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)))) (expression_statement (array_access array: (field_access object: (identifier) field: (identifier)) (ERROR (UNEXPECTED '`')) (ERROR (identifier)) index: (method_invocation object: (object_creation_expression type: (type_identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list)) (ERROR)) (ERROR (identifier) (UNEXPECTED '`'))))\n**\n\n--\nscript\n\nconsole.log(`[${new Date().toLocaleString()}] starting`);\n\nlet symptomSeverity = prompt(\"How severe are your symptoms?\");\n\nswitch (symptomSeverity) {\n  case \"Mild\":\n    \n    console.log(\"[mild symptoms detected]\");\n    break;\n\n  case \"Moderate\":\n    \n    console.log(\"[moderate symptoms detected]\");\n    break;\n    \n  case \"Severe\":\n    \n    console.log(\"[severe symptoms detected]\");\n    break;\n  \n  default: \n    \n    console.error(\"[invalid input received]\");\n    break;\n}\n\n\nconsole.log(`[${new Date().toLocaleString()}] exiting`);\n--\n",
        "text": "5\nОбъяснение:\nПредставленный фрагмент содержит 5 блоков, которые можно представить в виде ориенти",
        "token_cnt": 675
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script \nfunction checkEarHygiene(privacy) {\n  let action;\n\n  \n  if (privacy === \"public\") {\n    console.log(\"Seeking medical attention as per patient request.\"); \n    action = \"see_doctor\";\n    \n  } else if (privacy === \"private\" || privacy === undefined){\n    \n    console.log(\"Simulating cleaning procedure.\")\n    action = \"clean_ears\";\n  \n  } else {\n    throw new Error(`Invalid privacy level '${privacy}'`);\n  }\n\n  return action;\n}\n\n\n\nconsole.log(checkEarHygiene('public'));    \nconsole.log(checkEarHygiene('private'));   \nconsole.log(checkEarHygiene());",
            "id": 1234
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) (ERROR) right: (string_literal (string_fragment))) right: (binary_expression left: (identifier) (ERROR) right: (identifier)))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\")) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (throw_statement (object_creation_expression type: (type_identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (identifier)) (character_literal) (ERROR (UNEXPECTED '`')))))))) (return_statement (identifier))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation name: (identifier) arguments: (argument_list (character_literal)))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation name: (identifier) arguments: (argument_list (character_literal)))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation name: (identifier) arguments: (argument_list))))))\n**\n\n--\nscript \nfunction checkEarHygiene(privacy) {\n  let action;\n\n  \n  if (privacy === \"public\") {\n    console.log(\"Seeking medical attention as per patient request.\"); \n    action = \"see_doctor\";\n    \n  } else if (privacy === \"private\" || privacy === undefined){\n    \n    console.log(\"Simulating cleaning procedure.\")\n    action = \"clean_ears\";\n  \n  } else {\n    throw new Error(`Invalid privacy level '${privacy}'`);\n  }\n\n  return action;\n}\n\n\n\nconsole.log(checkEarHygiene('public'));    \nconsole.log(checkEarHygiene('private'));   \nconsole.log(checkEarHygiene());\n--\n",
        "text": "6\nОбъяснение:\nВ приведённом фрагменте кода можно выделить шесть путей выполнения, которые",
        "token_cnt": 720
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Enter shampoo price:\");\n        double shampooPrice = scan.nextDouble();\n        \n        System.out.println(\"Enter conditioner price:\");\n        double condionerPrice = scan.nextDouble();\n    \n        System.out.println(\"Enter leave-in treatment price (or -1 to skip):\");\n        double leaveInTreatmentPrice = scan.nextInt();\n    \n        \n        double totalCost;\n        String recommendation;\n    \n        \n        totalCost = shampooPrice + condtionerPrice;\n        if (leaveInTreatmentPrice != -1){\n            totalCost += leaveInTreatmentPrice;\n        }\n    \n        \n        if (shampooPrice < 5 && condtionerPrice > 20 ) {\n           recommendation =\"Buy expensive conditioner\";\n        } else if ((shampooPrice >= 5 || condtionerPrice <= 20)){\n           recommendation=\"Buy budget friendly options\";\n        } else{\n          recommendation= \"Invalid Input\" ;  \n        }\n    \n        \n        System.out.printf(\"Total Cost: $%.2f\\n\",totalCost);\n        System.out.println(\"Recommendation:\" +recommendation);\n    \n    }\n}",
            "id": 1235
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (identifier)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (unary_expression operand: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (identifier))))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence)) (identifier)))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Enter shampoo price:\");\n        double shampooPrice = scan.nextDouble();\n        \n        System.out.println(\"Enter conditioner price:\");\n        double condionerPrice = scan.nextDouble();\n    \n        System.out.println(\"Enter leave-in treatment price (or -1 to skip):\");\n        double leaveInTreatmentPrice = scan.nextInt();\n    \n        \n        double totalCost;\n        String recommendation;\n    \n        \n        totalCost = shampooPrice + condtionerPrice;\n        if (leaveInTreatmentPrice != -1){\n            totalCost += leaveInTreatmentPrice;\n        }\n    \n        \n        if (shampooPrice < 5 && condtionerPrice > 20 ) {\n           recommendation =\"Buy expensive conditioner\";\n        } else if ((shampooPrice >= 5 || condtionerPrice <= 20)){\n           recommendation=\"Buy budget friendly options\";\n        } else{\n          recommendation= \"Invalid Input\" ;  \n        }\n    \n        \n        System.out.printf(\"Total Cost: $%.2f\\n\",totalCost);\n        System.out.println(\"Recommendation:\" +recommendation);\n    \n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 1254
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public boolean determineLowestPricingForExpert(List<Product> products) {\n        \n        Collections.sort(products, (p1, p2) -> Double.compare(p1.getPrice(), p2.getPrice()));\n\n        double currentMin = products.get(0).getPrice();\n        int trustLevel = 4; \n        \n        \n        for (int i = 0; i < products.size(); i++) {\n            Product prod = products.get(i);\n            \n            if ((prod.getPrice() > currentMin && prod.getTrustLevel() <= trustLevel)) {\n                return false;\n            } else if (prod.getPrice() < currentMin){\n                currentMin = prod.getPrice();\n            }\n        }\n    \n        return true;\n    }",
            "id": 1238
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (generic_type (type_identifier) (type_arguments (type_identifier))) name: (identifier))) body: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier) (lambda_expression parameters: (inferred_parameters (identifier) (identifier)) body: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (decimal_integer_literal))) name: (identifier) arguments: (argument_list)))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (for_statement init: (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) condition: (binary_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))) update: (update_expression (identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (condition (parenthesized_expression (binary_expression left: (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (identifier)) right: (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (identifier))))) consequence: (block (return_statement (false))) alternative: (if_statement condition: (condition (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (identifier))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))))))))) (return_statement (true)))))\n**\n\n--\npublic boolean determineLowestPricingForExpert(List<Product> products) {\n        \n        Collections.sort(products, (p1, p2) -> Double.compare(p1.getPrice(), p2.getPrice()));\n\n        double currentMin = products.get(0).getPrice();\n        int trustLevel = 4; \n        \n        \n        for (int i = 0; i < products.size(); i++) {\n            Product prod = products.get(i);\n            \n            if ((prod.getPrice() > currentMin && prod.getTrustLevel() <= trustLevel)) {\n                return false;\n            } else if (prod.getPrice() < currentMin){\n                currentMin = prod.getPrice();\n            }\n        }\n    \n        return true;\n    }\n--\n",
        "text": "6\nОбъяснение: цикломатическая сложность этого фрагмента кода равна количеству линейно независимых путей через него.",
        "token_cnt": 847
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class EtiquetteCalculator {\n\n    public static void main(String[] args) {\n        int reliability = Integer.parseInt(args[0]);\n\n        String result;\n        if (reliability <= 3){\n            \n            result = \"It is not recommended to rely on information from this source.\";\n        } else if (reliability ==4 || reliability==5){\n            \n            result =\"While some caution may be advised when relying on this information, it can still provide useful guidance.\" ; \n        } else{\n             \n             result=\"This information comes from highly reputable sources and can be trusted without any hesitation.\" ;    \n        }\n        \n        System.out.println(\"Etiquette advice:\" +result);\n    }\n}",
            "id": 1240
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (array_access array: (identifier) index: (decimal_integer_literal)))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (identifier))))))))))\n**\n\n--\npublic class EtiquetteCalculator {\n\n    public static void main(String[] args) {\n        int reliability = Integer.parseInt(args[0]);\n\n        String result;\n        if (reliability <= 3){\n            \n            result = \"It is not recommended to rely on information from this source.\";\n        } else if (reliability ==4 || reliability==5){\n            \n            result =\"While some caution may be advised when relying on this information, it can still provide useful guidance.\" ; \n        } else{\n             \n             result=\"This information comes from highly reputable sources and can be trusted without any hesitation.\" ;    \n        }\n        \n        System.out.println(\"Etiquette advice:\" +result);\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 600
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public String transformHighNailCare(String filingAndShaping) {\n    \n    String transformedTreatment = \"\";\n    \n    \n    switch (filingAndShaping){\n        case \"Filing\":\n            transformedTreatment = \"Use emery board to file down any rough edges.\";\n            break;\n        case \"Buffing\":\n            transformedTreatment = \"Use buffer block to smooth out ridges and bumps.\";\n            break;\n        default: \n            System.out.println(\"Invalid Input\");\n    }\n\n    return transformedTreatment;\n}",
            "id": 1242
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))) (return_statement (identifier)))))\n**\n\n--\npublic String transformHighNailCare(String filingAndShaping) {\n    \n    String transformedTreatment = \"\";\n    \n    \n    switch (filingAndShaping){\n        case \"Filing\":\n            transformedTreatment = \"Use emery board to file down any rough edges.\";\n            break;\n        case \"Buffing\":\n            transformedTreatment = \"Use buffer block to smooth out ridges and bumps.\";\n            break;\n        default: \n            System.out.println(\"Invalid Input\");\n    }\n\n    return transformedTreatment;\n}\n--\n",
        "text": "5\n\nОбъяснение:\n\nЦикломатическая сложность — это мера сложности программного кода, которая",
        "token_cnt": 431
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static String getExtremeHandWashTechnique(String responsibility) {\n    \n    final Map<String, String> RESPONSIBILITIES = new HashMap<>();\n    RESPONSIBILITIES.put(\"Doctor\", \"Use alcohol-based hand rub\");\n    RESPONSIBILITIES.put(\"Nurse\", \"Wet hands thoroughly under clean running water\");\n    RESPONSIBILITIES.put(\"Chef\", \"Rinse hands immediately after handling raw meat or poultry\");\n    RESPONSIBILITIES.put(\"Student\", \"Soap up both palms and backs of hands before rinsing off\");\n\n    \n    if (!RESPONSIBILITIES.containsKey(responsibility)) {\n        return \"Invalid Input\";\n    }\n    \n    \n    switch (responsibility){\n        case \"Doctor\":\n            return RESPONSIBILITIES.get(responsibility) + \". This helps reduce risk of spreading diseases like COVID-19.\"; \n        case \"Nurse\": \n            return RESPONSIBILITIES.get(responsibility);    \n        default: \n            return RESPONSIBILITIES.get(responsibility) + \". Washing hands properly can help prevent illness from contaminated food.\" ;    \n    }\n}",
            "id": 1247
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration (modifiers) type: (generic_type (type_identifier) (type_arguments (type_identifier) (type_identifier))) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (generic_type (type_identifier) (type_arguments)) arguments: (argument_list)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal (string_fragment))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal (string_fragment))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal (string_fragment))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal (string_fragment))))) (if_statement condition: (condition (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))) consequence: (block (return_statement (string_literal (string_fragment))))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (return_statement (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))) right: (string_literal (string_fragment))))) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (return_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))) (switch_block_statement_group (switch_label) (return_statement (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))) right: (string_literal (string_fragment))))))))))\n**\n\n--\npublic static String getExtremeHandWashTechnique(String responsibility) {\n    \n    final Map<String, String> RESPONSIBILITIES = new HashMap<>();\n    RESPONSIBILITIES.put(\"Doctor\", \"Use alcohol-based hand rub\");\n    RESPONSIBILITIES.put(\"Nurse\", \"Wet hands thoroughly under clean running water\");\n    RESPONSIBILITIES.put(\"Chef\", \"Rinse hands immediately after handling raw meat or poultry\");\n    RESPONSIBILITIES.put(\"Student\", \"Soap up both palms and backs of hands before rinsing off\");\n\n    \n    if (!RESPONSIBILITIES.containsKey(responsibility)) {\n        return \"Invalid Input\";\n    }\n    \n    \n    switch (responsibility){\n        case \"Doctor\":\n            return RESPONSIBILITIES.get(responsibility) + \". This helps reduce risk of spreading diseases like COVID-19.\"; \n        case \"Nurse\": \n            return RESPONSIBILITIES.get(responsibility);    \n        default: \n            return RESPONSIBILITIES.get(responsibility) + \". Washing hands properly can help prevent illness from contaminated food.\" ;    \n    }\n}\n--\n",
        "text": "4\nОбъяснение:\nПредставленный фрагмент содержит 4 основных блока кода, которые можно выделить по",
        "token_cnt": 868
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n\nfunction calcEarHygiene(dryRun) {\n  let bias = prompt(\"Please enter your subjective probability (0 - 1): \"); \n  \n  while (!isFinite(bias) || Number(bias) < 0 || Number(bias) > 1) \n    bias = prompt(\"Invalid input! Please reenter your probability (0 - 1): \")\n  \n  const prob_p = 0.9; \n  const prob_n = 1 - prob_p; \n\n  let outcome;\n  if (Math.random() < prob_p * bias) {\n    \n    outcome = \"Positive\";\n    if (!dryRun) console.log(`User reported symptoms (${outcome}), updating belief`);\n  } else if (Math.random() < prob_n) {\n    \n    outcome = \"Negative\";\n    if (!dryRun) console.log(`Random chance detected (${outcome}), updating belief`);\n  } else {\n    \n    outcome = null;\n    if (!dryRun) alert(`Insufficient evidence, request additional info (${outcome})`);\n  }\n\n  return outcome;\n}\n\nlet outcome = calcEarHygiene(true); \nif (outcome === null) outcome = calcEarHygiene(); \nconsole.log(`Final outcome: ${outcome}`);",
            "id": 1251
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (while_statement condition: (condition (binary_expression left: (binary_expression left: (unary_expression operand: (method_invocation name: (identifier) arguments: (argument_list (identifier)))) right: (binary_expression left: (method_invocation name: (identifier) arguments: (argument_list (identifier))) right: (decimal_integer_literal))) right: (binary_expression left: (method_invocation name: (identifier) arguments: (argument_list (identifier))) right: (decimal_integer_literal)))) body: (expression_statement (assignment_expression left: (identifier) right: (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (MISSING \";\"))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_floating_point_literal))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (decimal_integer_literal) right: (identifier)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (if_statement condition: (condition (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (binary_expression left: (identifier) right: (identifier)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier)) (method_invocation name: (identifier) arguments: (argument_list (identifier) (ERROR (identifier)))) (ERROR (type_identifier) (identifier) (UNEXPECTED '`'))))))) alternative: (if_statement condition: (condition (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (identifier))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier)) (method_invocation name: (identifier) arguments: (argument_list (identifier) (ERROR (identifier)))) (ERROR (type_identifier) (identifier) (UNEXPECTED '`'))))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (null_literal))) (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (expression_statement (method_invocation name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier)) (identifier) (ERROR (type_identifier) (identifier)) (method_invocation name: (identifier) arguments: (argument_list (identifier) (ERROR (identifier)))) (ERROR (UNEXPECTED '`'))))))))) (return_statement (identifier))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (true))))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (null_literal))) consequence: (expression_statement (assignment_expression left: (identifier) right: (method_invocation name: (identifier) arguments: (argument_list))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier)) (identifier) (ERROR (identifier) (UNEXPECTED '`'))))))\n**\n\n--\nscript\n\nfunction calcEarHygiene(dryRun) {\n  let bias = prompt(\"Please enter your subjective probability (0 - 1): \"); \n  \n  while (!isFinite(bias) || Number(bias) < 0 || Number(bias) > 1) \n    bias = prompt(\"Invalid input! Please reenter your probability (0 - 1): \")\n  \n  const prob_p = 0.9; \n  const prob_n = 1 - prob_p; \n\n  let outcome;\n  if (Math.random() < prob_p * bias) {\n    \n    outcome = \"Positive\";\n    if (!dryRun) console.log(`User reported symptoms (${outcome}), updating belief`);\n  } else if (Math.random() < prob_n) {\n    \n    outcome = \"Negative\";\n    if (!dryRun) console.log(`Random chance detected (${outcome}), updating belief`);\n  } else {\n    \n    outcome = null;\n    if (!dryRun) alert(`Insufficient evidence, request additional info (${outcome})`);\n  }\n\n  return outcome;\n}\n\nlet outcome = calcEarHygiene(true); \nif (outcome === null) outcome = calcEarHygiene(); \nconsole.log(`Final outcome: ${outcome}`);\n--\n",
        "text": "24",
        "token_cnt": 1400
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class UpdateLowOralHealthHabits {\n\n    public static void main(String[] args) {\n        \n        int privacyLevel = checkUserPrivacy();\n\n        switch (privacyLevel){\n            case HIGH:\n                System.out.println(\"HIGH PRIVACY LEVEL - Provide detailed information about healthy diets\");\n                break;\n            case MEDIUM:\n                System.out.println(\"MEDIUM PRIVACY LEVEL - Provide general information about healthy diets\");\n                break;\n            default:\n                System.out.println(\"LOW PRIVACY LEVEL - Provide minimal information about healthy diets\");\n        }\n    }\n\n    private static int checkUserPrivacy() {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter your privacy level (1 for High, 2 for Medium, any other key for Low): \");\n        return scanner.nextInt();\n    }\n}",
            "id": 1253
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list)))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (identifier)) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label (identifier)) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))) (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))))))))\n**\n\n--\npublic class UpdateLowOralHealthHabits {\n\n    public static void main(String[] args) {\n        \n        int privacyLevel = checkUserPrivacy();\n\n        switch (privacyLevel){\n            case HIGH:\n                System.out.println(\"HIGH PRIVACY LEVEL - Provide detailed information about healthy diets\");\n                break;\n            case MEDIUM:\n                System.out.println(\"MEDIUM PRIVACY LEVEL - Provide general information about healthy diets\");\n                break;\n            default:\n                System.out.println(\"LOW PRIVACY LEVEL - Provide minimal information about healthy diets\");\n        }\n    }\n\n    private static int checkUserPrivacy() {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter your privacy level (1 for High, 2 for Medium, any other key for Low): \");\n        return scanner.nextInt();\n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 735
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public int calculateExtremeSocialMedia(String platformName, double impressions, long engagements) {\n    \n    int result = -1; \n\n    \n    Map<String, Double> platformImpactMap = new HashMap<>(); \n    platformImpactMap.put(\"Facebook\", 2); \n    platformImpactMap.put(\"Instagram\", 3); \n    platformImpactMap.put(\"Twitter\", 4); \n    platformImpactMap.put(\"YouTube\", 5); \n\n    \n    if (platformImpactMap.containsKey(platformName)) { \n       \n        \n        double impactFactor = platformImpactMap.get(platformName); \n\n        \n        if (result < impactFactor * impressions + engagements) { \n           \n            \n            result = (int)(impactFactor * impressions + engagements); \n        } \n    }\n\n    return result; \n}",
            "id": 1255
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (floating_point_type) name: (identifier)) (formal_parameter type: (integral_type) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (unary_expression operand: (decimal_integer_literal)))) (local_variable_declaration type: (generic_type (type_identifier) (type_arguments (type_identifier) (type_identifier))) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (generic_type (type_identifier) (type_arguments)) arguments: (argument_list)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (decimal_integer_literal)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (decimal_integer_literal)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (decimal_integer_literal)))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (decimal_integer_literal)))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier)))) consequence: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (identifier)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (cast_expression type: (integral_type) value: (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (identifier)))))))))) (return_statement (identifier)))))\n**\n\n--\npublic int calculateExtremeSocialMedia(String platformName, double impressions, long engagements) {\n    \n    int result = -1; \n\n    \n    Map<String, Double> platformImpactMap = new HashMap<>(); \n    platformImpactMap.put(\"Facebook\", 2); \n    platformImpactMap.put(\"Instagram\", 3); \n    platformImpactMap.put(\"Twitter\", 4); \n    platformImpactMap.put(\"YouTube\", 5); \n\n    \n    if (platformImpactMap.containsKey(platformName)) { \n       \n        \n        double impactFactor = platformImpactMap.get(platformName); \n\n        \n        if (result < impactFactor * impressions + engagements) { \n           \n            \n            result = (int)(impactFactor * impressions + engagements); \n        } \n    }\n\n    return result; \n}\n--\n",
        "text": "6",
        "token_cnt": 815
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class DisplayLowHandHygieneOutsideTheHome {\n\n    public static void main(String[] args) throws Exception {\n        \n        System.out.println(\"Enter the number of people leaving their house:\");\n        int numPeople = Integer.parseInt(scanner.nextLine());\n\n        \n        try {\n            \n            double probOfInfection = calculateProbabilityOfInfection(numPeople);\n\n            \n            if (probOfInfection < LOW_HAND_HYGIENE_THRESHOLD) {\n                System.out.println(\"Low risk of spreading COVID-19 due to good hand hygiene habits.\");\n            } else {\n                System.out.printf(\"High risk of spreading COVID-19 (%f%%). \"\n                        + \"Encourage everyone to practice proper hand hygiene before leaving the house.\", \n                        probOfInfection * 100);\n            }\n        } catch (NumberFormatException e) {\n            System.err.println(\"Invalid input. Please enter a valid integer value.\");\n        }\n    }\n\n    private static double calculateProbabilityOfInfection(int numPeople) {\n        \n    }\n\n    private static final double LOW_HAND_HYGIENE_THRESHOLD = 0.2;\n}",
            "id": 1256
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))) (try_statement body: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (identifier))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (string_literal (string_fragment))) (binary_expression left: (identifier) right: (decimal_integer_literal)))))))) (catch_clause (catch_formal_parameter (catch_type (type_identifier)) name: (identifier)) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))) (method_declaration (modifiers) type: (floating_point_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (integral_type) name: (identifier))) body: (block)) (field_declaration (modifiers) type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_floating_point_literal))))))\n**\n\n--\npublic class DisplayLowHandHygieneOutsideTheHome {\n\n    public static void main(String[] args) throws Exception {\n        \n        System.out.println(\"Enter the number of people leaving their house:\");\n        int numPeople = Integer.parseInt(scanner.nextLine());\n\n        \n        try {\n            \n            double probOfInfection = calculateProbabilityOfInfection(numPeople);\n\n            \n            if (probOfInfection < LOW_HAND_HYGIENE_THRESHOLD) {\n                System.out.println(\"Low risk of spreading COVID-19 due to good hand hygiene habits.\");\n            } else {\n                System.out.printf(\"High risk of spreading COVID-19 (%f%%). \"\n                        + \"Encourage everyone to practice proper hand hygiene before leaving the house.\", \n                        probOfInfection * 100);\n            }\n        } catch (NumberFormatException e) {\n            System.err.println(\"Invalid input. Please enter a valid integer value.\");\n        }\n    }\n\n    private static double calculateProbabilityOfInfection(int numPeople) {\n        \n    }\n\n    private static final double LOW_HAND_HYGIENE_THRESHOLD = 0.2;\n}\n--\n",
        "text": "8",
        "token_cnt": 903
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class CheckEducation {\n    public static boolean hasCompletedHighSchool(boolean safety) {\n        if (safety == true){\n            return false;\n        } else{\n            return true;\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"Has Completed High School : \" + hasCompletedHighSchool(true)); \n        System.out.println(\"Has Completed High School : \" + hasCompletedHighSchool(false)); \n    }\n}",
            "id": 1267
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier))) body: (block (if_statement condition: (condition (binary_expression left: (identifier) right: (true))) consequence: (block (return_statement (false))) alternative: (block (return_statement (true)))))) (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (method_invocation name: (identifier) arguments: (argument_list (true))))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (method_invocation name: (identifier) arguments: (argument_list (false))))))))))))\n**\n\n--\npublic class CheckEducation {\n    public static boolean hasCompletedHighSchool(boolean safety) {\n        if (safety == true){\n            return false;\n        } else{\n            return true;\n        }\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"Has Completed High School : \" + hasCompletedHighSchool(true)); \n        System.out.println(\"Has Completed High School : \" + hasCompletedHighSchool(false)); \n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 467
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static String transformExtremeWeather(String weatherCondition) {\n    \n    StringBuilder sb = new StringBuilder();\n\n    \n    if (weatherCondition == null || weatherCondition.isEmpty()) {\n        return \"Invalid Input\";\n    }\n    \n    \n    switch (weatherCondition){\n\n        case \"Thunderstorm\":\n            \n            sb.append(\"⚠️ *Warning*\\n\");\n            sb.append(\"Be cautious during thunderstorms.\\n\");\n            break; \n\n        case \"Hail\":\n            \n            sb.append(\"⚠️ *Warning*\\n\");\n            sb.append(\"Watch out for large hailstones during storms.\");\n            break; \n\n        default:\n            \n            sb.append(\"*Safety Tips*:\\n\\n\");\n            sb.append(\"- Stay safe from lightning strikes by staying indoors or seeking shelter underground.\\n\");\n            sb.append(\"- Monitor local news and follow instructions issued by authorities during severe weather events.\\n\");\n            sb.append(\"- If caught outside during bad weather, seek shelter immediately in a building or vehicle.\\n\");\n            sb.append(\"- Avoid high ground and isolated areas during heavy rainfall and flooding.\\n\");\n            sb.append(\"- Keep away from objects that can conduct electricity such as metal fences, poles, etc.\\n\");\n            sb.append(\"- Do not use corded phones, electronics, and avoid opening doors and windows when it’s raining heavily.\");\n            break; \n    } \n\n    return sb.toString();\n}",
            "id": 1274
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (null_literal)) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) consequence: (block (return_statement (string_literal (string_fragment))))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence))))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence) (escape_sequence))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)))) (return_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list))))))\n**\n\n--\npublic static String transformExtremeWeather(String weatherCondition) {\n    \n    StringBuilder sb = new StringBuilder();\n\n    \n    if (weatherCondition == null || weatherCondition.isEmpty()) {\n        return \"Invalid Input\";\n    }\n    \n    \n    switch (weatherCondition){\n\n        case \"Thunderstorm\":\n            \n            sb.append(\"⚠️ *Warning*\\n\");\n            sb.append(\"Be cautious during thunderstorms.\\n\");\n            break; \n\n        case \"Hail\":\n            \n            sb.append(\"⚠️ *Warning*\\n\");\n            sb.append(\"Watch out for large hailstones during storms.\");\n            break; \n\n        default:\n            \n            sb.append(\"*Safety Tips*:\\n\\n\");\n            sb.append(\"- Stay safe from lightning strikes by staying indoors or seeking shelter underground.\\n\");\n            sb.append(\"- Monitor local news and follow instructions issued by authorities during severe weather events.\\n\");\n            sb.append(\"- If caught outside during bad weather, seek shelter immediately in a building or vehicle.\\n\");\n            sb.append(\"- Avoid high ground and isolated areas during heavy rainfall and flooding.\\n\");\n            sb.append(\"- Keep away from objects that can conduct electricity such as metal fences, poles, etc.\\n\");\n            sb.append(\"- Do not use corded phones, electronics, and avoid opening doors and windows when it’s raining heavily.\");\n            break; \n    } \n\n    return sb.toString();\n}\n--\n",
        "text": "6",
        "token_cnt": 1082
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n\nif (trust === 'Expert') {\n  console.log('Congratulations! The user has high dental hygiene.')\n} else if (trust === 'Intermediate') {\n  \n} else {\n  \n}\n\n\n\nswitch(trust){\n    case \"Expert\":\n        console.log(\"Congratulation! User has excellent dental hygine\");\n        break;\n    case \"Advanced\":\n        \n        break;\n    default:\n        \n}",
            "id": 1277
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (ERROR (type_identifier) (identifier) (type_identifier) (ERROR (character_literal)) (identifier) (ERROR (identifier) (character_literal)) (identifier) (character_literal)) (block) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (string_literal (string_fragment))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (break_statement)) (switch_block_statement_group (switch_label (string_literal (string_fragment))) (break_statement)) (switch_block_statement_group (switch_label)))))\n**\n\n--\nscript\n\nif (trust === 'Expert') {\n  console.log('Congratulations! The user has high dental hygiene.')\n} else if (trust === 'Intermediate') {\n  \n} else {\n  \n}\n\n\n\nswitch(trust){\n    case \"Expert\":\n        console.log(\"Congratulation! User has excellent dental hygine\");\n        break;\n    case \"Advanced\":\n        \n        break;\n    default:\n        \n}\n--\n",
        "text": "8\n\nОбъяснение:\n\nЦикломатическая сложность — это мера сложности программного кода, которая",
        "token_cnt": 313
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static String transformExtremeBathingRoutine(String input) {\n        \n        String output = \"\";\n        boolean privacyStatus = false;\n\n        \n        if (input.toLowerCase().contains(\"public\")) {\n            privacyStatus = true;\n\n            \n            input = input.replace(\"public\", \"\");\n        }\n        \n        \n        String[] words = input.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n\n            \n            if (word.equals(\"body\")) {\n                word = \"cleansing body properly for analysis\";\n            }\n\n            \n            output += word + \" \";\n            if (!privacyStatus && EXCLUDED_WORDS.contains(word)) {\n                privacyStatus = true;\n            } else if (privacyStatus && INCLUDED_WORDS.contains(word)) {\n                privacyStatus = false;\n            }\n        }\n\n        return output;\n    }",
            "id": 1281
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (if_statement condition: (condition (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true))) (expression_statement (assignment_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal))))))) (local_variable_declaration type: (array_type element: (type_identifier) dimensions: (dimensions)) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (for_statement init: (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) condition: (binary_expression left: (identifier) right: (field_access object: (identifier) field: (identifier))) update: (update_expression (identifier)) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (array_access array: (identifier) index: (identifier)))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))))) (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (string_literal (string_fragment))))) (if_statement condition: (condition (binary_expression left: (unary_expression operand: (identifier)) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true)))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (false)))))))) (return_statement (identifier)))))\n**\n\n--\npublic static String transformExtremeBathingRoutine(String input) {\n        \n        String output = \"\";\n        boolean privacyStatus = false;\n\n        \n        if (input.toLowerCase().contains(\"public\")) {\n            privacyStatus = true;\n\n            \n            input = input.replace(\"public\", \"\");\n        }\n        \n        \n        String[] words = input.split(\" \");\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n\n            \n            if (word.equals(\"body\")) {\n                word = \"cleansing body properly for analysis\";\n            }\n\n            \n            output += word + \" \";\n            if (!privacyStatus && EXCLUDED_WORDS.contains(word)) {\n                privacyStatus = true;\n            } else if (privacyStatus && INCLUDED_WORDS.contains(word)) {\n                privacyStatus = false;\n            }\n        }\n\n        return output;\n    }\n--\n",
        "text": "6",
        "token_cnt": 949
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script \n\nconsole.log(\"Welcome to extreme dental hygiene!\");\nconsole.log(\"In this chapter we will learn about\");\nconsole.log(\"- brushing teeth properly\");\nconsole.log(\"- flossing daily\");\nconsole.log(\"- rinsing with mouth wash regularly\")\nconsole.log(\"\");\n\nlet consent = prompt(\"Do you give your consent?\");\nif (consent === 'yes') {\n  console.log(\"Starting today, you must follow these steps:\")\n  console.log(\"- Brush twice a day for two minutes each time.\");\n  console.log(\"- Floss once a day.\")\n  console.log(\"- Rinse with mouthwash after every meal.\")\n  console.log(\"\")\n  console.log(\"Remember healthy gums lead to overall good health!\")\n} else if(consent === 'no'){\n    alert('Okay! We respect your decision.')\n} else{\n   alert('Invalid input!')   \n}",
            "id": 1285
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (ERROR (type_identifier) (identifier) (ERROR (identifier))) (expression_statement (string_literal (string_fragment)) (ERROR)) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (ERROR (identifier)) name: (identifier) arguments: (argument_list (string_literal)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (expression_statement (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (ERROR (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (method_invocation object: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (ERROR (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (ERROR (identifier)) name: (identifier) arguments: (argument_list (string_literal))) (ERROR (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\"))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list (character_literal))) (MISSING \";\"))) alternative: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list (character_literal))) (MISSING \";\"))))))\n**\n\n--\nscript \n\nconsole.log(\"Welcome to extreme dental hygiene!\");\nconsole.log(\"In this chapter we will learn about\");\nconsole.log(\"- brushing teeth properly\");\nconsole.log(\"- flossing daily\");\nconsole.log(\"- rinsing with mouth wash regularly\")\nconsole.log(\"\");\n\nlet consent = prompt(\"Do you give your consent?\");\nif (consent === 'yes') {\n  console.log(\"Starting today, you must follow these steps:\")\n  console.log(\"- Brush twice a day for two minutes each time.\");\n  console.log(\"- Floss once a day.\")\n  console.log(\"- Rinse with mouthwash after every meal.\")\n  console.log(\"\")\n  console.log(\"Remember healthy gums lead to overall good health!\")\n} else if(consent === 'no'){\n    alert('Okay! We respect your decision.')\n} else{\n   alert('Invalid input!')   \n}\n--\n",
        "text": "31",
        "token_cnt": 824
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static void main(String[] args) {\n        \n        System.out.println(\"Enter 1 if you are a beginner, 2 if you are intermediate, \" +\n                \"or 3 if you are advanced:\");\n        int expLevel = scan.nextInt();\n\n        \n        if (expLevel == 1){\n            System.out.println(\"Extreme Education: Academic Planning for Decision Making for Beginners\");\n        } else if (expLevel == 2) {\n            System.out.println(\"Intermediate Guide to Academic Planning for Decision Making \");\n        } else if (expLevel == 3) {\n            System.out.println(\"Advanced Strategies for Academic Planning for Decision Making \");\n        } else {\n            System.out.println(\"Invalid option entered.\");\n        }\n\n    }\n}",
            "id": 1286
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (string_literal (string_fragment)))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))) (ERROR))\n**\n\n--\npublic static void main(String[] args) {\n        \n        System.out.println(\"Enter 1 if you are a beginner, 2 if you are intermediate, \" +\n                \"or 3 if you are advanced:\");\n        int expLevel = scan.nextInt();\n\n        \n        if (expLevel == 1){\n            System.out.println(\"Extreme Education: Academic Planning for Decision Making for Beginners\");\n        } else if (expLevel == 2) {\n            System.out.println(\"Intermediate Guide to Academic Planning for Decision Making \");\n        } else if (expLevel == 3) {\n            System.out.println(\"Advanced Strategies for Academic Planning for Decision Making \");\n        } else {\n            System.out.println(\"Invalid option entered.\");\n        }\n\n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 675
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n    const calculateLowRegularHealthCheckUps = (patientData) => {\n      \n      let totalScore = 0;\n  \n      Object.values(patientData).forEach((indicatorValue) => {\n        if (indicatorValue >= 75 && indicatorValue <= 124) {\n          totalScore += 1;\n        } else if (indicatorValue < 75) {\n          return \"Immediate action required\";\n        }\n      });\n  \n      if (totalScore === 6) {\n        return \"High risk of complications\";\n      } else if (totalScore > 3) {\n        return \"Medium risk of complications\";\n      }\n  \n      return \"No significant risks detected\";\n    };\n    \n    module.exports = calculateLowRegularHealthCheckUps;",
            "id": 1288
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier) (ERROR (inferred_parameters (identifier)) (ERROR) (type_identifier) (identifier)) value: (decimal_integer_literal))) (expression_statement (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))) name: (identifier) arguments: (argument_list (ERROR (inferred_parameters (identifier)) (parenthesized_expression (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) (assignment_expression left: (identifier) right: (decimal_integer_literal)) (parenthesized_expression (binary_expression left: (identifier) right: (decimal_integer_literal)))) (string_literal (string_fragment)) (ERROR)))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (decimal_integer_literal))) consequence: (block (return_statement (string_literal (string_fragment)))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (return_statement (string_literal (string_fragment)))))) (return_statement (string_literal (string_fragment))) (ERROR) (expression_statement (assignment_expression left: (field_access object: (identifier) field: (identifier)) right: (identifier))))\n**\n\n--\nscript\n    const calculateLowRegularHealthCheckUps = (patientData) => {\n      \n      let totalScore = 0;\n  \n      Object.values(patientData).forEach((indicatorValue) => {\n        if (indicatorValue >= 75 && indicatorValue <= 124) {\n          totalScore += 1;\n        } else if (indicatorValue < 75) {\n          return \"Immediate action required\";\n        }\n      });\n  \n      if (totalScore === 6) {\n        return \"High risk of complications\";\n      } else if (totalScore > 3) {\n        return \"Medium risk of complications\";\n      }\n  \n      return \"No significant risks detected\";\n    };\n    \n    module.exports = calculateLowRegularHealthCheckUps;\n--\n",
        "text": "5\nОбъяснение:\nВ приведённом фрагменте кода можно выделить пять блоков, которые могут",
        "token_cnt": 580
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public String displayExtremeSecurityFraudDetectionForBeginner(double transactionAmount) {\n    \n    String result = \"\";\n\n    /* \n     * Check whether input value is negative\n     */ \n    if (transactionAmount < 0) {\n        return \"Invalid Input\";\n    } \n\n    /* \n     * Check whether input value exceeds certain threshold limit\n     */ \n    else if (transactionAmount > 1000) {\n\n        \n        boolean highValueFlag = true; \n\n        \n        switch (highValueFlag) {\n            case false:\n                result = \"Normal Transaction\"; \n                break; \n            default:\n                result = \"Suspicious High Value Transaction\";    \n        }    \n    } \n\n    /* \n     * Check whether input value lies between two thresholds limits\n     */ \n    else {\n        double lowThresholdLimit = 50 ; \n        double highThresholdLimit = 200; \n\n        \n        if (transactionAmount >=lowThresholdLimit && transactionAmount <= highThresholdLimit){\n\n            \n            boolean lowHighFlag=false;  \n\n            \n            switch (lowHighFlag) {\n                case true:\n                    result=\" Normal Within Range \"; \n                    break;   \n                default:\n                    result =\" Suspicious Low To High Value Transaction\"    \n            }          \n        } \n\n        \n        else if (transactionAmount>highThresholdLimit ) {\n            result = \"Very High Value Transaction\";  \n        } \n\n        \n        else{\n            result = \"Invalid Input\";\n        }      \n    }\n\n    \n    return result;\n}",
            "id": 1291
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (floating_point_type) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal))) (block_comment) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (return_statement (string_literal (string_fragment)))) (block_comment) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (true))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (false)) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))))))) (block_comment) alternative: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (binary_expression left: (identifier) right: (identifier)))) consequence: (block (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (true)) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))) (MISSING \";\")))))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (identifier))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))))))))) (return_statement (identifier)))))\n**\n\n--\npublic String displayExtremeSecurityFraudDetectionForBeginner(double transactionAmount) {\n    \n    String result = \"\";\n\n    /* \n     * Check whether input value is negative\n     */ \n    if (transactionAmount < 0) {\n        return \"Invalid Input\";\n    } \n\n    /* \n     * Check whether input value exceeds certain threshold limit\n     */ \n    else if (transactionAmount > 1000) {\n\n        \n        boolean highValueFlag = true; \n\n        \n        switch (highValueFlag) {\n            case false:\n                result = \"Normal Transaction\"; \n                break; \n            default:\n                result = \"Suspicious High Value Transaction\";    \n        }    \n    } \n\n    /* \n     * Check whether input value lies between two thresholds limits\n     */ \n    else {\n        double lowThresholdLimit = 50 ; \n        double highThresholdLimit = 200; \n\n        \n        if (transactionAmount >=lowThresholdLimit && transactionAmount <= highThresholdLimit){\n\n            \n            boolean lowHighFlag=false;  \n\n            \n            switch (lowHighFlag) {\n                case true:\n                    result=\" Normal Within Range \"; \n                    break;   \n                default:\n                    result =\" Suspicious Low To High Value Transaction\"    \n            }          \n        } \n\n        \n        else if (transactionAmount>highThresholdLimit ) {\n            result = \"Very High Value Transaction\";  \n        } \n\n        \n        else{\n            result = \"Invalid Input\";\n        }      \n    }\n\n    \n    return result;\n}\n--\n",
        "text": "34",
        "token_cnt": 1082
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static String transformHighDentalHygiene(String trust) {\n        \n        String transformedTrust = \"\";\n\n        /*\n         * Check whether the given 'trust' value falls into one of these categories: \n         * - Very Little Trust (VLT): If the score is less than 20%, set the output as \"Very Low\"\n         * - Somewhat Trustworthy (ST): If the score is between 21% and 45%, set the output as \"Low\"\n         * - Moderately Trustworthy (MT): If the score is between 46% and 70%, set the output as \"Medium\"\n         * - Highly Trusted (HT): If the score is greater than or equal to 71%, set the output as \"High\".\n         */\n        if (Double.valueOf(trust) < 0.2) {\n            transformedTrust = \"Very Low\";\n        } else if (Double.valueOf(trust) >= 0.2 && Double.valueOf(trust) <= 0.45) {\n            transformedTrust = \"Low\";\n        } else if (Double.valueOf(trust) > 0.45 && Double.valueOf(trust) <= 0.7) {\n            transformedTrust = \"Medium\";\n        } else if (Double.valueOf(trust) >= 0.7) {\n            transformedTrust = \"High\";\n        }\n        \n        return transformedTrust;\n    }",
            "id": 1294
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal))) (block_comment) (if_statement condition: (condition (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))) right: (decimal_floating_point_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))) right: (decimal_floating_point_literal)) right: (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))) right: (decimal_floating_point_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))) right: (decimal_floating_point_literal)) right: (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))) right: (decimal_floating_point_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))) alternative: (if_statement condition: (condition (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))) right: (decimal_floating_point_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))))))) (return_statement (identifier)))))\n**\n\n--\npublic static String transformHighDentalHygiene(String trust) {\n        \n        String transformedTrust = \"\";\n\n        /*\n         * Check whether the given 'trust' value falls into one of these categories: \n         * - Very Little Trust (VLT): If the score is less than 20%, set the output as \"Very Low\"\n         * - Somewhat Trustworthy (ST): If the score is between 21% and 45%, set the output as \"Low\"\n         * - Moderately Trustworthy (MT): If the score is between 46% and 70%, set the output as \"Medium\"\n         * - Highly Trusted (HT): If the score is greater than or equal to 71%, set the output as \"High\".\n         */\n        if (Double.valueOf(trust) < 0.2) {\n            transformedTrust = \"Very Low\";\n        } else if (Double.valueOf(trust) >= 0.2 && Double.valueOf(trust) <= 0.45) {\n            transformedTrust = \"Low\";\n        } else if (Double.valueOf(trust) > 0.45 && Double.valueOf(trust) <= 0.7) {\n            transformedTrust = \"Medium\";\n        } else if (Double.valueOf(trust) >= 0.7) {\n            transformedTrust = \"High\";\n        }\n        \n        return transformedTrust;\n    }\n--\n",
        "text": "3",
        "token_cnt": 872
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public String determineLowSocialMediaEngagement(int numberOfLikes, int numberOfShares) {\n    \n    if (numberOfLikes > HIGH_LIKE_THRESHOLD) {\n        return \"Your content seems to be doing well! Keep up the good work.\";\n    }\n\n    \n    else if (numberOfShares >= MEDIUM_SHARE_COUNT && numberOfLikes <= HIGH_LIKE_THRESHOLD) {\n        return \"It looks like your audience is growing but still needs more exposure. Try sharing your posts on other platforms too!\";\n    }\n    \n    \n    else if ((numberOfLikes + numberOfShares) < LOW_ENGAGEMENT_THRESHOLD) {\n       return \"Looks like your post isn't resonating with your target audience. Consider reaching out to influencers in your niche or try creating better targeted ads\";\n   }\n\n   \n   return \"We don’t have enough information to make a recommendation at this time.\" ;\n}",
            "id": 1301
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (integral_type) name: (identifier)) (formal_parameter type: (integral_type) name: (identifier))) body: (block (if_statement condition: (condition (binary_expression left: (identifier) right: (identifier))) consequence: (block (return_statement (string_literal (string_fragment)))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (identifier)) right: (binary_expression left: (identifier) right: (identifier)))) consequence: (block (return_statement (string_literal (string_fragment)))) alternative: (if_statement condition: (condition (binary_expression left: (parenthesized_expression (binary_expression left: (identifier) right: (identifier))) right: (identifier))) consequence: (block (return_statement (string_literal (string_fragment))))))) (return_statement (string_literal (string_fragment))))))\n**\n\n--\npublic String determineLowSocialMediaEngagement(int numberOfLikes, int numberOfShares) {\n    \n    if (numberOfLikes > HIGH_LIKE_THRESHOLD) {\n        return \"Your content seems to be doing well! Keep up the good work.\";\n    }\n\n    \n    else if (numberOfShares >= MEDIUM_SHARE_COUNT && numberOfLikes <= HIGH_LIKE_THRESHOLD) {\n        return \"It looks like your audience is growing but still needs more exposure. Try sharing your posts on other platforms too!\";\n    }\n    \n    \n    else if ((numberOfLikes + numberOfShares) < LOW_ENGAGEMENT_THRESHOLD) {\n       return \"Looks like your post isn't resonating with your target audience. Consider reaching out to influencers in your niche or try creating better targeted ads\";\n   }\n\n   \n   return \"We don’t have enough information to make a recommendation at this time.\" ;\n}\n--\n",
        "text": "6",
        "token_cnt": 485
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n\nif (reliability < .7) {\n  console.log(\"Trimming your toenails regularly can help prevent ingrown toenails and other problems.\") \n  console.log(\"\")\n  console.log(\"However, due to the unpredictable nature of \")\n  console.log(\"human behavior, we cannot guarantee this will always happen.\")\n  } else {\n    console.log(\"We do not currently recommend trimming your toenails as part of good foot hygiene\") \n    console.log(\"\")\n    console.log(\"This may change in future versions depending on new evidence from reliable sources.\")\n  }",
            "id": 1302
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (ERROR (type_identifier) (identifier) (identifier) (ERROR (decimal_integer_literal)) (scoped_type_identifier (type_identifier) (type_identifier)) (string_literal (string_fragment)) (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal))) (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (block (expression_statement (method_invocation object: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (ERROR (identifier)) name: (identifier) arguments: (argument_list (string_literal))) (ERROR (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\"))))\n**\n\n--\nscript\n\nif (reliability < .7) {\n  console.log(\"Trimming your toenails regularly can help prevent ingrown toenails and other problems.\") \n  console.log(\"\")\n  console.log(\"However, due to the unpredictable nature of \")\n  console.log(\"human behavior, we cannot guarantee this will always happen.\")\n  } else {\n    console.log(\"We do not currently recommend trimming your toenails as part of good foot hygiene\") \n    console.log(\"\")\n    console.log(\"This may change in future versions depending on new evidence from reliable sources.\")\n  }\n--\n",
        "text": "8",
        "token_cnt": 414
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public boolean checkFoodHygiene(String name, String type, int temperature, Date expiryDate) {\n    \n    if (type.equals(\"refrigerated\") && temperature > 5) {\n        return false;\n    }\n\n    \n    else if (type.equals(\"frozen\") && temperature < -18) {\n        return false;\n    }\n\n    \n    else if (expiryDate != null && new Date().after(new Date(expiryDate.getTime() + 7 * 24 * 60 * 60 * 1000))) {\n        return false;\n    }\n    \n    System.out.println(\"Item \" + name + \": Passed quality test\");\n    return true;\n}",
            "id": 1311
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (type_identifier) name: (identifier)) (formal_parameter type: (integral_type) name: (identifier)) (formal_parameter type: (type_identifier) name: (identifier))) body: (block (if_statement condition: (condition (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (return_statement (false))) alternative: (if_statement condition: (condition (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) right: (binary_expression left: (identifier) right: (unary_expression operand: (decimal_integer_literal))))) consequence: (block (return_statement (false))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (null_literal)) right: (method_invocation object: (object_creation_expression type: (type_identifier) arguments: (argument_list)) name: (identifier) arguments: (argument_list (object_creation_expression type: (type_identifier) arguments: (argument_list (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (binary_expression left: (binary_expression left: (binary_expression left: (binary_expression left: (decimal_integer_literal) right: (decimal_integer_literal)) right: (decimal_integer_literal)) right: (decimal_integer_literal)) right: (decimal_integer_literal))))))))) consequence: (block (return_statement (false)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment)))))) (return_statement (true)))))\n**\n\n--\npublic boolean checkFoodHygiene(String name, String type, int temperature, Date expiryDate) {\n    \n    if (type.equals(\"refrigerated\") && temperature > 5) {\n        return false;\n    }\n\n    \n    else if (type.equals(\"frozen\") && temperature < -18) {\n        return false;\n    }\n\n    \n    else if (expiryDate != null && new Date().after(new Date(expiryDate.getTime() + 7 * 24 * 60 * 60 * 1000))) {\n        return false;\n    }\n    \n    System.out.println(\"Item \" + name + \": Passed quality test\");\n    return true;\n}\n--\n",
        "text": "4",
        "token_cnt": 746
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\n\npublic class HandHygiene {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Have you washed your hands today?\");\n        String handWashingStatus = scan.next();\n        \n        \n        if (!(handWashingStatus.equalsIgnoreCase(\"yes\") || \n              handWashingStatus.equalsIgnoreCase(\"no\"))) \n        {\n            System.out.println(\"Invalid input! Please try again.\");\n            return;\n        }\n    \n        boolean didUserWashHands = \n            handWashingStatus.equalsIgnoreCase(\"yes\");\n    \n        System.out.println(\"Did you sneeze or cough today?\");\n        String sneezingCoughingStatus = scan.nextLine();\n    \n        \n        if (!sneezingCoughingStatus.equalsIgnoreCase(\"yes\")) \n        {\n            System.out.println(\"Invalid input! Please try again.\");\n            return;\n        }\n    \n        \n        if (!didUserWashHands && !sneezingCoughingStatus.equalsIgnoreCase(\"no\")){\n            System.out.println(\"It is recommended that you wash your hands!\");\n        } else if (didUserWashHands){\n            System.out.println(\"Great job! You can use either a dry or moist hand sanitizer now.\");\n        } \n    }   \n}",
            "id": 1315
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (unary_expression operand: (parenthesized_expression (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement))) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (return_statement))) (if_statement condition: (condition (binary_expression left: (unary_expression operand: (identifier)) right: (unary_expression operand: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (identifier)) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))))\n**\n\n--\nimport java.util.*;\n\npublic class HandHygiene {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n\n        System.out.println(\"Have you washed your hands today?\");\n        String handWashingStatus = scan.next();\n        \n        \n        if (!(handWashingStatus.equalsIgnoreCase(\"yes\") || \n              handWashingStatus.equalsIgnoreCase(\"no\"))) \n        {\n            System.out.println(\"Invalid input! Please try again.\");\n            return;\n        }\n    \n        boolean didUserWashHands = \n            handWashingStatus.equalsIgnoreCase(\"yes\");\n    \n        System.out.println(\"Did you sneeze or cough today?\");\n        String sneezingCoughingStatus = scan.nextLine();\n    \n        \n        if (!sneezingCoughingStatus.equalsIgnoreCase(\"yes\")) \n        {\n            System.out.println(\"Invalid input! Please try again.\");\n            return;\n        }\n    \n        \n        if (!didUserWashHands && !sneezingCoughingStatus.equalsIgnoreCase(\"no\")){\n            System.out.println(\"It is recommended that you wash your hands!\");\n        } else if (didUserWashHands){\n            System.out.println(\"Great job! You can use either a dry or moist hand sanitizer now.\");\n        } \n    }   \n}\n--\n",
        "text": "6",
        "token_cnt": 1192
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "import java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter the value of 'privacy' (1 - Public; 2 - Private): \");\n        int privacy = scan.nextInt();\n\n        \n        if (privacy == 1 || privacy == 2){\n            double temp = Math.random() * 50 + 32; \n            String humidityLevel;\n\n            /* Switch case statement to determine the appropriate humidity level \n             according to the random temperature generated */\n            switch((int)(Math.random()*4)) {\n                case 0:\n                    humidityLevel = \"Very Dry\"; \n                    break; \n                case 1:\n                    humidityLevel = \"Dry\"; \n                    break; \n                case 2:\n                    humidityLevel = \"Humid\"; \n                    break; \n                default:\n                    humidityLevel = \"Extremely Humid\"; \n            }\n\n            \n            if (privacy == 1) {\n                System.out.printf(\"In %s Temperature is %.2f°F and Humidity Level is %s\\n\",\n                        Arrays.asList(\"Public\",\"Private\")[privacy-1],temp,humidityLevel);\n            } else {\n                System.out.printf(\"%sTemperature is %.2f°F and Humidity Level is %s\\n\",\n                        Arrays.asList(\"Your personal \",\"\")[(int)(Math.random() * 2)],temp,humidityLevel);\n            }\n        } else {\n            System.out.print(\"Invalid Input! Please try again.\");\n        }\n\n    }\n}",
            "id": 1319
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (import_declaration (scoped_identifier scope: (identifier) name: (identifier)) (asterisk)) (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (block (local_variable_declaration type: (floating_point_type) declarator: (variable_declarator name: (identifier) value: (binary_expression left: (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (decimal_integer_literal)) right: (decimal_integer_literal)))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier))) (block_comment) (switch_expression condition: (parenthesized_expression (cast_expression type: (integral_type) value: (parenthesized_expression (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (decimal_integer_literal))))) body: (switch_block (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (break_statement)) (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (break_statement)) (switch_block_statement_group (switch_label (decimal_integer_literal)) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (break_statement)) (switch_block_statement_group (switch_label) (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment))))))) (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence)) (array_access array: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal (string_fragment)))) index: (binary_expression left: (identifier) right: (decimal_integer_literal))) (identifier) (identifier))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment) (escape_sequence)) (array_access array: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal))) index: (cast_expression type: (integral_type) value: (parenthesized_expression (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) right: (decimal_integer_literal))))) (identifier) (identifier))))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))))\n**\n\n--\nimport java.util.*;\npublic class Main {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        System.out.println(\"Enter the value of 'privacy' (1 - Public; 2 - Private): \");\n        int privacy = scan.nextInt();\n\n        \n        if (privacy == 1 || privacy == 2){\n            double temp = Math.random() * 50 + 32; \n            String humidityLevel;\n\n            /* Switch case statement to determine the appropriate humidity level \n             according to the random temperature generated */\n            switch((int)(Math.random()*4)) {\n                case 0:\n                    humidityLevel = \"Very Dry\"; \n                    break; \n                case 1:\n                    humidityLevel = \"Dry\"; \n                    break; \n                case 2:\n                    humidityLevel = \"Humid\"; \n                    break; \n                default:\n                    humidityLevel = \"Extremely Humid\"; \n            }\n\n            \n            if (privacy == 1) {\n                System.out.printf(\"In %s Temperature is %.2f°F and Humidity Level is %s\\n\",\n                        Arrays.asList(\"Public\",\"Private\")[privacy-1],temp,humidityLevel);\n            } else {\n                System.out.printf(\"%sTemperature is %.2f°F and Humidity Level is %s\\n\",\n                        Arrays.asList(\"Your personal \",\"\")[(int)(Math.random() * 2)],temp,humidityLevel);\n            }\n        } else {\n            System.out.print(\"Invalid Input! Please try again.\");\n        }\n\n    }\n}\n--\n",
        "text": "8",
        "token_cnt": 1480
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Example {\n    public static void main(String[] args) {\n        \n        String userInput = \"I am feeling unwell\";\n\n        \n        if (userInput.contains(\"fever\") && userInput.contains(\"cough\")) {\n            System.out.println(\"Please self isolate immediately\");\n        } else if (userInput.equals(\"\")) {\n            System.out.println(\"Invalid Input! Please try again.\");\n        } else {\n            System.out.println(\"Consult doctor as per normal routine \");\n        }\n\n    }\n}",
            "id": 1323
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal (string_fragment)))) (if_statement condition: (condition (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal)))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))))\n**\n\n--\npublic class Example {\n    public static void main(String[] args) {\n        \n        String userInput = \"I am feeling unwell\";\n\n        \n        if (userInput.contains(\"fever\") && userInput.contains(\"cough\")) {\n            System.out.println(\"Please self isolate immediately\");\n        } else if (userInput.equals(\"\")) {\n            System.out.println(\"Invalid Input! Please try again.\");\n        } else {\n            System.out.println(\"Consult doctor as per normal routine \");\n        }\n\n    }\n}\n--\n",
        "text": "4",
        "token_cnt": 544
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public String calculateExtremeToiletHygiene(boolean didUserWashHands) {\n    \n    String extremeToiletHygiene = \"\";\n\n    /* \n     * If user didn't wash his hands then set value of\n     * extremeToiletHygiene as \"Poor\" otherwise set it as \n     * \"Excellent\". */\n    if (didUserWashHands == false){\n        extremeToiletHygiene = \"Poor\";\n\n        /* \n         * In case of poor hygiene add additional details\n         * about how to improve it. */\n        extremeToiletHygiene += \"\\n\\nAdditional Details:\\n1. Wash your hands thoroughly with soap under running water for at least 20 seconds.\\n2. Use alcohol-based hand sanitizers when soap and water aren’t available.\";\n    } else{\n        extremeToiletHygiene = \"Excellent!\";\n    }\n    \n    return extremeToiletHygiene;\n}",
            "id": 1324
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (string_literal))) (block_comment) (if_statement condition: (condition (binary_expression left: (identifier) right: (false))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))) (block_comment) (expression_statement (assignment_expression left: (identifier) right: (string_literal (escape_sequence) (escape_sequence) (string_fragment) (escape_sequence) (string_fragment) (escape_sequence) (string_fragment))))) alternative: (block (expression_statement (assignment_expression left: (identifier) right: (string_literal (string_fragment)))))) (return_statement (identifier)))))\n**\n\n--\npublic String calculateExtremeToiletHygiene(boolean didUserWashHands) {\n    \n    String extremeToiletHygiene = \"\";\n\n    /* \n     * If user didn't wash his hands then set value of\n     * extremeToiletHygiene as \"Poor\" otherwise set it as \n     * \"Excellent\". */\n    if (didUserWashHands == false){\n        extremeToiletHygiene = \"Poor\";\n\n        /* \n         * In case of poor hygiene add additional details\n         * about how to improve it. */\n        extremeToiletHygiene += \"\\n\\nAdditional Details:\\n1. Wash your hands thoroughly with soap under running water for at least 20 seconds.\\n2. Use alcohol-based hand sanitizers when soap and water aren’t available.\";\n    } else{\n        extremeToiletHygiene = \"Excellent!\";\n    }\n    \n    return extremeToiletHygiene;\n}\n--\n",
        "text": "4",
        "token_cnt": 484
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static void main(String[] args) {\n    \n    Clothes shirt = new Clothes(\"shirt\", Size.SMALL);\n\n    \n    shirt.addStain(new Stain(\"blood\", \"fresh blood\", \"wash immediately\"));\n    shirt.addStain(new Stain(\"grease\", \"oil spill\", \"soak overnight\"));\n    shirt.addStain(new Stain(\"wine\", \"red wine spillage\", \"blot with white paper\")));\n\n    \n    boolean hasCleanableStains = false;\n    for (Stain s : shirt.getStains()) {\n        if (s.isRemovableBy(\"bleach\")) {\n            System.out.println(\"Bleaching required for \" + s.getName()); \n            hasCleanableStains = true; \n        } else if (s.isRemovableBy(\"water\") || s.isRemovableBy(\"dry cleaning\")) {\n            System.out.println(\"Washing with water or dry cleaning may help remove \" + s.getName()); \n            hasCleanableStains = true; \n        }\n    }\n    \n    \n    if (!hasCleanableStains) {\n        System.out.println(\"No suitable treatments available for these stains.\");\n    }\n}",
            "id": 1325
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) body: (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (object_creation_expression type: (type_identifier) arguments: (argument_list (string_literal (string_fragment)) (field_access object: (identifier) field: (identifier)))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (object_creation_expression type: (type_identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal (string_fragment)) (string_literal (string_fragment))))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (object_creation_expression type: (type_identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal (string_fragment)) (string_literal (string_fragment))))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (object_creation_expression type: (type_identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal (string_fragment)) (string_literal (string_fragment)))))) (ERROR)) (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (enhanced_for_statement type: (type_identifier) name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)) body: (block (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))) (expression_statement (assignment_expression left: (identifier) right: (true)))) alternative: (if_statement condition: (condition (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))))) (expression_statement (assignment_expression left: (identifier) right: (true)))))))) (if_statement condition: (condition (unary_expression operand: (identifier))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))))))))\n**\n\n--\npublic static void main(String[] args) {\n    \n    Clothes shirt = new Clothes(\"shirt\", Size.SMALL);\n\n    \n    shirt.addStain(new Stain(\"blood\", \"fresh blood\", \"wash immediately\"));\n    shirt.addStain(new Stain(\"grease\", \"oil spill\", \"soak overnight\"));\n    shirt.addStain(new Stain(\"wine\", \"red wine spillage\", \"blot with white paper\")));\n\n    \n    boolean hasCleanableStains = false;\n    for (Stain s : shirt.getStains()) {\n        if (s.isRemovableBy(\"bleach\")) {\n            System.out.println(\"Bleaching required for \" + s.getName()); \n            hasCleanableStains = true; \n        } else if (s.isRemovableBy(\"water\") || s.isRemovableBy(\"dry cleaning\")) {\n            System.out.println(\"Washing with water or dry cleaning may help remove \" + s.getName()); \n            hasCleanableStains = true; \n        }\n    }\n    \n    \n    if (!hasCleanableStains) {\n        System.out.println(\"No suitable treatments available for these stains.\");\n    }\n}\n--\n",
        "text": "31",
        "token_cnt": 1127
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script \nfunction calculateLowHygiene(disinfectionLevel) {\n  let score = 0;\n\n  \n  if (isNaN(disinfectionLevel)) \n    return \"Invalid input\";\n  \n  else if (disinfectionLevel < 50)\n    score += 1;\n    \n  else if (disinfectionLevel >= 75 && disinfectionLevel <= 94)\n    score += 2;\n    \n  else if (disinfectionLevel > 94)\n    score += 3;\n    \n  return `Low hygiene risk level: ${score}`;\n}",
            "id": 1327
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier)) (MISSING \";\")) (expression_statement (method_invocation name: (identifier) arguments: (argument_list (identifier))) (MISSING \";\")) (block (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (if_statement condition: (condition (method_invocation name: (identifier) arguments: (argument_list (identifier)))) consequence: (return_statement (string_literal (string_fragment))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) right: (decimal_integer_literal)) right: (binary_expression left: (identifier) right: (decimal_integer_literal)))) consequence: (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) right: (decimal_integer_literal))) consequence: (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))))))) (return_statement (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier)) (identifier) (MISSING \";\")) (block (expression_statement (identifier) (ERROR (UNEXPECTED '`')))) (MISSING \"}\")))\n**\n\n--\nscript \nfunction calculateLowHygiene(disinfectionLevel) {\n  let score = 0;\n\n  \n  if (isNaN(disinfectionLevel)) \n    return \"Invalid input\";\n  \n  else if (disinfectionLevel < 50)\n    score += 1;\n    \n  else if (disinfectionLevel >= 75 && disinfectionLevel <= 94)\n    score += 2;\n    \n  else if (disinfectionLevel > 94)\n    score += 3;\n    \n  return `Low hygiene risk level: ${score}`;\n}\n--\n",
        "text": "4",
        "token_cnt": 562
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n    const launderClothes = (trustRating) => {\n      let result;\n  \n      \n      if (trustRating === 'TRUSTED') {\n        result = 'Dry cleaned';\n      } else if (trustRating === 'FAIR' || trustRating === 'POOR') {\n        result = 'Washed in a washing machine';\n      } else {\n        return `Invalid input: ${trustRating}`;\n      }\n  \n      console.log(`Laundering clothes using method: ${result}`);\n      return result;\n    };\n    \n    \n    console.log(launderClothes('TRUSTED'));  \n    console.log(launderClothes('FAIR'));       \n    console.log(launderClothes('POOR'));       \n    \n    \n    try {\n      launderClothes('VERY_UNCLEAN');\n    } catch (error) {\n      console.error(error);  \n    }",
            "id": 1329
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (local_variable_declaration type: (type_identifier) (ERROR (identifier)) declarator: (variable_declarator name: (identifier)) (ERROR (inferred_parameters (identifier)) (ERROR) (type_identifier) (identifier))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (character_literal))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal)))) alternative: (if_statement condition: (condition (binary_expression left: (binary_expression left: (identifier) (ERROR) right: (character_literal)) right: (binary_expression left: (identifier) (ERROR) right: (character_literal)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (character_literal)))) alternative: (block (return_statement (ERROR (UNEXPECTED '`') (type_identifier) (identifier)) (identifier) (MISSING \";\")) (block (expression_statement (identifier) (ERROR (UNEXPECTED '`')))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (ERROR (UNEXPECTED '`') (type_identifier) (identifier) (type_identifier) (identifier)) (identifier) (ERROR (identifier) (UNEXPECTED '`'))))) (return_statement (identifier))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation name: (identifier) arguments: (argument_list (character_literal)))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation name: (identifier) arguments: (argument_list (character_literal)))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (method_invocation name: (identifier) arguments: (argument_list (character_literal)))))) (try_statement body: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list (character_literal))))) (catch_clause (catch_formal_parameter (catch_type (type_identifier)) name: (MISSING identifier)) body: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (identifier))))))))\n**\n\n--\nscript\n    const launderClothes = (trustRating) => {\n      let result;\n  \n      \n      if (trustRating === 'TRUSTED') {\n        result = 'Dry cleaned';\n      } else if (trustRating === 'FAIR' || trustRating === 'POOR') {\n        result = 'Washed in a washing machine';\n      } else {\n        return `Invalid input: ${trustRating}`;\n      }\n  \n      console.log(`Laundering clothes using method: ${result}`);\n      return result;\n    };\n    \n    \n    console.log(launderClothes('TRUSTED'));  \n    console.log(launderClothes('FAIR'));       \n    console.log(launderClothes('POOR'));       \n    \n    \n    try {\n      launderClothes('VERY_UNCLEAN');\n    } catch (error) {\n      console.error(error);  \n    }\n--\n",
        "text": "6",
        "token_cnt": 797
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public static boolean checkExtremeDentalHygiene(String flossing) {\n        \n        boolean extreme = false;\n\n        /* Use an if statement to determine whether the user has been instructed\n         * to floss after every meal */\n        if (flossing.equals(\"after every meal\")) {\n            System.out.println(\"User has been instructed \"\n                    + \"to floss after every meal.\");\n\n            /* If the user has not reported any issues regarding their teeth\n             * then set extreme to true */\n            if (!hasReportedIssues()) {\n                extreme = true;\n                System.out.println(\"No issues were reported by the user, \"\n                        + \"so we assume they follow the instructions.\");\n            } else {\n                System.out.println(\"There were some issues reported by the user,\"\n                        + \" so we cannot conclude that they follow the\"\n                        + \"instructions.\");\n            }\n        } else {\n            System.out.println(\"The user does not have specific instructions \"\n                    + \"regarding when to floss.\");\n        }\n\n        return extreme;\n    }\n\n    private static boolean hasReportedIssues() {\n        \n        return false;\n    }",
            "id": 1333
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (type_identifier) name: (identifier))) body: (block (local_variable_declaration type: (boolean_type) declarator: (variable_declarator name: (identifier) value: (false))) (block_comment) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (string_literal (string_fragment)))))) (block_comment) (if_statement condition: (condition (unary_expression operand: (method_invocation name: (identifier) arguments: (argument_list)))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (true))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (string_literal (string_fragment))))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (string_literal (string_fragment))) right: (string_literal (string_fragment))))))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (string_literal (string_fragment)))))))) (return_statement (identifier)))) (method_declaration (modifiers) type: (boolean_type) name: (identifier) parameters: (formal_parameters) body: (block (return_statement (false)))))\n**\n\n--\npublic static boolean checkExtremeDentalHygiene(String flossing) {\n        \n        boolean extreme = false;\n\n        /* Use an if statement to determine whether the user has been instructed\n         * to floss after every meal */\n        if (flossing.equals(\"after every meal\")) {\n            System.out.println(\"User has been instructed \"\n                    + \"to floss after every meal.\");\n\n            /* If the user has not reported any issues regarding their teeth\n             * then set extreme to true */\n            if (!hasReportedIssues()) {\n                extreme = true;\n                System.out.println(\"No issues were reported by the user, \"\n                        + \"so we assume they follow the instructions.\");\n            } else {\n                System.out.println(\"There were some issues reported by the user,\"\n                        + \" so we cannot conclude that they follow the\"\n                        + \"instructions.\");\n            }\n        } else {\n            System.out.println(\"The user does not have specific instructions \"\n                    + \"regarding when to floss.\");\n        }\n\n        return extreme;\n    }\n\n    private static boolean hasReportedIssues() {\n        \n        return false;\n    }\n--\n",
        "text": "6",
        "token_cnt": 821
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class PersonalElectronicCare {\n\n    public static void main(String[] args) throws IOException{\n        \n        System.out.println(\"What do you need assistance with today?\");\n        String task = scan.nextLine();\n\n        \n        if (task.equals(\"Checking water levels\")){\n            \n            System.out.println(\"Please enter the brand name of the device\");\n            String brandName = scan.next();\n\n            \n            if (brandName.equalsIgnoreCase(\"Samsung\") || \n                brandName.equalsIgnoreCase(\"Apple\")) {\n                \n                System.out.println(\"It appears \" + brandName \n                    + \" devices are not affected by this issue.\");\n            } else {\n                \n                System.out.println(\"We were unable to verify this model.\"\n                    + \"\\nContact the manufacturers technical support team\"\n                    + \"\\nas soon as possible.\\n\\nGoodbye!\");\n                return;\n            }\n        } else if (task.equals(\"Charging cable replacement\")){\n            \n            System.out.println(\"Before attempting any repairs,\"\n                + \"\\nsafely remove all battery packs and modules.\");\n            System.out.println(\"\\nContinue with these instructions:\"\n                + \"\\n1.) Use insulated tools whenever possible.\"\n                + \"\\n2.) Disconnect the charger first before unplugging the unit.\"\n                + \"\\n3.) Wait at least ten minutes after disconnecting power\"\n                + \"\\n4.) Do not use excessive force while opening components.\"\n                + \"\\n5.) Be especially gentle around delicate electronic parts such as screens.\"\n                + \"\\n6.) If something feels wrong, stop immediately and seek further advice.\");\n        } else {\n            \n            System.out.println(\"Invalid option please try again.\");\n        }\n    }\n}",
            "id": 1341
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (void_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (array_type element: (type_identifier) dimensions: (dimensions)) name: (identifier))) (throws (type_identifier)) body: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list)))) (if_statement condition: (condition (binary_expression left: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) right: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (identifier)) right: (string_literal (string_fragment))))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (string_literal (string_fragment)) right: (string_literal (escape_sequence) (string_fragment))) right: (string_literal (escape_sequence) (string_fragment) (escape_sequence) (escape_sequence) (string_fragment)))))) (return_statement)))) alternative: (if_statement condition: (condition (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) consequence: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (string_literal (string_fragment)) right: (string_literal (escape_sequence) (string_fragment)))))) (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (binary_expression left: (binary_expression left: (binary_expression left: (binary_expression left: (binary_expression left: (binary_expression left: (string_literal (escape_sequence) (string_fragment)) right: (string_literal (escape_sequence) (string_fragment))) right: (string_literal (escape_sequence) (string_fragment))) right: (string_literal (escape_sequence) (string_fragment))) right: (string_literal (escape_sequence) (string_fragment))) right: (string_literal (escape_sequence) (string_fragment))) right: (string_literal (escape_sequence) (string_fragment))))))) alternative: (block (expression_statement (method_invocation object: (field_access object: (identifier) field: (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))))\n**\n\n--\npublic class PersonalElectronicCare {\n\n    public static void main(String[] args) throws IOException{\n        \n        System.out.println(\"What do you need assistance with today?\");\n        String task = scan.nextLine();\n\n        \n        if (task.equals(\"Checking water levels\")){\n            \n            System.out.println(\"Please enter the brand name of the device\");\n            String brandName = scan.next();\n\n            \n            if (brandName.equalsIgnoreCase(\"Samsung\") || \n                brandName.equalsIgnoreCase(\"Apple\")) {\n                \n                System.out.println(\"It appears \" + brandName \n                    + \" devices are not affected by this issue.\");\n            } else {\n                \n                System.out.println(\"We were unable to verify this model.\"\n                    + \"\\nContact the manufacturers technical support team\"\n                    + \"\\nas soon as possible.\\n\\nGoodbye!\");\n                return;\n            }\n        } else if (task.equals(\"Charging cable replacement\")){\n            \n            System.out.println(\"Before attempting any repairs,\"\n                + \"\\nsafely remove all battery packs and modules.\");\n            System.out.println(\"\\nContinue with these instructions:\"\n                + \"\\n1.) Use insulated tools whenever possible.\"\n                + \"\\n2.) Disconnect the charger first before unplugging the unit.\"\n                + \"\\n3.) Wait at least ten minutes after disconnecting power\"\n                + \"\\n4.) Do not use excessive force while opening components.\"\n                + \"\\n5.) Be especially gentle around delicate electronic parts such as screens.\"\n                + \"\\n6.) If something feels wrong, stop immediately and seek further advice.\");\n        } else {\n            \n            System.out.println(\"Invalid option please try again.\");\n        }\n    }\n}\n--\n",
        "text": "6",
        "token_cnt": 1381
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "script\n\ndocument.write(\"Electronic devices require special care when being moved due to their delicate nature.\");\ndocument.write(\"<br><br>\");\ndocument.write(\"Low Handling Instructions:\");\ndocument.write(\"<ul>\");\ndocument.write(\"<li>Use packaging materials designed specifically for moving electronics.</li>\");\ndocument.write(\"<li>Wrap each device individually in bubble wrap before placing them inside boxes.</li>\");\ndocument.write(\"<li>Place heavier objects like books at the bottom of the box followed by lighter ones such as cables.</li>\");\ndocument.write(\"</ul>\");\n\n\nlet ethics = prompt(\"Please enter 'low' if your company follows low handling guidelines or 'high' if they follow high handling guidelines:\", \"Enter 'low' or 'high'\");\nif (ethics === \"low\") {\n  document.write(\"<br><br>High Handling Guidelines:<br><br>- Avoid transporting electronics in extreme temperatures.<br>- Do not drop or throw electronics around.<br>- Keep batteries disconnected during storage and transit<br>- Store electronics away from humidity and direct sunlight.\")\n} else if (ethics === \"high\"){\n  document.write(\"<br><br>High Handling Guidelines:\")\n  document.write(\"- Transport electronics in hard cases designed for shipping sensitive equipment.\")\n  document.write(\"<br>- Ensure proper packing material is used to prevent damage during shipment.\")\n  document.write(\"<br>- Provide clear labels indicating contents and fragility.\")\n  document.write(\"<br>- Consider using professional movers who are experienced in handling valuable assets.\")\n} else {\n  alert(\"Invalid Input! Please try again.\")\n}",
            "id": 1342
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (ERROR (type_identifier) (identifier) (ERROR (identifier))) (expression_statement (string_literal (string_fragment)) (ERROR)) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment))))) (local_variable_declaration type: (type_identifier) declarator: (variable_declarator name: (identifier) value: (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment)) (string_literal (string_fragment)))))) (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\"))) alternative: (if_statement condition: (condition (binary_expression left: (identifier) (ERROR) right: (string_literal (string_fragment)))) consequence: (block (expression_statement (method_invocation object: (method_invocation object: (method_invocation object: (method_invocation object: (method_invocation object: (identifier) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (ERROR (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (ERROR (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (ERROR (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (ERROR (identifier)) name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\"))) alternative: (block (expression_statement (method_invocation name: (identifier) arguments: (argument_list (string_literal (string_fragment)))) (MISSING \";\"))))))\n**\n\n--\nscript\n\ndocument.write(\"Electronic devices require special care when being moved due to their delicate nature.\");\ndocument.write(\"<br><br>\");\ndocument.write(\"Low Handling Instructions:\");\ndocument.write(\"<ul>\");\ndocument.write(\"<li>Use packaging materials designed specifically for moving electronics.</li>\");\ndocument.write(\"<li>Wrap each device individually in bubble wrap before placing them inside boxes.</li>\");\ndocument.write(\"<li>Place heavier objects like books at the bottom of the box followed by lighter ones such as cables.</li>\");\ndocument.write(\"</ul>\");\n\n\nlet ethics = prompt(\"Please enter 'low' if your company follows low handling guidelines or 'high' if they follow high handling guidelines:\", \"Enter 'low' or 'high'\");\nif (ethics === \"low\") {\n  document.write(\"<br><br>High Handling Guidelines:<br><br>- Avoid transporting electronics in extreme temperatures.<br>- Do not drop or throw electronics around.<br>- Keep batteries disconnected during storage and transit<br>- Store electronics away from humidity and direct sunlight.\")\n} else if (ethics === \"high\"){\n  document.write(\"<br><br>High Handling Guidelines:\")\n  document.write(\"- Transport electronics in hard cases designed for shipping sensitive equipment.\")\n  document.write(\"<br>- Ensure proper packing material is used to prevent damage during shipment.\")\n  document.write(\"<br>- Provide clear labels indicating contents and fragility.\")\n  document.write(\"<br>- Consider using professional movers who are experienced in handling valuable assets.\")\n} else {\n  alert(\"Invalid Input! Please try again.\")\n}\n--\n",
        "text": "6",
        "token_cnt": 1041
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public int calculateLowOralHealthHabits(boolean smoker, boolean alchoholDrinker) {\n    \n    int score = 0;\n\n    /* \n     * If statement checks if either one of the two parameters 'smoker' or 'alcholDrinker'\n     * is true then add 1 point to the total score \n     */\n    if (smoker || alchoholDrinker){\n        score += 1;\n    }\n    \n    return score;\n}",
            "id": 1344
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (method_declaration (modifiers) type: (integral_type) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier)) (formal_parameter type: (boolean_type) name: (identifier))) body: (block (local_variable_declaration type: (integral_type) declarator: (variable_declarator name: (identifier) value: (decimal_integer_literal))) (block_comment) (if_statement condition: (condition (binary_expression left: (identifier) right: (identifier))) consequence: (block (expression_statement (assignment_expression left: (identifier) right: (decimal_integer_literal))))) (return_statement (identifier)))))\n**\n\n--\npublic int calculateLowOralHealthHabits(boolean smoker, boolean alchoholDrinker) {\n    \n    int score = 0;\n\n    /* \n     * If statement checks if either one of the two parameters 'smoker' or 'alcholDrinker'\n     * is true then add 1 point to the total score \n     */\n    if (smoker || alchoholDrinker){\n        score += 1;\n    }\n    \n    return score;\n}\n--\n",
        "text": "6\n\nОбъяснение:\n\nЦикломатическая сложность — это мера сложности программного кода, которая",
        "token_cnt": 317
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class Dentist {\n    public String treatDisease(boolean hasBadBreath) {\n        \n        if (hasBadBreath){\n            return \"CleanTongue\";\n        } else{\n            return \"Flosseteeth\";\n        } \n    }\n}",
            "id": 1352
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier))) body: (block (if_statement condition: (condition (identifier)) consequence: (block (return_statement (string_literal (string_fragment)))) alternative: (block (return_statement (string_literal (string_fragment))))))))))\n**\n\n--\npublic class Dentist {\n    public String treatDisease(boolean hasBadBreath) {\n        \n        if (hasBadBreath){\n            return \"CleanTongue\";\n        } else{\n            return \"Flosseteeth\";\n        } \n    }\n}\n--\n",
        "text": "5\n\nОбъяснение:\nВ приведённом фрагменте кода содержится один метод `treatDisease",
        "token_cnt": 217
    },
    {
        "code_snippet": {
            "language": "java",
            "text": "public class HandWashDecisionMaker {\n\n    public String makeHandwashDecision(boolean transparency) {\n        \n        if (transparency) {\n            return \"Always wash hands before handling eyes\";\n        }\n\n        \n        switch (transparency) {\n            \n            \n            case true:\n                return \"Consider washing hands before handling eyes if they have been recently exposed to contaminants.\";\n\n            \n            case false:\n                return \"Do not wash hands unless they have become visibly dirty prior to contact with eyes.\";\n                \n            \n            default: \n                throw new IllegalArgumentException(\"Invalid argument provided to HandWashDecisionMaker.\");\n        }\n    }\n}",
            "id": 1356
        },
        "system_msg": "\nТы вычисляешь цикломатическую сложность для фрагмента Java кода.\nПосле первой пары символов \"--\" будет начинаться код, после второй пары \"--\" код будет заканчиваться.\nТакже будет передано представление AST дерева для кода.\nПосле первой пары символов \"**\" будет начинаться представление AST дерева, после второй пары \"**\" представление AST дерева будет заканчиваться.\n        \nВыводи только одно число цикломатической сложности без комментариев и без объяснений.\n",
        "user_msg": "\nИнформация из представления AST может помочь в вычислении цикломатической сложности.\nДерево AST представленно в формате S-выражения.\n\n**\n(program (class_declaration (modifiers) name: (identifier) body: (class_body (method_declaration (modifiers) type: (type_identifier) name: (identifier) parameters: (formal_parameters (formal_parameter type: (boolean_type) name: (identifier))) body: (block (if_statement condition: (condition (identifier)) consequence: (block (return_statement (string_literal (string_fragment))))) (switch_expression condition: (parenthesized_expression (identifier)) body: (switch_block (switch_block_statement_group (switch_label (true)) (return_statement (string_literal (string_fragment)))) (switch_block_statement_group (switch_label (false)) (return_statement (string_literal (string_fragment)))) (switch_block_statement_group (switch_label) (throw_statement (object_creation_expression type: (type_identifier) arguments: (argument_list (string_literal (string_fragment)))))))))))))\n**\n\n--\npublic class HandWashDecisionMaker {\n\n    public String makeHandwashDecision(boolean transparency) {\n        \n        if (transparency) {\n            return \"Always wash hands before handling eyes\";\n        }\n\n        \n        switch (transparency) {\n            \n            \n            case true:\n                return \"Consider washing hands before handling eyes if they have been recently exposed to contaminants.\";\n\n            \n            case false:\n                return \"Do not wash hands unless they have become visibly dirty prior to contact with eyes.\";\n                \n            \n            default: \n                throw new IllegalArgumentException(\"Invalid argument provided to HandWashDecisionMaker.\");\n        }\n    }\n}\n--\n",
        "text": "4\n\nОбъяснение: цикломатическая сложность — это метрика, которая оценивает количество линейно независимых",
        "token_cnt": 407
    }
]