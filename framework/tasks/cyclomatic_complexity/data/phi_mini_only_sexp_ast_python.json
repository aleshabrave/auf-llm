[
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_high_sneeze_cough_etiquette(isolation_period):\n    \n    if (isolation_period >0) & (today() - last_symptomatic_day() < isolation_period):\n        return \"Stay home\"\n    \n    elif exposure_risk() >= risk_threshold():\n        return \"Wear mask\"\n        \n    else: \n        return \"Go about usual activities\"\n    \n        \n\ndef today():\n    return datetime.now().date()\n    \n    \n\ndef first_significant_symptom_onset_date():    \n    return pd.to_datetime('2021-10-3').date()\n    \n\n\ndef days_between(d1, d2):\n    return abs((d1 - d2).days)\n\n    \n\ndef isolation_period():\n    return timedelta(days=7)\n    \n    \n\ndef exposure_risk():\n    \n    close_contact = True\n\n    \n    avg_hhsize = np.random.normal(4., .5, 1)[0]\n\n    \n    exp_prob = 1 - math.exp(-.06 * days_between(first_significant_symptom_onset_date(), today()) + .89)\n\n    \n    if not close_contact:\n        exp_prob *= .6\n\n    \n    return exp_prob * avg_hhsize\n    \n    \n\ndef risk_threshold():\n    return .05\n    \n    \n\nif __name__ == '__main__':\n    print(\"High Sneeze Cough Etiquette:\", \n          determine_high_sneeze_cough_etiquette(isolation_period()), \"\\n\")",
            "id": 0
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (integer))) right: (parenthesized_expression (comparison_operator (binary_operator left: (call function: (identifier) arguments: (argument_list)) right: (call function: (identifier) arguments: (argument_list))) (identifier)))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (call function: (identifier) arguments: (argument_list)) (call function: (identifier) arguments: (argument_list))) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (return_statement (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list))))) (function_definition name: (identifier) parameters: (parameters) body: (block (return_statement (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (return_statement (call function: (identifier) arguments: (argument_list (attribute object: (parenthesized_expression (binary_operator left: (identifier) right: (identifier))) attribute: (identifier))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (return_statement (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (integer))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (true))) (expression_statement (assignment left: (identifier) right: (subscript value: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (float) (float) (integer))) subscript: (integer)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (integer) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (binary_operator left: (unary_operator argument: (float)) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list)) (call function: (identifier) arguments: (argument_list))))) right: (float))))))) (if_statement condition: (not_operator argument: (identifier)) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (float))))) (return_statement (binary_operator left: (identifier) right: (identifier))))) (function_definition name: (identifier) parameters: (parameters) body: (block (return_statement (float)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list)))) (string (string_start) (string_content (escape_sequence)) (string_end))))))))\n**\n",
        "text": " 10",
        "token_cnt": 927
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def clean_ear():\n    \n    condition = input(\"Does the patient experience pain when moving their jaw? (y/n): \")\n    \n    if condition == \"y\":\n        print(\"The patient may need more extensive cleaning of their outer ear.\")\n        \n    elif condition == \"n\":\n        print(\"Regular cleaning of the outer ear may suffice\")\n\n    else: \n        print(\"Invalid Input! Please try again.\")\n\n\ndef main():\n    while True:    \n        choice = input(\"\"\"Choose an option:\n        1 - Perform regular cleaning \n        2 - Perform extreme cleaning\n        3 - Quit\n        Your selection: \"\"\")\n    \n        if choice == '1':\n            clean_ear()\n        \n        elif choice == '2':\n            print(\"Extreme cleaning procedure initiated!\")\n\n        elif choice == '3': \n            print(\"Thank you for using our app!\")\n            break \n\n        else: \n            print(\"Invalid Selection! Try Again.\")\n\n\n\nif __name__ == '__main__':\n    main()",
            "id": 1
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (while_statement condition: (true) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list)))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (break_statement))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 6",
        "token_cnt": 644
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "HANDWASH_DURATION = 20 \n\ndef performHandwash(duration):\n    \"\"\"\n    Simulates performing an effective hand wash based on inputted time spent \n    scrubbing hands. Returns True if sufficient time was spent, False otherwise.\n\n    Args:\n        duration (int): Time spent scrubbing hands (in seconds).\n    \n    Returns:\n        bool: Whether enough time was spent during simulation.\n    \"\"\"    \n    \n    if not isinstance(duration, int):\n        raise ValueError(\"Invalid input type provided. Expected 'int', received '{}'\".format(type(duration)))\n    elif duration < HANDWASH_DURATION:\n        print(\"WARNING: Insufficient time ({}) spent scrubbing hands.\".format(duration))\n        return False\n\n    \n    simulatedTimeSpent = 0\n    while simulatedTimeSpent < duration:\n        print(\"---Simulated hand wash step---\")\n\n        \n        \n        \n        simulatedTimeSpent += 1\n    \n    \n    return simulatedTimeSpent >= HANDWASH_DURATION\n\n\n\ndryRun = True \ntestDurations = [5, 8, 13] \nfor t in testDurations:\n    result = performHandwash(t)\n    if dryRun:\n        print(\"Dry Run Result:\",result)\n    else:    \n        print(\"{} second{} passed? {}\".format(t, \"\" if t == 1 else \"s\", result))\n\nprint(\"\\n\\nReal Usage Example:\")\nrealDuration = 17 \nfinalResult = performHandwash(realDuration)\nprint(\"Did you spend {}+ seconds scrubbing your hands? {}\".format(HANDWASH_DURATION, finalResult))",
            "id": 4
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (integer))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))))) (return_statement (false))))) (expression_statement (assignment left: (identifier) right: (integer))) (while_statement condition: (comparison_operator (identifier) (identifier)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (augmented_assignment left: (identifier) right: (integer))))) (return_statement (comparison_operator (identifier) (identifier))))) (expression_statement (assignment left: (identifier) right: (true))) (expression_statement (assignment left: (identifier) right: (list (integer) (integer) (integer)))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (identifier) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier) (conditional_expression (string (string_start) (string_end)) (comparison_operator (identifier) (integer)) (string (string_start) (string_content) (string_end))) (identifier))))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))))\n**\n",
        "text": " 5",
        "token_cnt": 785
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "sem1 = float(input(\"Enter marks scored in Semister I : \"))\nsem2 = float(input(\"Enter marks scored in Semister II : \"))\nsem3 = float(input(\"Enter marks scored in Semister III : \"))\nsem4 = float(input(\"Enter marks scored in Semister IV : \"))\n\n \ndef avg (marks):\n    return sum(marks) / len(marks)\n \n \nhighest_sem = max([avg([sem1, sem2]), avg([sem3, sem4])])\n \nif highest_sem == avg([sem1, sem2]):\n    print(\"The person has passed with\", highest_sem , \"in their Highest Semester\")\n    \nelif highest_sem == avg([sem3, sem4]):\n    print(\"The person has passed with\", highest_sem ,\"in their Second Highest Semseter \")\n     \n else: \n    print(\"Sorry could not determine result ! Try again.\")",
            "id": 7
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (return_statement (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (call function: (identifier) arguments: (argument_list (identifier))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list (call function: (identifier) arguments: (argument_list (list (identifier) (identifier)))) (call function: (identifier) arguments: (argument_list (list (identifier) (identifier))))))))) (if_statement condition: (comparison_operator (identifier) (call function: (identifier) arguments: (argument_list (list (identifier) (identifier))))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (call function: (identifier) arguments: (argument_list (list (identifier) (identifier))))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 620
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def extreme_toilet_hygiene(safety):\n    \"\"\"Transforms Extreme Toilet Hygiene: Proper Toilet Cleaning for \n    Decision Making for Experts\n\n    Args:\n        safety (int): A value between 0 and 1 indicating the level\n            of risk associated with not cleaning the toilet properly\n    \n    Returns:\n        str: The recommended action based on the given risk level\n\n    Raises:\n        ValueError: If `risk` is outside the allowed range [0, 1]\n        \n    \"\"\"\n    \n    if isinstance(safety, int) and 0 <= safety <= 1:\n        pass\n    else:\n        raise ValueError(\"Invalid input 'safety', must be an integer \"\n                         \"between 0 and 1\")\n\n    \n    if safety == 0:\n        recommendation = (\"Do nothing! This situation is extremely dangerous\"\n                        \", do not enter the room without proper protective gear.\")\n    elif safety >= .75:\n        recommendation = (\"Use normal disinfectant spray and wipe down all surfaces.\"\n                        \" Wear gloves if available but no full body protection required.\")\n    elif safety >= .25:\n        recommendation = (\"Wear gloves and use stronger disinfectant spray than usual,\"\n                        \" focus on high touch areas like handles and flush buttons.\")\n    else:\n        recommendation = (\"This case is so rare we don't even know how to proceed!\"\n                        \" Please contact technical support for assistance.\")\n\n    return recommendation",
            "id": 8
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) right: (comparison_operator (integer) (identifier) (integer))) consequence: (block (pass_statement)) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (parenthesized_expression (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (float)) consequence: (block (expression_statement (assignment left: (identifier) right: (parenthesized_expression (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (float)) consequence: (block (expression_statement (assignment left: (identifier) right: (parenthesized_expression (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (parenthesized_expression (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))))))) (return_statement (identifier)))))\n**\n",
        "text": " 6",
        "token_cnt": 515
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def dry_nail():\n    print(\"Drying hands\")\n    \ndef lotion(name):\n    print(f\"Applying {name} hand cream \")\n    \n\ndef massage(area):\n    print(f\"Massaging {area}\")\n\n\ndef trim(side):\n    print(f\"Trimming {side} of finger nails\")\n    \n    \n\nif __name__ == '__main__':\n    \n    \n    choice = input(\"Enter option (1 -5):\\n\\t1. Lotion \\n\\t2. Massage\\n\\t3. Trim\\n\\t4. Both\\n\\t5. Exit\\n\")\n\n    \n    while True:\n        try:\n            val = int(choice)\n            break\n        except ValueError:\n            print(\"Invalid Input! Please enter a number between 1 and 5:\")\n            choice = input()\n            \n    \n    if val == 1: \n        name = input(\"Please Enter Name Of The Hand Cream:\\n\")\n        lotion(name)\n        \n    elif val == 2:    \n        area = input(\"please enter Area To Be Massaged:\\n\")\n        massage(area)\n        \n    elif val == 3:    \n        side = input(\"please enter Side For Trimming Finger Nails:\\n\")\n        trim(side)\n        \n        \n    elif val == 4:    \n        name = input(\"Please Enter Name Of The Hand Cream:\\n\")\n        area = input(\"please enter Area To Be Massaged:\\n\")\n        side = input(\"please enter Side For Trimming Finger Nails:\\n\")\n        \n        \n        lotion(name)\n        massage(area)\n        trim(side)\n        \n    elif val == 5:    \n        exit()",
            "id": 9
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_end))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence)) (string_end)))))) (while_statement condition: (true) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (break_statement)) (except_clause (identifier) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list))))))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 1086
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_schedule(expert):\n    \"\"\"Updates schedule based on given engineering expertise.\"\"\"\n\n    \n    print(\"Dry Run:\")\n    \n    \n    if expert == \"beginner\":\n        new_schedules = slow_algorithm()  \n    elif expert == \"intermediate\":\n        new_schedules = medium_algorithm()  \n    else:\n        new_schedules = fast_algorithm()  \n        \n    \n    print(\"New schedules:\", new_schedules)\n    \n\ndef slow_algorithm():\n    return [\"Bus Schedule A\", \"Bus Schedule B\"]\n\ndef medium_algorithm():\n    return [\"Subway Schedule C\", \"Train Schedule D\"]\n\ndef fast_algorithm():\n    return [\"Airplane Schedule E\", \"Ferry Schedule F\"]\n\nif __name__ == \"__main__\":\n    update_schedule(\"beginner\")   \n    update_schedule(\"intermediate\") \n    update_schedule(\"expert\")",
            "id": 10
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))))) (function_definition name: (identifier) parameters: (parameters) body: (block (return_statement (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (function_definition name: (identifier) parameters: (parameters) body: (block (return_statement (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (function_definition name: (identifier) parameters: (parameters) body: (block (return_statement (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 5",
        "token_cnt": 612
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random\nfrom cryptography.fernet import Fernet\n\n\ndef create_key():\n    \n    key = Fernet.generate_key()\n\n    return key\n\n\ndef encrypt(message, key):\n    cipher_suite = Fernet(key)\n    encrypted_text = cipher_suite.encrypt(message.encode())\n    \n    return encrypted_text\n\n\ndef decrypt(encrypted_text, key):\n    cipher_suite = Fernet(key)\n    decrypted_text = cipher_suite.decrypt(encrypted_text).decode()\n    \n    return decrypted_text\n\n\nif __name__ == '__main__':\n    message = input(\"Enter message:\")\n    password = input(\"Enter Password:\")\n\n    key = create_key()\n\n    enc_msg = encrypt(message, key)\n    print(\"Encrypted Message:\",enc_msg)\n\n    dec_msg = decrypt(enc_msg, key)\n    print(\"Decrypted Message:\",dec_msg)",
            "id": 12
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))) attribute: (identifier)) arguments: (argument_list)))) (return_statement (identifier)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))))))\n**\n",
        "text": " 6",
        "token_cnt": 654
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform(df):\n    \n    print(\"Dry Run\")\n    \n    \n    df[\"Privacy\"] = df[\"Privacy\"].fillna(\"Public\")\n\n    \n    df.loc[df['Privacy'] == 'Private', 'Privacy'] = 'Confidential'\n\n    return df",
            "id": 13
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end))) subscript: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end)))) (return_statement (identifier)))))\n**\n",
        "text": " 6",
        "token_cnt": 295
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_low_cloth(trust):\n    \n    if (trust >=90) :\n        return \"Cloths of this brand is trusted by all.\"\n    \n    elif ((85<=trust<90)): \n        \n        if detect_odor() == True:\n            wash_cloth() \n            return \"Odour removed from cloth\"\n        \n        else:\n            return \"No need to Wash as no Odour detected\"\n        \n    else:    \n        \n        wash_cloth()\n        return \"Mildrew Removed From The Cloth\"\n        \n    \n\ndef detect_odor():\n    pass \n    \n\ndef wash_cloth():\n    pass",
            "id": 14
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (integer))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (parenthesized_expression (parenthesized_expression (comparison_operator (integer) (identifier) (integer)))) consequence: (block (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list)) (true)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))) (return_statement (string (string_start) (string_content) (string_end)))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list))) (return_statement (string (string_start) (string_content) (string_end)))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (pass_statement))) (function_definition name: (identifier) parameters: (parameters) body: (block (pass_statement))))\n**\n",
        "text": " 10",
        "token_cnt": 318
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def extreme_handling(item):\n    \"\"\" \n    This function takes one argument which represents the type of item being handled (e.g., \"phone\", \"tablet\", etc.)\n    \n    The function then determines how to properly care for the given electronic device according to its material composition and level of sensitivity to heat, water, and other elements.\n\n    Based on this determination, the function returns specific instructions on how to clean, dry, store, and transport the device safely. \n\n    If no applicable guidelines exist, the function will return a message indicating so.\n\n    Parameters:\n        - item (str)    ->   The name of the electronic device being cared for (e.g., \"phone\", \"laptop\").\n        \n    Returns:    \n        A string containing detailed cleaning, storage, and handling instructions tailored specifically to the specified device.\"\"\"\n\n    \n    materials = {\n        'glass': {'level': 3, 'dry': True}, \n        'plastic':{'level':2, 'dry':False},\n        'silicon':{'level':1,'dry':True}\n    }\n\n    \n    try:\n        material = materials[item['material']]\n    except KeyError as e:\n        return f\"No recommended guidelines available for caring for {item['name']} made from {item['material']}. Please consult manufacturer's recommendations.\"\n\n\n    \n    precautions = [\"Do not immerse \",\n                  \"Avoid exposing to sources of excessive heat such as \", \n                  \"Keep away from liquids\"]\n\n    \n    if material['dry']:\n        precautions += [f\"{item['name']} is safe to operate while still damp.\",\n                        \"To speed up the drying process, use a hair dryer set on low heat at a distance of approximately 18 inches.\"]\n    else:\n        precautions+=[\"Allow any moisture to fully evaporate before turning on or charging\",\"Do not submerge in liquid unless expressly stated by the manufacturer as being waterproof or water resistant.\"]\n\n    \n    instruciton= \"\\n\".join([f\"{p} {item['name']}.\"for p in precautions])\n\n    \n    return instruciton\n\n\n\nprint(extreme_handling({\"name\": \"iPhone XR\", \"material\":\"Glass\"}))",
            "id": 15
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (true)))) (pair key: (string (string_start) (string_content) (string_end)) value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (false)))) (pair key: (string (string_start) (string_content) (string_end)) value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (true))))))) (try_statement body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (return_statement (string (string_start) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (if_statement condition: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (list (string (string_start) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (augmented_assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (string (string_start) (string_content (escape_sequence)) (string_end)) attribute: (identifier)) arguments: (argument_list (list_comprehension body: (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content) (string_end)) (for_in_clause left: (identifier) right: (identifier))))))) (return_statement (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 1014
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom sklearn import preprocessing\n\n\ndef transform_health_check(df):\n    \n    cols = ['cholesterol', 'gluc']\n    \n    \n    df[cols] = df[cols].replace('?', np.nan)\n\n    \n    df[cols] = df[cols].astype(float)\n\n    \n    med_imputer = SimpleImputer(strategy='median')\n    df[cols] = med_imputer.fit_transform(df[cols])\n\n    \n    le = LabelEncoder()\n    df['sex'] = le.fit_transform(df['sex'])\n    X = df[['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach', \n            'exang', 'oldpeak', 'slope', 'ca', 'thal']]\n\n    y = df['target']\n\n    \n    scaler = StandardScaler()\n    X_scaled = scaler.fit_transform(X)\n\n    \n    logreg = LogisticRegression()\n    logreg.fit(X_scaled, y)\n\n    \n    probas = logreg.predict_proba(X_scaled)[:,1]\n\n    \n    threshold = 0.5\n    predicted_labels = [1 if p > threshold else 0 for p in probas]\n\n    \n    acc = accuracy_score(y, predicted_labels)\n\n    \n    print(\"Accuracy:\", acc)\n\n    \n    return df\n\n\n\n\ndf = pd.read_csv('./data.csv')\n\n\ntransformed_df = transform_health_check(df)\n\n\ntransformed_df.to_csv('./transformed_data.csv', index=False)",
            "id": 16
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (call function: (attribute object: (subscript value: (identifier) subscript: (identifier)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier)))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (call function: (attribute object: (subscript value: (identifier) subscript: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (expression_statement (assignment left: (identifier) right: (subscript value: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))) subscript: (slice) subscript: (integer)))) (expression_statement (assignment left: (identifier) right: (float))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (conditional_expression (integer) (comparison_operator (identifier) (identifier)) (integer)) (for_in_clause left: (identifier) right: (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (return_statement (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (false))))))\n**\n",
        "text": " 10",
        "token_cnt": 1298
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import numpy as np \nfrom scipy import optimize \nimport pandas as pd \n  \n\ndef obj_func(x): \n    y = (1 - x[0])**2 + 100 * (x[1] - x[0]**2)**2 \n    return y \n  \n\ncons = ({'type': 'ineq', \n         'fun': lambda x: x[0] - 0.5}, \n        {'type': 'eq', \n         'fun': lambda x: x[1]}) \n  \n\nres = optimize.minimize(obj_func, [0.375, 0.6], method='SLSQP', constraints=cons) \n  \n\nprint(\"Optimal usage of alcohol based gel:\", res.x)",
            "id": 17
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (parenthesized_expression (binary_operator left: (integer) right: (subscript value: (identifier) subscript: (integer)))) right: (integer)) right: (binary_operator left: (integer) right: (binary_operator left: (parenthesized_expression (binary_operator left: (subscript value: (identifier) subscript: (integer)) right: (binary_operator left: (subscript value: (identifier) subscript: (integer)) right: (integer)))) right: (integer)))))) (return_statement (identifier)))) (expression_statement (assignment left: (identifier) right: (tuple (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (lambda parameters: (lambda_parameters (identifier)) body: (binary_operator left: (subscript value: (identifier) subscript: (integer)) right: (float))))) (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (lambda parameters: (lambda_parameters (identifier)) body: (subscript value: (identifier) subscript: (integer)))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (list (float) (float)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (identifier)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))))))\n**\n",
        "text": " 6",
        "token_cnt": 607
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_dry_skin(user_input): \n    if \"Dry\" in user_input: \n        return True\n    else:\n        return False\n\n \ndef get_reliability(user_input): \n    if check_dry_skin(user_input) == True: \n       print(\"Reliable\")\n       return 100\n   elif check_dry_skin(user_input) == False: \n      print(\"Unreliable\")\n      return 50 \n   else: \n     raise ValueError('Invalid Input') \n\n \nif __name__ == '__main__': \n    user_input = input(\"Enter your symptoms (e.g., Itchy, Cracked Heels, etc.) \")\n    try: \n        reliability_score = get_reliability(user_input)\n        print(\"Your reliability score:\", reliability_score)\n\n    except ValueError as e: \n        print(\"Error:\", str(e))",
            "id": 18
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) consequence: (block (return_statement (true))) alternative: (else_clause body: (block (return_statement (false))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (true)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (integer)))))) (ERROR (identifier) (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (false))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (integer)) (ERROR) (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (ERROR (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (ERROR (ERROR (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (identifier))))))))) (block)))\n**\n",
        "text": " 6",
        "token_cnt": 524
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def high_routine():\n    print(\"High Routine\")\n    print(\"* Shampoo hair thoroughly\")\n    print(\"* Exfoliate skin gently\")\n    print(\"* Moisturize face and body\")\n\ndef medium_routine():\n    print(\"Medium Routine\")\n    print(\"* Wash hair regularly\")\n    print(\"* Scrub skin lightly\")\n    print(\"* Apply moisturizer as needed\")\n    \ndef low_routine():\n    print(\"Low Routine\")\n    print(\"* Rinse hair daily\")\n    print(\"* Gentle cleanser for face\")\n    print(\"* Light lotion when dry\")\n\n\n\nprint(\"Welcome to your personalized bathing routine!\")\nwhile True: \n    try:\n        trust = float(input(\"\\nPlease enter your trust level from 0 to 10 : \"))    \n        break    \n    except ValueError:    \n        print(\"Invalid Input! Please Try Again.\")   \n\nif trust >= 8: \n    high_routine()   \nelif trust >4: \n    medium_routine()  \nelse: \n    low_routine()",
            "id": 20
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (while_statement condition: (true) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))))) (break_statement)) (except_clause (identifier) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list)))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list)))))))\n**\n",
        "text": " 10",
        "token_cnt": 765
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random\nfrom faker import Faker\n\n\ndef update_status(reliability):\n    \"\"\"Updates user's health status\"\"\"\n\n    \n    print(\"Updating user's health status...\")\n    \n    \n    fake = Faker()\n    symptoms = [\"cough\", \"fever\"]\n    severity = [random.randint(1,3) for _ in range(2)]\n    diagnosis = {symptom:severity[i] for i, symptom in enumerate(symptoms)}\n    \n    \n    if reliability >= 4:\n        recovery_plan = \"self-isolate\"\n    elif reliability == 3:\n        recovery_plan = f\"{fake.name()} advised self isolation.\"\n    else:\n        recovery_plan = \"consult doctor\"\n        \n    return recovery_plan, diagnosis\n    \n    \nif __name__ == \"__main__\":    \n    \n    reliability = int(input(\"Enter your reliability score (0 - 5): \"))    \n    \n    \n    recovery_plan, diagnoses = update_status(reliability)\n    \n    \n    print(f\"\\nYour recovery plan is: {recovery_plan}.\")\n    print(f\"Diagnosis: \\n{diagnoses}\")",
            "id": 21
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer))) (for_in_clause left: (identifier) right: (call function: (identifier) arguments: (argument_list (integer))))))) (expression_statement (assignment left: (identifier) right: (dictionary_comprehension body: (pair key: (identifier) value: (subscript value: (identifier) subscript: (identifier))) (for_in_clause left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier))))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (interpolation expression: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))))) (return_statement (expression_list (identifier) (identifier))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_end))))))))\n**\n",
        "text": " 10",
        "token_cnt": 801
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_extreme_clothing_cleanliness(bias):\n    \"\"\"\n    This function updates the cleanliness score of clothes based \n    on the given bias value\n    \n    Parameters:\n        bias (float): The amount of dirtiness added or removed from \n                    the original cleanliness score\n        \n    Returns:\n        float: The updated cleanliness score after applying the \n            specified bias\n            \n    Raises:\n        ValueError: If the input 'bias' is not a number\n    \"\"\"    \n    \n    try:    \n        bias = float(bias)\n    except ValueError as err:\n        raise ValueError(\"Invalid input type for argument 'bias'. \"\n                         f\"Expected 'float', got '{type(bias)}'\")    \n\n    \n    if bias > 0:    \n        new_score = extreme_clothing['Cleanliness Score'] + bias    \n    elif bias < 0:    \n        new_score = max(0, extreme_clothing['Cleanliness Score'] + bias)    \n    else:    \n        return extreme_clothing['Cleanliness Score']  \n        \n     \n    extreme_clothing.at[index, 'Cleanliness Score'] = new_score   \n    \n    return new_score",
            "id": 23
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier)))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (raise_statement (call function: (identifier) arguments: (argument_list (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (interpolation expression: (call function: (identifier) arguments: (argument_list (identifier)))) (string_content) (string_end))))))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (integer) (binary_operator left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier)))))))) alternative: (else_clause body: (block (return_statement (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (return_statement (identifier)))))\n**\n",
        "text": " 10",
        "token_cnt": 480
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_dental(expert):\n    \"\"\"This function updates the status of \n    teeth brushing according to given expertise.\"\"\"\n\n    \n    if (expert == \"Novice\"):\n        print(\"Congratulations! Your progress has been recorded.\")\n        return\n    \n    \n    elif (expert == \"Intermediate\"):\n        print(\"Great job! Keep up the good work!\")\n        return\n    \n    \n    else:\n        print(\"Wow! That was impressive. Keep it up!\")\n        return\n\n\n\nupdate_dental(\"Advanced\")",
            "id": 27
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement)) alternative: (elif_clause condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))\n**\n",
        "text": " 10",
        "token_cnt": 303
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import smtplib\nfrom email.mime.text import MIMEText\n \ndef send_email(subject, body):\n    \n    sender_email = 'your-gmail-id'\n    receiver_email = 'manager-email-id'\n    password = '<PASSWORD>'\n \n    message = MIMEMultipart()\n    message['From'] = sender_email\n    message['To'] = receiver_email\n    message['Subject'] = subject\n\n    message.attach(MIMEText(body, 'plain'))\n\n    try:\n        server = smtplib.SMTP('smtp.gmail.com', 587)\n        server.starttls()\n        server.login(sender_email, password)\n        text = message.as_string()\n        server.sendmail(\n            sender_email, \n            receiver_email, \n            text\n        )\n        server.quit()\n        print(\"Email sent!\")\n    except Exception as e:\n        print(\"Error: \", e)\n \n \nif __name__ == '__main__':\n    while True:\n        \n        user_input = input(\"Did you follow proper hand hygiene today? [Y/N]: \")\n \n        if user_input.lower() == 'y':\n            print(\"Good job! Keep up the good work.\")\n            break\n        elif user_input.lower() == 'n':\n            \n            bias_level = input(\"What is the level of bias? [low/medium/high]: \")\n \n            if bias_level.lower() == 'low':\n                \n                repeat = input(\"It looks like you didn't wash your hands correctly. Do you want to watch an educational video about handwashing? [Y/N]\")\n \n                if repeat.lower() == 'y':\n                    \n                    pass\n                else:\n                    \n                    send_email(\"[Hand Hygiene Alert] Employee Did Not Follow Handwashing Protocol\", \n                        \"Dear Manager,\\n\\nOne of our employees visited workplace without following proper hand hygiene protocol.\\\n                        \\nPlease investigate and take necessary steps to ensure all staff members adhere to recommended guidelines.\\\n                        \\n\\nRegards,\\nHR\")\n            elif bias_level.lower() == 'medium':\n                \n                send_email(\"[Hand Hygiene Alert] Medium Level Bias Detected\", \n                    \"Dear Manager,\\n\\nOur monitoring system has detected some deviations in handwashing practices amongst our employees.\\\n                    \\nWe request you to conduct an immediate audit of workplaces and provide us with a detailed report within next 48 hours.\\\n                    \\n\\nRegards,\\nQuality Assurance Team\")\n            else:\n                \n                send_email(\"[Hand Hygiene Alert] High Level Bias Detected\", \n                    \"Dear Manager,\\n\\nSevere violations of handwashing protocols were observed across multiple locations.\\\n                    \\nImmediate disciplinary measures must be initiated against those responsible.\\\n                    \\n\\nRegards,\\nCEO\")\n            break\n        else:\n            print(\"Invalid input. Try again.\")",
            "id": 28
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier) (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end))))))) (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (integer))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (while_statement condition: (true) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (break_statement)) alternative: (elif_clause condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (pass_statement)) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence)) (string_end))))))))) alternative: (elif_clause condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence)) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence)) (string_end)))))))) (break_statement))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))))\n**\n",
        "text": " 10",
        "token_cnt": 1568
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_low_footcare(symptoms):\n    \n    print(\"Dry Run:\")\n    \n    symptom1 = \"pain\" in symptoms\n    symptom2 = \"swelling\" in symptoms\n    symptom3 = \"discoloration\" in symptoms\n\n    if (symptom1 == True) & (symptom2 == False) & (symptom3 == False):\n        return \"trimToenails\"\n    elif ((symptom1 == True) | (symptom2 == True)) & (symptom3 == True):\n        return \"seeDoctor\"\n    else: \n        return \"noActionNeeded\"",
            "id": 30
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)))) (expression_statement (assignment left: (identifier) right: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)))) (expression_statement (assignment left: (identifier) right: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)))) (if_statement condition: (binary_operator left: (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (true))) right: (parenthesized_expression (comparison_operator (identifier) (false)))) right: (parenthesized_expression (comparison_operator (identifier) (false)))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (binary_operator left: (parenthesized_expression (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (true))) right: (parenthesized_expression (comparison_operator (identifier) (true))))) right: (parenthesized_expression (comparison_operator (identifier) (true)))) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 5",
        "token_cnt": 423
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import datetime\n    \n    def get_todays_date():\n        today = datetime.datetime.now()\n        return today\n    \n    \n    task_list = [\n        [\"Task 1\", \"John\"], \n        [\"Task 2\", \"Mary\"], \n        [\"Task 3\", \"Sue\"]\n    ]\n    \n    def send_email(subject, message):\n        print(\"Sending email with subject:\", subject)\n        print(\"Message:\",message)\n        \n    def notify_person(task, person):\n        reminder_text = f\"Hi {person}, please remember to complete {task}.\"\n        \n        current_time = get_todays_date()\n        deadline = current_time + datetime.timedelta(days=5)\n    \n        if current_time > deadline:\n            status = \"overdue\"\n            notification_type = \"email\"\n        \n            send_email(f\"{status}: {reminder_text}\", reminder_text)\n        else:\n            status = \"pending\"\n            notification_type = \"sms\"\n        \n            print(f\"{notification_type}: {reminder_text}\")\n            \n    def main():    \n        for task, person in task_list:    \n            notify_person(task, person)\n    \n    if __name__ == \"__main__\":\n        main()",
            "id": 31
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)))) (return_statement (identifier)))) (expression_statement (assignment left: (identifier) right: (list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (integer))))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_end)) (identifier))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_end)))))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (for_statement left: (pattern_list (identifier) (identifier)) right: (identifier) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier)))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 6",
        "token_cnt": 877
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_flossing(transparency):\n    \"\"\"\n    Checks whether given transparency value represents correct \n    flossing technique based on engineering standards\n    \n    Args:\n        transparency (float): Value between 0 and 1 representing \n            teeth visibility after flossing\n        \n    Returns:\n        str: \"Correct\" if proper flossing was performed, otherwise\n            returns error message describing what went wrong\n            \n    Raises:\n        ValueError: If input transparency value is not within [0, 1] range    \n    \"\"\"    \n\n    \n    if not isinstance(transparency, float) or \\\n       not (0 <= transparency <= 1):\n           raise ValueError(\"Invalid input transparency value\")   \n    \n    \n    if transparency >= 0.75:    \n        return \"Correct!\"\n    else:\n        return \"Incorrect! Try again.\"",
            "id": 32
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) (line_continuation) right: (not_operator argument: (parenthesized_expression (comparison_operator (integer) (identifier) (integer))))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 238
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom sklearn import preprocessing\n\n\ndef display_extreme_travel(df):\n    \n    df = df[[\"country\", \"continent\", \"year\", \"life expectancy\", \n             \"gdp per capita\"]]\n\n    \n    le = preprocessing.LabelEncoder()\n    df['country'] = le.fit_transform(df['country'])\n    \n    \n    grouped = df.groupby('year').mean().reset_index()\n    \n    \n    max_val = grouped.loc[(grouped['life expectancy']==grouped['life expectancy'].max()) & (grouped['gdp per capita']==grouped['gdp per capita'].max()), :]\n    \n    \n    print(\"The combination of highest GDP per Capita and Highest Life Expectancy was found in:\")\n    print(\"Country:\", max_val['country'][0])\n    print(\"Continent:\", max_val['continent'][0])\n    print(\"Year:\", max_val['year'][0], \"\\n\")\n    \n\n\ndf = pd.read_csv(\"data.csv\")\n\ndisplay_extreme_travel(df)",
            "id": 35
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (binary_operator left: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list)))) right: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list))))) subscript: (slice)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (integer))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (integer))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (integer)) (string (string_start) (string_content (escape_sequence)) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))\n**\n",
        "text": " 4",
        "token_cnt": 993
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_low_hygiene(transparency):\n    \"\"\"Transform low hygiene in shared space by preventing spread of germs\n    \n    Args:\n        transparency (float): level of visibility between 0 and 1\n        \n    Returns:\n        str: recommendation for action based on given transparency value\n\n    Raises:\n        ValueError: if input transparency is not within range [0, 1]    \n    \"\"\"\n    \n    if not isinstance(transparency, float) or (transparency < 0 or transparency > 1):\n        raise ValueError(\"Invalid input transparency\")    \n    \n    \n    rec_msg = \"\"   \n    \n    \n    if transparency >= 0.95:    \n        rec_msg += \"Highly transparent area - no need for intervention\\n\"       \n    elif transparency >= 0.7:    \n        rec_msg += \"Moderately transparent area - recommend frequent cleaning and disinfecting\\n\"      \n    else:    \n        rec_msg += \"Lowly transparent area - suggest increased frequency of hand washing and use of sanitizers\\n\"  \n        \n   return rec_msg",
            "id": 37
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) right: (parenthesized_expression (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (integer))))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (string (string_start) (string_content (escape_sequence)) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (float)) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (string (string_start) (string_content (escape_sequence)) (string_end)))))) alternative: (else_clause body: (block (expression_statement (augmented_assignment left: (identifier) right: (string (string_start) (string_content (escape_sequence)) (string_end))))))))) (return_statement (identifier)))\n**\n",
        "text": " 6",
        "token_cnt": 376
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_high_handling(personal_item):\n    \"\"\"\n    This function determines whether a given personal item has high handling requirements based \n    on its transparency level. If the item is transparent, then it is considered low risk and does not require \n    special cleaning procedures. However, if the item is opaque, then it may pose a higher risk of contamination \n    and requires more intensive cleaning methods.\n\n    Args:\n        personal_item (str): The name of the personal item to assess\n\n    Returns:\n        str: A message indicating whether the item has high or low handling requirements\n    \n    Raises:\n        ValueError: If the input value is not a string type\n        \n    \"\"\"    \n    \n    if isinstance(personal_item, str) == False:\n        raise ValueError(\"Invalid input type. Input must be a string.\")    \n    \n    \n    personal_items = [\n        (\"glasses\", \"low\"), \n        (\"contact lenses\", \"low\"), \n        (\"razor\", \"medium\"), \n        (\"toothbrush\", \"medium\"), \n        (\"jewelry\", \"high\")\n    ]   \n    \n    \n    for item in personal_items:    \n        if item[0] == personal_item:\n            break;  \n            \n    else:\n        return f\"Item '{personal_item}' not found.\"     \n    \n    \n    if personal_items[i][1] == \"low\":\n        return f\"'{personal_item}' can be cleaned with standard disinfectant solutions.\"      \n    elif personal_items[i][1] == \"medium\":\n        return f\"'{personal_item}' needs extra attention during cleaning process due to increased risk of cross-contamination.\"       \n    else:\n        return f\"'{personal_item}' must be handled by trained professionals due to extreme risks associated with contamination.\"",
            "id": 38
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (false)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (list (tuple (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (tuple (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (tuple (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (tuple (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (tuple (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (integer)) (identifier)) consequence: (block (break_statement)))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (integer)) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (integer)) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 658
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "monthly_income = 5000 \ncredit_limit = 12000 \nannual_interest_rate = 8% \ntrust_score = 4.7 \n\n\nif trust_score >= 4:\n    print(\"Applicant meets the minimum trust score requirement\")\n    \n    \n   emi = calculateEMI(monthly_income, credit_limit, annual_interest_rate)\n\n    \n    print(\"Monthly Installment:\", emi)\n    \n    \n    if emi / monthly_income < 0.3:\n        print(\"Loan approved!\")\n    else:\n        print(\"Loan rejected due to high EMI.\")\nelif trust_score == 3:\n    print(\"Applicant does not meet the minimum trust score requirement\")\nelse:\n    print(\"Invalid input! Please enter a value between 1 and 5\")\n\n\ndef calculateEMI(monthly_income, credit_limit, annual_interest_rate):\n    \"\"\"\n    Calculates Equated Monthly Installement (EMI) based on inputs provided.\n\n    Args:\n        monthly_income (int): Applicant's monthly income\n        credit_limit (int): Desired credit limit\n        annual_interest_rate (float): Annual interest rate charged on loan\n\n    Returns:\n        float: EMI amount\n    \"\"\"\n    \n    effective_interest_rate = annual_interest_rate / 12\n\n    \n    principle = credit_limit * 0.9\n\n    \n    return principle * (effective_interest_rate / (1 - math.pow((1 + effective_interest_rate), (-1 * nper))))",
            "id": 40
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (ERROR (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (integer) right: (identifier)))) (ERROR (float)) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (if_statement condition: (comparison_operator (binary_operator left: (identifier) right: (identifier)) (float)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (ERROR (identifier) (comparison_operator (identifier) (integer))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (ERROR) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (ERROR (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier)))) (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (integer)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (float)))) (return_statement (binary_operator left: (identifier) right: (parenthesized_expression (binary_operator left: (identifier) right: (parenthesized_expression (binary_operator left: (integer) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (parenthesized_expression (binary_operator left: (integer) right: (identifier))) (parenthesized_expression (binary_operator left: (unary_operator argument: (integer)) right: (identifier)))))))))))))\n**\n",
        "text": " 10",
        "token_cnt": 633
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_extreme_eye_hygiene(consent):\n    \"\"\"Transform extreme eye hygiene dataset into a format suitable for analysis by beginners.\n\n    Args:\n        consent (str): The participant's consent status\n\n    Returns:\n        dict: A dictionary containing transformed data\n\n    Raises:\n        ValueError: If the provided consent value is not recognized\n    \"\"\"\n    \n    transformations = {\n        \"yes\": _transform_with_disinfection,\n        \"no\": _transform_without_disinfection,\n    }\n\n    \n    if consent not in transformations:\n        raise ValueError(f\"Invalid consent value '{consent}'\")\n\n    return transformations[consent]()\n\n\ndef _transform_with_disinfection():\n    \"\"\"Apply disinfection steps to the data\"\"\"\n    \n    df = pd.read_csv(\"raw_data.csv\")\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    return df\n\n\ndef _transform_without_disinfection():\n    \"\"\"Do no disinfection but clean the lids instead.\"\"\"\n    \n    df = pd.read_csv(\"raw_data.csv\")\n    \n    \n    \n    \n    \n    return df",
            "id": 42
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))) (return_statement (call function: (subscript value: (identifier) subscript: (identifier)) arguments: (argument_list))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (return_statement (identifier)))))\n**\n",
        "text": " 6",
        "token_cnt": 421
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def book_hotel(safety):\n    \"\"\"\n    This function books a hotel room according to safety level\n\n    Args:\n        safety (int): A value between 1 and 4 indicating the desired safety level\n                    1 - lowest, 4 - highest\n    \n    Returns:\n        dict: Details about the hotel reservation including price, location, etc.\n        \n    Raises:\n        ValueError: If the input safety value is not within the expected range\n                    [1, 4]\n    \"\"\"    \n    \n    reservation = {}\n    \n    \n    if not isinstance(safety, int) or safety < 1 or safety > 4:\n        raise ValueError(\"Invalid safety level\")    \n    \n    \n    if safety == 1:    \n        reservation['Hotel Name'] = 'Budget Inn'\n        reservation['Price per night'] = '$50-$75'\n        reservation['Location'] = 'City Center'        \n    \n    elif safety == 2:    \n        reservation['Hotel Name'] = 'Midrange Hotel'\n        reservation['Price per night'] = '$80-$120'\n        reservation['Location'] = 'Near University'  \n          \n    elif safety == 3:    \n        reservation['Hotel Name'] = 'Luxury Resort'\n        reservation['Price per night'] = '$150-$250'\n        reservation['Location'] = 'Beachfront'   \n              \n    else:    \n        reservation['Hotel Name'] = 'Presidential Suite'\n        reservation['Price per night'] = '$300+'\n        reservation['Location'] = 'Central Business District'     \n        \n     return reservation",
            "id": 43
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary))) (if_statement condition: (boolean_operator left: (boolean_operator left: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) right: (comparison_operator (identifier) (integer))) right: (comparison_operator (identifier) (integer))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end))))))) (return_statement (identifier)))))\n**\n",
        "text": " 6",
        "token_cnt": 940
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_low_hand_hygiene(outside_home):\n    \"\"\"Update low hand hygiene score based on whether hands were washed \n    outside the home\n    \n    Args:\n        outside_home (bool): Whether hands were washed outside the home\n        \n    Returns:\n        str: A markdown formatted string containing details about \n        the updated hand washing behavior\n    \"\"\"\n\n    \n    \n    if not outside_home:\n        return f\"Low hand hygiene score increased by 1 due to \" \\\n               f\"not washing hands outside the home.\"\n\n    \n    else:    \n        \n        if get_consent(\"touch_face\"):\n            return f\"No change in low hand hygiene score since \" \\\n                   f\"user explicitly granted permission to touch their face \"\\\n                   f\"while working as an engineer.\"\n    \n        \n        else:\n            return f\"Low hand hygiene score decreased by 2 because \" \\\n                +f\"the user did not give explicit consent to touch their face,\"\\\n                +\" which is considered unhealthy according to CDC guidelines.\"\n\n\n\ndef get_consent(activity):    \n    filename = \"consents.txt\"\n    \n    \n    try:\n        with open(filename) as f:\n            consents = json.load(f)\n            \n    except FileNotFoundError:\n        consents = {}\n    \n    \n    activity_key = activity.replace(\"_\", \"-\")\n    if activity_key not in consents or consents[activity_key] != True:\n        \n        print(f\"{activity} requires explicit consent.\")\n        response = input(\"Do you grant this consent? [y/n]: \")\n        \n        if response.lower() == 'y':\n            consents[activity_key] =True\n            with open(filename, 'w') as f:\n                json.dump(consents, f, indent=4)\n                \n            return True\n        \n        elif response.lower() ==' n':\n            consents[activity_key] = False\n            with open(filename, 'w') as f:\n                json.dump(consents, f, indent=4)\n                \n            return False\n        \n     \n    else:\n        return consents[activity_key]",
            "id": 49
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (not_operator argument: (identifier)) consequence: (block (return_statement (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (if_statement condition: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) (line_continuation) right: (string (string_start) (string_content) (string_end))) (line_continuation) right: (string (string_start) (string_content) (string_end)))))))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (try_statement body: (block (with_statement (with_clause (with_item value: (as_pattern (call function: (identifier) arguments: (argument_list (identifier))) alias: (as_pattern_target (identifier))))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))))) (except_clause (identifier) (block (expression_statement (assignment left: (identifier) right: (dictionary)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (identifier)) right: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (true))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (true))) (with_statement (with_clause (with_item value: (as_pattern (call function: (identifier) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))) alias: (as_pattern_target (identifier))))) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (integer))))))) (return_statement (true))) alternative: (elif_clause condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (false))) (with_statement (with_clause (with_item value: (as_pattern (call function: (identifier) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))) alias: (as_pattern_target (identifier))))) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (integer))))))) (return_statement (false)))))) alternative: (else_clause body: (block (return_statement (subscript value: (identifier) subscript: (identifier)))))))))\n**\n",
        "text": " 4",
        "token_cnt": 1160
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_low_food_hygiene(bias):\n    \"\"\" \n    This function determines whether food has low hygiene based on the given bias score\n    \n    Args:\n        bias (float): The bias score generated by the model\n        \n    Returns:\n        str: 'Low' if the bias score indicates poor quality, otherwise returns 'High'\n    \n    Raises:\n        ValueError: If the input value for `bias` is not within the range [0,1]\n            \n    \"\"\"    \n    \n    if isinstance(bias, float) and 0 <= bias <= 1:    \n        if bias < 0.35:\n            return \"Low\"\n        else: \n            return \"High\"\n    raise ValueError(\"Invalid input value\")",
            "id": 53
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) right: (comparison_operator (integer) (identifier) (integer))) consequence: (block (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 7",
        "token_cnt": 212
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_higher_education(expert):\n    \"\"\"\n    This function checks whether higher education is necessary \n    according to the provided field of engineering 'expert'.\n\n    Parameters:\n        - expert (str) : Field of Engineering\n    \n    Returns:\n        A boolean value indicating whether further studies \n        after bachelor degree are needed or not.\n        \n    Raises:\n        ValueError if input argument type is incorrect.    \n    \"\"\"    \n    \n    \n    if isinstance(expert, str):    \n        pass\n    else:\n        raise ValueError(\"Input must be string\")   \n    \n    \n    courses = {\n        \"Computer Science\": [\"Masters\", \"PhD\"],\n        \"Mechanical Engineering\":[\"Bachelors\",\"Masters\"] ,\n        \"Civil Engineering\":[],\n        }\n    \n    \n    if expert in courses:\n        return courses[expert]\n    elif \"*\" in courses:\n        return courses[\"*\"]\n    else:\n        return []",
            "id": 55
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) consequence: (block (pass_statement)) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (list))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (subscript value: (identifier) subscript: (identifier)))) alternative: (elif_clause condition: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) consequence: (block (return_statement (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (return_statement (list))))))))\n**\n",
        "text": " 10",
        "token_cnt": 421
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_conditioner(reliability):\n    \"\"\"\n    This function updates the conditioner based on its reliability score\n    \n    Parameters\n    ----------\n    reliability : float\n        The reliability score of the conditioner\n        \n    Returns\n    -------\n    updated_condtioner : str\n        A string describing the updated condtioner based on its reliability score\n    \"\"\"\n\n    \n    reliability_levels = [(0.6, \"Fair\"), (0.8, \"Good\"), (1.0, \"Excellent\")]\n    \n    \n    updated_condiitoner = None\n    \n    \n    for min_relaiblity, description in reliability_levels:\n        \n        \n        if reliability >= min_reliance:\n            \n            \n            updated_condiitoner = description\n            \n    \n    return updated_condiitoner",
            "id": 56
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (tuple (float) (string (string_start) (string_content) (string_end))) (tuple (float) (string (string_start) (string_content) (string_end))) (tuple (float) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (none))) (for_statement left: (pattern_list (identifier) (identifier)) right: (identifier) body: (block (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (identifier))))))) (return_statement (identifier)))))\n**\n",
        "text": " 6",
        "token_cnt": 223
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def display_extreme_security(user_role, resource, permission):\n    \"\"\"Displays extreme security measures implemented by organization\n    \n    Args:\n        user_role (str): User Role of the requestor\n        resource (str): Resource being accessed\n        permission (int): Permission Level required for accessing the resource\n        \n    Raises:\n        ValueError: If invalid input provided\n\n    Returns:\n        str: Message indicating success or failure of access attempt \n    \"\"\"    \n    \n    ALLOWED_ROLES = [\"admin\", \"moderator\"]\n    ALLOWED_PERMISSIONS = [10, 20]    \n    \n    \n    if user_role not in ALLOWED_ROles:    \n        raise ValueError(\"Invalid user role\")   \n    \n    if permission not in ALLOWED_PERMISSIONS:    \n        raise ValueError(\"Invalid permission level\")  \n    \n    \n    if user_role == \"admin\":    \n        if permission >= 10:\n            return f\"Access Granted! {user_role} has highest permission ({permission}) for {resource}\"\n        else: \n            return f\"Denied! Insufficient permission ({permission}) for {resource}. Need at least 'Moderate' access.\"     \n            \n    elif user_role == \"moderator\":    \n        if permission >= 20:\n            return f\"Access Granted! {user_role} has higher permission ({permission}) than normal users for {resource}\"\n        else: \n            return f\"Denied! Insufficient permission ({permission}) for {resource}. Need at least 'View Only' access.\"      \n    \n    else: \n        return f\"{user_role} does not exist!\"",
            "id": 57
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list (integer) (integer)))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_end)))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_end)))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))))))) alternative: (else_clause body: (block (return_statement (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end)))))))))\n**\n",
        "text": " 10",
        "token_cnt": 638
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random\nfrom typing import List\n\n\nclass TodoList:\n    def __init__(self):\n        self._tasks: List[str] = []\n\n    @property\n    def tasks(self) -> List[str]:\n        return self._tasks\n\n    def add_task(self, new_task: str):\n        self._tasks.append(new_task)\n\n    def remove_task(self, index: int):\n        del self._tasks[index]\n\n    def clear_list(self):\n        self._tasks.clear()\n\n    def sort_by_priority(self):\n        \n        pass\n\n    def print_tasks(self):\n        for i, task in enumerate(self._tasks, start=1):\n            print(f\"{i}. {task}\")\n\n    def get_random_task(self):\n        if not self._tasks:\n            raise ValueError(\"No tasks added yet.\")\n\n        rand_int = random.randint(0, len(self._tasks)-1)\n        return self._tasks[rand_int]\n\n\ndef main():\n    todo_list = TodoList()\n\n    while True:\n        user_input = input(\"\\nWhat do you want to do? [a]dd, [r]emove, \"\n                          \"[c]lear all, [s]ort by priority, [p]rint list, \"\n                          \"[g]et random task, or exit: \")\n\n        try:\n            index = int(user_input) - 1\n\n            if user_input == 'a':\n                new_task = input(\"Enter your task: \")\n                todo_list.add_task(new_task)\n\n            elif user_input == 'r' and index >= 0:\n                todo_list.remove_task(index)\n\n            elif user_input == 'c':\n                todo_list.clear_list()\n                \n            elif user_input == 's':\n                todo_list.sort_by_priority()\n                \n            elif user_input == 'p':\n                todo_list.print_tasks()\n                \n            elif user_input == 'g':\n                random_task = todo_list.get_random_task()\n                print(random_task)\n                \n            else:\n                break\n                \n        except ValueError as e:\n            print(e)\n            \n        \nif __name__ == '__main__':\n    main()",
            "id": 58
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (class_definition name: (identifier) body: (block (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) type: (type (generic_type (identifier) (type_parameter (type (identifier))))) right: (list))))) (decorated_definition (decorator (identifier)) definition: (function_definition name: (identifier) parameters: (parameters (identifier)) return_type: (type (generic_type (identifier) (type_parameter (type (identifier))))) body: (block (return_statement (attribute object: (identifier) attribute: (identifier)))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier)))) body: (block (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier)))) body: (block (delete_statement (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (pass_statement))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (keyword_argument name: (identifier) value: (integer)))) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_end))))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (not_operator argument: (attribute object: (identifier) attribute: (identifier))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (binary_operator left: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))) right: (integer)))))) (return_statement (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (while_statement condition: (true) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (concatenated_string (string (string_start) (string_content (escape_sequence)) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))))) (try_statement body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (integer)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (integer))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))) alternative: (else_clause body: (block (break_statement))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 10",
        "token_cnt": 1554
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_extreme_food_safety(temperature, time_in_refrigerator, type_of_contamination):\n    \"\"\"Determine whether given temperature, storage duration and contaminant level result \n    in unsafe handling of perishable goods.\"\"\"\n\n    \n    if temperature >= 41 °F:\n        print(\"Temperature is above required threshold.\")\n    \n    elif temperature < 41 °F:    \n        \n        if time_in_refrigeration > 2 hours:\n            print(\"Sufficient cooling time has passed.\")\n        \n        elif time_in_refrigeration <= 2 hours:    \n            \n            if type_of_contamination == \"None\":\n                return \"Safe\"\n                \n            else: \n                print(\"Pathogen detected; cannot consume.\")\n                \n    \n    return \"Unsafe\"",
            "id": 64
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (integer)) (ERROR (UNEXPECTED 176) (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) (ERROR (UNEXPECTED 176) (identifier)) consequence: (block (if_statement condition: (comparison_operator (identifier) (ERROR (integer)) (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (ERROR (integer)) (identifier)) consequence: (block (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))))) (return_statement (string (string_start) (string_content) (string_end))))))\n**\n",
        "text": " 10",
        "token_cnt": 385
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import tweepy\nfrom textblob import TextBlob\n\n\nconsumer_key = 'YOUR CONSUMER KEY'\nconsumer_secret = 'YOUR CONSUMER SECRET'\naccess_token = 'YOUR ACCESS TOKEN'\naccess_token_secret = 'YOUR ACCESS TOKEN SECRET'\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\napi = tweepy.API(auth)\n\ndef check_extreme_social_media():\n    \n    public_tweets = api.search('Social Media', result_type='mixed', count=10)\n\n    sentiments = []\n    for tweet in public_tweets:\n        blob = TextBlob(tweet.text)\n        polarity = blob.sentiment.polarity\n        subjectivity = blob.sentiment.subjectivity\n\n        sentiments.append((polarity, subjectivity))\n    \n    \n    avg_polarity = sum([score[0] for score in sentiments]) / len(sentiments)\n    avg_subjectivity = sum([score[1] for score in sentiments]) / len(sentiments)\n\n    if (avg_polarity > 0.5 and avg_subjectivity < 0.2):\n        print(\"There appears to be excessive positive sentiment around discussions of \\\"Social Media\\\" \")\n    elif (avg_polarity < -0.5 and avg_subjectivity < 0.3):\n        print(\"There appears to be excessive negative sentiment around discussions of \\\"Social Media\\\" \")\n    else:\n        print(\"It does not appear there is any significant emotional reaction towards mentions of \\\"Social Media\\\"\")\n\ncheck_extreme_social_media()",
            "id": 65
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (integer)))))) (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))))) (expression_statement (assignment left: (identifier) right: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)))) (expression_statement (assignment left: (identifier) right: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (tuple (identifier) (identifier))))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (list_comprehension body: (subscript value: (identifier) subscript: (integer)) (for_in_clause left: (identifier) right: (identifier))))) right: (call function: (identifier) arguments: (argument_list (identifier)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (list_comprehension body: (subscript value: (identifier) subscript: (integer)) (for_in_clause left: (identifier) right: (identifier))))) right: (call function: (identifier) arguments: (argument_list (identifier)))))) (if_statement condition: (parenthesized_expression (boolean_operator left: (comparison_operator (identifier) (float)) right: (comparison_operator (identifier) (float)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)))))) alternative: (elif_clause condition: (parenthesized_expression (boolean_operator left: (comparison_operator (identifier) (unary_operator argument: (float))) right: (comparison_operator (identifier) (float)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list))))\n**\n",
        "text": " 10",
        "token_cnt": 1035
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_low_security(transaction):\n    \"\"\"Transform transaction data into low security format.\"\"\"\n\n    \n    rules = [\n        {\n            \"condition\": (transaction[\"amount\"] < 50), \n            \"transformations\": [{\n                \"new_field\": \"is_fraud\", \n                \"value\": False\n            }]\n        }, \n        {\n            \"condition\": ((transaction[\"amount\"] >= 50) & (transaction[\"amount\"] <=100)), \n            \"transformations\": [{\n                \"new_field\": \"is_fraud\", \n                \"value\": True\n            },{\n                \"new_field\": \"risk_level\", \n                \"value\": \"Medium\"\n            }]\n        }\n    ]\n    \n    \n    for rule in rules:\n        if rule['condition']:\n            for transformation in rule['transformations']:\n                transaction[transformation['new_field']] = transformation['value']\n                \n    return transaction",
            "id": 66
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (integer)))) (pair key: (string (string_start) (string_content) (string_end)) value: (list (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (false)))))) (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (parenthesized_expression (binary_operator left: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (integer))) right: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (integer)))))) (pair key: (string (string_start) (string_content) (string_end)) value: (list (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (true))) (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))))))))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) consequence: (block (for_statement left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) body: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))))))) (return_statement (identifier)))))\n**\n",
        "text": " 5",
        "token_cnt": 716
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "smoker = False \nactivity_list = ['Have you taken alcohol', 'Have you eaten anything unhealthy'] \n\n\ndef activity_question(ques): \n    answer = str(input(ques + \" (y/n) ? \"))\n    return answer \n\n\n\nif __name__ == '__main__': \n\n    print(\"Welcome to our dental clinic!\")\n\n    \n    for i in range(len(activity_list)): \n        ans = activity_question(activity_list[i]) \n\n        \n        if ans.lower() == 'yes': \n            smoker = True\n            break\n    \n    \n    if smoker:    \n        print(\"\\nWe advise you against taking professional advice while indulging in these habits.\\\n              \\nIt may lead to severe consequences.\") \n    else:    \n        print(\"\\nGreat job! Keep up this habit and visit us after six months for regular checkups\")",
            "id": 67
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (false))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (string (string_start) (string_content) (string_end))))))))) (return_statement (identifier)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (identifier)))))) (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (true))) (break_statement))))) (if_statement condition: (identifier) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence) (escape_sequence)) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 523
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_low_dental_hygiene(flossing):\n    \"\"\"DetermineLowDentalHygiene: Flossing For DecisionMakingForBeginners\n\n    Args:\n        flossing (bool): Whether the person flosses their teeth regularly or not\n\n    Returns:\n        str: A message indicating whether the person has good or poor dental\n            hygiene, depending on their input value for 'flossing'\n    \"\"\"\n    if flossing:\n        \n        return \"Good dental hygiene! Keep up the great work.\"\n    else:\n        \n        return \"Poor dental hygiene detected. Please see a dentist as soon as possible.\"",
            "id": 68
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (identifier) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 5",
        "token_cnt": 119
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_high_fitness(user):\n    \n    if user['trust'] >= 4:\n        \n        challenge = random.choice(['daily step goal', 'meditation session', 'healthy recipe'])\n        print(f'{user[\"name\"]} completed {challenge}!')\n        \n        \n        points = 50 if challenge == 'daily step goal' else (25 if challenge == 'meditation session' else 10)\n    \n        \n        user['points'] += points\n        db.session.commit()\n    \n    elif user['trust'] < 4 and user['trust'] > 1:\n        \n        notification = random.choice(['new workout plan available', 'tips & tricks video posted', 'exclusive discounts announced'])\n        print(f\"{user['name']} viewed {notification}.\")\n        \n    return user",
            "id": 71
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (conditional_expression (integer) (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) (parenthesized_expression (conditional_expression (integer) (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) (integer)))))) (expression_statement (augmented_assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (integer)) right: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (integer))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))))))) (return_statement (identifier)))))\n**\n",
        "text": " 6",
        "token_cnt": 695
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def choose_water_temperature(ethic):\n    \n    temp = \"37°C\"\n    \n    \n    if (ethic == 'Hindu'):\n        temp = \"36 °C - 38 °C\"\n    elif (ethic == 'Muslim'):\n        temp = \"40 °C\"\n    else : \n        print(\"Invalid input\")\n        \n    return temp\n    \nprint(\"Low Bathing Routine:\")    \nprint(\"Choosing The Right Water Temperature For Engineers Based On Religious Beliefs\\n\")    \n\n\nethic = input(\"Enter your ethincity [Hindu/ Muslim]: \")   \n\n\ntemp = choose_water_temperature(ethic)   \n        \n\nprint(\"The suggested warm bathing water temperature for\", ethic + \",is:\", temp)\n\n\n\n'''\nIf we want to check what will happen without running the program, we can add another clause as follows:\nelif (ethic == 'Jain') :\n   temp = \"29 °C\"\n   print(\"In case of Jains, the suitable water temperature is:\", temp)\n\nThis way, when we provide any other option except those mentioned above, i.e., Hindu, Muslim, Sikh, etc., the following message appears:\nInvalid Input\n'''",
            "id": 74
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (return_statement (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (binary_operator left: (identifier) right: (string (string_start) (string_content) (string_end))) (identifier)))) (expression_statement (string (string_start) (string_content) (string_end))))\n**\n",
        "text": " 6",
        "token_cnt": 499
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd \nfrom sklearn import linear_model \n  \ndef displayLowEducationCourseEnrollment(df): \n    \n    x = df[[\"SAT Math Score\", \"ACT English Score\"]] \n    y = df[\"Low Education\"] \n      \n    \n    regr = linear_model.LinearRegression() \n    regr.fit(x,y) \n      \n    \n    intercept = regr.intercept_ \n    coefficients = regr.coef_ \n      \n    \n    print(\"Intercept:\", intercept) \n    print(\"Coefficients:\") \n    for i,j in zip(x.columns,coefficients): \n        print(\"{}:{}\".format(i, j)) \n      \n    \n    predicted_values = regr.predict([[1200,30]]) \n      \n    \n    if (predicted_values >= 0.5): \n        print(\"\\nUser does NOT qualify for this program\") \n    else: \n        print(\"\\nUser DOES qualify for this program\") \n          \nif __name__ == '__main__': \n    \n    df = pd.read_csv('data.csv') \n      \n    \n    displayLowEducationCourseEnrollment(df)",
            "id": 75
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))) (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (identifier))) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (list (integer) (integer))))))) (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (float))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))))\n**\n",
        "text": " 6",
        "token_cnt": 766
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_low_security(age):\n    \n    if not isinstance(age, int):\n        return \"Invalid input\"\n    \n    \n    if age < 18 or age > 65:\n        return f\"Age must be between 18 and 65 inclusive, got {age}\"\n\n    \n    if age >= 40:\n        score = 20 + ((age // 10) * 3)\n    else:\n        score = 10 + (age // 5)\n        \n    \n    return f\"{score} out of 100\"\n\n\n\nprint(calculate_low_security(27))    \nprint(calculate_low_security(45))    \nprint(calculate_low_security(66))    \nprint(calculate_low_security(\"foo\"))  \nprint(calculate_low_security(-5))",
            "id": 76
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (integer))) consequence: (block (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_end))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (integer) right: (parenthesized_expression (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (integer))) right: (integer))))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (integer) right: (parenthesized_expression (binary_operator left: (identifier) right: (integer))))))))) (return_statement (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (unary_operator argument: (integer))))))))\n**\n",
        "text": " 10",
        "token_cnt": 522
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_extreme_hygiene(privacy):\n        \"\"\"\n        This function calculates extreme hygiene by disinfecting surfaces for analysis depending on privacy level\n        \n        Args:\n            privacy (int): The privacy value of the case study\n            \n        Returns:\n            str: A string describing the calculated extreme hygiene methodology    \n        \"\"\"\n    \n        \n        scenarios = {\n            1: \"Wear appropriate PPE including gloves, gowns, face shields etc.\", \n            2: \"Use contact precautions such as droplet/contact isolation\", \n            3: \"Standard precautions only\" \n        }    \n    \n        \n        if privacy == 1:        \n            return f\"{scenarios[1]} followed by proper hand washing after removing PPE.\"    \n        elif privacy == 2: \n            return f\"{scenarios[2]} followed by proper handwashing before putting back on PPE.\"    \n        else:            \n            return f\"{scenarios[3]} without any additional measures.\"",
            "id": 78
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (integer) value: (string (string_start) (string_content) (string_end))) (pair key: (integer) value: (string (string_start) (string_content) (string_end))) (pair key: (integer) value: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (interpolation expression: (subscript value: (identifier) subscript: (integer))) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (interpolation expression: (subscript value: (identifier) subscript: (integer))) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (interpolation expression: (subscript value: (identifier) subscript: (integer))) (string_content) (string_end)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 328
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "name = input(\"Enter patient name:\")\nage = int(input(\"Enter age:\"))\nheight = float(input(\"Enter height (in meters):\"))\nweight = float(input(\"Enter weight (in kilograms):\"))\ngender = input(\"Enter gender [m/f]:\")\nsymptoms = input(\"Enter symptoms:\")\ndoctor_recommendations = input(\"Enter doctor recommendations:\")\n\n\ndef calculateBMI(height, weight)\n    \n    bmi = weight / (height ** 2)\n    \n    return bmi \n\n\nif __name__ == '__main__':\n\n    print(\"\\nChecking vitals...\\n\")\n\n    \n    bmi = calculateBMI(height, weight)\n\n    if bmi < 18.5:\n        print(f\"{name}'s {bmi:.2f} BMI is considered underweight.\")\n\n    elif bmi >= 18.5 and bmi <= 24.9:\n        print(f\"{name}'s {bmi:.2f} BMI is within normal range.\")\n\n    else:\n        print(f\"{name}'s {bmi:.2f} BMI is considered obese.\")\n\n\n    if age > 60:\n        print(f\"{name} is over the age of 60 years old.\")\n\n    if \"headache\" in symptoms:\n        print(f\"{name} has reported headaches as their main symptom.\")\n\n    if doctor_recommendations != \"\":\n        print(f\"\\n{doctor_recommendations}\\n\")\n\n    print(\"Vitals checked! Results appear above.\\n\\nDry run complete!\")",
            "id": 84
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (ERROR (identifier) (ERROR (parameters (identifier) (identifier)) (identifier) (identifier)) (parameters (ERROR (identifier) (integer))) (identifier) (identifier)) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier) format_specifier: (format_specifier)) (string_content) (string_end)))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (float)) right: (comparison_operator (identifier) (float))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier) format_specifier: (format_specifier)) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier) format_specifier: (format_specifier)) (string_content) (string_end)))))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content (escape_sequence)) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))))))))\n**\n",
        "text": " 5",
        "token_cnt": 1071
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_low_education(gpa):\n    \n    highschool = (0.0, 1.9)    \n    associate = (2.0, 2.4)     \n    bachelor = (2.5, 3.4)      \n    master = (3.5, 4.0)        \n    \n    \n    if gpa >= highschool[0] and gpa < highschool[1]:\n        return \"High School\"\n    elif gpa >= associate[0] and gpa < associate[1]:\n        return \"Associate Degree\"\n    elif gpa >= bachelor[0] and gpa < bachelor[1]:\n        return \"Bachelor's Degree\"\n    else:\n        return \"Master's Degree or higher\"\n    \n\nprint(check_low_education(2.7))   \nprint(check_low_education(3.6))   \nprint(check_low_education(4.0))",
            "id": 85
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (tuple (float) (float)))) (expression_statement (assignment left: (identifier) right: (tuple (float) (float)))) (expression_statement (assignment left: (identifier) right: (tuple (float) (float)))) (expression_statement (assignment left: (identifier) right: (tuple (float) (float)))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (subscript value: (identifier) subscript: (integer))) right: (comparison_operator (identifier) (subscript value: (identifier) subscript: (integer)))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (subscript value: (identifier) subscript: (integer))) right: (comparison_operator (identifier) (subscript value: (identifier) subscript: (integer)))) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (subscript value: (identifier) subscript: (integer))) right: (comparison_operator (identifier) (subscript value: (identifier) subscript: (integer)))) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (float)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (float)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (float)))))))\n**\n",
        "text": " 4",
        "token_cnt": 510
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_low_hygiene(germ_analysis):\n    \n    if (germ_analysis['result'] == 'Positive'):\n        print(\"Gross! The sample tested positive for germs.\")\n        \n        \n        switcher = {\n            \"Office\": office_actions, \n            \"School\": school_actions, \n            \"Public Space\": public_space_actions\n        }\n    \n        \n        actions = switcher.get(location_type) \n    \n        \n        for action in actions:\n            action()\n    \n    else:\n        print(\"Good job!\")\n        print(\"No traces of pathogens were found in the environment\")\n\n\n\ndef office_actions():\n    print(\"Inform employees about proper handwashing techniques \")\n    print(\"Encourage regular disinfection of workspaces\")\n    \n\ndef school_actions():\n    print(\"Remind students and staff to wash their hands frequently\")\n    print(\"Install touchless faucets and soap dispensers\")\n    \n    \ndef public_space_actions():\n    print(\"Place signboards reminding people to maintain social distancing\")\n    print(\"Regularly clean high-touch areas like door handles and elevator buttons\")",
            "id": 91
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (call function: (identifier) arguments: (argument_list)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 6",
        "token_cnt": 649
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_hygeine(dirty, bias):\n    \n    states = ['unclean', 'low', 'medium', 'high']\n    probs = [0.25, 0.35, 0.4, 0.1]\n    \n    \n    assert isinstance(dirty, bool), \"Invalid argument type: Dirty must be a boolean\"\n    assert 0 <= bias <= 1 , \"Invalid argument value: Bias must lie between 0 and 1 inclusively.\"\n\n    \n    p_obs = prob_of_state('observed', dirty, states, probs)\n\n    \n    p_final = p_obs * (bias**len(states)) / sum([p*((bias)**i) for i,p in enumerate(probs)])\n\n    \n    return max([(s,c) for s, c, p in zip(states, probs, p_final) if p == p_final[0]], key=lambda x:x[1])[0]\n\n\n\ndef prob_of_state(evidence, observation, states, probs):\n    assert len(observation) == len(evidence), \"Observation and Evidence vectors must be same length\"\n    assert set(evidence) == {'true','false'}, \"Evidence vector can only contain either true or false values\"\n    p_evidences = {True: probs[0], False: probs[-1]}\n    return p_evidences[all(map(bool, observation))] if evidence else p_evidences[any(map(not_, observation))]\n\n\ndef not_(lst):\n    return map(operator.not_, lst)",
            "id": 99
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list (float) (float) (float) (float)))) (assert_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (string (string_start) (string_content) (string_end))) (assert_statement (comparison_operator (integer) (identifier) (integer)) (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier) (identifier) (identifier))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (identifier) right: (parenthesized_expression (binary_operator left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier)))))) right: (call function: (identifier) arguments: (argument_list (list_comprehension body: (binary_operator left: (identifier) right: (parenthesized_expression (binary_operator left: (parenthesized_expression (identifier)) right: (identifier)))) (for_in_clause left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier)))))))))) (return_statement (subscript value: (call function: (identifier) arguments: (argument_list (list_comprehension body: (tuple (identifier) (identifier)) (for_in_clause left: (pattern_list (identifier) (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier)))) (if_clause (comparison_operator (identifier) (subscript value: (identifier) subscript: (integer))))) (keyword_argument name: (identifier) value: (lambda parameters: (lambda_parameters (identifier)) body: (subscript value: (identifier) subscript: (integer)))))) subscript: (integer))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier) (identifier)) body: (block (assert_statement (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (call function: (identifier) arguments: (argument_list (identifier)))) (string (string_start) (string_content) (string_end))) (assert_statement (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (set (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (true) value: (subscript value: (identifier) subscript: (integer))) (pair key: (false) value: (subscript value: (identifier) subscript: (unary_operator argument: (integer))))))) (return_statement (conditional_expression (subscript value: (identifier) subscript: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier) (identifier)))))) (identifier) (subscript value: (identifier) subscript: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier) (identifier)))))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (return_statement (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (identifier)))))))\n**\n",
        "text": " 10",
        "token_cnt": 988
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_low_handwashing_technique(privacy):\n    \"\"\"Determine whether low hand washing technique was used based on privacy score\n\n    Args:\n        privacy (int): A value between 0 and 1 indicating how private the person feels after drying their hands thoroughly\n\n    Returns:\n        str: \"Low handwashing technique\" if privacy score indicates low handwashing technique was likely used, otherwise returns None\n    \n    Raises:\n        ValueError: If privacy argument is not within expected range of values\n        \n    \"\"\"\n    \n    if isinstance(privacy, float) == False or \\\n       (isinstance(privacy, int) and (privacy < 0 or privacy > 1)) :\n            raise ValueError(\"Invalid type or out of bounds value provided for 'privacy' parameter\")\n            \n    \n    if privacy <= .6:\n        return \"Low handwashing technique\"\n    else:\n        return None\n    \n\nprint(determine_low_handwashing_technique(.35))    \nprint(determine_low_handwashing_technique(.89))",
            "id": 100
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (false)) (line_continuation) right: (parenthesized_expression (boolean_operator left: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) right: (parenthesized_expression (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (integer))))))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (else_clause body: (block (return_statement (none))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (float)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (float)))))))\n**\n",
        "text": " 10",
        "token_cnt": 336
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def detect_fecal_matter(toilet_image):\n    \n    gray = cv2.cvtColor(toilet_image,cv2.COLOR_BGR2GRAY)\n\n    \n    blur = cv2.GaussianBlur(gray,(5,5),0)\n    \n    \n    canny = cv2.Canny(blur,100,200)\n\n    \n    cnts = cv2.findContours(canny.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[0]\n\n    \n    for c in cnts:\n        \n        area = cv2.contourArea(c)\n\n        \n        if (area < 300):\n            continue\n        \n        \n        peri = cv2.arcLength(c, True)\n    \n        \n        approx = cv2.approxPolyDP(c, 0.04 * peri, False)\n    \n        \n        if len(approx) > 4:\n            return \"Feces\"\n            \n    return \"No Feces\"\n\n\n\nconsent = input(\"Has patient given their consent? [y/n]: \")\nif consent == 'y':\n    \n    img = cv2.imread('path_to_toilet_bowl_image')\n    \n    \n    result = detect_fecal_matter(img)\n    \n    print(\"Result:\",result)\n    \nelif consent == 'n':\n    print(\"Cannot process without patient's consent\")",
            "id": 101
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (attribute object: (identifier) attribute: (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (tuple (integer) (integer)) (integer))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (integer) (integer))))) (expression_statement (assignment left: (identifier) right: (subscript value: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (attribute object: (identifier) attribute: (identifier)) (attribute object: (identifier) attribute: (identifier)))) subscript: (integer)))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (integer))) consequence: (block (continue_statement))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (true))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (binary_operator left: (float) right: (identifier)) (false))))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))))) (return_statement (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 10",
        "token_cnt": 818
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random\n\ndef verify_id(name, social):\n    \n    rand = str(random.randint(1000,9999))\n    \n    \n    while True:\n        print(\"Please enter your name:\")\n        entered_name = input()\n        \n        if entered_name == name:\n            break\n        else: \n            print(\"Invalid Name! Please try again.\")\n            \n    while True:    \n        print(\"Please enter\",social,\"number:\")\n        entered_socail = input()\n    \n        if len(entered_socail) != 9:\n            print(\"Invalid Social!\")\n        elif int(entered_socail[3:]) % 2 == 0:\n            print(\"Invalid Even Number\")\n        else:    \n            break\n\n    \n    if entered_socail[-4:] == rand:\n        return \"Verification Successful\"\n    else: \n        return \"Verification Failed!\"\n\n\nprint(\"Welcome to our system! We value your privacy.\\n\\nTo continue please answer few questions about yourself so we can ensure only authorized personnel gain access to our systems.\")\n\n\nname = input(\"Name: \")\ngender = input(\"Gender (M/F): \")\nage = input(\"Age: \")\naddress = input(\"Address: \")\nphone = input(\"Phone number: \")\nemail = input(\"Email address: \")\n\nresult = verify_id(name, phone)\n\n\nprint(\"\\nResult:\", result)",
            "id": 114
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer))))))) (while_statement condition: (true) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (break_statement)) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (while_statement condition: (true) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (binary_operator left: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (slice (integer))))) right: (integer)) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (break_statement)))))) (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (slice (unary_operator argument: (integer)))) (identifier)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)) (identifier)))))\n**\n",
        "text": " 6",
        "token_cnt": 1016
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_low_personal_organization(trust):\n    \"\"\"Transforms low personal organization by implementing task management strategies based \n    on trust levels between team members\n\n    Args:\n        trust (float): A value from 0 to 1 indicating the level of trust between teammates\n\n    Returns:\n        str: The transformed version of the original sentence\n        \n    Raises:\n        ValueError: If `trust` is not within range [0, 1]\n    \n    \"\"\"    \n    \n    if isinstance(trust, float) == False or (trust < 0 or trust > 1):    \n        raise ValueError(\"Invalid argument 'trust' must be a floating point number within range [0, 1]\")    \n    \n    \n    if trust >= .8:\n        strategy = \"Implementing strict deadlines\"\n    elif trust >= .6:\n        strategy = \"Using project management software\"\n    else:\n        strategy = \"Hold regular status meetings\"   \n    \n    return f\"\"\"Transforming low personal organization through improved task management strategies based on {trust*100:.2f}% trust: {strategy}\"\"\"\n\n\nif __name__ == \"__main__\":\n    print(transform_low_personal_organization(.75))",
            "id": 115
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (false)) right: (parenthesized_expression (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (integer))))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (float)) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))))) (return_statement (string (string_start) (string_content) (interpolation expression: (binary_operator left: (identifier) right: (integer)) format_specifier: (format_specifier)) (string_content) (interpolation expression: (identifier)) (string_end))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (float)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 457
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_transportation(transparency):\n    \"\"\"Updates high transportation route planning for decision making.\"\"\"\n\n    \n    travel_time = None\n    cost = None\n    \n    \n    if (transparency == \"Transparent\"):\n        print(\"Getting up-to-date information from available sources\")\n        \n        \n        travel_times = get_travel_times()\n    \n        \n        costs = calculate_costs(travel_times)\n        cost = sum(cost)\n        \n    elif (transparency == \"Semi-transparent\"):\n        print(\"Using historical data but checking for recent changes\")\n        \n        \n        updated_data = check_for_updates(travel_times)\n        \n        \n        if updated_data:\n            travel_times = get_updated_travel_times(updated_data)\n        \n            \n            costs = calculate_costs(travel_times)\n            cost = sum(cost)\n            \n        else:\n            print(\"No recent changes found\")\n            \n    elif (transparency == \"Opaque\"):\n        print(\"Using outdated information\")\n        \n        \n        pass\n        \n     return [travel_time, cost]\n    \n    \n\nupdate_transportation('Transparent')",
            "id": 116
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (none))) (expression_statement (assignment left: (identifier) right: (none))) (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier)))))) alternative: (elif_clause condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) alternative: (elif_clause condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (pass_statement)))) (return_statement (list (identifier) (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))\n**\n",
        "text": " 6",
        "token_cnt": 646
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import re \n\ndef check_extreme_social_media(text):\n    \"\"\"\n    This function takes as input a string containing social media posts \n    from multiple users and returns whether this content can be considered extreme.\n\n    The criteria used to determine whether a post is \"extreme\" include:\n    1 - The presence of profanity (which will always result in a return value of True)\n    2 - A high ratio of positive vs negative words \n    3 - High sentiment score based on pre-trained language model\n    \n    Parameters:\n        text (str): Input text containing social media posts\n        \n    Returns:\n        bool: Whether the input text contains extreme social media behavior    \n\n    Raises:\n        ValueError: If the input `text` parameter is not a string   \n    \n    \"\"\"    \n    \n    emoji_pattern = re.compile(\"[\"\n                           u\"\\U0001F600-\\U0001F64F\"  \n                           u\"\\U0001F300-\\U0001F5FF\"  \n                           u\"\\U0001F680-\\U0001F6FF\"  \n                           u\"\\u2600-\\u26FF\\u2700-\\u27BF]+\", flags=re.UNICODE)\n    badword_regex = r\"\"\"(?:^|[\\s\\.\\?!])[\\w']+['”]\\b|(?:^|\\W)[\\w']+['”]\\b(?![a-z])\"\"\"\n    badword_pattern = re.compile(badword_regex, flags=re.IGNORECASE)\n    \n    \n    tokens = text.split()\n    \n    \n    pos_count = 0\n    neg_count = 0\n    \n    \n    for token in tokens:    \n        if token in [\"good\", \"great\"]:\n            pos_count += 1\n        elif token in [\"bad\", \"terrible\"]:\n            neg_count += 1\n            \n    \n    sent_score = pos_count / (pos_count + neg_count)\n    \n    \n    has_profanity = bool(badword_pattern.search(text))\n    \n    \n    if has_profanity or sent_score < 0.2:\n        return True\n    else:\n        return False",
            "id": 117
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)) (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)) (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)) (string (string_start) (string_content (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence)) (string_end))) (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier))))))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (integer)))) alternative: (elif_clause condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (integer)))))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (parenthesized_expression (binary_operator left: (identifier) right: (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))))) (if_statement condition: (boolean_operator left: (identifier) right: (comparison_operator (identifier) (float))) consequence: (block (return_statement (true))) alternative: (else_clause body: (block (return_statement (false))))))))\n**\n",
        "text": " 10",
        "token_cnt": 757
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def manage_allergy(patient_age, medicine1, medicine2, severity, congestion):\n    \n    if (patient_age < 6):\n        return \"Recommend giving {} mg of {}\".format(dose, medicine)\n    \n    \n    elif ((medicine1 != 'unknown') & (medicine2 != 'unknown')):\n        if (reliability[medicine1] >= reliability[medicine2]):\n            return \"Suggest combining {},{}mg\".format(medicine1, dose)\n        else:\n            return \"Suggest combining {},{}mg\".format(medicine2, dose)\n\n    \n    elif (((medicine1 == 'unknown') | (medicine2 == 'unknown')) & \n          (severity != 'unknown') & (congestion != 'unknown')):\n        \n        \n        if (severity >= 'moderate'):\n            return \"Administer an EpiPen immediately\"\n\n        \n        else: \n            return (\"Do not self-medicate; consult a physician regarding \"\n                    + \"the best course of treatment\")\n\n    \n    else:\n        return(\"Error: Invalid inputs. Please try again.\")",
            "id": 118
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier) (identifier) (identifier)) body: (block (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (integer))) consequence: (block (return_statement (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) alternative: (elif_clause condition: (parenthesized_expression (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) right: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))))) consequence: (block (if_statement condition: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (identifier)) (subscript value: (identifier) subscript: (identifier)))) consequence: (block (return_statement (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) alternative: (else_clause body: (block (return_statement (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))))))) alternative: (elif_clause condition: (parenthesized_expression (binary_operator left: (binary_operator left: (parenthesized_expression (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) right: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))))) right: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end))))) right: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))))) consequence: (block (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (else_clause body: (block (return_statement (parenthesized_expression (binary_operator left: (string (string_start) (string_content) (string_end)) right: (string (string_start) (string_content) (string_end)))))))))) alternative: (else_clause body: (block (return_statement (parenthesized_expression (string (string_start) (string_content) (string_end))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 704
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_low_eye_hygiene(trust):\n    \n    print(\"Dry Run\")\n    \n    if (trust == 'Very High'):\n        return \"No Risk During Surgery.\"\n\n    elif ((trust == 'High') | (trust =='Medium')):\n        return \"Some Risks May Occur During Surgery But Precautions Can Be Taken To Minimize Them.\"\n\n    elif (trust == 'Low'):\n        return \"Serious Risks Are Possible If Proper Precautions Are Not Taken Before And During Surgery.\"\n\n    else:\n        return \"Unreliable Source Of Information. Please Provide More Credible Sources For Further Decisions.\"\n\n\nprint(\"Enter Your Level of Trust On The Website Or Person Giving Advice:\")\ntrust = input()\n\nresult = calculate_low_eye_hygiene(trust)\n\nprint(\"\\nYour calculated Low Eye Hygine Score Is:\", result)",
            "id": 121
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (parenthesized_expression (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) right: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))))) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)) (identifier)))))\n**\n",
        "text": " 6",
        "token_cnt": 474
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_low_handling(item):\n    \"\"\"\n    This function determines whether an item requires low handling based \n    on its characteristics. If the item has any electrical components, then \n    it will require high handling. Otherwise, it will depend on the value \n    of the BIAS constant (defined below).\n\n    Parameters:\n        item (str): The name of the item\n\n    Returns:\n        str: \"Low\" if the item requires low handling, otherwise returns \"High\".\n    \n    \"\"\"\n    \n    BIAS = 0.5\n\n    \n    if 'electronic' in item:\n        return 'High'\n\n    \n    elif random() < BIAS:\n        return 'Low'\n\n    else:\n        return 'High'",
            "id": 122
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (float))) (if_statement condition: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (call function: (identifier) arguments: (argument_list)) (identifier)) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 215
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import requests\nfrom bs4 import BeautifulSoup\n\n\ndef get_weather():\n    url = \"https://www.example.com\"\n\n    page = requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n\n    \n    temp = soup.find('td', attrs={'class': 'temperature'}).text\n    \n    return temp\n\n\n\nif __name__ == '__main__':\n    current_temp = get_weather()\n    print(\"Current Temperature:\",current_temp)",
            "id": 124
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))))))) attribute: (identifier)))) (return_statement (identifier)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))))))\n**\n",
        "text": " 6",
        "token_cnt": 422
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom sklearn import linear_model\n\n\ndef update_low_hygiene(input_file):\n    \n    df = pd.read_csv(input_file)\n\n    \n    x = df[['Temperature', 'pH', 'Water Activity']]\n    y = df['Low Food Hygiene']\n    \n    \n    lr = linear_model.LinearRegression()\n    lr.fit(x,y)\n\n    \n    predictions = lr.predict([[70,4,0.85]])\n\n    \n    if predictions[0] < 1:\n        return \"Food Safety Risk Acceptable\"\n    else:\n        return \"Food Safety Risk Not Acceptable\"\n\n    \n\nif __name__ == '__main__':    \n    input_file = 'data.csv'\n    result = update_low_hygiene(input_file)\n    print(\"Result:\",result)",
            "id": 126
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (list (integer) (integer) (float))))))) (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (integer)) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))))))\n**\n",
        "text": " 6",
        "token_cnt": 586
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n\ndef update_dental_hygiene(df):\n    \n    df = pd.read_csv(\"data.csv\")\n    \n    \n    poor_water_safety = df[\"Water Quality\"].mean() < 5\n\n    \n    if poor_water_safety == True:\n        print(\"No Change in Hygiene Score\")\n    else:    \n        df.loc[df['VisitDentist'] == 'Yes', \"Hygiene\"] += 10\n        \n        \n        print(\"Updated Dental Hygiene Scores:\")\n        print(df.groupby(['Safety', 'Hygiene']).size())\n        \n    return df\n    \n    \nif __name__ == '__main__':    \n    \n    df = pd.read_csv('data.csv')    \n    \n    \n    X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=0.3, random_state=42)\n    \n    \n    df = update_dental_hygiene(df)\n    \n    \n    df.to_csv(\"updated_data.csv\", index=False)",
            "id": 127
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (comparison_operator (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list)) (integer)))) (if_statement condition: (comparison_operator (identifier) (true)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (augmented_assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end))) subscript: (string (string_start) (string_content) (string_end))) right: (integer))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) attribute: (identifier)) arguments: (argument_list)))))))) (return_statement (identifier)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (pattern_list (identifier) (identifier) (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (float)) (keyword_argument name: (identifier) value: (integer)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (false))))))))\n**\n",
        "text": " 5",
        "token_cnt": 778
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_hand_hygeine(carry_wetwipe):\n    \n    total_time = 0\n    \n    if carry_wetwipe == True:\n        time1 = 5 \n        time2 = 3\n        total_time += (time1 + time2)\n        \n    else:\n        time1=4\n        total_time+=time1\n        \n\n    return round((total_time /60),2)\n\n\n\nprint(\"Total Time:\",calculate_hand_hygeine(True))\nprint(\"Total Time:\",calculate_hand_hygeine(False))",
            "id": 129
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (if_statement condition: (comparison_operator (identifier) (true)) consequence: (block (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (augmented_assignment left: (identifier) right: (parenthesized_expression (binary_operator left: (identifier) right: (identifier)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (augmented_assignment left: (identifier) right: (identifier)))))) (return_statement (call function: (identifier) arguments: (argument_list (parenthesized_expression (binary_operator left: (identifier) right: (integer))) (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (true)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (false)))))))\n**\n",
        "text": " 5",
        "token_cnt": 334
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import os \nfrom PIL import Image \n  \ndef main(): \n    \n    img_folder = \"images\" \n      \n    \n    for filename in os.listdir(img_folder): \n        filepath = os.path.join(img_folder,filename) \n          \n        try: \n            \n            im = Image.open(filepath) \n              \n            \n            if im.mode != 'RGB': \n                print(\"Image \", filename ,\"has invalid mode\",im.mode) \n                  \n                continue\n              \n            \n            im_gray = im.convert('L') \n             \n            \n            im_gray.save(os.path.splitext(filepath)[0] + \".png\",\"PNG\") \n                \n        except Exception as e: \n            print(\"Error occurred while processing image:\",e) \n            \nif __name__ == '__main__': \n    main()",
            "id": 134
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (for_statement left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))))) (continue_statement))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (subscript value: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier))) subscript: (integer)) right: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end)))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier))))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 6",
        "token_cnt": 643
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import requests\nfrom bs4 import BeautifulSoup\n\n\ndef get_weather(city):\n    \n    url = f\"https://www.weather.com/weather/today/{city}.html?layout=full&lang=en-US\"\n\n    \n    res = requests.get(url)\n    soup = BeautifulSoup(res.content, \"lxml\")\n\n    \n    temp = soup.find(\"span\", class_=\"temp\").text\n    feelslike = soup.find(\"span\", class_=\"feelsLikeTemp\").text\n    humidity = soup.find(\"span\", attrs={\"data-testid\": \"current-humidity\"}).text\n    \n    return {\n        'temperature': temp, \n        'feels_like' : feelslike,\n        'humidity' : humidity \n    }\n\n\n\nif __name__ == '__main__':\n    city = input(\"Enter your location:\")\n    weather_details = get_weather(city)\n\n    print(f\"\\nTemperature: {weather_details['temperature']}\")\n    print(f\"Feels Like: {weather_details['feels_like']}\")\n    print(f\"Humidity: {weather_details['humidity']}\\n\")",
            "id": 140
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))) attribute: (identifier)))) (expression_statement (assignment left: (identifier) right: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))) attribute: (identifier)))) (expression_statement (assignment left: (identifier) right: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))))))) attribute: (identifier)))) (return_statement (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content (escape_sequence)) (string_end))))))))\n**\n",
        "text": " 10",
        "token_cnt": 928
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def clean_ears(gender):\n    \n    if gender == 'Male':\n        print(\"Using cotton swabs and alcohol\")\n    elif gender == 'Female':\n        print(\"Using Q-tips and baby oil\")\n    else:\n        print(\"Invalid input - please enter Male or Female\")\n    \n    return \"Ears cleaned!\"\n\n\n\ndef main():\n    \n    gender = input(\"Enter your gender (Male/Female): \")\n\n    \n    result = clean_ears(gender)\n\n    \n    print(result)\n    \n\n\nmain()",
            "id": 141
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (return_statement (string (string_start) (string_content) (string_end))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))) (expression_statement (call function: (identifier) arguments: (argument_list))))\n**\n",
        "text": " 6",
        "token_cnt": 374
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def hand_wash(response):\n    \"\"\"\n    Checks eye wash hygiene by asking user how transparent they think \n    their hands were after washing them\n    \n    Args:\n        response (str): Response from user indicating transparency of \n        their washed hands\n        \n    Returns:\n        str: Suggestion for next action regarding eye health    \n    \"\"\"\n\n    \n    print(\"How transparent do you think your hands were after washing?\")\n    choices = [\"Completely see through\",\n               \"Somewhat see through\", \n               \"Not very transparent\"]\n\n    while True:    \n        choice = input(\"> \")\n        \n        \n        if choice not in choices:\n            print(\"Invalid input. Please try again.\")\n            continue    \n    \n        else: \n            break\n            \n    \n    if choices[0] == choice:\n        return f\"{user}, wearing gloves may help prevent contamination.\"\n\n    elif choices[1] == choice:\n        return f\"{user}, make sure to thoroughly clean your hands before handling food.\"\n\n    else:\n        return f\"{user}, always remember to wash your hands properly!\"",
            "id": 143
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (while_statement condition: (true) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (continue_statement)) alternative: (else_clause body: (block (break_statement)))))) (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (integer)) (identifier)) consequence: (block (return_statement (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (subscript value: (identifier) subscript: (integer)) (identifier)) consequence: (block (return_statement (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 461
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_high_hygiene(trust):\n    \"\"\"Determines whether a given trust level indicates 'High' hygiene in \n    shared spaces such as offices or public transport\n    \n    Args:\n        trust (int): A value indicating the degree of trust between individuals\n            ranging from 0 (low) to 100 (high).\n        \n    Returns:\n        str: Indicates the appropriate action required based on the provided \n            trust level. Possible values are \"wash hands\", \"sanitize\" and None.\n\n    Raises:\n        ValueError: If `trust` is not within the expected range [0, 100].\n    \"\"\"\n    \n    if trust < 0 or trust > 100:\n        raise ValueError(\"Invalid trust value\")\n\n    \n    if trust >= 85:\n        return \"wash hands\"\n    elif trust >= 70:\n        return \"sanitize\"\n    else:\n        return None",
            "id": 144
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (integer))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (none))))))))\n**\n",
        "text": " 10",
        "token_cnt": 233
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def display_extreme_hygiene(shared_utensil):\n    \n    if not isinstance(shared_utensil, str) or len(shared_utensil) == 0:\n        print(\"Invalid Input\")\n        return\n    \n    \n    possible_utensils = [\"fork\", \"spoon\"]\n\n    \n    for i in range(len(possible_utensils)):    \n        \n        curr_utensil = possible_utensils[i]\n        \n        \n        if curr_utensil == shared_utensil:\n            \n            break\n        \n    else:\n        \n        print(\"{} is not a valid option\".format(shared_utensil))\n        return    \n    \n    \n    gender = input(\"Please enter your Gender (M/F): \")   \n    \n    \n    if gender.upper() != 'M' and gender.upper() != 'F':\n        \n        print(\"Invalid Input\")\n        return  \n          \n    \n    if gender.upper() == 'M':\n        print(\"For Men, please wash your hands before handling any {}.\".format(curr_utensil))\n    elif gender.upper() == 'F':\n        print(\"For Women, please avoid touching your face after using the {}\".format(curr_utensil))\n        \nif __name__ == '__main__':\n    \n    shared_utensil = input(\"Enter the type of shared utensil:\")\n    display_extreme_hygiene(shared_utensil)",
            "id": 145
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (boolean_operator left: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) right: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (integer))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (break_statement)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))))) (return_statement)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (boolean_operator left: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) right: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement))) (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier))))))) alternative: (elif_clause condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier))))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))))\n**\n",
        "text": " 6",
        "token_cnt": 882
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_high_sentiment(tweet):\n    \"\"\"This function takes in a single tweet object and updates \n    the global variable 'highest_reliable' as follows:\n    1) If the polarity of the tweet is greater than highest_reliable, \n       set highest_reliable = polarity \n    2) Else if the reliability of the tweet is higher than\n       the current highest reliable, then update highest_reliable\"\"\"\n    \n    \n    polarity = tweet['polarity']\n    subjectivity = tweet['subjectivity']\n    source = tweet['source']\n    username = source[0]['user']['name']\n\n    \n    if (polarity > highest_reliable) & (subjectivity < 0.5):\n        print(\"Updating highest reliable positive tweet:\")\n        print(f\"Username: {username}\")\n        print(f\"Polarity: {polarity:.4f}, Subjectivity:{subjectivity:.4f}\\n\")\n        highest_reliable = polarity\n        \n    elif ((polarity == highest_reliable) & \n          (subjectivity < 0.5) &\n          (reliability(tweet) > reliabilities[-1])):\n        \n        \n        reliabilities.append(reliability(tweet))\n        indices = [i for i,r in enumerate(reliabilities) if r==max(reliabilities)]\n        maxindex=indices[0]\n\n        \n        reliabilities[maxindex]=reliability(tweet)\n        del indices[:]\n\n        \n        print(\"Updating highest reliable positive tweet:\")\n        print(f\"Username: {username}\")\n        print(f\"Polarity: {polarity:.4f}, Subjectivity:{subjectivity:.4f} \")\n        print(f\"\\nReliability Score: {reliability(tweet)}\\n\")",
            "id": 146
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (subscript value: (subscript value: (identifier) subscript: (integer)) subscript: (string (string_start) (string_content) (string_end))) subscript: (string (string_start) (string_content) (string_end))))) (if_statement condition: (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (identifier))) right: (parenthesized_expression (comparison_operator (identifier) (float)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier) format_specifier: (format_specifier)) (string_content) (interpolation expression: (identifier) format_specifier: (format_specifier)) (string_content (escape_sequence)) (string_end))))) (expression_statement (assignment left: (identifier) right: (identifier)))) alternative: (elif_clause condition: (parenthesized_expression (binary_operator left: (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (identifier))) right: (parenthesized_expression (comparison_operator (identifier) (float)))) right: (parenthesized_expression (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (subscript value: (identifier) subscript: (unary_operator argument: (integer))))))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier)))))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (identifier) (for_in_clause left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier)))) (if_clause (comparison_operator (identifier) (call function: (identifier) arguments: (argument_list (identifier)))))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (integer)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier))))) (delete_statement (subscript value: (identifier) subscript: (slice))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier) format_specifier: (format_specifier)) (string_content) (interpolation expression: (identifier) format_specifier: (format_specifier)) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (call function: (identifier) arguments: (argument_list (identifier)))) (string_content (escape_sequence)) (string_end)))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 1073
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import math\n\n\ndef calculate_bath(time):\n    \"\"\"\n    Calculates time taken by a person taking shower under normal conditions \n    (8 liters of water used every minute).\n\n    Args:\n        time (int): Time spent in shower in minutes\n    \n    Returns:\n        int: Time taken in hours\n    \"\"\"\n    return round((time / 60) * 8,2)\n\n\n\ndef calculate_handwash(time):\n    \"\"\"\n    Calculates time taken by a person washing hands properly under normal conditions \n    (45 seconds needed to effectively cleanse hands).\n\n    Args:\n        time (int): Time spent in handwashing in minutes\n    \n    Returns:\n        int: Time taken in hours\n    \"\"\"\n    return round((time / 60),1)\n\n\n\ndef calculate_shaving(time):\n    \"\"\"\n    Calculates time taken by a man shaving his face under normal conditions \n    (3 passes over each area takes approximately 2 min).\n\n    Args:\n        time (int): Time spent in shaving in minutes\n    \n    Returns:\n        int: Time taken in hours\n    \"\"\"\n    return round(((time / 60) / 3),1)\n\n\n\ndef calculate_professional_high_bath():\n    print(\"Enter total duration of professional high bath:\")\n    time = float(input())\n    \n    shower_time = calculate_bath(time)\n    handwash_time = calculate_handwash(math.floor(time*0.7))\n    shave_time = calculate_shaving(math.floor(time*0.9))\n    overall_time = sum([shower_time , handwash_time , shave_time])\n    \n    print(f\"Total time taken for Professional High Bath is {overall_time} Hours\")\n    \n    \n    \nif __name__ == '__main__':\n    calculate_professional_high_bath()",
            "id": 147
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (return_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (integer))) right: (integer)) (integer)))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (return_statement (call function: (identifier) arguments: (argument_list (parenthesized_expression (binary_operator left: (identifier) right: (integer))) (integer)))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (return_statement (call function: (identifier) arguments: (argument_list (parenthesized_expression (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (integer))) right: (integer))) (integer)))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (identifier) right: (float)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (identifier) right: (float)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list (identifier) (identifier) (identifier)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 6",
        "token_cnt": 694
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_high_nail_care(symptoms):\n    \"\"\" \n    This function takes in symptoms as input and returns whether high nail care is needed based on those symptoms\n\n    Parameters:\n        - symptoms (list[str]): A list containing strings describing the user's symptoms\n    \n    Returns: \n        - bool: Whether high nail care is recommended or not \n\n    Raises:\n        ValueError: If any element in 'symptoms' is not a string    \n\n    \"\"\"    \n    \n    symptom_severity = {    \n        \"Yellow discoloration\": 1,  \n        \"Thickened nails\": 2,   \n        \"Deformed nails\": 3,     \n        \"Nails separating from nail bed\": 4, \n        \"Pitting undernails\": 5     \n    }   \n\n    \n    for s in symptoms:    \n        if type(s) != str:\n            raise ValueError(\"All elements in 'symptoms' must be strings\")  \n        \n    \n    sorted_symptoms = sorted(set(symptoms), key=lambda x: (-symptom_severity.get(x,0), x))  \n\n    \n    if len([s for s in sorted_symptoms if s in [\"Yellow discoloration\", \"Thickened nails\"]]) >= 2:    \n        return True      \n    elif (\"Deformed\" in [s[:6] for s in sorted_symptoms]) or (\"separated\" in [s.lower() for s in sorted_symptoms]):    \n        return True       \n    else:    \n        return False",
            "id": 148
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer))))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (identifier)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))) (keyword_argument name: (identifier) value: (lambda parameters: (lambda_parameters (identifier)) body: (tuple (unary_operator argument: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (integer)))) (identifier)))))))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (list_comprehension body: (identifier) (for_in_clause left: (identifier) right: (identifier)) (if_clause (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))))) (integer)) consequence: (block (return_statement (true))) alternative: (elif_clause condition: (boolean_operator left: (parenthesized_expression (comparison_operator (string (string_start) (string_content) (string_end)) (list_comprehension body: (subscript value: (identifier) subscript: (slice (integer))) (for_in_clause left: (identifier) right: (identifier))))) right: (parenthesized_expression (comparison_operator (string (string_start) (string_content) (string_end)) (list_comprehension body: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (for_in_clause left: (identifier) right: (identifier)))))) consequence: (block (return_statement (true)))) alternative: (else_clause body: (block (return_statement (false))))))))\n**\n",
        "text": " 10",
        "token_cnt": 707
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_low_ear_hygiene(ethic):\n    \"\"\"\n    This function transforms low ear cleaning habits by recommending \n    against using q-tips for cleaning ears.\n\n    Args:\n        ethic (str): The user's selected level of ethical consideration\n            ('Utilitarian', 'Kantian', or 'Deontological')\n\n    Returns:\n        str: A recommendation message based on the specified ethical \n            framework\n\n    Raises:\n        ValueError: If `ethic` is not one of the accepted values ('Utilitarian', \n            'Kantian', or 'Deontological').\n        \n    \"\"\"\n    \n    \n    utilitarian_msg = \"It may be best to avoid promoting unhealthy practices\"\n    kantian_msg = (\"Q-tip use can cause significant damage to the delicate \"\n                   \"structures of the ear\")\n    deontological_msg = \"Using objects like q-tips can violate our duty as \" \\\n                        \"healthcare professionals to do no harm.\"\n\n    \n    if ethic not in ['Utilitarian', 'Kantians', 'Deontological']:\n        raise ValueError(\"Invalid ethic value provided.\")\n\n    \n    if ethic == 'Utilitarian':\n        return utilitarian_msg\n    elif ethic == 'Kantian':\n        return kantian_msg\n    else:\n        return deontological_msg\n\n\n\nprint(transform_low_ear_hygiene('Utilitarian'))   \nprint(transform_low_ear_hygiene('Kantian'))       \nprint(transform_low_ear_hygiene('Deontological'))",
            "id": 151
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (parenthesized_expression (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (identifier))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (identifier)))) alternative: (else_clause body: (block (return_statement (identifier))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " The cyclomatic complexity of the given AST can be calculated by identifying the number of linear",
        "token_cnt": 556
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def protect_eyes(condition):\n    \"\"\"Update extreme eye protection based on given condition.\"\"\"\n\n    \n    conditions = {\n        \"working-from-home\": (\"Wear safety glasses\", \"Use anti-fatigue eyewear\"),\n        \"traveling-by-aircraft\": (\n            \"Wash hands before putting contact lenses in\", \n            \"Avoid touching eyes, nose, and mouth\"\n        ),\n        \"outdoor-work\": (\n            \"Wear wraparound sunglasses\", \n            \"Use dust mask when working with wood or other dusty materials\"\n        )\n    }\n    \n    \n    if condition in conditions:\n        action1, action2 = conditions[condition]\n        \n        print(\"Action 1:\", action1)\n        print(\"Action 2:\", action2)\n        \n    else:\n        print(\"Invalid Condition\")\n        \nprotect_eyes(\"working-from-home\")\n\n\n\nprotect_eyes(\"traveling-by-airplane\")\n\n\n\nprotect_eyes(\"office-work\")",
            "id": 152
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (tuple (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (tuple (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (tuple (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (assignment left: (pattern_list (identifier) (identifier)) right: (subscript value: (identifier) subscript: (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))\n**\n",
        "text": " 6",
        "token_cnt": 528
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_extreme_fitness(df):\n    \"\"\"\n    This function takes in a pandas dataframe containing \n    raw sensor measurements from the Apple Watch Series 7 and transforms them into steps taken by the user during their workout.\n    \n    Parameters:\n        df (pandas DataFrame): A dataframe containing columns 'timestamp', 'heartRate', 'cadence', and 'distance'.\n        \n    Returns:\n        transformed_data (pandas DataFrame): A dataframe containing the same columns as input but with additional columns indicating whether each row represents a step up or down ('step') and the total number of steps taken ('total_steps').\n        \n    Raises:\n        ValueError: If any column other than those specified above is present in the input dataframe.\n            \n    Notes:\n        - The algorithm used here assumes that there will always be at least one value in the heart rate, cadence, and distance columns after every timestamp where all three values are NaN. This assumption may not hold true for all datasets so care should be taken when applying this transformation to new data.\n        \n        - In order to determine whether a given row represents a step up or down, we use the following logic:\n            * If the previous row has a non-NaN value for either heart rate, cadence, or distance AND the current row has a NaN value for all three, then we assume that the user took a step down.\n            * Otherwise, if the previous row has a NaN value for both heart rate and cadence and the current row has a non-NaN value for distance, then we assume that the user took a step up.\n            \n            Note that this approach may result in incorrect classifications in cases where the user transitions between walking and running quickly. However, since our goal here is simply to provide a basic illustrative example, this potential shortcoming can be ignored.\n            \n        - We also calculate the total number of steps taken by summing together all rows where the step field is equal to 1. This provides us with a convenient way to measure overall progress without having to worry about missing values.\n    \"\"\"\n\n    \n    valid_cols = ['timestamp', 'heartRate', 'cadence', 'distance']\n    for col in df.columns:\n        if col not in valid_cols:\n            raise ValueError(f\"{col} is not a valid column name. Valid column names are {valid_cols}.\")\n    \n    \n    transformed_data = df.copy()\n    \n    \n    prev_row = None\n    for index, row in transformed_data.iterrows():\n        if pd.isna(row['heartRate']) and pd.isna(row['cadence']) and pd.notna(row['distance']):\n            \n            transformed_data.at[index, 'step'] = 1\n        elif pd.notna(prev_row['heartRate']) and pd.isna(prev_row['cadence']) and pd.notna(row['distance']):\n            \n            transformed_data.at[index, 'step'] = -1\n        else:\n            \n            transformed_data.at[index, 'step'] = 0\n        \n        \n        prev_row = row\n    \n    \n    transformed_data['total_steps'] = transformed_data.groupby(['user']).cumsum()['step'].astype('int64')\n    \n    return transformed_data",
            "id": 154
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (for_statement left: (identifier) right: (attribute object: (identifier) attribute: (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (none))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) body: (block (if_statement condition: (boolean_operator left: (boolean_operator left: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) consequence: (block (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (integer)))) alternative: (elif_clause condition: (boolean_operator left: (boolean_operator left: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) consequence: (block (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (unary_operator argument: (integer)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (integer)))))) (expression_statement (assignment left: (identifier) right: (identifier))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (subscript value: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (string (string_start) (string_content) (string_end))))) attribute: (identifier)) arguments: (argument_list)) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (return_statement (identifier)))))\n**\n",
        "text": " 10",
        "token_cnt": 1083
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_low_bathing_routine(data):\n    \n    MIXING_RATIO = .5\n    \n    def dry_off():\n        return \"Dried off completely\"\n\n    def mix_with_air():\n        return f\"{MIXING_RATIO} parts air mixed with {1 - MIXING_RATIO} part water\"\n\n    def shake_vigorously():\n        return \"Shook vigorously for at least 30 seconds\"\n\n    def analyze(result):\n        print(\"Analyzing results...\")\n        if result == 'clear':\n            return \"Bacteria not detected!\"\n        else: \n            return \"Bacteria detected! Please repeat steps.\"\n        \n    \n    dry_step = dry_off()\n    mixing_step = mix_with_air()\n    shaking_step = shake_vigorously()\n    analysis_results = analyze(dry_step + mixing_step + shaking_step)\n    \n    \n    return dry_step + \"\\n\\n\" + mixing_step + \"\\n\\n\" + shaking_step + \"\\n\\n\" + analysis_results\n\n\n\ntest_data = [\"Clear\", \"Murky\"]\nprint(transform_low_bathing_routine(test_data))",
            "id": 155
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (float))) (function_definition name: (identifier) parameters: (parameters) body: (block (return_statement (string (string_start) (string_content) (string_end))))) (function_definition name: (identifier) parameters: (parameters) body: (block (return_statement (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (binary_operator left: (integer) right: (identifier))) (string_content) (string_end))))) (function_definition name: (identifier) parameters: (parameters) body: (block (return_statement (string (string_start) (string_content) (string_end))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (binary_operator left: (identifier) right: (identifier)) right: (identifier)))))) (return_statement (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (identifier) right: (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))) right: (identifier)) right: (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))) right: (identifier)) right: (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))) right: (identifier))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier)))))))\n**\n",
        "text": " 6",
        "token_cnt": 710
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_hygiene(trust):\n    \"\"\"Determine high hygiene level based on trust score.\"\"\"\n\n    \n    LOW = \"Low\"\n    MEDIUM = \"Medium\"\n    HIGH = \"High\"\n    \n    \n    result = LOW\n\n    \n    if trust >= 70:\n        \n        if visit_follows_rules():\n            \n            result = MEDIUM\n        else:\n            \n            result = HIGH\n\n    return result\n\n\n\ndef visit_follows_rules():\n    \"\"\"Simulate deciding whether visitor follows hygiene rules\"\"\"\n\n    \n    import random\n    return random.randint(0,1) == 1",
            "id": 159
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (identifier))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (if_statement condition: (call function: (identifier) arguments: (argument_list)) consequence: (block (expression_statement (assignment left: (identifier) right: (identifier)))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (identifier)))))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (import_statement name: (dotted_name (identifier))) (return_statement (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer))) (integer))))))\n**\n",
        "text": " 6",
        "token_cnt": 353
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import requests \nfrom datetime import datetime \n\n\n\nAPI_KEY = 'your_api_key'\n\ndef get_current_weather(city):\n    \"\"\"Get current weather information.\"\"\"\n\n    url = f\"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}\"\n    \n    response = requests.get(url)\n    data = response.json()\n\n    return data\n\n\ndef check_humidity(temperature, humidity):\n    \"\"\"Check whether humidity level is high.\"\"\"\n\n    if temperature < 0 or temperature > 45:\n        message = (\n            \"It looks like working outdoors might not be ideal today due to cold \"\n            + f\"temperatures ({temperature}°F). Consider adjusting plans accordingly.\"\n        )\n\n        return True, message\n\n    elif humidity >= 70:\n        message = (\n            \"The relative humidity seems quite high today! It may feel uncomfortable outside especially during physical activity.\\n\\n\"\n            + \"Try staying hydrated by drinking plenty of water and wearing light clothing made from breathable materials such as cotton.\"\n        )\n        \n        return True, message\n\n    else:\n        return False, None\n\n\n\nif __name__ == \"__main__\":\n    city = input(\"Enter a city name: \")\n\n    data = get_current_weather(city)\n\n    temp = round(float(data[\"main\"][\"temp\"]),1)\n    humid = float(data[\"main\"][\"humidity\"])\n\n    print(f\"\\nCurrent Temperature in {city}: {temp} °C\")\n    print(f\"Current Relative Humidity: {humid}%\")\n\n    result, message = check_humidity(temp, humid)\n\n    if message:\n        print(\"\\nWARNING:\")\n        print(message)",
            "id": 162
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (integer))) consequence: (block (expression_statement (assignment left: (identifier) right: (parenthesized_expression (binary_operator left: (string (string_start) (string_content) (string_end)) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))))) (return_statement (expression_list (true) (identifier)))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (parenthesized_expression (binary_operator left: (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)) right: (string (string_start) (string_content) (string_end)))))) (return_statement (expression_list (true) (identifier))))) alternative: (else_clause body: (block (return_statement (expression_list (false) (none)))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (string (string_start) (string_content) (string_end))))) (integer))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))) (expression_statement (assignment left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (if_statement condition: (identifier) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))))))\n**\n",
        "text": " 4",
        "token_cnt": 1095
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_extreme_finance(df):\n    \"\"\"\n    This function takes in a pandas dataframe containing extreme finance \n    data and transforms it into a more usable format\n    \n    Parameters:\n        df (pandas DataFrame): The input dataframe containing \n            extreme finance data\n        \n    Returns:\n        transformed_data (pandas DataFrame): A transformed version\n            of the original dataframe with additional columns added\n            \n    Raises:\n        ValueError: If the input dataframe does not contain the required \n            columns\n        \n    \"\"\"\n    \n    \n    required_columns = ['Date', 'Open', 'High', 'Low', 'Close', 'Volume']\n    missing_cols = [c for c in required_columns if c not in df]\n    if len(missing_cols) > 0:\n        raise ValueError(f\"The following columns are missing from the \"\n                         f\"input dataframe: {', '.join(missing_cols)}\")\n        \n\n    \n    df['Returns'] = df['Close'].pct_change()\n    \n    \n    def get_direction(x):\n        if x['Close'] >= x['Open']:\n            return 1\n        else:\n            return -1\n    \n    \n    df['Direction'] = df.apply(get_direction, axis=1)\n    \n    \n    grouped = df.groupby('Date')['Returns', 'Direction'].sum()\n    \n    \n    avg_return = grouped['Returns'].mean().reset_index()\n    \n    \n    merged = pd.merge(grouped, avg_return, how='left', on='Date')\n    \n    \n    \n    merged['Bias'] = merged['Up Return'] - merged['Down Return']\n    \n    \n    dropped =merged.drop(['Up Return', 'Down Return'],axis=1)\n    \n    \n    sorted_df = dropped.sort_values('Date').reset_index(drop=True)\n    \n    \n    return sorted_df",
            "id": 165
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (identifier) (for_in_clause left: (identifier) right: (identifier)) (if_clause (comparison_operator (identifier) (identifier)))))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (integer)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (interpolation expression: (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))) (string_end)))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list)))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (integer))) alternative: (else_clause body: (block (return_statement (unary_operator argument: (integer)))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (integer)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (subscript value: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) subscript: (string (string_start) (string_content) (string_end)) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (binary_operator left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (integer)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (true)))))) (return_statement (identifier)))))\n**\n",
        "text": " 4",
        "token_cnt": 1243
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import math\n\ndef calculate_simple_interest(P, r, n):\n    \"\"\"\n    Calculates the simple interst P paid after n periods at an APR of r%\n\n    Args:\n        P (float): Principal amount borrowed\n        r (float): Annual Percentage Rate as decimal\n        n (int): Number of payment perios\n\n    Returns:\n        float: Total interest owing \n    \"\"\"\n    \n    \n    monthy_rate = r / 1200 \n\n    \n    intrest = P * r * n / 100\n\n    return intrest\n\n\nif __name__ == '__main__':\n    print(\"Simple Interest Calculator\")\n    print()\n\n    while True:\n        try:\n            P = float(input(\"Enter the principal amount: \"))\n            break\n        except ValueError:\n            print(\"Invalid input! Please enter a valid floating point value.\")\n\n    while True:    \n        try:    \n            r = float(input(\"Enter the annual percentage rate as a decimal: \"))\n            break\n        except ValueError:\n            print(\"Invalid input! Please enter a valid decimal value.\")\n\n    while True:    \n        try:    \n            n = int(input(\"Enter the number of payments: \"))\n            break\n        except ValueError:\n            print(\"Invalid input! Please enter a whole integer value.\")\n\n\n    \n    intrest = calculate_simple_interest(P,r,n)\n\n    \n    print(f\"The total interest owing is ${intrest:.2f}.\")",
            "id": 167
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (integer)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (identifier) right: (identifier)) right: (identifier)) right: (integer)))) (return_statement (identifier)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list))) (while_statement condition: (true) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (break_statement)) (except_clause (identifier) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (while_statement condition: (true) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (break_statement)) (except_clause (identifier) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (while_statement condition: (true) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (break_statement)) (except_clause (identifier) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier) format_specifier: (format_specifier)) (string_content) (string_end))))))))\n**\n",
        "text": " 6",
        "token_cnt": 731
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def display_extreme_clothing_cleanliness(trust):\n    \"\"\"Displays extreme clothing cleanliness levels based on trust level\n    \n    Args:\n        trust (int): A value between 0 and 100 indicating the user's confidence in \n            the accuracy of the information provided\n        \n    Returns:\n        str: The appropriate message regarding the clothing cleanliness level \n    \"\"\"    \n    \n    low = 0\n    medium = 50\n    high = 90\n\n    \n    if trust >= high:\n        return \"Extremely Clean! No risk of odor or mildew.\"\n    elif trust < high and trust >= medium:\n        return \"Clean but watch out for potential odors and mildew\"\n    else: \n        return \"Somewhat Dirty - take extra precautions against odor and mildew\"\n    \n\nuser_input = int(input(\"Please enter a number from 0 to 100 representing how confident you are in the information: \"))\nmessage = display_extreme_clothing_cleanliness(user_input)\nprint(message)",
            "id": 168
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (identifier)) right: (comparison_operator (identifier) (identifier))) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))\n**\n",
        "text": " 6",
        "token_cnt": 352
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_high_hand_hygiene(outside_home):\n    \"\"\"Update high hand hygiene based on whether someone was touching their face.\"\"\"\n\n    \n    if outside_home:\n        \n        did_touch = input(\"Did anyone come into close contact (within 6 feet) with anybody who has symptoms of COVID-19? [y/n]\")\n\n        \n        if did_touch == \"y\":\n            print(\"High risk activity detected! Washing hands immediately.\")\n            return True\n        elif did_touch == \"n\":\n            print(\"No high risk activities were performed today\")\n            return False\n        else:\n            print(\"Invalid entry. Please enter y or n only\")\n            return None\n    \n    \n    print(\"Washing hands is not necessary since there was no exposure to coronavirus outside the home \")\n    return False",
            "id": 172
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (true))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (false)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (none))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (false)))))\n**\n",
        "text": " 10",
        "token_cnt": 363
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "tongue_cleanliness = int(input(\"Enter your tongue cleanliness from 1 (worst) to 5 (best): \"))\nage = float(input(\"Enter age of patient: \"))\ngender = input(\"Enter gender [M/F]: \")\nsmoker = input(\"Is patient smokes? [Y/N]\")\nalcohol = input(\"Does patient consume alchohal regularly? [Y/N]\")\n\n\ndef calculate_ldh():\n    \n    if tongue_cleanliness <=2:\n        return \"High\"\n    elif tongue_cleanliness ==3:\n        return \"Moderate\"\n    else: \n        return \"Low\"\n    \ndef decision_making(score):\n    \n    if score == 'High':\n        print(\"Recommend professional teeth scaling\")\n        \n    elif score=='Moderate'and age>=60:\n        print(\"Monitor for any signs of oral cancer\")\n\n    elif score=='Moderate'and age<60:    \n        print(\"Recommend improved brushing habits\")    \n\n    elif score=='Low'and gender=='M'and smoker=='Yes'and alcohol=='No':\n        print(\"Assess risk of oral cancer\")   \n\n    elif score=='Low'and gender=='M'and smoker=='Yes'and alcohol=='Yes':\n        print(\"Consider quitting smoking & reducing alchol consumption\") \n\n    elif score=='Low'and gender=='F'and smoker=='Yes'or alcohol=='Yes':\n        print(\"Encourage increased daily flossing\")     \n\n    else:\n        print(\"Continue monitoring at home\")   \n\n\nprint(\"Your LHD score:\",calculate_ldh())\n\n\ndecision_making(calculate_ldh())",
            "id": 173
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (function_definition name: (identifier) parameters: (parameters) body: (block (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (integer))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (integer))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (elif_clause condition: (boolean_operator left: (boolean_operator left: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (elif_clause condition: (boolean_operator left: (boolean_operator left: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (elif_clause condition: (boolean_operator left: (boolean_operator left: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 10",
        "token_cnt": 1318
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def sanitize_items(bias):\n    \n    dirty_items = [\"cell phone\", \"car keys\"]\n    clean_items = []\n\n    \n    for i in range(len(dirty_items)):\n        current_item = dirty_items[i]\n\n        \n        if (bias == 'pessimistic'):\n            if random.random() < .85:\n                clean_items.append(current_item)\n        elif (bias == 'optimistic'): \n            if random.random() > .15: \n                clean_items.append(current_item)\n        else:\n            print(\"Invalid value entered for `bias`. Please enter either `'pessimistic'` or `'optimistic'`.\")\n    \n    return clean_items\n\n\nwhile True:\n    try:\n        bias = input(\"\\nPlease enter your chosen degree of risk tolerance ('pessimistic', 'optimistic', or any other value to exit):\\t\")\n        break\n    except ValueError:\n        continue\n\nif bias != '':\n    sanitized_list = sanitize_items(bias)\n\n    \n    print(\"\\nThe following \", end='')\n    if len(sanitized_list) == 1:\n        print(\"item was\", end=' ')\n    else:\n        print(\"items were\", end=' ')\n    print(\"determined to need cleaning:\")\n    for i in range(len(sanitized_list)):\n        print(\"* {}\".format(sanitized_list[i]))\nelse:\n    print(\"Exiting program.\")",
            "id": 177
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))) (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (float)) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))))) alternative: (elif_clause condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (float)) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (return_statement (identifier)))) (while_statement condition: (true) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)))))) (break_statement)) (except_clause (identifier) (block (continue_statement)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_end)))))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (identifier)))))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 4",
        "token_cnt": 1039
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom datetime import date\n\n\ndf = pd.read_csv('high_regular_health_checkups.csv')\n\n\noutput_columns = [\n    'patientID', \n    'gender', \n    'age', \n    'height', \n    'weight', \n    'smoker', \n    'alcoholism', \n    'diabetes', \n    'hypertension'\n]\n\ndef get_date(row):\n    \n    return row['Visit Date'].split()[0]\n\n\nnew_df = df[output_columns].copy()\n\n\nnew_df['visitDate'] = df.apply(get_date, axis=1)\n\n\ngrouped_df = new_df.groupby(['patientID', 'visitDate']).agg({\n    colname: 'first' for colname in ['gender', 'age', 'height', 'weight', 'smoker', 'alcoholism', 'diabetes', 'hypertension']\n})\n\n\nsorted_df = grouped_df.reset_index().sort_values(['patientID', 'visitDate'])\n\n\nsorted_df.to_csv('transformed_data.csv', index=False)",
            "id": 178
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (return_statement (subscript value: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list)) subscript: (integer))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (subscript value: (identifier) subscript: (identifier)) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (integer)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) attribute: (identifier)) arguments: (argument_list (dictionary_comprehension body: (pair key: (identifier) value: (string (string_start) (string_content) (string_end))) (for_in_clause left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (false))))))\n**\n",
        "text": " 6",
        "token_cnt": 931
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd \n\n\ndf = pd.read_csv(\"user_data.csv\") \n \ndef determineExtremeSocialMedia(row): \n    \n    extreme_platforms = [\"TikTok\", \"Instagram\"] \n      \n    \n    for platform in row[\"social_media\"].split(\",\"): \n        if platform in extreme_platforms: \n            return True \n          \n    \n    return False \n  \n\ndf['extreme_sm'] = df.apply(determineExtremeSocialMedia, axis=1) \n  \n\nprint(df.head())",
            "id": 179
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (for_statement left: (identifier) right: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) body: (block (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (true)))))) (return_statement (false)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))))\n**\n",
        "text": " 6",
        "token_cnt": 396
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def display_high_hygiene(shared_utensil):\n        \"\"\"Displays high hygiene messages related to proper use of shared utensils and equipment.\"\"\"\n    \n        \n        if shared_utensil == \"fork\":\n            print(\"Using a fork properly involves cleaning it after each use by rinsing it under running water.\")\n        \n        elif shared_utensil == \"spoon\":\n            print(\"Using a spoon properly involves washing it thoroughly before first use and then cleaning it after each use.\")\n\n        else:\n            print(\"Invalid input\")\n    \n    \n    shared_utensil = input(\"Enter the name of the shared utensil:\") \n    display_high_hygiene(shared_utensil)",
            "id": 180
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))\n**\n",
        "text": " 10",
        "token_cnt": 307
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_high_footcare(bias):\n    \"\"\"Updates the 'High Foot Care - Moisturizing Feet For Engineers' \n    article given user feedback through the bias parameter.\"\"\"\n\n    \n    biases = {\n        \"unsure\": \"No changes required.\",\n        \"favorable\": \"Add more information about how socks can help prevent athlete’s foot.\",\n        \"negative\": \"Remove reference to wearing shoes inside as this may cause confusion.\"\n    }\n    \n    \n    if bias not in biases:\n        return f\"Invalid input '{bias}'. Please specify one of {list(biases.keys())}.\"\n    \n    \n    return biases[bias]",
            "id": 182
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (string_content) (string_end))))) (return_statement (subscript value: (identifier) subscript: (identifier))))))\n**\n",
        "text": " 10",
        "token_cnt": 312
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_high_travel(transparency):\n    \"\"\"\n    Calculates the probability of getting bumped from a flight based \n    on transparency score provided by passenger\n\n    Args:\n        transparency (float): Passenger's level of satisfaction with airline service quality\n    \n    Returns:\n        float: Probability of being bumped from a flight as a percentage value between [0,1]\n    \"\"\"\n    \n    if transparency >= 80:\n        return round((3 * math.exp(-0.25 * transparency)) - (6 * math.exp(-0.75 * transparency)), 4)\n    else:\n        return \"Invalid input\"",
            "id": 185
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (parenthesized_expression (binary_operator left: (integer) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (unary_operator argument: (float)) right: (identifier)))))) right: (parenthesized_expression (binary_operator left: (integer) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (unary_operator argument: (float)) right: (identifier))))))) (integer))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 10",
        "token_cnt": 257
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_high_flossing(age, gender):\n    \"\"\" \n    Calculates the optimal time spent flossing based on age and gender\n    \n    Args:\n        age (int): Age of patient\n        gender (str): Gender of patient ('male' or 'female')\n        \n    Returns:\n        int: Time in minutes recommended for high flossing frequency\n            \n    Raises:\n        ValueError: If `gender` is not one of {'male', 'female'}\n    \"\"\"    \n    \n    if gender not in ['male', 'female']:\n        raise ValueError(\"Invalid value for argument 'gender'\")    \n\n    \n    if age <= 30:    \n        min_time = 2      \n    elif age > 30 and age < 45:    \n        min_time = 1       \n    else:    \n        min_time = .75    \n        \n     \n    if gender == \"male\":    \n        mult = 1.25   \n    else:    \n        mult = 1.35        \n         \n    return round((min_time * mult), ndigits=0)",
            "id": 186
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (integer)))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (integer))) consequence: (block (expression_statement (assignment left: (identifier) right: (integer))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (float)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (float)))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (float)))))) (return_statement (call function: (identifier) arguments: (argument_list (parenthesized_expression (binary_operator left: (identifier) right: (identifier))) (keyword_argument name: (identifier) value: (integer))))))))\n**\n",
        "text": " 10",
        "token_cnt": 404
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_high_temperature(analysis):\n    \"\"\"This function takes input from expert analysts about weather \n    patterns and updates the current highest recorded tempertaure\n    \n    Args:\n        analysis (str): The latest analysis provided by experts regarding \n        changes in climate trends and their impact on future weather\n        \n    Returns:\n        str: A message indicating whether the new maximum was set or not alongwith updated max temperatue value\"\"\"\n\n    \n    if \"No major changes\" in analysis:\n        return f\"Expert analysis shows no change in weather patterns. Maximum temperature remains at {current_max}°C.\"\n\n    \n    elif \"Some minor changes\" in analysis:\n        \n        if int(new_temp) > current_max:\n            \n            current_max = int(new_temp)\n            \n            return f\"New maximum temperature set to {current_max}°C due to moderate changes in weather patters.\"\n\n        else:\n            \n            return f\"Cannot accept new minimum temperature ({int(new_temp)}°C), as it is less than the existing maximum ({current_max}°C).\"\n\n    \n    else:\n        \n        if int(new_temp) > current_max:\n            \n            current_max = int(new_temp)\n            \n            return f\"New maximum temperature set to {current_max}°C due to severe changes in weather patters.\"\n        \n        else:\n            \n            return f\"Cannot accept new minimum temperature ({int(new_temp)}°C), as it is less than the existing maximum ({current_max}°C). Severe changes in wether patterns detected.\"",
            "id": 187
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) consequence: (block (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) consequence: (block (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (interpolation expression: (call function: (identifier) arguments: (argument_list (identifier)))) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))))))) alternative: (else_clause body: (block (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (interpolation expression: (call function: (identifier) arguments: (argument_list (identifier)))) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 519
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_high_fitness(privacy):\n    \"\"\" \n    This function determines whether the user has high fitness level based on their privacy preference\n    \n    Args:\n        privacy (str) - The privacy preference of the user\n        \n    Returns:\n        bool - Whether the user has high fitness level or not based on their provided privacy preference    \n    \"\"\"    \n\n    \n    min_step_count = {    \n        \"public\": 10000, \n        \"private\": 5000, \n        \"fitbit\": 2500      \n    }   \n    \n    \n    if privacy in min_step_count:    \n        return True if steps >= min_step_count[privacy] else False     \n    else:    \n        raise ValueError(\"Invalid privacy preference\")",
            "id": 188
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (conditional_expression (true) (comparison_operator (identifier) (subscript value: (identifier) subscript: (identifier))) (false)))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))\n**\n",
        "text": " 7",
        "token_cnt": 251
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calc_low_ear_hygiene(trust):\n    \n    score = 0\n    \n    \n    if \"wax\" in trust and trust[\"wax\"] == False:\n        score +=1    \n        \n    if \"otc drops\" in trust and trust[\"otc drops\"] == True:\n        score -=2   \n\n    elif \"professional cleaning\" in trust and trust[\"professional cleaning\"] ==True:\n        score+=3     \n\n    else:\n        pass        \n\n    return score\n\n\n\nif __name__ == '__main__':\n    sample_data = {\n        'wax':False, \n        'otc drops':True,    \n        'professional cleaning':True}\n\n    print(\"Low ear hygiene score:\",calc_low_ear_hygiene(sample_data))",
            "id": 190
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (if_statement condition: (boolean_operator left: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) right: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (false))) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (integer))))) (if_statement condition: (boolean_operator left: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) right: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (true))) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (integer)))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) right: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (true))) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (integer))))) alternative: (else_clause body: (block (pass_statement)))) (return_statement (identifier)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (false)) (pair key: (string (string_start) (string_content) (string_end)) value: (true)) (pair key: (string (string_start) (string_content) (string_end)) value: (true))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (identifier)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 557
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import os\nfrom pathlib import Path\nimport pandas as pd\n\n\ndata_path = Path(\"data\")\ndf = pd.read_csv(os.path.join(data_path, \"toilet_cleaning.csv\"))\n\ndef analyze_toilet_odor(row):\n    \"\"\"\n    Analyze toilet odor of given row\n    \n    Parameters\n    ----------\n    row : Pandas Series\n        A single row containing toilet cleaning information\n        \n    Returns\n    -------\n    str\n        Summary of analysis results\n    \"\"\"\n\n    \n    low_odor_conditions = (\n        (row[\"Urine removed\"] == True) & \n        (row[\"Wet wipes used\"] == False) & \n        (row[\"Bowl cleaned\"]) \n    )\n    moderate_odor_condition = (\n        ~low_odor_conditions & \n        (row[\"Air freshener used\"] == True) \n    )\n    severe_odor_condition = (\n        ~moderate_odor_condition & \n        (\n            (row[\"Urine diverted\"] != True) | \n            (row[\"Septic system installed\"] == True)\n        )\n    )\n\n    \n    if low_odor_conditions:\n        return \"Low odor\"\n    elif moderate_odor_condition:\n        return \"Moderate odor\"\n    else:\n        return \"Severe odor\"\n    \n\ndf[\"Odor Level\"] = df.apply(analyze_toilet_odor, axis=\"columns\")\n\n\nprint(f\"\"\"Overall, {round((len(df[df['Odor Level'] == 'Low odor']) / len(df)) * 100, 2)}% of toilets had low odor, while \n {round((len(df[(df['Odor Level'] == 'Moderate odor']) / len(df))) * 100, 2)}% had moderate odor, \n  and {round(((len(df[df['Odor Level'] == 'Severe odor']) / len(df))))}% were considered severely unhygienic.\"\"\")",
            "id": 191
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (parenthesized_expression (binary_operator left: (binary_operator left: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (true))) right: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (false)))) right: (parenthesized_expression (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (parenthesized_expression (binary_operator left: (unary_operator argument: (identifier)) right: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (true))))))) (expression_statement (assignment left: (identifier) right: (parenthesized_expression (binary_operator left: (unary_operator argument: (identifier)) right: (parenthesized_expression (binary_operator left: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (true))) right: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (true))))))))) (if_statement condition: (identifier) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (identifier) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (call function: (identifier) arguments: (argument_list (binary_operator left: (parenthesized_expression (binary_operator left: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end)))))) right: (call function: (identifier) arguments: (argument_list (identifier))))) right: (integer)) (integer)))) (string_content) (interpolation expression: (expression_list (binary_operator left: (call function: (identifier) arguments: (argument_list (parenthesized_expression (binary_operator left: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end))) (MISSING \")\"))))) right: (call function: (identifier) arguments: (argument_list (identifier))))))) right: (integer)) (integer)) (ERROR)) (string_content) (interpolation expression: (call function: (identifier) arguments: (argument_list (parenthesized_expression (parenthesized_expression (binary_operator left: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end)))))) right: (call function: (identifier) arguments: (argument_list (identifier))))))))) (string_content) (string_end))))))\n**\n",
        "text": " 11",
        "token_cnt": 1304
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_weather(city):\n    url = f\"https://www.google.com/search?q={city}+weather\"\n    page = requests.get(url)\n\n    soup = BeautifulSoup(page.content, \"html.parser\")\n    \n    \n    tables = soup.find(\"table\", class_=\"wob_tbl\").parent\n    \n    \n    temperature = [tr.text.split()[-2] for tr in tables[\"rows\"]][1::3]\n    humidity = [tr.text.split()[0].replace(\"%\",\"\") for tr in tables[\"rows\"][1::3]]\n    pressure = [tr.text.strip().split(\":\")[1] for tr in tables[\"rows\"][2::3]]\n    description = [tr.text.strip() for tr in tables[\"rows\"][3::3]]\n    \n    return {\n        'temperature': temperature, \n        'humidity': humidity, \n        'pressure': pressure,\n        'description': description\n    }\n\n\nif __name__ == '__main__':\n    city = input(\"Enter name of the City:\")\n    weather_data = get_weather(city)\n\n    print(\"\\nCurrent Conditions:\\n\")\n    for i in range(len(weather_data['temperature'])):\n        print(f\"{weather_data['description'][i]}: Temperature - {weather_data['temperature'][i]}, Humidity - {weather_data['humidity'][i]}%, Pressure - {weather_data['pressure'][i]} hPa\\n\")",
            "id": 193
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))) attribute: (identifier)))) (expression_statement (assignment left: (identifier) right: (subscript value: (list_comprehension body: (subscript value: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) subscript: (unary_operator argument: (integer))) (for_in_clause left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) subscript: (slice (integer) (integer))))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (call function: (attribute object: (subscript value: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) subscript: (integer)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_end)))) (for_in_clause left: (identifier) right: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (slice (integer) (integer))))))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (subscript value: (call function: (attribute object: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) subscript: (integer)) (for_in_clause left: (identifier) right: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (slice (integer) (integer))))))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) (for_in_clause left: (identifier) right: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (slice (integer) (integer))))))) (return_statement (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (identifier))) (string_content) (interpolation expression: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (identifier))) (string_content) (interpolation expression: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (identifier))) (string_content) (interpolation expression: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (identifier))) (string_content (escape_sequence)) (string_end))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 1457
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calc_low_ear_hygiene(age, gender):\n    \"\"\"This function calculates the cost of \n    professional help seeking for engineer regarding low ear hygiene problem.\"\"\"\n\n    \n    total_cost = 0\n    \n    \n    if age >=18 :\n        print(\"Age is Valid\")\n        \n        \n        if (gender == \"Male\"):\n            total_cost +=250\n        elif (gender == \"Female\"): \n            total_cost+=350\n        else:\n            print(\"Invalid Input\")\n            \n    else: \n        print(\"Please provide correct Age\")\n        \n    return total_cost\n\n\n\nif __name__ == '__main__':    \n    try:\n        age=int(input(\"Enter Your Age:\"))\n        gender=input(\"Enter Your Gender [Male/Female]: \")\n    \n        \n        result =calc_low_ear_hygiene(age, gender)\n    \n        \n        print(\"\\nTotal Cost Of Services:\",result)\n    \n    except ValueError as err:\n        print(\"Error Occured\",err)",
            "id": 195
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (integer))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (integer)))) alternative: (elif_clause condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (integer))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (return_statement (identifier)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)) (identifier))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier))))))))))\n**\n",
        "text": " 10",
        "token_cnt": 641
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def display_low_transport(df):\n    \"\"\"Displays low transport services based on analysis by experts.\"\"\"\n\n    \n    agg = df.groupby(\"service_type\").agg({\"fare_amount\": \"mean\"}).reset_index()\n\n    \n    sorted_services = agg.sort_values(\"fare_amount\", ascending=False)[:2]\n\n    \n    print(\"Lowest Average Fares by Service Type:\")\n    print(sorted_services)\n    \n    return None",
            "id": 197
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))))) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (subscript value: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (false)))) subscript: (slice (integer))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (return_statement (none)))))\n**\n",
        "text": " 6",
        "token_cnt": 330
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_highfinance(trust):\n    \"\"\"Transform raw high finance dataset into useable form\n    \n    Args:\n        trust (int): User specified trust value from 1 - 5\n        \n    Returns:\n        dict: Transformed dataset\n    \n    Raises:\n        ValueError: If invalid `trust` value is passed\n    \"\"\"    \n    \n    transformed = {}\n\n    \n    if not isinstance(trust, int) or trust < 1 or trust > 5:\n        raise ValueError(\"Invalid 'trust' value\")    \n\n    \n    if trust == 1:    \n        pass   \n    elif trust == 2:    \n        pass   \n    elif trust == 3:    \n        pass   // Apply advanced transformations for high trust values\n    elif trust == 4:    \n        pass    \n    elif trust == 5:    \n        pass    \n    \n    return transformed",
            "id": 200
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary))) (if_statement condition: (boolean_operator left: (boolean_operator left: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) right: (comparison_operator (identifier) (integer))) right: (comparison_operator (identifier) (integer))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (pass_statement)) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (pass_statement))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) (ERROR (pass_statement) (identifier) (identifier) (identifier) (ERROR (identifier) (identifier)) (identifier)) consequence: (block)) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (pass_statement))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (pass_statement)))) (return_statement (identifier)))))\n**\n",
        "text": " 10",
        "token_cnt": 349
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def display_attractions(expertise):\n        \n        if expertise == \"Beginner\":\n            print(\"Some beginner friendly places could include:\")\n            print(\"- Museums\")\n            print(\"- Hiking trails\")\n            print(\"- Art galleries\")\n\n        \n        elif expertise == \"Intermediate\":\n            print(\"Some intermediate level activities might include:\")\n            print(\"- Amusement parks\")\n            print(\"- Sports events\")\n            print(\"- Concerts\")\n        \n        \n        else: \n            print(\"Advanced experiential suggestions may include:\")\n            print(\"- Cooking classes\")\n            print(\"- Volunteering opportunities\")\n            print(\"- Day trips to nearby cities\")\n    \n    \n    expertise = input(\"What level of experience do you have? \")\n    display_attractions(expertise)",
            "id": 201
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))\n**\n",
        "text": " 6",
        "token_cnt": 601
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def rsa_encrypt(message):\n    \"\"\"\n    This function takes in plaintext as argument \n    and returns ciphertext encrypted by RSA algorithm\n    \n    Parameters:\n        message (str): Plaintext string\n        \n    Returns:\n        str: Ciphertext string\n\n    Raises:\n        ValueError: If message is not of type str    \n    \"\"\"\n    \n    if not isinstance(message, str):\n        raise ValueError(\"Message must be of type str\")    \n    \n    \n    p = random.randrange(2**15+1)\n    q = random.randrange(p)\n    n = p * q\n    phi = (p - 1) * (q - 1)\n    e = 3\n    d = invmod(e,phi)\n    \n    \n    cipher_text = pow(int(message),e,n)\n    \n    return cipher_text",
            "id": 202
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (binary_operator left: (integer) right: (integer)) right: (integer)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (integer))) right: (parenthesized_expression (binary_operator left: (identifier) right: (integer)))))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))) (identifier) (identifier))))) (return_statement (identifier)))))\n**\n",
        "text": " 10",
        "token_cnt": 423
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import requests\nfrom bs4 import BeautifulSoup\n\ndef check_high_travel(city):\n    \n    url = f\"https://www.yelp.com/search?find_desc=attraction&location={city}\"\n\n    \n    res = requests.get(url)\n    soup = BeautifulSoup(res.text, \"html.parser\")\n\n    \n    reviews = int(soup.select_one(\".result-card\").span.string[:-1])\n    \n    \n    if reviews >= 500:\n        return True\n    else:\n        return False\n\n\nprint(check_high_travel(\"San Francisco\"))",
            "id": 206
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (attribute object: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) attribute: (identifier)) subscript: (slice (unary_operator argument: (integer)))))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (true))) alternative: (else_clause body: (block (return_statement (false))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 10",
        "token_cnt": 409
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_high_eye(reliability):\n    \"\"\"Transforms high eye hygiene by washing hands before touching eyes\n\n    Args:\n        reliability (float): A value between 0 and 1 indicating the level of \n            confidence in the result\n\n    Returns:\n        str: The transformed sentence with appropriate punctuation \n    \"\"\"\n    \n    \n    assert isinstance(reliability, float) and 0 <= reliability <= 1, \"Invalid input\"\n\n    \n    if reliability >= 0.95:\n        outcome = \"is highly reliable\"\n    elif reliability >= 0.7:\n        outcome = \"is moderately reliable\"\n    else:\n        outcome = \"may not be reliable\"\n\n    return f\"\"\"Washing hands before touching eyes {outcome}. It is recommended to always wash hands thoroughly after using the bathroom, changing diapers, handling pets, and before preparing food.\"\"\"",
            "id": 213
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (assert_statement (boolean_operator left: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) right: (comparison_operator (integer) (identifier) (integer))) (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (float)) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))))) (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))\n**\n",
        "text": " 6",
        "token_cnt": 301
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def get_storage_recommendations(cleanliness_score, gender):\n    \"\"\"\n    This function takes two inputs - \n    (1) Cleanliness Score : A numerical value indicating how dirty the garment was after being cleaned. Higher values indicate dirtier garments while lower values represent cleaner ones. \n    (2) Gender : Indicates whether the user is male or female\n    \n    Based on these inputs , this function returns appropriate recommendation regarding storing clothes . If the given cleanliness score falls below certain threshold then specific instructions about recommended method of storage will be provided along with reasons supporting those suggestions. \n    \n    In case no clear cut answer exists due to presence of multiple conflicting factors , a list containing all possible options will be returned instead. \n\n    Note : All decisions made by this function are subjective and may vary depending upon individual preferences and contextual factors such as personal experience etc.\n\n    Parameters:\n        cleanliness_score (float) : Numerical representation of degree of soiling present on the garment \n        gender (str) : Male/ Female indicator representing the target audience for whom the advice pertains\n        \n    Returns:\n         str / List[str] : Single string denoting single best option for storage or a list of strings containing alternative options in case there is ambiguity. Each element in the list represents one potential solution.  \n            \n    Raises:\n        ValueError: Raised when invalid input type is passed for any parameter   \n    \n    \"\"\"\n    \n    if not isinstance(gender, str):\n        raise ValueError(\"Invalid Input Type: Expected 'str' for argument 'gender', got '{}'\".format(type(gender)))    \n    \n    if not isinstance(cleanliness_score, float) or math.isnan(cleanliness_score):\n        raise ValueError(\"Invalid Input Type:Expected 'float' for argument 'cleanliness_score',got '{}' \".format(type(cleanliness_score)))        \n    \n    \n     \n     if gender == \"Male\": \n         male_threshold = 40\n         \n     elif gender == \"Female\" : \n         female_threshold =35 \n         \n     else: \n           raise ValueError(\"Invalid Input Value: Invalid gender value '{}'. Expecting either 'Male' or 'Female'\".format(gender))\n     \n\n     \n      if cleanliness_score >=male_threshold: \n            return f\"\"\"\n            For {gender} Professional wear : \n             Garments with high level of soiling can be safely stored in plastic bins or vacuum sealed bags\n             Avoid keeping them directly under sunlight as they tend to fade faster.\"\"\"\n\n      elif cleanliness_score <female_threshold and cleanliness_score>=male_threshold//2: \n            return f\"\"\"\n            For {gender} casual wear : \n              Wash the item before storing it away\n              Store it folded in breathable cotton covers rather than plastic bags to prevent color bleeding.\"\"\"\n      \n      elif cleanliness_score<male_threshold //2: \n            return [\n                f\"\"\"For both Men & women : \n                It depends on frequency of use and personal preference but generally anything above {male_threshold} is considered unsuitable for everyday wear \"\"\",\n            \n                f\"\"\"For Both men & women :  \n                Anything less than {female_threshold} could still pass as regular laundry however results might not be up to mark especially for white items\"\"\"]\n\n\n       else: \n            raise ValueError(\"Invalid Input Value:Cleanliness score cannot be negative\")",
            "id": 214
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier)))))))))) (if_statement condition: (boolean_operator left: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier)))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (integer)))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (integer))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier))))))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (identifier)) right: (comparison_operator (identifier) (binary_operator left: (identifier) right: (integer)))) consequence: (block (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (binary_operator left: (identifier) right: (integer))) consequence: (block (return_statement (list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)) (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))\n**\n",
        "text": " 10",
        "token_cnt": 773
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_toilet_hygiene(transparency):\n    \"\"\"\n    Calculates toilet hygiene score based on transparency level\n\n    Args:\n        transparency (int): value between 0 and 1 indicating how transparent the toilet is\n\n    Returns:\n        int: calculated toilet hygiene score\n    \n    Raises:\n        ValueError: If input parameter 'transparency' is not within range [0, 1]\n        \n    \"\"\"\n    \n    if isinstance(transparency, float) or isinstance(transparency, int):\n        pass\n    else:\n        raise ValueError(\"Invalid input type\")\n    \n    \n    if 0 <= transparency <= 1:\n        pass\n    else:\n        raise ValueError(\"Input value must be within range [0, 1]\")\n    \n    \n    bowl_cleanliness = 5    \n    seat_cleanliness = 4     \n    floor_cleanliness = 3    \n    overall_appearance = 2   \n    \n    \n    total_score = bowl_cleanliness + seat_cleanliness + floor_cleanliness - overall_appearance\n    \n    return total_score",
            "id": 215
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) consequence: (block (pass_statement)) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (comparison_operator (integer) (identifier) (integer)) consequence: (block (pass_statement)) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (identifier) right: (identifier)) right: (identifier)) right: (identifier)))) (return_statement (identifier)))))\n**\n",
        "text": " 10",
        "token_cnt": 359
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random\n\n\nclass Object:\n    def __init__(self, name):\n        self.name = name\n\n    def clean(self):\n        print(f\"Cleaning {self.name}.\")\n\n\ndef sanitize_objects(risk_level=\"low\"):\n    \n    objects = {\"Desk\": Object(\"desk\"), \"Chair\": Object(\"chair\")}\n\n    \n    for obj_name, obj in objects.items():\n        if risk_level == \"high\":\n            if random.randint(0, 5) > 2:\n                obj.clean()\n        elif risk_level == \"medium\":\n            if random.randint(0, 7) > 4:\n                obj.clean()\n        else:\n            obj.clean()\n\n\nif __name__ == \"__main__\":\n    \n    print(\"\\nDry Run:\")\n    sanitize_objects(risk_level=\"high\", dry_run=True)\n\n    \n    while True:\n        try:\n            risk_level = input(\"Enter 'high', 'medium' or 'low': \")\n            break\n        except ValueError:\n            pass\n    \n    sanitize_objects(risk_level=risk_level)",
            "id": 217
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (class_definition name: (identifier) body: (block (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (attribute object: (identifier) attribute: (identifier))) (string_content) (string_end))))))))) (function_definition name: (identifier) parameters: (parameters (default_parameter name: (identifier) value: (string (string_start) (string_content) (string_end)))) body: (block (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (pair key: (string (string_start) (string_content) (string_end)) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) body: (block (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer))) (integer)) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer))) (integer)) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))))) alternative: (else_clause body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (true))))) (while_statement condition: (true) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (break_statement)) (except_clause (identifier) (block (pass_statement)))))) (expression_statement (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier))))))))\n**\n",
        "text": " 6",
        "token_cnt": 894
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_extreme_hygiene(responsibility):\n    \"\"\"\n    This function updates extreme hygiene measures by cleaning \n    and disinfecting commonly touched surfaces like doorknobs, light switches etc.\n\n    Args:\n        responsibility (str): specifies whether engineer or cleaner \n            performed the task\n    \n    Returns:\n        str: returns message indicating updated status of extreme hygiene\n            measure\n    Raises:\n        ValueError: when input value for 'responsibility' is not valid\n    \"\"\"\n    \n    if isinstance(responsibility, str) == False:\n        raise ValueError(\"Invalid input type\")\n\n    \n    msgs = {\n        \"engineer\": f\"Engineer has successfully completed the task.\", \n        \"cleaner\": f\"Cleaner has successfully completed the task.\"\n    }\n\n    \n    if responsibility == \"engineer\":\n        return msgs[\"engineer\"]\n    elif responsibility == \"cleaner\":\n        return msgs[\"cleaner\"]\n    else:\n        \n        return \"Extreme hygiene measure could not be updated.\"\n\n\n\nprint(update_extreme_hygiene('engineer'))    \nprint(update_extreme_hygiene('cleaner'))      \nprint(update_extreme_hygiene(123))            \nprint(update_extreme_hygiene(['abc']))",
            "id": 219
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (false)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (list (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 10",
        "token_cnt": 573
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def display_low_hygiene(responsibility):\n    \"\"\"Displays a message indicating low hygiene in shared spaces depending \n    on the specified responsibility.\"\"\"\n    \n    \n    messages = {\n        \"all\": \"Please ensure proper use of shared utensils and equipment.\",\n        \"some\": \"Some areas of this space appear to have lower levels of hygiene.\"\n        \"none\": \"This area appears to meet our high standards of cleanliness.\"\n    }\n\n    \n    if responsibility == \"all\":\n        print(messages[\"all\"])\n    elif responsibility == \"some\":\n        print(messages[\"some\"])\n    else:\n        print(messages[\"none\"])\n\n\n\ndisplay_low_hygiene(\"all\")    \ndisplay_low_hygiene(\"some\")   \ndisplay_low_gyiene(\"none\")",
            "id": 221
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) (ERROR (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) value: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))\n**\n",
        "text": " 6",
        "token_cnt": 519
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_hand_hygiene(data):\n    \"\"\"Updates high sneezing and coughing etiquette: hand hygiene after \n    sneezing or coughing\n\n    Args:\n        data (dict): Dictionary containing information about \n            safety measures\n        \n    Returns:\n        dict: Updated dictionary with new information added\n    \n    Raises:\n        ValueError: If 'safety' key not present in input data\n            \n    \"\"\"    \n    \n    if \"safety\" not in data:\n        raise ValueError(\"Input data does not contain 'safety' key\")    \n    \n    \n    safety = data[\"safety\"]   \n    \n    \n    \n    if \"sneeze\" in data:    \n        if data[\"sneeze\"]:\n            safety += [\"Wash hands immediately afterwards\", \n                      \"Avoid touching eyes, nose and mouth\"]          \n        else:\n            pass        \n    \n    elif \"cough\" in data:    \n        if data[\"cough\"]:\n            safety += [\"Wash hands immediately afterwards\",\n                      \"Cover mouth and nose when coughing\"]            \n        else:\n            pass       \n    \n    \n    data[\"safety\"] = safety     \n    \n    return data",
            "id": 222
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) consequence: (block (if_statement condition: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (pass_statement))))) alternative: (elif_clause condition: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) consequence: (block (if_statement condition: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (pass_statement))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (return_statement (identifier)))))\n**\n",
        "text": " 6",
        "token_cnt": 507
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import requests\nfrom pprint import pprint\n\n\ndef get_weather(city):\n    url = f\"https://api.openweathermap.org/data/2.5/weather?q={city}&appid=YOUR_API_KEY&units=imperial\"\n\n    resp = requests.get(url)\n    data = resp.json()\n    \n    return data\n    \n    \ndef main():    \n    city = input(\"Enter your location:\")\n    data = get_weather(city)    \n    \n    \n    if int(data['main']['humidity']) > 60:\n        print(\"It looks like it'll rain today.\")\n        \n    else:    \n        print(\"The skies look clear today!\")\n        \n    \n\n    \nif __name__ == '__main__':\n    main()",
            "id": 223
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (string (string_start) (string_content) (string_end))))) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 6",
        "token_cnt": 516
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def display_extreme_handling(item):\n    \"\"\"\n    This function takes input from user about their \n    personal belongings and decides whether they need \n    'Extreme Handling' or not depending upon the nature \n    of those objects.\n\n    Parameters:\n        item (str) : Description of object as entered by \n                    user\n    \n    Returns:\n        str       : Message indicating whether the object\n                    needs extreme handling or not alongwith \n                    reasons for such decisions. \n\n    Raises:    \n        ValueError : If invalid value is passed to the function.\n        \n    Examples: \n        >>>display_extreme_handling('My glasses')\n            \"Your glasses do NOT require extreme \n            handling because they are just regular \n            spectacles.\"\n\n        >>>display_extreme_handling('A knife I use for cooking.')\n            \"The knife requires extreme handling due to \n            its sharp blade. Please clean it properly before \n            placing it inside the container.\"\n        \n        >>>display_extreme_handling('An old book I found lying around')\n            \"Since the age of the book cannot be determined, \n            we recommend extreme caution while packing it. \n            We may request you to open the package at customs\"\n\n    Note: The above examples show only some common scenarios \n          but there could be many more edge case situations\n          where this function might return different messages.    \n    \"\"\"\n    \n    if isinstance(item, str):\n        pass\n    else:\n        raise ValueError(\"Invalid Input\")\n\n    \n    EXTREME_CARE = [\"Sharp Objects\", \"Glasses\", \"Medicines\"]\n\n    \n    if item in EXTREME_CARE:\n        message = f\"{item} requires extreme handling due to its {item}.\\\n                  \\nPlease ensure proper cleaning and disinfection.\\\n                  \\nWe may ask you to open the packaging for inspection.\"\n    else:\n        message = f\"{item} does NOT require extreme handling because it is considered safe.\"\n\n    return message",
            "id": 224
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) consequence: (block (pass_statement)) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence)) (string_end))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end))))))) (return_statement (identifier)))))\n**\n",
        "text": " 10",
        "token_cnt": 354
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_low_food_hygiene(reliability):\n    \"\"\"This function updates low food safety practices based on reliability score\n\n    Args:\n        reliability (float): The reliability score of the engineer's advice\n\n    Returns:\n        str: A markdown formatted string containing details about the updated recommendation \n    \"\"\"\n    \n    \n    reccomendations = [\n        (\"Use gloves when handling raw meat\", 0.8), \n        (\"Wash hands before preparing food\", 0.65), \n        (\"Separate raw and cooked foods\", 0.4)\n    ]\n\n    \n    updated_reccomendation = \"\"\n\n    \n    for recommendation, min_score in reccomendations:\n\n        \n        if reliability >= min_score:\n\n            \n            updated_reccomendation += \"\\n\"\n        \n            \n            updated_reccomendation += \"\n                \n            \n            updated_reccomendation += recommendation[1:]\n            \n    return updated_reccomendation",
            "id": 227
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (tuple (string (string_start) (string_content) (string_end)) (float)) (tuple (string (string_start) (string_content) (string_end)) (float)) (tuple (string (string_start) (string_content) (string_end)) (float))))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (for_statement left: (pattern_list (identifier) (identifier)) right: (identifier) body: (block (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (string (string_start) (string_content (escape_sequence)) (string_end)))) (expression_statement (augmented_assignment left: (identifier) (ERROR (string_start)) right: (augmented_assignment left: (identifier) right: (subscript value: (identifier) subscript: (slice (integer)))))))))) (return_statement (identifier)))))\n**\n",
        "text": " 6",
        "token_cnt": 310
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_extreme_personal_organization(data):\n    \"\"\"\n    This function takes in input as pandas dataframe \n    containing calendar scheduling information\n    \n    It then analyzes this data to determine whether there \n    exists any evidence of extreme personal organization\n    patterns indicative of disorganized behavior\n\n    Parameters:\n        data (pandas df): Input dataframe containing \n            calendar scheduling information\n        \n    Returns:\n        bool: A boolean value indicating whether\n            there was evidence of extreme personal \n            organization found in the given dataset\n            \n    Raises:\n        ValueError: If input data is not a pandas DataFrame\n    \"\"\"    \n    \n    if isinstance(data, pd.DataFrame) == False:\n        raise ValueError(\"Input must be a Pandas Dataframe\")    \n    \n    \n    consent1 = ((data['From'] - data['To']).sum() / len(data)) < 24*60*60   \n    consent2 = (((data['End'] - data['Start']).abs()).sum() / len(data)) > 3*24*60*60    \n    no_overlaps = data['End'] >= data['Start']      \n    \n    \n    combined_condition = np.logical_and(consent1, np.logical_not(np.logical_or(consent2, no_overlaps)))\n    \n    return True if combined_condition else False",
            "id": 228
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier) (attribute object: (identifier) attribute: (identifier)))) (false)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (comparison_operator (parenthesized_expression (binary_operator left: (call function: (attribute object: (parenthesized_expression (binary_operator left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) attribute: (identifier)) arguments: (argument_list)) right: (call function: (identifier) arguments: (argument_list (identifier))))) (binary_operator left: (binary_operator left: (integer) right: (integer)) right: (integer))))) (expression_statement (assignment left: (identifier) right: (comparison_operator (parenthesized_expression (binary_operator left: (call function: (attribute object: (parenthesized_expression (call function: (attribute object: (parenthesized_expression (binary_operator left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) attribute: (identifier)) arguments: (argument_list))) attribute: (identifier)) arguments: (argument_list)) right: (call function: (identifier) arguments: (argument_list (identifier))))) (binary_operator left: (binary_operator left: (binary_operator left: (integer) right: (integer)) right: (integer)) right: (integer))))) (expression_statement (assignment left: (identifier) right: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))))))) (return_statement (conditional_expression (true) (identifier) (false))))))\n**\n",
        "text": " 10",
        "token_cnt": 689
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n\ndef preprocess(df):\n    \n    df = clean_missing_values(df)\n\n    \n    df = fillna_with_mode(df)\n    \n    return df\n    \n\ndef split_data(df):\n    X = df.drop(['label'], axis=1)\n    y = df['label']\n    X_train, X_val, y_train, y_val = train_test_split(X,y, test_size=.20, random_state=42)\n    \n    return X_train, X_val, y_train, y_val\n    \n    \nif __name__ == '__main__':\n    df = pd.read_csv('extreme_eye_hygiene.csv')\n    preprocessed_df = preprocess(df)\n    X_train, X_val, y_train, y_val = split_data(preprocessed_df)",
            "id": 232
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (integer)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (pattern_list (identifier) (identifier) (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (float)) (keyword_argument name: (identifier) value: (integer)))))) (return_statement (expression_list (identifier) (identifier) (identifier) (identifier))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (pattern_list (identifier) (identifier) (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier))))))))\n**\n",
        "text": " 6",
        "token_cnt": 549
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_low_security(data):\n    \"\"\"\n    This function checks whether low security access controls \n    (e.g., single sign-on) were implemented correctly based on expert opinion\n    \n    Args:\n        data (dict): A dictionary containing information about the system configuration\n        \n    Returns:\n        str: A message indicating whether low security was properly implemented or not\n            \n    Raises:\n        ValueError: If input data is missing necessary keys\n        \n    \"\"\"    \n    \n    required_keys = [\"sso\", \"multi_factor\"]    \n\n    \n    if set(required_keys).issubset(set(data)):    \n        sso = data[\"sso\"]    \n        multi_factor = data[\"multi_factor\"]\n    \n        \n        if sso == True and multi_factor == False:\n            return \"Low security risk: Single Sign On Not Implemented Properly\"\n        elif sso == False and multi_factor == True:\n            return \"Low security risk: Multi Factor Authentication Not Implemented Properly\"\n        else:\n            return \"No low security risks identified!\"     \n    else:\n        raise ValueError(\"Input data is missing necessary keys\")   \n        \n\nconfig = {\n    \"sso\":True,\n    \"multi_factor\":False\n}\n    \nresult = check_low_security(config)\nprint(result)",
            "id": 236
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (if_statement condition: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (identifier))) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))) consequence: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (true)) right: (comparison_operator (identifier) (false))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (false)) right: (comparison_operator (identifier) (true))) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (true)) (pair key: (string (string_start) (string_content) (string_end)) value: (false))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))\n**\n",
        "text": " 6",
        "token_cnt": 577
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_high_transport(mode):\n    \"\"\"This function takes input as mode of transporation \n    (airplane, train ,bus) and returns whether its considered high transport\"\"\"\n    \n    \n    if mode == \"airplane\":\n        return True if distace >= 1000 else False\n\n    \n    elif mode == \"train\":\n        return True if num_stops > 2 else False\n\n    \n    elif mode == \"bus\":\n        return True if distace >= 50 and distace<100 else False\n\n    \n    return False",
            "id": 239
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (conditional_expression (true) (comparison_operator (identifier) (integer)) (false)))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (conditional_expression (true) (comparison_operator (identifier) (integer)) (false))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (conditional_expression (true) (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (integer))) (false)))))) (return_statement (false)))))\n**\n",
        "text": " 10",
        "token_cnt": 269
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import os\nfrom datetime import timedelta\nimport random\n\n\ndef calculate_extreme_hygiene(dry_run=False):\n    \n    building_area = float(input(\"Enter total area of the building (sqm): \"))\n    number_of_occupants = int(input(\"Enter approximate number of occupants: \"))\n\n    \n    cleaning_time = 10\n    \n    \n    total_cleaning_time = building_area * cleaning_time / 1000\n    \n    \n    days_between_visits = 7\n    average_visit_duration = 2\n    expected_waiting_time = days_between_visits * average_visit_duration\n    \n    \n    uv_disinfection_time = 30\n    ozone_disinfection_time = 60\n    \n    \n    total_disinfection_time = uv_disinfection_time + ozone_disinfection_time\n    \n    \n    extreme_hygiene_duration = total_cleaning_time + total_disinfection_time + expected_waiting_time\n    \n    \n    print()\n    print(\"Building Area:\", building_area)\n    print(\"Number of Occupants:\", number_of_occupants)\n    print(\"Expected Waiting Time Between Visits:\", expected_waiting_time)\n    print(\"Total Cleaning Time:\", total_cleaning_time)\n    print(\"UV Disinfection Time:\", uv_disinfection_time)\n    print(\"Ozone Disinfection Time:\", ozone_disinfection_time)\n    print(\"Total Disinfection Time:\", total_disinfection_time)\n    print(\"Overall Extreme Hygiene Duration:\", extreme_hygiene_duration)\n    print()\n    \n    \n    if not dry_run:\n        \n        do_uv_disinfection()\n        do_ozone_disinfection()\n        \n    else:\n        \n        simulate_disinfection()\n    \n    \n    \ndef do_uv_disinfection():\n    \n    confirmation_message = \"UV disinfection completed successfully.\"\n    print(\"*\" * len(confirmation_message))\n    print(f\"{confirmation_message}\")\n    print(\"*\" * len(confirmation_message))\n    \n\ndef do_ozone_disinfection():\n    \n    confirmation_message = \"Ozone disinfection completed successfully.\"\n    print(\"*\" * len(confirmation_message))\n    print(f\"{confirmation_message}\")\n    print(\"*\" * len(confirmation_message))\n\n    \ndef simulate_disinfection():\n    \n    confirmation_message = \"Simulation of disinfection completed successfully.\"\n    print(\"*\" * len(confirmation_message))\n    print(f\"{confirmation_message}\")\n    print(\"*\" * len(confirmation_message))\n    \n    \nif __name__ == \"__main__\":\n    while True:\n        try:\n            choice = input(\"\\nDry Run [y/n]? \")\n            if choice.lower().startswith('y'):\n                calculate_extreme_hygiene(True)\n                \n            elif choice.lower().startswith('n'):\n                calculate_extreme_hygiene(False)\n                \n            else:\n                raise ValueError(\"Invalid option entered.\")\n                \n        except Exception as e:\n            print(e)\n            continue\n        \n        break",
            "id": 240
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_statement name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (default_parameter name: (identifier) value: (false))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (identifier) right: (identifier)) right: (integer)))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (identifier) right: (identifier)) right: (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list))) (if_statement condition: (not_operator argument: (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))) (expression_statement (call function: (identifier) arguments: (argument_list)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list)))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (call function: (identifier) arguments: (argument_list (identifier))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (call function: (identifier) arguments: (argument_list (identifier))))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (call function: (identifier) arguments: (argument_list (identifier))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (call function: (identifier) arguments: (argument_list (identifier))))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (call function: (identifier) arguments: (argument_list (identifier))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (call function: (identifier) arguments: (argument_list (identifier))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (while_statement condition: (true) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))) (if_statement condition: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (true))))) alternative: (elif_clause condition: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (false)))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (continue_statement)))) (break_statement))))))\n**\n",
        "text": " 6",
        "token_cnt": 1861
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "student_grades = [80,75,92,61] \n\r\ndef calculate_average(marks):\r\n    \"\"\" Calculate average marks\"\"\" \r\n    return sum(marks) / len(marks) \r\n\r\ndef determine_extreme_education(avg_mark):\r\n    \"\"\"Determine whether student has passed or failed their course based on avg mark.\"\"\"\r\n\r\n    if avg_mark >= 40: \r\n        print(\"Congratulations! Student Passed\")\r\n        return \"Passed\"\r\n    \r\n    else: \r\n        print(\"Sorry! Student Failed.\")\r\n        return \"Failed\"\r\n\r\n\r\nif __name__ == '__main__':    \r\n    \n    avg_mark = round(calculate_average(student_grades),2)  \r\n      \r\n    \n    result = determine_extreme_education(avg_mark) \r\n  \r\n    print(f\"\\nAverage Mark:{avg_mark}\\nResult:{result}\")",
            "id": 241
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (list (integer) (integer) (integer) (integer)))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (return_statement (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (call function: (identifier) arguments: (argument_list (identifier))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (string (string_start) (string_content) (string_end)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))) (integer))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_end))))))))\n**\n",
        "text": " 6",
        "token_cnt": 489
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_low_nose(responsibility):\n    \n    if (responsibility == \"Engineering\"):\n        print(\"For ENGINEER:\")\n        \n        \n        print(\"DRY RUN\")\n        print(\"*Use nasal spray as directed by your healthcare provider.\")\n        print(\"*If one nostril is stuffy, use only the other side.\")\n        print(\"*Do not blow your nose forcefully; this can cause injury to your nose and sinuses.\")\n        print(\"\")\n\n        \n        ans = input(\"\\n\\nContinue? [y/n] \")\n        if (ans.lower() == \"y\"):\n            print(\"*Use nasal spray as directed by your healthcare provider.\\n*If one nostril is stuffy, use only the other side.\\n*Do not blow your nose forcefully; this can cause injury to your nose and sinuses.\")\n\n    return\n\n\nupdate_low_nose('Engineering')",
            "id": 242
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)))))) (if_statement condition: (parenthesized_expression (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))))))))) (return_statement))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))\n**\n",
        "text": " 6",
        "token_cnt": 476
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def show_discounts(user_type):\n    \n    if user_type == \"engineer\":\n        \n        print(\"Engineers can enjoy a 10% discount!\")\n    \n    elif user_type == \"expert\":\n        \n        print(\"Experts can enjoy a 25% discount!\")\n        \n    else:\n        \n        print(\"Invalid input! Please enter either 'engineer' or 'expert'.\")\n        \n\nshow_discounts('engineer')\nshow_discounts('expert')\nshow_discounts('student')",
            "id": 244
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))\n**\n",
        "text": " 6",
        "token_cnt": 325
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "age = int(input(\"Please Enter Your Age: \"))\ngender = input(\"Please Enter Male Or Female [M/F]: \")\nskin_type = input(\"Please Enter Dry, Normal, Oily [D/N/O]: \")\nhand_cream = float(input(\"Please Rate Your Hand Cream Usage On A Scale Of 0 To 10 [0-10]: \"))\n\n\n\nscore = .2 * age + .4 * gender_modifier(gender) + .3 * skin_modifier(skin_type) + (.1 * hand_cream / 10)\nprint(\"Your Overall Skin Scoring Is:\", round(score))\n\n\ndef gender_modifier(gender):\n    if gender == \"Male\":\n        return 1\n    elif gender == \"Female\":\n        return 2\n    else:\n        print(\"Invalid Gender Input\")\n        exit()\n        \n\ndef skin_modifier(skin_type):\n    if skin_type == \"Dry\":\n        return -.75 \n    elif skin_type == \"Normal\":\n        return 0\n    elif skin_type == \"Oily\":\n        return .25\n    else:\n        print(\"Invalid Skin Type Input\")\n        exit()\n\n\n\nif __name__ == \"__main__\":\n    main()",
            "id": 245
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (float) right: (identifier)) right: (binary_operator left: (float) right: (call function: (identifier) arguments: (argument_list (identifier))))) right: (binary_operator left: (float) right: (call function: (identifier) arguments: (argument_list (identifier))))) right: (parenthesized_expression (binary_operator left: (binary_operator left: (float) right: (identifier)) right: (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (identifier)))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (integer))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (integer)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list)))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (unary_operator argument: (float)))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (integer)))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (float)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list)))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 6",
        "token_cnt": 857
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import os\nfrom random import randint\n\ndef check_hygeine(eye_status):\n    \n    outcomes = [\"Pass\", \"Warning\", \"Fail\"]\n    \n    \n    score = randint(0, 100)\n\n    \n    if (eye_status == 'Wearing' and score >=75):\n        return outcomes[0]\n    elif ((eye_Status == 'Cleaned') and (score <34)):\n        return outcomes[2]\n    else: \n        return outcomes[1]\n\n\nif __name__ == '__main__':\n    \n    eye_status = input(\"Enter your current eye status [Wearing | Cleaned]: \")\n\n    \n    result = check_hygeine(eye_status)\n\n    print(f\"Your eye hygiene inspection results as {result}.\")",
            "id": 247
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (integer) (integer))))) (if_statement condition: (parenthesized_expression (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (integer)))) consequence: (block (return_statement (subscript value: (identifier) subscript: (integer)))) alternative: (elif_clause condition: (parenthesized_expression (boolean_operator left: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) right: (parenthesized_expression (comparison_operator (identifier) (integer))))) consequence: (block (return_statement (subscript value: (identifier) subscript: (integer))))) alternative: (else_clause body: (block (return_statement (subscript value: (identifier) subscript: (integer)))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))))\n**\n",
        "text": " 6",
        "token_cnt": 537
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_hand_hygiene(safety):\n    \"\"\"Updates hand hygiene status according to safety level\n    \n    Args:\n        safety (int): Safety rating of restroom, where higher numbers indicate safer conditions\n        \n    Returns:\n        str: Updated message regarding hand hygiene guidelines \n    \"\"\"\n\n    \n    if safety >= 8:\n        msg = \"Hand washing facilities available! Please use them.\"\n    elif safety == 7:\n        msg = \"Soap and water available but no running water. Consider bringing your own supplies.\"\n    else:\n        msg = \"No soap or water available. Bring your own supplies or find another facility.\"\n\n    return msg",
            "id": 248
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))))) (return_statement (identifier)))))\n**\n",
        "text": " 6",
        "token_cnt": 211
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_high_weather(\n    temperature=None, \n    wind_speed=None, \n    humidity=None, \n    precipitation=None, \n    pressure=None, \n    cloudiness=None, \n    sunrise=None, \n    sunset=None, \n    weather_description=None, \n    day_of_week=None, \n    city=\"London\", \n    country=\"United Kingdom\", \n    reliable_source=0):\n    \n    \n    if reliable_source == True:\n        print(\"Highly reliable weather sources\")\n    \n        \n        if weather_condition== \"Partly Cloudy\":\n            print(\"It might rain tomorrow.\")\n        \n        elif weather_condition==\"Clear\":\n            print(\"Perfect weather for outdoor activities!\")\n\n        \n        elif temperature >25 and wind_speed <30:\n            print(\"Great hiking weather today.\")\n        \n        elif temperature<18 and weather_condition ==\"Snow\":\n            print(\"Wear warm clothes before going outdoors.\")\n\n    else : \n        print(\"Unreliable weather sources\")\n        print(\"Consult more trustworthy resources for accurate predictions.\")",
            "id": 252
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (string (string_start) (string_content) (string_end))) (default_parameter name: (identifier) value: (string (string_start) (string_content) (string_end))) (default_parameter name: (identifier) value: (integer))) body: (block (if_statement condition: (comparison_operator (identifier) (true)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (integer))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))\n**\n",
        "text": " 10",
        "token_cnt": 689
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import os\nfrom getpass import getuser\n\n\ndef main():\n    \n    print(\"What kind of electronic do you want to care for?\")\n    device_type = input(\"> \")\n\n    \n    if device_type == \"laptop\":\n        laptop_care()\n    elif device_type == \"phone\":\n        phone_care()\n    else:\n        print(f\"Sorry! I don't know how to take care of {device_type}.\")\n\n\ndef laptop_care():\n    \n    ssd_size = int(input(\"Enter the size of SSD (in GB): \"))\n    memory = [\"4GB\", \"8GB\"]\n    ram = input(f\"Choose RAM from options [{', '.join(memory)}]: \")\n\n    \n    if ssd_size >= 500:\n        print(\n            f\"{ssd_size}GB SSD detected.\\nPlease follow these additional precautions:\\n\\t1. Keep the system clean and free of debris.\\n\\t2. Avoid dropping or impacting the computer.\"\n        )\n    elif ram not in memory:\n        print(\n            f\"{ram}RAM selected but only following options available - {', '.join(memory)}.\\nWe recommend selecting one of those options based on your usage requirements.\"\n        )\n\n    \n    print(\"\\nGeneral Guidelines:\")\n    print(\n        \"\\t1. Use a dedicated power adapter designed specifically for your laptop when charging it.\"\n    )\n    print(\"\\t2. Do not leave your laptop plugged into the AC outlet all the time.\")\n    print(\"\\t3. Make sure your battery has enough charge before storing your laptop.\")\n\n\ndef phone_care():\n    \n    protector = input(\"Do you need screen protector? [y/N] \")\n\n    \n    if protector.lower().startswith(\"y\"):\n        print(\"It is recommended to use tempered glass screen protector for maximum protection against drops and scratches.\")\n    else:\n        print(\"In case you drop your phone without a screen guard, make sure to turn off the phone immediately to avoid further damage.\")\n\n    \n    print(\"\\nGeneral Guidelines:\")\n    print(\"\\t1. Always keep your phone updated with the latest software version.\")\n    print(\"\\t2. Back up important data regularly on cloud storage services such as Google Drive or iCloud.\")\n    print(\"\\t3. Use a protective case and screen guards to prevent accidental damage.\")\n\n\nif __name__ == \"__main__\":\n    main()",
            "id": 253
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list)))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence)) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))) (string_content (escape_sequence)) (string_end)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 4",
        "token_cnt": 1333
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def sneeze_cough_etiquette(use_tissue):\n    \"\"\"Determine low sneezing and coughing etiquette based on use of tissues\n    \n    Args:\n        use_tissue (bool): Whether to use a tissue or elbow to cover one's mouth when sneezing or coughing\n\n    Returns:\n        str: A message indicating the appropriate sneezing and coughing etiquette \n    \"\"\"\n    \n    if use_tissue and not has_tissue():\n        return \"Please provide a tissue before continuing\"\n        \n    \n    else:    \n        return (\"Cover your nose and mouth with your elbow or a tissue,\"\n                + \" then dispose of used materials safely\")\n        \n\ndef has_tissue():    \n    return True if random.random() < 0.75 else False\n    \nif __name__ == \"__main__\":\n    while True:\n        \n        choice = input(\"Do you wish to use a tissue (y/n)? \")\n        \n        \n        if choice.lower().startswith('y'):\n            print(sneeze_cough_etiquette(True))\n        elif choice.lower().startswith('n'):\n            print(sneeze_cough_etiquette(False))\n        else:\n            print(\"Invalid input. Please try again.\")",
            "id": 258
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (identifier) right: (not_operator argument: (call function: (identifier) arguments: (argument_list)))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (else_clause body: (block (return_statement (parenthesized_expression (binary_operator left: (string (string_start) (string_content) (string_end)) right: (string (string_start) (string_content) (string_end)))))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (return_statement (conditional_expression (true) (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (float)) (false))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (while_statement condition: (true) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (true))))))) alternative: (elif_clause condition: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (false)))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 593
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import os\nfrom datetime import date\n\n\ndef main():\n    \n    today = date.today()\n\n    \n    cwd = os.getcwd()\n    \n    \n    print(\"Welcome to Extreme Nail Care Task Assignment System\")\n    print(f\"Today's Date : {today}\")\n    print(f\"Current Working Directory : {cwd}\\n\")\n\n    \n    choice = input(\"Do you need assistance regarding extreme nail care task? [y/n]: \")\n\n    \n    if choice == \"y\":\n        \n        skill_level = assess_skill_level()\n\n        \n        if skill_level == 'beginner':\n            print(\"\\nAssigned Task:\")\n            print(\"- Trim finger nails of new interns.\")\n        \n        elif skill_level == 'intermediate':\n            print(\"\\nAssigned Task:\")\n            print(\"- Cut toe nails of senior engineers.\")\n            print(\"- Shape fingernails of project managers.\\n\")\n        \n        elif skill_level == 'expert':\n            print(\"\\nCongratulations! You are eligible to work on most critical tasks related to extreme nail care:\\n\\n\")\n\n            \n            tasks = ['- Clean undernail folds.',\n                     '- Remove ingrown toenails',\n                     '- Repair broken nails']\n        \n            \n            for i in range(len(tasks)):\n                print(f\"{i+1}. {tasks[i]}\")\n                \n            \n            selected_task = int(input(\"Enter your selection: \"))\n            \n            \n            if selected_task > 0 and selected_task <= len(tasks):\n                print(f\"\\nExecuting task '{tasks[selected_task-1]}'\")\n                \n            else:\n                print(\"Invalid Selection!\")\n                \n    elif choice == \"n\":\n        print(\"Thank you for visiting our website. Come back soon!\")\n        \n    else:\n        print(\"Please enter y or n!\")\n    \n    \n    \ndef assess_skill_level():\n    \"\"\"Asses user skill level based on their previous experiences.\"\"\"\n    skill_level = input(\"What is your skill level? [beginner/intermediate/expert]: \")\n\n    return skill_level\n    \n\n\nif __name__ == \"__main__\":\n    main()",
            "id": 261
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content (escape_sequence)) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence) (escape_sequence)) (string_end))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (binary_operator left: (identifier) right: (integer))) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (identifier))) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (call function: (identifier) arguments: (argument_list (identifier))))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer)))) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (return_statement (identifier)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 6",
        "token_cnt": 1418
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_extreme_toilet_hygiene(area_cleaned, no_of_visits):\n    \"\"\"\n    Calculates the score of extreme toilet hygiene by considering \n    - No. Of visits made to washroom during day time (no_of_visits)\n    - Percentage of cleaned area compared to total washroom area (area_cleaned)\n\n    Args:\n        area_cleaned (float): Percentage of cleaned area \n        compared to total washroom area\n        no_of_visits (int): Number of times person visited \n            the washroom during daytime\n    \n    Returns:\n        float: Score out of 10 representing extreme\n            toilet hygiene condition\n        \n    Raises:\n        ValueError: If either `area_cleaned` or `no_of_visits` is not within range [0,1]\n            \n    Control Flow Diagram:\n    \n        |----------------------|\n        |       Main           |\n        |----------------------|\n                V\n         Yes      No\n       /         \\       \n      /          \\      \n     /            \\    \n    |              |   \n   Yes             No \n     |               |    \n     |   Decision    |     \n     |---------------|------->\n     |                |\n     |Yes             |No\n     |<--------------|\n     |                |\n     |   Action       |\n     |---------------->|\n                  V\n               Details Commented Code",
            "id": 262
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (ERROR (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) (ERROR (string_start)) body: (block)) (expression_statement (binary_operator left: (binary_operator left: (binary_operator left: (identifier) (ERROR (identifier)) (ERROR) right: (identifier)) (ERROR) right: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator (ERROR) argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator (ERROR) argument: (identifier)))))))))))))))))))))))) right: (identifier))) (ERROR) (expression_statement (binary_operator left: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator (ERROR) argument: (identifier))))))))))))))) (ERROR) right: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator (ERROR) argument: (identifier))))))))))))))))))) (ERROR (identifier) (identifier)) (expression_statement (identifier))))\n**\n",
        "text": " 1",
        "token_cnt": 521
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_extreme_social_media(engagement_score, transparency):\n    \"\"\"Checks extreme social media user engagement for decision making.\"\"\"\n\n    \n    if engagement_score >= 0.8:\n        \n        if transparency == 'low':\n            return 'Highly trusted platform'\n        \n        \n        elif transparency != 'low': \n            return 'Unreliable source'\n    \n    \n    else:\n        return 'Low quality content, needs improvement'",
            "id": 265
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 225
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import csv\n    \n    \n    def add_entry(expense):\n        with open(\"expenses.csv\", \"a\") as f:\n            writer = csv.writer(f)\n            writer.writerow([expense[\"date\"], expense[\"category\"], expense[\"amount\"]])\n    \n    \n    def get_entries():\n        entries = []\n        with open(\"expenses.csv\", \"r\") as f:\n            reader = csv.reader(f)\n            for row in reader:\n                entry = {\"date\":row[0], \"category\":row[1], \"amount\":float(row[2])}\n                entries.append(entry)\n        return entries\n    \n    \n    while True:\n        date = input(\"Enter the date (YYYY-MM-DD): \")\n        try:\n            datetime.strptime(date, \"%Y-%m-%d\")\n            break\n        except ValueError:\n            print(\"Invalid date format, please try again.\")\n    \n    category = input(\"Enter the expense category [rent, groceries, transport]: \")\n    \n    amount = 0\n    while True:\n        entered_amount = input(\"Enter the amount: \")\n        try:\n            amount = float(entered_amount)\n            break\n        except ValueError:\n            print(\"Invalid amount, please try again.\")\n    \n    \n    expense = {\n        \"date\": date,\n        \"category\": category,\n        \"amount\": amount\n    }\n    add_entry(expense)\n    \n    \n    entries = get_entries()\n    total = sum([e['amount'] for e in entries])\n    print(f\"Total expenses: ${total:.2f}\")\n    print(\"Expenses by category:\")\n    for categroy, items in groupby(sorted(entries, key=lambda x:x['category']), lambda x:x['category']):\n        total_in_catgory = sum([i['amount'] for i in items])\n        print(f\"\\t{categroy}: ${total_in_catgory:.2f}\")\n    \n    \n    if category == 'taxes':\n        tax_deduction = max(0, amount - 500)\n        print(f\"Tax deducted: ${tax_deduction:.2f}\")\n        remaining_amount = min(amount, 500)\n    else:\n        remaining_amount = amount\n        \n    \n    savings_rate = round((remaining_amount / 10000),4)*100\n    print(f\"Savings Rate: {savings_rate}%\")",
            "id": 266
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (with_statement (with_clause (with_item value: (as_pattern (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) alias: (as_pattern_target (identifier))))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (list))) (with_statement (with_clause (with_item value: (as_pattern (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) alias: (as_pattern_target (identifier))))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (subscript value: (identifier) subscript: (integer))) (pair key: (string (string_start) (string_content) (string_end)) value: (subscript value: (identifier) subscript: (integer))) (pair key: (string (string_start) (string_content) (string_end)) value: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (integer)))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))))) (return_statement (identifier)))) (while_statement condition: (true) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (try_statement body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end))))) (break_statement)) (except_clause (identifier) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (integer))) (while_statement condition: (true) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (break_statement)) (except_clause (identifier) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list_comprehension body: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (for_in_clause left: (identifier) right: (identifier))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier) format_specifier: (format_specifier)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (lambda parameters: (lambda_parameters (identifier)) body: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (lambda parameters: (lambda_parameters (identifier)) body: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list_comprehension body: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (for_in_clause left: (identifier) right: (identifier))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier) format_specifier: (format_specifier)) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (integer) (binary_operator left: (identifier) right: (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier) format_specifier: (format_specifier)) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (integer)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (identifier)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (parenthesized_expression (binary_operator left: (identifier) right: (integer))) (integer))) right: (integer)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))\n**\n",
        "text": " 2",
        "token_cnt": 1931
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "privacy_level = input(\"Enter your desired privacy level [1,2,3]: \")\n\n\ntry:\n    privacy_level = int(privacy_level)\nexcept ValueError:\n    print(\"Invalid input\")\n    exit()\n\n\ndef clean_hands():\n    \n    print(\"Hands washed!\")\n\n\ndef no_clean_hands():\n    \n    print(\"No need to wash hands.\")\n\n\n\nactions = {\n    1: clean_hands, \n    2: partial(no_clean_hands), \n    3: lambda :input(\"Do you want me to wash your hands? (y/n): \").lower().startswith('y')\n}\n\n\naction = actions[privacy_level]\naction()\n\n\n\nprint(\"\\nDry Run:\")\nfor key,value in actions.items():\n    print(f\"For privacy level {key}: \",end='')\n    value()",
            "id": 268
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier)))))) (except_clause (identifier) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list)))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (integer) value: (identifier)) (pair key: (integer) value: (call function: (identifier) arguments: (argument_list (identifier)))) (pair key: (integer) value: (lambda body: (call function: (attribute object: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 6",
        "token_cnt": 639
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_hygiene(trust):\n    \n    result = \"\"\n    \n    \n    if trust >= 0.8:\n        result = \"High\"\n    elif trust >= 0.6:\n        result = \"Medium\"\n    else:\n        result = \"Low\"\n        \n    return result\n    \n\nprint(\"Hygiene Level:\", check_hygiene(0.7))",
            "id": 269
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (float)) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))))) (return_statement (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (float)))))))\n**\n",
        "text": " 10",
        "token_cnt": 266
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "print(\"Dry Run:\")\ntransform_high_nose_care(responsible=\"Parent\") \ntransform_high_nose_care(responsible=\"SchoolNurse\") \ntransform_high_nose_care(responsible=\"Other\", name=\"John Doe\") \n\n\ndef transform_high_nose_care(responsible, name=None):\n    \"\"\"Transform high nose bleed cases into preventative measures.\"\"\"\n\n    if responsible == \"Parent\":\n        print(f\"For {name}, parents should apply direct pressure on the nostril for at least 10 minutes.\")\n        print(f\"{name} should rest with head elevated above heart level for additional 30 mins.\")\n        print(f\"If no improvement after 1 hour, seek emergency medical assistance immediately.\")\n    \n    elif responsible == \"SchoolNurse\":    \n        print(f\"Inform school authorities about {name}'s nosebleed incident.\")\n        print(f\"Provide school staff with general advice on treating nosebleeds.\")\n        print(f\"Monitor {name} closely for next few days & provide further support as needed.\")\n        \n    else: \n        print(\"Unidentified Person:\")\n        print(\"In case of severe nosebleed, pinch the soft part of your nose just below the bridge.\")\n        print(\"Apply firm but gentle pressure over affected area for atleast 10mins.\")\n        print(\"Rest with head upright for another half an hour.\")\n        print(\"If symptoms persist, seek immediate medical treatment.\")",
            "id": 270
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (function_definition name: (identifier) parameters: (parameters (identifier) (default_parameter name: (identifier) value: (none))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))\n**\n",
        "text": " 4",
        "token_cnt": 787
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def trim_nails(nail):\n    \"\"\"Transform Extreme Nail Care - Trim nails for analysis\n    \n    Args:\n        nail (str): The type of nail condition being analyzed\n        \n    Returns:\n        str: A recommendation for how to best treat the specified nail condition based \n        on the results of the analysis\n\n    Raises:\n        ValueError: If the input value for 'nail' is not recognized as either 'healthy', \n            'damaged', or 'infected'.\n            \n    Control Flow:\n        1) Check whether the input argument 'nail' is valid by comparing it against three \n           pre-defined strings ('healthy', 'damaged', or 'infected'). Raise a ValueError\n           exception if the input value is not recognized. \n        2) Based on the value of 'nail', use an if statement to determine which message to return.\n           For instance, if 'nail' is set to 'healthy', then return a message indicating that no treatment\n           is necessary. On the other hand, if 'nail' is set to 'damaged', then return a message suggesting\n           that the user may want to consider filing down their nails slightly to make them more even.\n           Finally, if 'nail' is set to 'infected', then return a message advising the user to seek medical attention immediately.\n        3) In all cases, include a sentence at the end of the returned string stating that these recommendations are only intended as general guidance and do not replace the advice of qualified healthcare professionals. \n    \"\"\"    \n    \n    \n    if nail not in ['healthy', 'damaged', 'infected']:\n        raise ValueError(\"Invalid input value '{}' for 'nail'. Must be 'healthy', 'damaged', or 'infected.'\".format(nail))   \n    \n    \n    if nail == 'healthy':    \n        msg = \"Your nails appear healthy! No further action is required.\" + \\\n              \"\\n\\nHowever, regular manicures and pedicures can help keep your nails looking beautiful and healthy.\"          \n    elif nail == 'damaged':    \n        msg = \"Your nails show signs of damage. Consider filing them down slightly to create a smoother surface.\" + \\\n            \"\\n\\nA professional manicure or pedicure can also smooth away rough edges and leave your hands or feet feeling soft and refreshed.\"           \n    else:    \n        msg = \"Warning: Your nails indicate potential infection. Seek immediate medical attention!\" + \\\n            \"\\n\\nIn addition to treating any underlying causes, a doctor may recommend over-the-counter antibiotics or topical ointments to reduce inflammation and promote healing.\"  \n    \n    \n    msg += \"\\n\\n*These recommendations are provided for informational purposes only and should not be considered a substitute for professional medical advice.*\"       \n    \n    return msg",
            "id": 272
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)))))))) (expression_statement (augmented_assignment left: (identifier) right: (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)))) (return_statement (identifier)))))\n**\n",
        "text": " 4",
        "token_cnt": 513
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def display_low_finance(expenses):\n    \"\"\"Displays low finance expense tracking for experts based on transparency\n\n    Args:\n        expenses (list[dict]): A list of dictionaries containing information about\n            each expense, including its name, amount, date, category, etc.\n\n    Returns:\n        str: The lowest finance expense as formatted markdown table\n\n    Raises:\n        ValueError: If no expenses are provided or any of the entries do not contain \n            required fields\n\n    \"\"\"\n    \n    \n    if not isinstance(expenses, list) or len(expenses) == 0:\n        raise ValueError(\"No expenses were provided\")\n        \n    for entry in expenses:\n        reqd_fields = [\"name\", \"amount\", \"date\"]\n        \n        missing_fields = [f for f in reqd_fields if f not in entry]\n\n        if len(missing_fields) > 0:\n            raise ValueError(\n                f\"The following entries are missing required fields: {', '.join(missing_fields)}\"\n            )\n            \n    \n    sorted_expenses = sorted(expenses, key=lambda x: float(x[\"amount\"]), reverse=True)\n    \n    \n    out = \"\"\n    \n    \n    for i, expense in enumerate(sorted_expenses[:3], start=1):\n        out += f\"\n        out += f\"> Date: {expense['date']}\\n\\n\"\n        \n    \n    return out",
            "id": 275
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) right: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (integer))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (identifier) (for_in_clause left: (identifier) right: (identifier)) (if_clause (comparison_operator (identifier) (identifier)))))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (integer)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))) (string_end))))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (lambda parameters: (lambda_parameters (identifier)) body: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (keyword_argument name: (identifier) value: (true)))))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (slice (integer))) (keyword_argument name: (identifier) value: (integer)))) body: (block (expression_statement (augmented_assignment left: (identifier) (ERROR (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) (set (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (escape_sequence) (escape_sequence) (string_start) (identifier)) right: (identifier))))))))\n**\n",
        "text": " 6",
        "token_cnt": 713
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_low_online_pricing(df):\n    \"\"\"\n    This function takes a dataframe as input and transforms \n    low online shopping pricing by adding new columns based on analysis \n    performed by experts\n    \n    Parameters:\n        df (pandas.DataFrame): Input dataframe containing \n            information about products\n        \n    Returns:\n        pandas.DataFrame: Transformed dataframe with additional\n            columns added based on expert analysis\n            \n    Raises:\n        ValueError: If any of the inputs are invalid\n            \n    Control Flow:\n        1. Check whether transparency column exists in the \n           input dataframe. If not, add a new column called\n           \"transparency\" with values \"Opaque\", \"SemiTransparent\",\n           or \"Clear\".\n        \n        2. Use an if statement to check whether the value of the \n           \"price_type\" column is equal to \"Lowest Price Guaranteed\". If so,\n           set the value of the \"transparency\" column to \"Opaque\". Else,\n           continue to the next step.\n        \n        3. Use another if statement to check whether the value of the \n           \"shipping_cost\" column is greater than 0. If so, set the value of \n           the \"transparency\" column to \"SemiTransparent\". Else, continue to \n           the next step.\n        \n        4. Use a final if statement to check whether the value of the \n           \"return_policy\" column is less than or equal to 60 days. If so, set \n           the value of the \"transparency\" column to \"Clear\". Else, keep the \n           original value of the \"transparency\" column.\n        \n        For all three cases where no change was made to the \n        \"transparency\" column, use a default value of \"Opaque\".\n    \"\"\"\n    \n    if \"transparency\" not in df.columns:\n        \n        df[\"transparency\"] = np.select([df[\"price_type\"] == \"Lowest Price Guaranteed\"], [\"Opaque\"])\n        df[\"transparency\"] = np.where((df[\"price_type\"] != \"Lowest Price Guaranteed\") & (df[\"shipping_cost\"] > 0), \n                                    [\"SemiTransparent\"], df[\"transparency\"])\n        df[\"transparency\"] = np.where((df[\"price_type\"] != \"Lowest Price Guaranteed\") & (df[\"return_policy\"] <= 60),\n                                    [\"Clear\"], df[\"transparency\"])\n\n    else:\n        \n        df.loc[df[\"price_type\"] == \"Lowest Price Guaranteed\", \"transparency\"] = \"Opaque\"\n        df.loc[(df[\"price_type\"] != \"Lowest Price Guaranteed\") & (df[\"shipping_cost\"] > 0), \n                \"transparency\"] = \"SemiTransparent\"\n        df.loc[(df[\"price_type\"] != \"Lowest Price Guaranteed\") & (df[\"return_policy\"] <= 60),\n                \"transparency\"] = \"Clear\"\n    \n    return df",
            "id": 277
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end)))) right: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (integer)))) (list (string (string_start) (string_content) (string_end))) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end)))) right: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (integer)))) (list (string (string_start) (string_content) (string_end))) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))))) alternative: (else_clause body: (block (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end))) subscript: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (binary_operator left: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end)))) right: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (integer)))) subscript: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (binary_operator left: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end)))) right: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (integer)))) subscript: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end))))))) (return_statement (identifier)))))\n**\n",
        "text": " 4",
        "token_cnt": 1144
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_high_finance(assets, revenue):\n    \"\"\"Determine whether high finance budgeting is required based \n    upon asset size and revenue.\"\"\"\n\n    \n    if assets > 50e6:\n        print(\"Total Assets:\", assets)\n\n        \n        if revenue > 30e6:\n            print(\"Annual Revenue:\", revenue)\n\n            \n            \n            return True\n        \n        else:\n            \n            pass\n    \n    \n    return False",
            "id": 278
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (return_statement (true))) alternative: (else_clause body: (block (pass_statement)))))) (return_statement (false)))))\n**\n",
        "text": " 6",
        "token_cnt": 202
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_low_security_identity_verification(ethic):\n    \"\"\"\n    This function will update the current version of \n    \"Low Security: Identity Verification\" course based on given ethical standard\n    \n    Args:\n        ethic (str): The selected ethical standrad by user\n            - 'green' for greenwashing prevention \n            - 'white' for privacy protection\n            - 'black' for secure data collection\n            \n    Returns:\n        None\n        \n    Raises:\n        ValueError: If invalid input value provided for `ethic` parameter    \n    \"\"\"    \n\n    \n    ETHICS = ['green', 'white', 'black']\n    \n    \n    if ethic not in ETHICS:    \n        raise ValueError(f\"`{ethic}` is not a valid choice. Choose from {ETHICS}.\")   \n    \n    \n    if ethic == 'green':    \n        print(\"Updating course content to prevent greenwashing...\")    \n        \n        \n        \n    elif ethic == 'white':    \n        print(\"Enhancing privacy features in ID verification system...\")    \n        \n        \n    else:    \n        print(\"Strengthening data security protocols across all systems..\")    \n        \n        \n\n\nupdate_low_security_identity_verification('green')",
            "id": 280
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))\n**\n",
        "text": " 6",
        "token_cnt": 428
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_extreme_bathing(reliability):\n    \"\"\"\n    Calculates the optimal time required for performing \n    'Extreme Bathing' (cleansing oneself properly) given its reliability\n\n    Args:\n        reliability (float): A value between [0,1] indicating the \n            reliability of this process\n    \n    Returns:\n        float: The total time taken for completing the task when\n            performed at maximum possible efficiency\n    Raises:\n        ValueError: If input `reliability` is not within range [0,1]\n        \n    Control Flow Diagram:\n         - Check if reliability is valid\n           | Yes -> proceed to next step\n           | No -> raise error\n          - Based on reliability level\n             | High    -> return constant time \n             | Medium  -> return linearly increasing time \n             | Low     -> return quadratically increasing time  \n             \n    Complexity Analysis: \n        Time complexity: O(1) since we only check for validity once per call\n        Space complexity: O(1) since we don't use any additional space beyond arguments passed as inputs\n    \"\"\"    \n    \n    if not isinstance(reliability, float) or reliability < 0 or reliability > 1 :\n        raise ValueError(\"Invalid reliability value\")\n    \n    \n    if reliability >= 0.95:\n        return 240.0\n    \n    \n    elif reliability >= 0.7:\n        return 360 + 80 * (reliability - 0.7)\n    \n    \n    else:    \n        return 480 + 160*pow((reliability - 0.3), 2)",
            "id": 281
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (boolean_operator left: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) right: (comparison_operator (identifier) (integer))) right: (comparison_operator (identifier) (integer))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (float))) alternative: (elif_clause condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (binary_operator left: (integer) right: (binary_operator left: (integer) right: (parenthesized_expression (binary_operator left: (identifier) right: (float)))))))) alternative: (else_clause body: (block (return_statement (binary_operator left: (integer) right: (binary_operator left: (integer) right: (call function: (identifier) arguments: (argument_list (parenthesized_expression (binary_operator left: (identifier) right: (float))) (integer))))))))))))\n**\n",
        "text": " 10",
        "token_cnt": 333
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_extreme_transport(df):\n    \"\"\"\n    This function updates the dataframe df by adding new columns \n    such as 'wait time', 'reliability' etc. based on the given conditions\n    \n    Parameters:\n        df (pandas DataFrame): The input dataframe containing information about \n            each trip of Uber, Lyft and Sidecar rides\n        \n    Returns:\n        pandas Dataframe: The updated dataframe with additional columns added\n    \"\"\"\n\n    \n    def calculate_wait_time(row):\n        if row['service'] == \"uber\":\n            return row['trip duration'] - row['request timestamp']\n        elif row['service'] == \"lyft\":\n            return row['tpepPickupDateTime'] - row['pickup datetime']\n        else:\n            return None\n\n    df[\"wait time\"] = df.apply(calculate_wait_time, axis=1)\n\n    \n    def add_reliability(row):\n        if row['service'] == \"uber\" and row['fare amount'] > 0:\n            return round((row['tip amount']/row['fare amount'])*100,2)\n        elif row['service'] == \"lyft\" and row['extra'] > 0:\n            return round((row['tips']/row['extra'])*100,2)\n        else:\n            return np.nan\n\n    df[\"reliability\"]=df.apply(add_reliability,axis=1)\n\n    \n    df[\"reliability\"].fillna(value=np.nan, inplace=True)\n\n    \n    def add_safety_score(row):\n        if row['service']=='uber':\n            if row['safe'] == True:\n                return 5\n            else:\n                return 1\n        elif row['service']=='lyft':\n            if row['driver acceptance rate'] >= .7:\n                return 4\n            elif row['driver acceptance rate'] >= .3:\n                return 3\n            else:\n                return 1\n        else:\n            return 1\n\n    df[\"safety score\"] = df.apply(add_safety_score, axis=1)\n\n    \n    agg_dict = {'user type':'first','service':'last',\"safety score\":\"mean\"}\n    groupby_result = df.groupby(['user type']).agg(agg_dict).reset_index()\n\n    \n    final_df = pd.merge(left=df, right=groupby_result, how=\"inner\",\n                        left_on=['user type'],right_on=[\"user type\"])\n\n    return final_df",
            "id": 282
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (binary_operator left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (binary_operator left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (return_statement (none))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (integer)))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (boolean_operator left: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end))) right: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (integer))) consequence: (block (return_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (parenthesized_expression (binary_operator left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) right: (integer)) (integer))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end))) right: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (integer))) consequence: (block (return_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (parenthesized_expression (binary_operator left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) right: (integer)) (integer)))))) alternative: (else_clause body: (block (return_statement (attribute object: (identifier) attribute: (identifier)))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (integer)))))) (expression_statement (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier))) (keyword_argument name: (identifier) value: (true))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (true)) consequence: (block (return_statement (integer))) alternative: (else_clause body: (block (return_statement (integer)))))) alternative: (elif_clause condition: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (float)) consequence: (block (return_statement (integer))) alternative: (elif_clause condition: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (float)) consequence: (block (return_statement (integer)))) alternative: (else_clause body: (block (return_statement (integer))))))) alternative: (else_clause body: (block (return_statement (integer))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (integer)))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (string (string_start) (string_content) (string_end))))) attribute: (identifier)) arguments: (argument_list (identifier))) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (list (string (string_start) (string_content) (string_end)))) (keyword_argument name: (identifier) value: (list (string (string_start) (string_content) (string_end)))))))) (return_statement (identifier)))))\n**\n",
        "text": " 4",
        "token_cnt": 1900
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_high_handling(item):\n    \"\"\"This function updates the status of high handling \n    personal item depending upon its safety level.\"\"\"\n\n    \n    \n    if (item['safety'] == \"High\"):\n        print(\"Updating\", item['name'], \"...\")\n\n        \n        \n        today = datetime.now()\n        exp_date = datetime.strptime(item['warranty_exp_date'])\n        \n        if (today > exp_date):\n            print(\"Warranty Expired! Item being marked unsafe.\")\n            item['status'] = \"Unsafe\"\n        else:\n            print(\"Item still within Warranty Period!\")\n            item['status'] = \"Safe\"\n    \n    return item\n\n\n\nelectronic_devices = [\n  {'name': 'Smartphone', 'category': 'Electronics',\n   'safety': 'Medium', 'warranty_exp_date': '2023-10-15'},\n  {'name': 'Laptop', 'category': 'Electronics', \n   'safety': 'High', 'warranty_exp_date': '2024-12-18'}]\n\nfor device in electronic_devices:\n    updated_device = update_high_handling(device)\n    print(\"\\nDevice:\", updated_device['name'], \"\\tStatus:\", \n          updated_device['status'])\n\nprint(\"\\nAll Devices Updated Successfully!!\")",
            "id": 283
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (identifier))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end))))))))) (return_statement (identifier)))) (expression_statement (assignment left: (identifier) right: (list (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))) (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content (escape_sequence)) (string_end)) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))))\n**\n",
        "text": " 4",
        "token_cnt": 1074
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_extreme_nose_care(bias):\n    \"\"\"Transforms extreme nose care input into appropriate decision making process.\"\"\"\n\n    \n    action_dict = {\n        \"medical\": recommend_medication(),\n        \"surgical\": refer_to_specialist()\n    }\n    \n    \n    if bias == 'medical':\n        return action_dict['medical']\n    elif bias == 'surgical':\n        return action_dict['surgical']\n    else:\n        raise ValueError('Invalid value entered')\n\n\n\ndef recommend_medication():\n    \"\"\"Recommends over-the-counter medications for nasal congestion.\"\"\"\n    pass\n    \ndef refer_to_specialist():\n    \"\"\"Refer patient to ear, nose, and throat specialist for surgery.\"\"\"\n    pass",
            "id": 285
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (call function: (identifier) arguments: (argument_list))) (pair key: (string (string_start) (string_content) (string_end)) value: (call function: (identifier) arguments: (argument_list)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (pass_statement))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (pass_statement))))\n**\n",
        "text": " 6",
        "token_cnt": 416
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_low_food_hygiene(score):\n    \n    if (expert_decide(score) and score > prev_best_score):\n        return score\n    \n    \n    else: \n        return prev_best_score",
            "id": 286
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (parenthesized_expression (boolean_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (comparison_operator (identifier) (identifier)))) consequence: (block (return_statement (identifier))) alternative: (else_clause body: (block (return_statement (identifier))))))))\n**\n",
        "text": " 6",
        "token_cnt": 107
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random\nfrom datetime import date\n\n\ndef update_precipitation(transparency):\n    \"\"\"This function will update the current precipitation amount \n    depending upon the given transparency level.\"\"\"\n\n    \n    rain = [0.1 * x + 2 for x in range(365)]\n    \n    \n    today = date.today()\n    \n    \n    if random.random() < rain[today.day - 1]:\n        print(\"It's currently raining.\")\n        \n        \n        \n        total_rain += rain[today.day - 1]\n        \n    else:\n        print(\"No rain detected yet!\")\n        \n     \n     \n    if (transparency >= 75) & (transparency <= 98):\n        sunlight_hours = 4*transparency//100\n    elif transparency > 98:    \n        sunlight_hours = 16\n    else:\n        sunlight_hours = 0    \n         \n    \n    \n    remaining_rain_hours = 24 - sunlight_hours   \n          \n    \n    if today.hour >= 12:    \n        prob_of_rain = max((sunlight_hours / 24), .1)  \n            \n    \n    else:    \n        prob_of_rain = min(((24 - today.hour) / 12)+ ((sunlight_hours / 24)), .6)        \n      \n   \n   \n    if random.uniform(0, 1) < prob_of_rain:    \n        total_rain += 0.01 * remaining_rain_hours   \n    \n   return total_rain \n\n\n\ntotal_rain = 0   \n\nwhile True:\n    \n    transparency = float(input(\"Enter the visibility percentage: \"))\n    \n    \n    updated_rain = update_precipitation(transparency)\n    \n    \n    print(\"Total rainfall:\", updated_rain)",
            "id": 287
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (binary_operator left: (binary_operator left: (float) right: (identifier)) right: (integer)) (for_in_clause left: (identifier) right: (call function: (identifier) arguments: (argument_list (integer))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (subscript value: (identifier) subscript: (binary_operator left: (attribute object: (identifier) attribute: (identifier)) right: (integer)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (augmented_assignment left: (identifier) right: (subscript value: (identifier) subscript: (binary_operator left: (attribute object: (identifier) attribute: (identifier)) right: (integer)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (integer))) right: (parenthesized_expression (comparison_operator (identifier) (integer)))) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (integer) right: (identifier)) right: (integer))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (integer))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (integer)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (integer) right: (identifier)))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (parenthesized_expression (binary_operator left: (identifier) right: (integer))) (float)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (parenthesized_expression (binary_operator left: (parenthesized_expression (binary_operator left: (integer) right: (attribute object: (identifier) attribute: (identifier)))) right: (integer))) right: (parenthesized_expression (parenthesized_expression (binary_operator left: (identifier) right: (integer))))) (float)))))))) (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer))) (identifier)) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (binary_operator left: (float) right: (identifier)))))))) (return_statement (identifier)) (expression_statement (assignment left: (identifier) right: (integer))) (while_statement condition: (true) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))))))\n**\n",
        "text": " 10",
        "token_cnt": 1053
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import datetime as dt\nfrom random import randint\n\n\ndef transform_low_handwash(dry_hands=True):\n    \"\"\"Transform low handwashing technique into high one.\"\"\"\n\n    \n    now = dt.datetime.now()\n    \n    \n    if ((now.hour >= 9 and now.hour <= 17)):\n        \n        if (contact_with_infectious()):\n            print(\"Drying hands since they came into contact with infectious materials.\")\n            dry_hands = True\n        \n        else: \n            print(\"Not drying hands because no contact with infectious materials\")\n            \n    elif (now.hour < 9 or now.hour > 17):\n        \n        print(\"Always drying hands outside working hours\")\n        dry_hands = True\n        \n    return dry_hands\n    \n    \n    \ndef contact_with_infectious():\n    \"\"\"Return true if engineer has come into contact with infectious materials\"\"\"\n    \n    \n    prob = round(random.uniform(0, 1),2)\n    \n    \n    if prob < .3:\n        result = \"Contact made but chance of infection very small\"\n    elif prob < .6:\n        result = \"Engineer touched something contaminated\"\n    else:\n        result = \"High risk exposure to pathogens; see supervisor immediately.\"    \n    \n    print(f\"{result} Probability of infection {prob}\")\n    \n    return bool(prob < .8)\n    \n\nif __name__ == \"__main__\":\n    \n    transformed = transform_low_handwash(dry_hands=False)\n    assert transformed == True, \"Expected transformed value to be True after dry run\"\n    \n    \n    transformed = transform_low_handwash()\n    assert transformed == False, \"Expected transformed value to be false when no contact with infectious materials\"",
            "id": 289
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (default_parameter name: (identifier) value: (true))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (parenthesized_expression (parenthesized_expression (boolean_operator left: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (integer)) right: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (integer))))) consequence: (block (if_statement condition: (parenthesized_expression (call function: (identifier) arguments: (argument_list))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (true)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))) alternative: (elif_clause condition: (parenthesized_expression (boolean_operator left: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (integer)) right: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (integer)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (true)))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer))) (integer))))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (float)) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_end))))) (return_statement (call function: (identifier) arguments: (argument_list (comparison_operator (identifier) (float))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (false)))))) (assert_statement (comparison_operator (identifier) (true)) (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (assert_statement (comparison_operator (identifier) (false)) (string (string_start) (string_content) (string_end))))))\n**\n",
        "text": " 4",
        "token_cnt": 991
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import os\nfrom cryptography.fernet import Fernet\n\n\ndef check_security(password):\n    \n    cipher_suite = None\n\n    \n    if len(password) >= 16:\n        \n        key = Fernet.generate_key()\n\n        \n        cipher_suite = Fernet(key)\n        \n        \n        with open(\"secret_key.key\", \"wb\") as file_object:\n            file_object.write(key)\n    \n    return cipher_suite\n\n\nif __name__ == \"__main__\":\n    \n    password = input(\"Enter your password:\")\n\n    \n    cipher_suite = check_security(password)\n\n    \n    if cipher_suite:\n        print(\"High security :data encryption achieved.\")\n        print(\"Key has been saved as secret_key.key\")\n    else:\n        print(\"Password does not meet requirements.\")",
            "id": 290
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (none))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (with_statement (with_clause (with_item value: (as_pattern (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) alias: (as_pattern_target (identifier))))) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))))) (return_statement (identifier)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (identifier) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))\n**\n",
        "text": " 10",
        "token_cnt": 554
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_bathroom(privacy):\n    \"\"\"This function updates the bathroom according to \n    the specified privacy level.\"\"\"\n\n    \n    shampoos = [\"Luxury Shampoo\", \"Moisturizing Shampoo\"]\n    soaps = [\"Gentle Soap\", \"Foaming Soap\"]\n    lotions = [\"Hydrating Lotion\", \"Nourishing Lotion\"]\n    \n    \n    if privacy == 'public':\n        selected_product = random.choice(shampoos)\n    elif privacy == 'private':\n        selected_product = random.choice(soaps)\n    else:\n        selected_product = random.choice(lotions)\n        \n    print(\"Selected Product:\",selected_product)\n    \n\nupdate_bathroom('private')",
            "id": 292
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))\n**\n",
        "text": " 6",
        "token_cnt": 481
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import requests\nfrom bs4 import BeautifulSoup\n\n\ndef get_weather_data(city):\n    url = f\"https://www.google.com/search?q={city}+weather\"\n\n    page = requests.get(url)\n    soup = BeautifulSoup(page.content, \"html.parser\")\n    \n    \n    temp = soup.find(\"span\", class_=\"wob_tm\").text[:-1] + u\"\\N{DEGREE SIGN}\"\n\n    \n    max_temp = soup.find(\"div\", attrs={\"class\": \"wob_t\"}).text.split()[-2][:-1] + u\"\\N{DEGREE SIGN}\"\n\n    \n    min_temp = soup.find(\"div\", attrs={\"class\": \"_9AhH0 _3mRYP\"}).text.strip().replace(\"\\n\", \"\")[:-1] + u\"\\N{DEGREE SIGN}\"\n\n    return {\"current_temperature\": temp, \n            \"max_temperature\": max_temp,\n            \"min_temperature\": min_temp}\n\n\n\nif __name__ == \"__main__\":\n    city = input(\"Enter the name of the city : \")\n    weather_data = get_weather_data(city)\n\n    print(f\"\"\"Current Temperature in {city}: {weather_data['current_temperature']}\n    Maximum Temperature Recorded: {weather_data['max_temperature']}\n    Minimum Temperature Recorded: {weather_data['min_temperature']}\\n\"\"\")\n\n\n    \n    \n\n    if float(weather_data[\"min_temperature\"]) < 0:\n        print(f\"{city}'s temperature has dropped bellow zero degrees celsius! This indicates extremely cold weather.\")\n\n        \n\n        tomorrow_weather_data = get_weather_data(city)\n        \n        if float(tomorrow_weather_data[\"min_temperature\"]) < 0:\n            print(f\"Tommorow's weather forecast suggests that the temperature might remain bellow zero degrees celsius again!\")\n        else:\n            print(f\"However tomorrows' wether forecast doesn't suggest such drastic changes in temperature.\\\n                    Hence this may not necessarily indicate extreme weather condition.\")\n\n    else: \n        print(f\"Today's temperature does not seem to indicate any sign of extreme weather conditons.\")",
            "id": 293
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (subscript value: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))) attribute: (identifier)) subscript: (slice (unary_operator argument: (integer)))) right: (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (subscript value: (subscript value: (call function: (attribute object: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))))))) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) subscript: (unary_operator argument: (integer))) subscript: (slice (unary_operator argument: (integer)))) right: (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (subscript value: (call function: (attribute object: (call function: (attribute object: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))))))) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)) (string (string_start) (string_end)))) subscript: (slice (unary_operator argument: (integer)))) right: (string (string_start) (string_content (escape_sequence)) (string_end))))) (return_statement (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content (escape_sequence)) (string_end))))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))\n**\n",
        "text": " 10",
        "token_cnt": 1491
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "HIGH_RELIABILITY = \"High\"\nMEDIUM_RELIABILITY = \"Medium\"\nLOW_RELIABILITY = \"Low\"\n\ndef calculate_tissue_disposal(reliability):\n    \"\"\" Calculates how many used tissues need to be disposed \n    according to given level of reliability\n    \n    Args:\n        reliability (str): Level of reliability\n        \n    Returns:\n        int: Number of used tissues needed to be discarded\n    \"\"\"\n\n    \n    count = 0\n    \n    \n    if reliability == HIGH_RELIABILITY:\n        count = 1\n    elif reliability == MEDIUM_RELIABILITY:\n        count = 2\n    else:\n        count = 3\n    \n    print(\"Based on\", reliability, \"level, \", \n          \"you will need to dispose\", count, \"used tissues.\")\n    \n    return count\n\nif __name__ == \"__main__\":    \n    \n    reliability = input(\"Enter reliability level [high, medium, low]: \")    \n    \n    \n    num_tissues = calculate_tissue_disposal(reliability)",
            "id": 295
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (integer))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (integer)))) alternative: (elif_clause condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (integer))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content) (string_end))))) (return_statement (identifier)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))))))\n**\n",
        "text": " 6",
        "token_cnt": 480
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_extreme_flossing(responses):\n    \"\"\"Determine extreme flossing by checking responses.\"\"\"\n\n    \n    OUTCOMES = [\"Correct\", \"Incorrect\", \"Unsure\", \"Inconclusive\"]\n    VALUES = [True, False]\n    \n    \n    num_correct = sum([int(r == 'Yes') for r in responses])\n    \n    \n    if num_correct >= len(VALUES)-1:\n        return OUTCOMES[0]    \n    elif any([r=='No' for r in responses]):\n        return OUTCOMES[1]   \n    elif num_correct==1 and any([r=='Unsure' for r in responses]):\n        return OUTCOMES[2]   \n    else:\n        return OUTCOMES[3]   \n        \n\ninputs = ['Yes', 'No', 'Unsure']\nprint(determine_extreme_flossing(inputs))",
            "id": 297
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list (true) (false)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list_comprehension body: (call function: (identifier) arguments: (argument_list (comparison_operator (identifier) (string (string_start) (string_content) (string_end))))) (for_in_clause left: (identifier) right: (identifier))))))) (if_statement condition: (comparison_operator (identifier) (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (integer))) consequence: (block (return_statement (subscript value: (identifier) subscript: (integer)))) alternative: (elif_clause condition: (call function: (identifier) arguments: (argument_list (list_comprehension body: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) (for_in_clause left: (identifier) right: (identifier))))) consequence: (block (return_statement (subscript value: (identifier) subscript: (integer))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (integer)) right: (call function: (identifier) arguments: (argument_list (list_comprehension body: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) (for_in_clause left: (identifier) right: (identifier)))))) consequence: (block (return_statement (subscript value: (identifier) subscript: (integer))))) alternative: (else_clause body: (block (return_statement (subscript value: (identifier) subscript: (integer)))))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier)))))))\n**\n",
        "text": " 6",
        "token_cnt": 659
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def display_extreme_weather(professional_trust):\n    \"\"\"Displays extreme weather precipitation based on \n    professional trust levels involved in making decisions.\"\"\"\n    \n    \n    if professional_trust >= 'Low' and professional_trust <='Moderate':\n        print(\"It is likely that there will be heavy rainfall during this time period.\")\n\n    elif professional_trust == 'High':\n        print(\"There is a possibility of very heavy rainfall during this time frame\")\n        \n    \n    else:    \n        print(\"Invalid Input\")\n        \n\ndisplay_extreme_weather('Medium')\ndisplay_extreme_weather('Very High')\ndisplay_extreme_weather('Invalid Value')",
            "id": 298
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))\n**\n",
        "text": " 6",
        "token_cnt": 379
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_high_personal_organization(experts):\n    \"\"\"\n    This function updates high personal organization by integrating expertise from multiple sources \n    into one cohesive schedule while prioritizing time management skills such as task delegation, \n    goal setting, and stress reduction techniques.\n\n    Parameters:\n        - experts (list[dict]): list of dictionaries containing information about each expert including \n            name, email address, phone number, department, title, years of experience, area of expertise,\n            and their respective trust levels between 0 and 1\n    \n    Returns:\n        - updated_schedule (list[dict]): list of schedules after integration of new expertise\n    \"\"\"\n\n    \n    sorted_experts = sorted(experts, key=lambda x: x['trust'], reverse=True)\n\n    \n    master_schedule = []\n\n    \n    for expert in sorted_experts:\n\n        \n        conflict = False\n        for entry in master_schedule:\n\n            \n            if entry['date'] == expert['appointment']['date'] and \\\n                entry['start_time'] <= expert['appointment']['start_time'] < entry['end_time']:\n                    conflict = True\n                    break\n        \n            elif entry['date'] == expert['appointment']['date'] and \\\n                entry['end_time'] > expert['appointment']['start_time']:\n                    conflict = True\n                    break\n        \n        \n        if not conflict:\n            master_schedule.append(expert['appointment'])\n\n    return master_schedule",
            "id": 299
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (lambda parameters: (lambda_parameters (identifier)) body: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (keyword_argument name: (identifier) value: (true)))))) (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (false))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (boolean_operator left: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (string (string_start) (string_content) (string_end)))) (line_continuation) right: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (string (string_start) (string_content) (string_end))) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) consequence: (block (expression_statement (assignment left: (identifier) right: (true))) (break_statement)) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (string (string_start) (string_content) (string_end)))) (line_continuation) right: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (string (string_start) (string_content) (string_end))))) consequence: (block (expression_statement (assignment left: (identifier) right: (true))) (break_statement)))))) (if_statement condition: (not_operator argument: (identifier)) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))))))) (return_statement (identifier)))))\n**\n",
        "text": " 5",
        "token_cnt": 772
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import tweepy\nfrom textblob import TextBlob\n\n \nconsumer_key = 'YOUR CONSUMER KEY'\nconsumer_secret = 'YOUR CONSUMER SECRET'\naccess_token = 'YOUR ACCESS TOKEN'\naccess_token_secret = 'YOUR ACCESS TOKEN SECRET'\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\napi = tweepy.API(auth)\n\nsearch_terms=['apple', 'microsoft']\ndef analyze_sentiment(tweet):\n    analysis=TextBlob(tweet)\n    if analysis.polarity >0 :\n        return \"Positive\" \n    elif analysis.polarity ==0: \n        return \"Neutral\"\n    else:\n        return \"Negative\"\nfor term in search_terms:\n    print(\"Tweets about\",term,\":\\n\")\n    results = api.search(q=term,count=10)\n    for result in results:\n        print(\"@{}:{}\\n\".format(result.user.screen_name,result.text))\n        \n        analyzed_sentiment=analyze_sentiment(result.text)\n        print(\"Sentiment:\",analyzed_sentiment,\"\\n\")\n        \n        if analyzed_sentiment==\"Negative\":\n            \n            pass\n        elif analyzed_sentiment=\"Positive\":\n           \n           pass\n        else:\n          \n          pass",
            "id": 301
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (integer)))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content (escape_sequence)) (string_end)) attribute: (identifier)) arguments: (argument_list (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) (attribute object: (identifier) attribute: (identifier))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content (escape_sequence)) (string_end))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (pass_statement)) alternative: (elif_clause (ERROR (identifier)) condition: (string (string_start) (string_content) (string_end)) consequence: (block (pass_statement))) alternative: (else_clause body: (block (pass_statement)))))))))\n**\n",
        "text": " 10",
        "token_cnt": 980
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_cough_etiquette(use_tissue):\n    \"\"\"\n    Checks if user has been following proper coughing etiquette by \n    either using a tissue or their elbow to cover their mouth\n    \n    Args:\n        use_tissue (bool): Whether the user used a tissue or not\n        \n    Returns:\n        str: A message indicating whether correct etiquette was followed or \n            not\n    \"\"\"\n    if use_tissue:\n        return \"Correct! Coughing into a tissue is considered good hygiene.\"\n    else:\n        return \"Incorrect. It is recommended to use a tissue when coughing.\"\n    \n    \ndef check_sneeze_etiquette(cover_mouth):\n    \"\"\"\n    Checks if user has been following proper sneezing etiquette by \n    covering their mouth with their arm or hand\n    \n    Args:\n        cover_mouth (bool): Whether the user covered their mouth or not\n        \n    Returns:\n        str: A message indicating whether correct etiquette was followed or\n            not",
            "id": 304
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (identifier) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) (ERROR (string_start) (identifier) (ERROR (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)) (identifier) (identifier) (with_clause (with_item value: (boolean_operator left: (identifier) (ERROR (identifier)) right: (identifier)))) (ERROR (identifier) (call function: (identifier) arguments: (argument_list (identifier)))) (identifier) (ERROR (identifier) (identifier) (identifier) (identifier) (identifier))) body: (block)) (ERROR (identifier) (type (identifier)) (ERROR (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)) (identifier)))\n**\n",
        "text": " 10",
        "token_cnt": 291
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import math\n\ndef calculate_daily_steps(age, height):\n    \n    bmi = round((weight / (height * height)) ,2)\n\n    \n    if age <= 60 and gender == 'Male':\n        daily_target_steps =  1000 + (4.7 * bmi) - (5.8 * age)\n    elif age > 60 and gender == 'Male': \n        daily_target_steps =   1000 + (4.7 * bmi) - (9.3 * age)\n    elif age <= 60 and gender == 'Female':\n        daily_target_steps =  600 + (4.7 * bmi) - (4.7 * age)\n    else :\n        daily_target_steps =  600 + (4.7 * bmi) - (9.3 * age)\n    \n    return daily_target_steps\n\n\n\nprint(\"Enter your details:\")\ngender = input(\"Enter your Gender [M/F]: \")\nwhile True:    \n    try:    \n        weight = float(input(\"Enter your Weight in Kg: \"))    \n        break    \n    except ValueError:    \n        print(\"Invalid Input\")    \n\ntry:    \n    height = int(input(\"Enter your Height in cm: \"))    \nexcept ValueError:    \n    print(\"Invalid Input\")   \n\nage = int(input(\"Enter your Age: \"))    \n\ncurrent_step_count = int(input(\"Enter today's total number of steps:\"))\n\nrecommended_step_count = calculate_daily_steps(age, height)\n\nif current_step_count < recommended_step_count:\n    print(\"Low Fitness Alert!\")\nelif current_step_count >= recommended_step_count:\n    print(\"Congratulations! Your daily steps are sufficient.\")",
            "id": 305
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (parenthesized_expression (binary_operator left: (identifier) right: (parenthesized_expression (binary_operator left: (identifier) right: (identifier))))) (integer))))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (integer) right: (parenthesized_expression (binary_operator left: (float) right: (identifier)))) right: (parenthesized_expression (binary_operator left: (float) right: (identifier))))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (integer) right: (parenthesized_expression (binary_operator left: (float) right: (identifier)))) right: (parenthesized_expression (binary_operator left: (float) right: (identifier)))))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (integer) right: (parenthesized_expression (binary_operator left: (float) right: (identifier)))) right: (parenthesized_expression (binary_operator left: (float) right: (identifier)))))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (integer) right: (parenthesized_expression (binary_operator left: (float) right: (identifier)))) right: (parenthesized_expression (binary_operator left: (float) right: (identifier))))))))) (return_statement (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (while_statement condition: (true) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (break_statement)) (except_clause (identifier) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))) (except_clause (identifier) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 1187
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_extreme_finance(reliability):\n    \"\"\"Determine whether a given finance plan is extreme based \n    on its reliability score.\"\"\"\n\n    \n    responses = [\n        \"The provided reliability score indicates this financial plan may not be ideal for a beginner engineer.\", \n        \"Based on the provided reliability score, we recommend exploring other options before committing to this particular finance plan.\"\n    ]\n    \n    \n    if (0 <= reliability < .34):\n        return responses[0]\n        \n    elif (.35 <= reliability < .67):\n        return responses[1]\n        \n    else:\n        raise ValueError(\"Invalid input\")\n        \n\nprint(determine_extreme_finance(.5))   \nprint(determine_extreme_finance(.8))    \ntry:\n    print(determine_extreme_finance(-2))  \nexcept ValueError as e:\n    print(e)",
            "id": 306
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (if_statement condition: (parenthesized_expression (comparison_operator (integer) (identifier) (float))) consequence: (block (return_statement (subscript value: (identifier) subscript: (integer)))) alternative: (elif_clause condition: (parenthesized_expression (comparison_operator (float) (identifier) (float))) consequence: (block (return_statement (subscript value: (identifier) subscript: (integer))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (float)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (float)))))) (try_statement body: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (unary_operator argument: (integer)))))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))))))\n**\n",
        "text": " 10",
        "token_cnt": 412
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "hair_condition = \"Fine\" \nshampoo = \"Head & Shoulders\" \nfrequency = \"Daily\" \n\n\nreliabilities = {\n    \"Very Low\": [\"Consult a dermatologist\"], \n    \"Low\": [\"Use another shampoo\"], \n    \"Moderate\": [], \n    \"High\": [\"Repeat as usual\"], \n    \"Very High\": []\n}\n\n\ndef check_high_haircare(hair_condition, shampoo, frequency):\n    \"\"\"\n    This function takes in three inputs (hair_condition, shampoo, frequency) and checks the high hair care recommendation according to the provided reliability levels\n    \n    Returns: A list containing the recommended action steps\n    \"\"\"\n\n    \n    for level, recommendations in reliabilities.items():\n        if all([hair_condition == rec[0] for rec in recommendations]) \\\n            and shampoo == recommendations[-1][0]:\n                return [rec[1] for rec in recommendations if rec[0] == frequency]\n                \n    \n    return [\"Follow general hair care advice\"]\n    \n\n\nprint(\"Recommendations:\")\nfor step in check_high_haircare(hair_condition, shampoo, frequency):\n    print(\"- {}\".format(step))",
            "id": 307
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (list)) (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (list))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) body: (block (if_statement condition: (boolean_operator left: (call function: (identifier) arguments: (argument_list (list_comprehension body: (comparison_operator (identifier) (subscript value: (identifier) subscript: (integer))) (for_in_clause left: (identifier) right: (identifier))))) (line_continuation) right: (comparison_operator (identifier) (subscript value: (subscript value: (identifier) subscript: (unary_operator argument: (integer))) subscript: (integer)))) consequence: (block (return_statement (list_comprehension body: (subscript value: (identifier) subscript: (integer)) (for_in_clause left: (identifier) right: (identifier)) (if_clause (comparison_operator (subscript value: (identifier) subscript: (integer)) (identifier))))))))) (return_statement (list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier))) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))))))))\n**\n",
        "text": " 5",
        "token_cnt": 743
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def high_sneeze_cough_etiquette(privacy):\n        \"\"\"Calculate appropriate sneeze and cough etiquette given privacy level\n        \n        Args:\n            privacy (int): A value between 0 and 100 indicating the desired level of \n                privacy. The higher the number, the more private the space.\n\n        Returns:\n            str: A string containing the recommended sneeze and cough etiquette \n            guidelines for the specified privacy level.\n    \n        Raises:\n            ValueError: If `privacy` is not an integer within the range [0, 100].\n    \n        \"\"\"\n        \n        if isinstance(privacy, int) == False or \\\n           (isinstance(privacy, float) and privacy % 1 != 0) or \\\n           (isinstance(privacy, int) and (privacy < 0 or privacy > 100)):\n               raise ValueError(\"Invalid argument type provided\")\n    \n        \n        if privacy >= 85:\n            return \"Use tissue\"\n        elif privacy >= 65:\n            return \"Consider elbow\"\n        else:\n            return \"No preference\"",
            "id": 308
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (boolean_operator left: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (false)) (line_continuation) right: (parenthesized_expression (boolean_operator left: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) right: (comparison_operator (binary_operator left: (identifier) right: (integer)) (integer))))) (line_continuation) right: (parenthesized_expression (boolean_operator left: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) right: (parenthesized_expression (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (integer))))))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 399
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\n\n\ndf = pd.read_csv(\"OnlineShopping.csv\")\n\n\ndel df['InvoiceNo']\ndel df['StockCode']\ndel df['Description']\ndel df['Quantity']\ndel df['CustomerID']\ndel df['Country']\n\n\ndf['OrderDate'] = pd.to_datetime(df['OrderDate'])\n\n\nX = df[[\"ShipMode\", \"UnitPrice\", \"Discount\"]]\ny = df[\"TotalAmount\"]\n\n\nle = preprocessing.LabelEncoder()\nfor col in X.columns:\n    if X[col].dtype == object:\n        le.fit(list(X[col]))\n        X[col] = le.transform(list(X[col]))\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y)\n\n\nregressor = LinearRegression().fit(X_train, y_train)\n\n\npredictions = regressor.predict(X_test)\n\n\nrmse = (sum((y_test - predictions)**2))**(0.5) / len(y_test)\nprint(\"RMSE:\", rmse)\n\n\n\ndef check_extreme(shipmode, price, discount):\n    \n    pred_amount = regressor.predict([[int(shipmode), float(price), int(discount)]])\n    \n    \n    avg_order_value = y_train.mean()\n    std_deviation = y_train.std()\n    if pred_amount > avg_order_value + 3 * std_deviation:\n        return True\n    else:\n        return False\n    \n\ncheck_extreme(1, 79.64, 0)    \ncheck_extreme(2, 80.64, 0)",
            "id": 309
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (delete_statement (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (delete_statement (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (delete_statement (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (delete_statement (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (delete_statement (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (delete_statement (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (for_statement left: (identifier) right: (attribute object: (identifier) attribute: (identifier)) body: (block (if_statement condition: (comparison_operator (attribute object: (subscript value: (identifier) subscript: (identifier)) attribute: (identifier)) (identifier)) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (identifier))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (identifier)))))))))))) (expression_statement (assignment left: (pattern_list (identifier) (identifier) (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (identifier) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (parenthesized_expression (call function: (identifier) arguments: (argument_list (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (identifier))) right: (integer))))) right: (parenthesized_expression (float))) right: (call function: (identifier) arguments: (argument_list (identifier)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (list (call function: (identifier) arguments: (argument_list (identifier))) (call function: (identifier) arguments: (argument_list (identifier))) (call function: (identifier) arguments: (argument_list (identifier))))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (binary_operator left: (identifier) right: (binary_operator left: (integer) right: (identifier)))) consequence: (block (return_statement (true))) alternative: (else_clause body: (block (return_statement (false))))))) (expression_statement (call function: (identifier) arguments: (argument_list (integer) (float) (integer)))) (expression_statement (call function: (identifier) arguments: (argument_list (integer) (float) (integer)))))\n**\n",
        "text": " The cyclomatic complexity of the given Python code, represented in AST format, is 1",
        "token_cnt": 1416
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom datetime import date\n\n\ndf = pd.read_csv(\"patient_data.csv\")\n\n\ncurrent_year = str(date.today().year)\n\n\ndef update_record(row):\n    \n    patient_id = row[\"Patient ID\"]\n    gender = row[\"Gender\"]\n    age = int(row[\"Age\"])\n    \n    \n    if row[\"Consent\"]:\n        \n        if age >= 18 and age <= 64:\n            return f\"{patient_id},{gender},{age},Annual Physical Exam,{current_year}\"\n        \n        \n        elif gender == \"Female\" and age >= 40 and age <= 64:\n            return f\"{patient_id},{gender},{age},Mammogram & Pap Test (every 2 yrs),{current_year + ' - ' + (current_year + 2)}\"\n        \n        \n        else:\n            return \"\"\n        \n    \n    else:\n        return \"\"\n    \n\ndf[\"Screening Appointments\"] = df.apply(update_record, axis=1)   \n\n\ndf.drop([\"Gender\", \"Age\", \"Consent\"], axis=1, inplace=True)    \n\n\ndf.to_csv(\"updated_records.csv\", index=False)",
            "id": 314
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (if_statement condition: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (integer))) consequence: (block (return_statement (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_end)))) alternative: (elif_clause condition: (boolean_operator left: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (integer))) right: (comparison_operator (identifier) (integer))) consequence: (block (return_statement (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (binary_operator left: (binary_operator left: (identifier) right: (string (string_start) (string_content) (string_end))) right: (parenthesized_expression (binary_operator left: (identifier) right: (integer))))) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_end))))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_end)))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (integer)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (true))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (false))))))\n**\n",
        "text": " 6",
        "token_cnt": 984
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_low_fitness(user):\n    \n    current_steps = get_daily_step_count(user)\n    if current_steps >= LOW_FITNESS_THRESHOLD:\n        return\n    \n    \n    avg_steps = calculate_daily_average_steps(user)\n\n    \n    if avg_steps < AVG_STEPS_THRESHOLD:\n        send_alert(\"Low Fitness Alert\", f\"User {user['name']} ({user['email']}) has reached \"\n                   f\"low fitness level due to low daily average steps count of {avg_steps}.\")\n        \n        \n        set_user_status(user, UserStatus.AT_RISK)\n        \n    else:    \n        \n        set_user_status(user, UserStatus.NORMAL)",
            "id": 316
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (concatenated_string (string (string_start) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content) (string_end)) (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (attribute object: (identifier) attribute: (identifier)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (attribute object: (identifier) attribute: (identifier)))))))))))\n**\n",
        "text": " 10",
        "token_cnt": 385
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "responsible_party = ['house owner', 'landlord', 'tenant']\nsurface_type = ['door knob', 'toilet flusher', 'kitchen counter']\ndisinfectant = ['alcohol', 'bleach', 'vinegar']\n\n\ndef print_decision(resp, surf, disc):\n    \n    print(\"Disinfect\",surf,\"using\",disc,\"by\", resp)\n\n\n\nprint(\"\\nDry Run:\")\nfor r in responsible_party:\n    for s in surface_type:\n        for d in disinfectant:\n            print_decision(r,s,d)\n\n\nchoice = input(\"\\nEnter choice (RESPONSIBILITY SURFACE DISINFECTANT): \")\ntry:\n    resp, surf, disc = choice.split()\n\n    \n    if resp not in responsible_party:\n        raise ValueError('Invalid RESPONSIBILITY')\n    elif surf not in surface_type:\n        raise ValueError('Invalid SURFACE TYPE')\n    elif disc not in disinfectant:\n        raise ValueError('Invalid DISINFECTANT')\n    \n    \n    print_decision(resp, surf, disc)\n    \nexcept Exception as e:\n    print(\"Error:\",e)",
            "id": 318
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content) (string_end)) (identifier)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (for_statement left: (identifier) right: (identifier) body: (block (for_statement left: (identifier) right: (identifier) body: (block (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier)))))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))) (try_statement body: (block (expression_statement (assignment left: (pattern_list (identifier) (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (identifier)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (identifier)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier))))))))\n**\n",
        "text": " 6",
        "token_cnt": 807
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def main():\n    \n    name = \"\"\n    healthStatus = \"\"\n    numCloseContacts = 0\n\n    \n    print(\"Welcome to the 'Checking Extreme Hygiene During Illness' Program!\")\n    print(\"Please enter your full name:\")\n    name = input()\n    print(\"Please indicate your current health status:\")\n    healthStatusOptions = [\"Healthy\", \"Mild Symptoms\", \"Severe Symptoms\"]\n    healthStatusIndex = int(input(\"\\t1 - Healthy\\n\\t2 - Mild Symptoms\\n\\t3 - Severe Symptoms:\\t\"))\n    healthStatus = healthStatusOptions[healthStatusIndex - 1]\n    print(\"How many close contacts do you have?:\\n\")\n    numCloseContacts = int(input())\n    \n    \n    if healthStatus == \"Healthy\":\n        print(f\"{name}, since you are healthy, there is no need to worry about following extreme hygiene measures.\")\n    elif healthStatus == \"Mild Symptoms\" and numCloseContacts <= 1:\n        print(f\"{name}, as long as you only have one close contact, you can continue with normal hygiene routines.\\nHowever, if this changes, please increase your cleaning efforts.\")\n    elif healthStatus == \"Mild Symptoms\" and numCloseContacts > 1:\n        print(f\"{name}, due to having multiple close contacts, you must take extra precautions by practicing proper handwashing techniques and avoiding contact with others until you are feeling better.\\nIf possible, consider staying home from work or school to prevent exposing other individuals.\")\n    elif healthStatus == \"Severe Symptoms\":\n        print(f\"{name}, because of your severe symptoms, you should isolate yourself at home and refrain from leaving the house unless absolutely necessary.\\nThis includes limiting all interactions with others, including close contacts, and practicing strict hand washing protocols.\")\n    \n\n\nmain()",
            "id": 319
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence)) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end)))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (integer))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content (escape_sequence)) (string_end))))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (integer))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content (escape_sequence)) (string_end))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content (escape_sequence)) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list))))\n**\n",
        "text": " 6",
        "token_cnt": 900
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "factors = [\n    {\n        \"name\": \"Face Protection\", \n        \"weightage\": 0.25 \n    }, \n    {\n        \"name\": \"Personal Protective Equipment (PPE)\", \n        \"weightage\": 0.15 \n    }, \n    {\n        \"name\": \"Hand Washing\", \n        \"weightage\": 0.30 \n    }\n]\n \ndef get_points(factor):\n    \n    weightage = factor[\"weightage\"]\n    \n    \n    if factor['name'] == 'Face Protection':\n        return int(input(\"Enter number of face shields used during task : \")) * weightage\n    elif factor['name'] == 'Personal Protective Equipment (PPE)':\n        return int(input(\"Enter number of goggles worn during task : \")) * weightage\n    else:\n        return int(input(\"Enter number of hand washes performed before starting work : \")) * weightage\n \ndef calculate_hygiene_score():\n    \n    score = 0\n    \n    \n    for factor in factors:\n        score += get_points(factor)\n        \n    print(f\"Total Points Obtained : {score}\")\n \n    \n    for factor in factors:    \n        print(\n            f\"{factor['name']} : {get_points(factor)} ({factor['weightage']*100:.2f}%)\"\n        )\n         \n    \n    overall_score = round((sum([x['weightage'] for x in factors]) / sum([x['weightage'] for x in factors])) * 100, 2)\n    print(f\"\\nOverall Hygiene Score : {overall_score} %\")\n     \nprint(\"\\nHigh Eye Hygiene Scorer:\")\nprint(\"*\"*40)\nprint(\"This program helps professionals assess the risk of injuring eyes while performing tasks.\")\nprint(\"It assigns scores to different aspects of safety such as wearing PPE like goggles and\\\nface shields, proper handwashing techniques etc.\\n\")\nwhile True:\n    try:\n        choice = input(\"Please enter your preference between good, moderate or poor:\\n\").lower()\n        \n        if choice not in ('good', 'moderate', 'poor'):\n            raise ValueError\n    \n        break\n            \n    except ValueError:\n        print(\"Invalid Input! Please re-enter valid option.\")\n        \ncalculate_hygiene_score()",
            "id": 321
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (list (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (float))) (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (float))) (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (float)))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (binary_operator left: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) right: (identifier)))) alternative: (elif_clause condition: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (binary_operator left: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) right: (identifier))))) alternative: (else_clause body: (block (return_statement (binary_operator left: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) right: (identifier)))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_end))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content) (interpolation expression: (call function: (identifier) arguments: (argument_list (identifier)))) (string_content) (interpolation expression: (binary_operator left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (integer)) format_specifier: (format_specifier)) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (parenthesized_expression (binary_operator left: (call function: (identifier) arguments: (argument_list (list_comprehension body: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (for_in_clause left: (identifier) right: (identifier))))) right: (call function: (identifier) arguments: (argument_list (list_comprehension body: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (for_in_clause left: (identifier) right: (identifier))))))) right: (integer)) (integer))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (integer))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))))) (while_statement condition: (true) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (tuple (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (raise_statement (identifier)))) (break_statement)) (except_clause (identifier) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list))))\n**\n",
        "text": " 10",
        "token_cnt": 1559
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_high_clothing_cleaning(fabric):\n    \"\"\"\n    Calculates recommended level of soil removal from garments \n    according to ISO 15797 standard\n    \n    Args:\n        fabric (str): Fabric type as defined by ISO 846 standards\n        \n    Returns:\n        int: Recommended number of washes required for specified fabric\n    Raises:\n        ValueError: If input fabric type is not recognized\n        \n    \"\"\"\n    \n    special_care = [\"Wool\", \"Silk\"]\n\n    \n    if fabric in special_care:\n        return 2  \n    else:\n        return 3  \n\n\n\nprint(\"Number of washes needed for cotton:\", \n      calculate_high_clothing_cleaning(\"Cotton\"))",
            "id": 323
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (integer))) alternative: (else_clause body: (block (return_statement (integer))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 5",
        "token_cnt": 214
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_high_hygiene(privacy):\n        \"\"\"Updates high hygiene in shared spaces by cleaning and disinfecting common areas.\"\"\"\n    \n        \n        if privacy == \"public\":\n            print(\"Cleaning and disinfecting public areas\")\n        \n        elif privacy == \"private\":\n            print(\"Disinfecting private areas only\")\n        \n        else:\n            raise ValueError(\"Invalid privacy level specified\")",
            "id": 324
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 241
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_extreme_haircare(transparency):\n    \"\"\"\n    This function determines which type of product is most appropriate \n    given a specified level of transparency\n\n    Args:\n        transparency (float): A value between 0 and 1 indicating \n            how transparent the user desires their shampoo to be\n    \n    Returns:\n        str: The name of the recommended product\n    \"\"\"\n\n    \n    outcomes = {\n        0.3: \"Suave Naturals Moisturizing Shampoo\", \n        0.65: \"Tresemme Botanique Nourishing Shampoo\",\n        0.87: \"Pantene Pro V Classic Clean Shampoo\"\n    }\n\n    \n    if transparency >= max(outcomes.keys()):\n        return sorted(outcomes, reverse=True)[0]\n    else: \n        return [key for key,value in outcomes.items() if value == min(v for k, v in outcomes.items() if k <= transparency)][0]\n\n\n\nprint(\"For a desired transparency of \",calculate_extreme_haircare(0.2),\" we recommend Suave Naturals Moisturizing Shampoo\")\nprint(\"For a desired transparency of \",calculate_extreme_haircare(0.4), \"we recommend Tresemme Botanique Nourishing Shampoo\")\nprint(\"For a desired transparency of \",calculate_extreme_haircare(0.9), \"we recommend Pantene Pro V Classic Clean Shampoo\")",
            "id": 325
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (float) value: (string (string_start) (string_content) (string_end))) (pair key: (float) value: (string (string_start) (string_content) (string_end))) (pair key: (float) value: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) consequence: (block (return_statement (subscript value: (call function: (identifier) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (true)))) subscript: (integer)))) alternative: (else_clause body: (block (return_statement (subscript value: (list_comprehension body: (identifier) (for_in_clause left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (if_clause (comparison_operator (identifier) (call function: (identifier) arguments: (generator_expression body: (identifier) (for_in_clause left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (if_clause (comparison_operator (identifier) (identifier)))))))) subscript: (integer)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (float))) (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (float))) (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (float))) (string (string_start) (string_content) (string_end))))))\n**\n",
        "text": " 6",
        "token_cnt": 625
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_low_hygiene(handwash_frequency):\n        \"\"\"Calculates low hygiene score based on hand washing frequency.\"\"\"\n    \n        \n        levels = [\n            (0, 3),    \n            (4, 6),    \n            (7, 12)    \n        ]\n    \n        \n        for i in range(len(levels)-1):\n            if levels[i][0] <= handwash_frequency <= levels[i][1]:\n                return f\"Hand washing frequency ({handwash_frequency}) is considered moderate.\"\n    \n        \n        return f\"Hand washing frequency ({handwash_frequency}) is very low.\"\n    \n    \n    print(calculate_low_hygiene(5))   \n    print(calculate_low_hygiene(1))   \n    print(calculate_low_gyiene(8))",
            "id": 326
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (tuple (integer) (integer)) (tuple (integer) (integer)) (tuple (integer) (integer))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (integer)))) body: (block (if_statement condition: (comparison_operator (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (integer)) (identifier) (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (integer))) consequence: (block (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))) (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer)))))))\n**\n",
        "text": " 10",
        "token_cnt": 389
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_footcare(reliability):\n    \"\"\"Determine appropriate footwear based on reliability score.\"\"\"\n\n    \n    if reliability == 1:\n        return \"High quality professional work boots\"\n    \n    \n    elif (0.6 <= reliability) & (reliability < 1):\n        return \"Modern athletic shoe designed for professions requiring less heavy duty tasks.\"\n        \n    \n    else: \n        return \"Worn out old sneakers not suitable for any kind of working conditions.\"\n\n\n\nprint(determine_footcare(1))       \nprint(determine_footcare(0.8))     \nprint(determine_footcare(0.3))     \nprint(determine_footcare(-0.2))",
            "id": 328
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (binary_operator left: (parenthesized_expression (comparison_operator (float) (identifier))) right: (parenthesized_expression (comparison_operator (identifier) (integer)))) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (float)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (float)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (unary_operator argument: (float))))))))\n**\n",
        "text": " 10",
        "token_cnt": 346
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_handwash(observed):\n    \"\"\"Determine whether sufficient handwashing occurred.\"\"\"\n\n    \n    print(\"Dry Run:\", end=\" \")\n    \n    if observed == \"Washed\":\n        return True, \"Sufficient handwashing was performed.\"\n        \n    elif observed == \"Not Washed\" or observed == \"No Information\":\n        return False, \"Insufficient handwashing was performed.\"\n        \n     else: \n        raise ValueError(f\"{observed} not recognized.\")\n\n\n\ndry_run = input(\"Enter 'y' to perform a dry run: \").lower() == \"y\"\nwhile True:    \n    try:    \n        location = input(\"\\nPlease enter the name of the location (e.g., restaurant, store, etc.) where you recently used the bathroom:\\n\")\n        gender = input(\"Was anyone present who identified themselves as male? [Y/N]: \").upper()\n        \n        if gender == \"Y\":\n            sex = \"Male\"\n        elif gender == \"N\":\n            sex = \"Female\"\n        else: \n            raise ValueError(\"Invalid entry for Gender.\")\n    \n        age = int(input(\"What is the average age of those present? \"))\n\n        condition1 = input(f\"\\nAt {location}, did everyone over the age of six use the restroom? [Y/N] : \").upper()\n        if condition1 == \"Y\":\n            condition2 = input(f\"Did all {sex} individuals use the restroom? [Y/N] : \").upper()\n        \n            if condition2 == \"Y\":\n                handwash_status, message = check_handwash(input(f\"\\nAt {location}, how many people washed their hands after using the restroom? \\\n                    \\n[WASHED]\\t\\t[NOT WASHED]\\t[NO INFORMATION]\\n\"))\n            \n                if dry_run: \n                    print(message)\n                    \n                else: \n                    print(f\"\\n{location}: Based on these observations,\\\n                        \\nthe likelihood of insufficient handwashing appears to be low.\\\n                        \\nHowever, further investigation into individual behaviors is recommended.\\\n                        \\nOverall risk assessment: LOW\")\n                    \n                \n            elif condition2 == \"N\": \n                handwash_status, message = check_handwash(input(f\"\\nAt {location}, how many men washed their hands after using the restroom?\\\n                    \\n[WASHED]\\t\\t[NOT WASHED]\\t[NO INFORMATION]\\n\"))\n                \n                if dry_run: \n                    print(message)\n                    \n                else: \n                    print(f\"\\n{location}: Based on these observations,\\\n                        \\nthe likelihood of insufficient handwashing among males appears to be moderate.\\\n                        \\nFurther investigation into social norms around handwashing behavior is advised.\\\n                        \\nOverall risk assessment: MODERATE\")\n                    \n            else: \n                raise ValueError(\"Invalid entry for Condition 2.\")\n                \n        elif condition1 == \"N\": \n            handwash_status, message = check_handwash(input(f\"\\nAt {location}, how many adults (age 18+) washed their hands after visiting the restroom?\\\n                \\n[WASHED]\\t\\t[NOT WASHED]\\t[NO INFORMATION]\\n\"))\n            \n            if dry_run: \n                print(message)\n                \n            else: \n                print(f\"\\n{location}: Based on these observations,\\\n                    \\nthe likelihood of insufficient handwashing among older individuals appears to be high.\\\n                    \\nA targeted education campaign about proper handwashing techniques could help reduce the problem.\\\n                    \\nOverall risk assessment: HIGH\")\n                \n            \n        else: \n            raise ValueError(\"Invalid entry for Condition 1.\")\n            \n    except KeyboardInterrupt:\n        break",
            "id": 329
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (expression_list (true) (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (expression_list (false) (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end)))))))))) (expression_statement (assignment left: (identifier) right: (comparison_operator (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))))) (while_statement condition: (true) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence)) (string_end)))))))) (if_statement condition: (identifier) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence)) (string_end))))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence)) (string_end)))))))) (if_statement condition: (identifier) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence)) (string_end)))))))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence)) (string_end)))))))) (if_statement condition: (identifier) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence)) (string_end)))))))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))) (except_clause (identifier) (block (break_statement)))))))\n**\n",
        "text": " 6",
        "token_cnt": 1937
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_extreme_fitness(heart_rate):\n    \n    assert isinstance(heart_rate, list), \"Input must be a list of integers\"\n    \n    \n    avg = sum(heart_rate) / len(heart_rate)\n    stdv = statistics.pstdev(heart_rate)\n\n    \n    low_threshold = avg - (2 * stdv)\n    high_threshold = avg + (2 * stdv)\n\n    \n    outlier_indices = [i for i, x in enumerate(heart_rate) if x < low_threshold or x > high_threshold]\n\n    \n    num_outliers = len(outlier_indices)\n\n    \n    return (num_outliers, round((num_outliers /len(heart_rate)) *100, 2))\n\n\n\ndata = [84,95,76,83,86,79,87,81,91,75]\nresult = determine_extreme_fitness(data)\nprint(\"Total Outliers:\", result[0], \"\\nPercentage:\", result[1])\n\nOutput: Total Outliers: 3 Percentage: 33.33",
            "id": 331
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (assert_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (call function: (identifier) arguments: (argument_list (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (parenthesized_expression (binary_operator left: (integer) right: (identifier)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (parenthesized_expression (binary_operator left: (integer) right: (identifier)))))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (identifier) (for_in_clause left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier)))) (if_clause (boolean_operator left: (comparison_operator (identifier) (identifier)) right: (comparison_operator (identifier) (identifier))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (return_statement (tuple (identifier) (call function: (identifier) arguments: (argument_list (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) right: (integer)) (integer))))))) (expression_statement (assignment left: (identifier) right: (list (integer) (integer) (integer) (integer) (integer) (integer) (integer) (integer) (integer) (integer)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (subscript value: (identifier) subscript: (integer)) (string (string_start) (string_content (escape_sequence)) (string_end)) (subscript value: (identifier) subscript: (integer))))) (expression_statement (assignment left: (identifier) (ERROR (identifier)) type: (type (constrained_type (type (identifier)) (ERROR (integer)) (type (constrained_type (type (identifier)) (type (float)))))))))\n**\n",
        "text": " 10",
        "token_cnt": 674
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random\nfrom enum import Enum\n\n\nclass Behaviors(Enum):\n    SMOKE = \"Smoke\"\n    DRINK = \"Drink Alcohol\"\n    BRUSH = \"Brush Teeth\"\n\n\ndef main():\n\n    \n    behavior_answers = {\n        Behaviors.SMOKE: False,\n        Behaviors.DRINK: False,\n        Behaviors.BRUSH: True\n    }\n    \n    overall_confidence = None\n\n    while True:\n\n        \n        print(\"How confident are you in your daily dental hygiene routine?\")\n        \n        \n        overall_confidence = input(\"> \")\n    \n        \n        overall_confidence = float(overall_confidence)\n        \n        \n        if overall_confidence >= .75:\n            break    \n        \n    \n    for b in Behaviors:\n        if behavior_questions[b](behavior_answers[b]):\n            continue\n        \n        \n        print(f\"\\nIs it more likely that you will {'continue' if 'yes' else 'stop'} doing '{b.value}'\")\n        ans = input(f\"> \")\n        \n        \n        behavior_answers[b] = (ans == \"Yes\")        \n\n    \n    if all([a==True for a in behavior_answers.values()]):\n        print(\"\\nBased on your responses we believe you already maintain excellent dental hygiene.\\\n              \\nHowever, if you feel like something could still be improved please schedule\\\n               an appointment with your local dentist.\")\n    elif any([a!=None for a in behavior_answers.values()]) and overall_confidence < .6:\n        print(f\"\"\"\\nBased on your responses and our assessment of your confidence \n              we recommend you make an effort towards improving your dental hygiene by focusing \n            primarily on brushing your teeth twice per day and reducing consumption of foods and drinks\n             that can cause staining or other damage over time. Additionally, considering cutting back \n             on smoking and limiting alcohol intake may also help improve long term outcomes.\"\"\")\n    else:\n        print(\"\"\"\\nBased on your responses and our assessment of your confidence \n          we strongly advise you visit your nearest dentist immediately to address any existing issues\n          and establish a plan for ongoing maintenance. It is never too late to start taking care of your teeth!\"\"\")\n        \n    \n\n    \ndef behavior_questions(current_response):\n    \"\"\"Asks additional questions pertaining to a given behavior.\"\"\"\n    if current_response:\n        return False\n    \n    print(f\"\\nDo you currently do regular ('daily', at least two times per week) brushings of both top and bottom teeth? \")\n    ans = input(f\"> \").lower()\n    if ans != \"yes\":\n        return True\n    \n    print(f\"\\nAre you able to floss once per day? \")\n    ans = input(f\"> \").lower()\n    if ans != \"yes\":\n        return True\n    \n    print(f\"\\nWhat type of toothpaste do you use? Some whitening formulas can actually harm enamel!\")\n    ans = input(f\"> \").lower()\n    if ans != \"regular paste\":\n        return True\n    \n    print(f\"\\nHave you ever had problems with sensitive teeth when eating cold or hot items? This might indicate gum recession.\")\n    ans = input(f\"> \").lower()\n    if ans != \"no\":\n        return True\n    \n    print(f\"\\nDoes anyone in your immediate family suffer from severe tooth decay or gum disease? \")\n    ans = input(f\"> \").lower()\n    if ans != \"no\":\n        return True\n    \n    return False\n    \n    \n    \n\nif __name__ == \"__main__\":\n    main()",
            "id": 340
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (class_definition name: (identifier) superclasses: (argument_list (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (attribute object: (identifier) attribute: (identifier)) value: (false)) (pair key: (attribute object: (identifier) attribute: (identifier)) value: (false)) (pair key: (attribute object: (identifier) attribute: (identifier)) value: (true))))) (expression_statement (assignment left: (identifier) right: (none))) (while_statement condition: (true) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (break_statement))))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (call function: (subscript value: (identifier) subscript: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (identifier)))) consequence: (block (continue_statement))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (conditional_expression (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) (string_content) (interpolation expression: (attribute object: (identifier) attribute: (identifier))) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (call function: (identifier) arguments: (argument_list (list_comprehension body: (comparison_operator (identifier) (true)) (for_in_clause left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence)) (string_end)))))) alternative: (elif_clause condition: (boolean_operator left: (call function: (identifier) arguments: (argument_list (list_comprehension body: (comparison_operator (identifier) (none)) (for_in_clause left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))) right: (comparison_operator (identifier) (float))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (identifier) consequence: (block (return_statement (false)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (true)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (true)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (true)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (true)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (true)))) (return_statement (false)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 10",
        "token_cnt": 1912
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import os\nfrom typing import NoReturn\n\n\ndef xnc_script() -> NoReturn:\n    \"\"\"Script for performing extreme nose cleaning.\"\"\"\n\n    \n    VALID_BIAS = [\"dry\", \"dusty\", \"wet\", \"mixed\"]\n    \n    while True:\n        try:\n            \n            b = input(\"Enter your nasal irritant:\\ndry\\ndusty\\nwet\\nmixed > \")\n\n            \n            if b not in VALID_BIAS:\n                raise ValueError\n            \n            elif b == 'dry':\n                print(\"Inhaling warm air through both nostrils helps clear mucus and congestion.\")\n                \n            elif b == 'dusty':\n                print(\"Using a saline spray can help loosen and flush away excessive mucus caused due to exposure to dust particles.\")\n                \n            elif b == 'wet':\n                print(\"Wiping the inside of each nostril gently with a soft tissue or cotton ball can help remove moisture and unclog blocked nasal passages.\")\n                \n            else: \n                print(\"Taking a shower or bath can help relieve symptoms associated with nasal congestion and irritation due to water-based irritants like chlorine or soap.\")\n                \n            break\n        \n        except ValueError:\n            print(\"Invalid option! Please try again.\\n\")\n            \n        \n     \n    print(\"\\nDry Run:\")\n    xnc_script()\n    \n    \nif __name__ == '__main__':\n    xnc_script()",
            "id": 341
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters) return_type: (type (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (while_statement condition: (true) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence)) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (raise_statement (identifier))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (break_statement)) (except_clause (identifier) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 6",
        "token_cnt": 730
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_high_handling(item):\n    \n    outcome = [\"No change needed\", \"Replace item\"]\n    \n    \n    if expert1 == True and expert2 == False:\n        result = random.choice([\"Yes\"])\n        \n    elif expert1 == False and expert2 == True:\n        result = random.choice([\"Yes\"])\n\n    else: \n        result = random.choices([\"No\"], weights=[0.5, 0.5])[0]\n        \n     \n    print(\"Expert Opinion:\",result)    \n    \n    \n    if result == 'Yes':    \n        newItem = replace_item()\n        return outcome[1],newItem\n    \n    else:\n        return outcome[0]\n    \n    \n\ndef replace_item():\n    replacements = ['New Item']\n    return random.sample(replacements)[0]",
            "id": 343
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (true)) right: (comparison_operator (identifier) (false))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (string (string_start) (string_content) (string_end)))))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (false)) right: (comparison_operator (identifier) (true))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (string (string_start) (string_content) (string_end))))))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (list (float) (float))))) subscript: (integer))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (return_statement (expression_list (subscript value: (identifier) subscript: (integer)) (identifier)))) alternative: (else_clause body: (block (return_statement (subscript value: (identifier) subscript: (integer)))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end))))) (return_statement (subscript value: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))) subscript: (integer))))))\n**\n",
        "text": " 6",
        "token_cnt": 623
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_shampoo(hair_type):\n    \"\"\"This function takes input from user about their hair type \n    and returns recommended number of washes per week depending upon the conditioner\n    \n    Args:\n        hair_type (str): Input by user describing their hair type\n\n    Returns:\n        int: Number of times user need to wash their hairs according to given conditions\n        \n    Raises:\n        ValueError: If invalid value provided by user    \n    \n    \"\"\"    \n    \n    hair_info = {    \n        \"Normal\": {\"washing frequency\": 2, \"conditioner required\": False}, \n        \"Oily\":    {\"washing frequency\": 1,\"conditioner required\": True }, \n        \"Dry\" :    {\"washing frequency\": 3 ,\"conditioner required\": True }     \n    }    \n    \n    try:    \n        \n        info = hair_info[hair_type]  \n        \n        \n        if info[\"conditioner required\"]:      \n            return info[\"washing frequency\"] + 1    \n        else:        \n            return info[\"washing frequency\"]          \n    except KeyError as e:    \n        raise ValueError(\"Invalid hair type entered\") from e",
            "id": 344
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (false)))) (pair key: (string (string_start) (string_content) (string_end)) value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (true)))) (pair key: (string (string_start) (string_content) (string_end)) value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (true))))))) (try_statement body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))) (if_statement condition: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (binary_operator left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (integer)))) alternative: (else_clause body: (block (return_statement (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) cause: (identifier))))))))\n**\n",
        "text": " 6",
        "token_cnt": 525
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import csv\nfrom collections import defaultdict\n\ndef main():\n    \n    abhr_results = read_input()\n\n    \n    avg_perc_effective = calculate_avg_perc_effective(abhr_results)\n    \n    \n    grouped_studies = group_by_transparency(abhr_results)\n\n    \n    new_policies = determine_new_policies(grouped_studies, avg_perc_effective)\n\n    \n    write_output(new_policies)\n    \ndef read_input():\n    \"\"\"Read input CSV file and return list of dictionaries.\"\"\"\n    with open(\"handrub_data.csv\", \"r\") as f:\n        reader = csv.DictReader(f)\n        abhr_results = [dict(row) for row in reader]\n    return abhr_results\n\ndef calculate_avg_perc_effective(abhr_results):\n    \"\"\"Calculate average percent effective from input data.\"\"\"\n    total = sum([float(result[\"percentage effective\"]) for result in abhr_results])\n    n = len(abhr_results)\n    return round(total/n,2)\n\ndef group_by_transparency(abhr_results):\n    \"\"\"Group study results by transparency level.\"\"\"\n    groups = defaultdict(list)\n    for result in abhr_results:\n        groups[result['transparency']].append(result)\n    return dict(groups)\n\ndef determine_new_policies(grouped_studies, avg_perc_effective):\n    \"\"\"Determine new policies based on transparency levels and average % effective.\"\"\"\n    new_policies = []\n    for transparency, studies in grouped_studies.items():\n        if transparency == \"High\":\n            rec = \"Recommend increasing availability of ABHR.\"\n        elif transparency == \"Medium - Limited evidence\":\n            if avg_perc_effective >= 60:\n                rec = \"No change needed; current policies sufficient.\"\n            else:\n                rec = \"Recommend adding more emphasis on education about ABHR.\"\n        elif transparency == \"Low - No clear evidence\":\n            rec = \"Recommend further research into ABHR efficacy.\"\n        new_policies.append({\"Policy\": \"Update EHHOH policy for places visited regularly.\",\n                            \"Transparancy Level\": transparency, \n                            \"Study Results\": \", \".join([f\"{res['study']} ({res['percentage effective']}%)\" for res in sorted(studies, key=lambda k:k['study'])]),\n                            \"Recommendation\": rec})\n    return new_policies\n\ndef write_output(new_policies):\n    \"\"\"Write output CSV file.\"\"\"\n    fieldnames = [\"Policy\",\"Transparancy Level\", \"Study Results\", \"Recommendation\"]\n    with open(\"updated_policy_recommendations.csv\", \"w\") as f:\n        writer = csv.DictWriter(f, fieldnames=fieldnames)\n        writer.writeheader()\n        writer.writerows(new_policies)\n\nif __name__ == \"__main__\":\n    main()",
            "id": 346
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (with_statement (with_clause (with_item value: (as_pattern (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) alias: (as_pattern_target (identifier))))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (call function: (identifier) arguments: (argument_list (identifier))) (for_in_clause left: (identifier) right: (identifier))))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list_comprehension body: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (for_in_clause left: (identifier) right: (identifier))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (return_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (identifier)) (integer)))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (call function: (attribute object: (subscript value: (identifier) subscript: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list (identifier)))))) (return_statement (call function: (identifier) arguments: (argument_list (identifier)))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) body: (block (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (list_comprehension body: (string (string_start) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content) (string_end)) (for_in_clause left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (lambda parameters: (lambda_parameters (identifier)) body: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))))))))) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)))))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (with_statement (with_clause (with_item value: (as_pattern (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) alias: (as_pattern_target (identifier))))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (identifier)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 4",
        "token_cnt": 1941
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import datetime as dt\nfrom dateutil import rrule\n\nprivacy = \"public\" \nstart_date = dt.datetime(2023,1,5) \nend_date = start_date + dt.timedelta(days=7) \nevent_name = \"Project Meeting\" \nlocation = \"Online\" \n\n\ndef create_events():\n    \"\"\"This function creates a series of repeating events\"\"\"\n\n    rule = rrule.rrule(freq=rrule.WEEKLY, byweekday=[rrule.MO], until=end_date)\n    \n    for i in rule:\n        new_event = {\n            \"summary\": f\"{event_name} - Week {i.isocalendar()[1]}\", \n            \"description\":f\"Weekly meeting about project progress\",\n            \"location\": location,\n            \"start\":{\n                \"dateTime\": i.strftime(\"%Y-%m-%dT%H:%M:%S\"), \n                \"timeZone\":\"America/New_York\"},\n            \"end\":{\"dateTime\": (i+dt.timedelta(hours=1)).strftime(\"%Y-%m-%dT%H:%M:%S\"), \n                    \"timeZone\":\"America/New_York\"}\n        }\n        \n        if privacy == \"private\":\n            new_event[\"visibility\"] = \"private\"\n\n        print(\"Creating event:\",new_event['summary'])\n        result = service.events().insert(calendarId='primary', body=new_event).execute()\n\n\n\ndef main():\n    \"\"\" This function initializes the Google API client and calls the \n    create_events function.\"\"\"\n\n    \n    credentials = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', ['https://www.googleapis.com/auth/calendar']).authorize(Http())\n    service = discovery.build('calendar','v3', http=credentials)\n\n    \n    create_events()\n\n    \nif __name__== '__main__':\n    main()",
            "id": 348
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer) (integer))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (integer))))))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier))) (keyword_argument name: (identifier) value: (list (attribute object: (identifier) attribute: (identifier)))) (keyword_argument name: (identifier) value: (identifier)))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (subscript value: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) subscript: (integer))) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))))) (pair key: (string (string_start) (string_content) (string_end)) value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (call function: (attribute object: (parenthesized_expression (binary_operator left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (integer)))))) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (identifier)))) attribute: (identifier)) arguments: (argument_list)))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (list (string (string_start) (string_content) (string_end))))) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (identifier)))))) (expression_statement (call function: (identifier) arguments: (argument_list))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 6",
        "token_cnt": 1479
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import os\nfrom typing import List\n\n\ndef calculate_low_sneeze(input_data: str) -> float:\n    \"\"\"\n    Calculates the probability of transmitting diseases via respiratory droplets when following \n    good hygiene practices such as covering ones nose and mouth when sneezing or coughing\n\n    Args:\n        input_data (str): A string containing either 'cough' or 'sneeze', indicating whether we want \n            to analyze coughing or sneezing behavior respectively\n    \n    Returns:\n        float: Probability between [0,1] representing likelihood of disease transmission\n    Raises:\n        ValueError: If input_data does not contain a valid value ('cough' or 'sneeze')\n    \"\"\"\n    \n    outcomes = [\"Low risk\", \"Medium risk\", \"High risk\"]\n\n    \n    outcome_index = -1\n\n    \n    if input_data == \"cough\" or input_data == \"sneeze\":\n\n        \n        conditions = [(True, True), (False, False), (True, False)]\n        \n        \n        for i, condition in enumerate(conditions):\n\n            \n            covered_mouth, nosed_covered = condition\n            \n            \n            if covered_mouth and nosed_covered:\n                outcome_index += 1\n                \n            \n            elif input_data == \"cough\" and covered_mouth != outcomes[i]:\n                outcome_index = i\n                \n            elif input_data == \"sneeze\" and nosed_covered != outcomes[i]:\n                outcome_index = i\n    \n        return round(outcome_index * 1.0 / len(conditions),2)\n        \n    else:\n        raise ValueError(\"Invalid input\")\n    \n    \n    \n\nif __name__ == '__main__':\n\n    \n    input_data = input(\"Enter 'cough' or 'sneeze': \")\n    \n    try:\n        result = calculate_low_sneeze(input_data)\n        print(f\"{input_data} with face mask results in {result*100:.2f}% chance of spreading illness.\")\n    except Exception as e:\n        print(e)",
            "id": 349
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (typed_parameter (identifier) type: (type (identifier)))) return_type: (type (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (unary_operator argument: (integer)))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (list (tuple (true) (true)) (tuple (false) (false)) (tuple (true) (false))))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier))) body: (block (expression_statement (assignment left: (pattern_list (identifier) (identifier)) right: (identifier))) (if_statement condition: (boolean_operator left: (identifier) right: (identifier)) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (integer)))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (subscript value: (identifier) subscript: (identifier)))) consequence: (block (expression_statement (assignment left: (identifier) right: (identifier))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (subscript value: (identifier) subscript: (identifier)))) consequence: (block (expression_statement (assignment left: (identifier) right: (identifier)))))))) (return_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (binary_operator left: (identifier) right: (float)) right: (call function: (identifier) arguments: (argument_list (identifier)))) (integer))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (binary_operator left: (identifier) right: (integer)) format_specifier: (format_specifier)) (string_content) (string_end)))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 946
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom tabulate import tabulate\n\n\ndef check_expense(df):\n    \"\"\"\n    This function takes dataframe df as input \n    and returns True if total expenses >10k else False\n    \n    Parameters:\n        - df (pandas DataFrame): Input Dataframe containing columns 'Expense', 'Responsibility'\n        \n    Returns:\n        - result (bool): Whether Total Expense is more than 10K or not\n    \"\"\"\n\n    \n    tot_exp = df['Expense'].sum()\n\n    \n    if tot_exp>10000:\n        return True\n    else:\n        return False\n    \n    \nif __name__ == '__main__':\n    \n    df=pd.read_csv('sample_data.csv')\n    \n    \n    print(\"Original Dataframe:\")\n    print(tabulate(df, headers='keys'))\n    \n    \n    dr_result = check_expense(df)\n    print(\"\\nDry Run Result:\",dr_result)\n    \n    \n    \n    if dr_result==True:\n        if ((df.loc[2,'Responsibility']=='Marketing & Sales') | \n            (df.loc[3,'Responsibility']=='Marketing & Sales')):\n            new_tot_exp = tot_exp*1.05\n            print(f\"\\nNew Total Expense after adding 5%({new_tot_exp:.2f}) \"\n                  f\"for Marketing & Sales department:\\n\",new_tot_exp)\n        \n        elif df.loc[4,'Responsibility']!='Research & Development':\n            new_tot_exp = tot_exp+8000\n            print(f\"\\nNew Total Expense after adding 8K ({new_tot_exp:.2f})\"\n                  f\" for other departments except Research & Development:\\n \",new_tot_exp)\n    \n        else:\n            pass\n            \n    else:\n        pass",
            "id": 351
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (true))) alternative: (else_clause body: (block (return_statement (false))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)) (identifier)))) (if_statement condition: (comparison_operator (identifier) (true)) consequence: (block (if_statement condition: (parenthesized_expression (binary_operator left: (parenthesized_expression (comparison_operator (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (integer) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end)))) right: (parenthesized_expression (comparison_operator (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (integer) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end)))))) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (float)))) (expression_statement (call function: (identifier) arguments: (argument_list (concatenated_string (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier) format_specifier: (format_specifier)) (string_content) (string_end)) (string (string_start) (string_content (escape_sequence)) (string_end))) (identifier))))) alternative: (elif_clause condition: (comparison_operator (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (integer) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (integer)))) (expression_statement (call function: (identifier) arguments: (argument_list (concatenated_string (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier) format_specifier: (format_specifier)) (string_content) (string_end)) (string (string_start) (string_content (escape_sequence)) (string_end))) (identifier)))))) alternative: (else_clause body: (block (pass_statement))))) alternative: (else_clause body: (block (pass_statement)))))))\n**\n",
        "text": " 6",
        "token_cnt": 1018
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import os\nfrom pathlib import Path\n\n\ndef main():\n    \n    cwd = str(Path().absolute())\n\n    \n    test_mode = input(\"Do you wish to conduct a test run? [y/n] \")\n    if test_mode == \"y\" or test_mode == \"Y\":\n        test_mode = True\n    elif test_mode == \"n\" or test_mode == \"N\":\n        test_mode = False\n    else:\n        print(\"Invalid Input\")\n        return\n    \n    \n    conditions = [\"Damp\", \"Wet\"]\n    responses = [\"The fabric may still smell musty even after being washed.\",\n                 \"There is no visible moisture but there could still be bacteria lurking around.\"]\n\n    \n    clothedness = input(\"Enter 'Damp' if your clothes are damp or wet, otherwise enter 'Wet': \").title()\n\n    \n    if clothedness in conditions:\n\n        \n        if clothedness == \"Damp\":\n            action = prompt_user_for_action(responses[0], responses[1])\n\n            \n            if not test_mode:\n                remove_clothes(cwd)\n                print(\"\\nClothes removed!\")\n        else:\n            action = prompt_user_for_action(responses[1], None)\n\n            \n            if not test_mode:\n                dry_clothes(cwd)\n                print(\"\\nClothes dried!\")\n\n    else:\n        print(\"Invalid Condition entered.\")\n    \n    \n\ndef prompt_user_for_action(yes_response, no_response):\n    choice = input(\"Would you like me to {} ? [y/n]: \".format(yes_response))\n    while choice != \"y\" and choice != \"n\":\n        choice = input(\"Please respond with either y or n: \")\n\n    if choice == \"y\":\n        return yes_response\n    else:\n        return no_response\n\n    \n\ndef remove_clothes(path):    \n    file_list = os.listdir(path)\n    for f in file_list:    \n        filepath = os.path.join(path,f)    \n        if os.path.isfile(filepath):        \n            os.remove(filepath)    \n        elif os.path.isdir(filepath):        \n            shutil.rmtree(filepath)    \n    \n\n\ndef dry_clothes(path):    \n    time.sleep(5)    \n    newdir = path + \"/dryed_\" + datetime.now().strftime(\"%m_%d_%H%M%S\")    \n    os.mkdir(newdir)    \n    file_list = os.listdir(path)    \n    for f in file_list:    \n        filepath = os.path.join(path,f)    \n        if os.path.isfile(filepath):        \n            shutil.copyfile(filepath,os.path.join(newdir,f))    \n        elif os.path.isdir(filepath):        \n            copytree(filepath,os.path.join(newdir,os.path.basename(filepath)))    \n            \n    shutil.rmtree(path)    \n    os.rename(newdir,path)    \n    \n\n\n\nif __name__ == '__main__':\n    main()",
            "id": 352
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (call function: (identifier) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (true)))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (false))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement)))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (integer)) (subscript value: (identifier) subscript: (integer)))))) (if_statement condition: (not_operator argument: (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (integer)) (none))))) (if_statement condition: (not_operator argument: (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier))))))) (while_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (identifier))) alternative: (else_clause body: (block (return_statement (identifier))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) (if_statement condition: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) alternative: (elif_clause condition: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (identifier) right: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) (if_statement condition: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))))) alternative: (elif_clause condition: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier) (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier))))))))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": "swers:\n\n- 1: 1\n- 2: 1\n- ",
        "token_cnt": 2149
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random\nfrom datetime import timedelta\n\n\ndef calculate_handwash(choice):\n    \n    time = timedelta()\n\n    \n    leave_time = random.randint(10,25)\n    arrive_home_time = random.randint(30,60)\n    use_towel_time = random.uniform(4,8)\n    total_use_time = random.uniform(leave_time+arrive_home_time + use_towel_time , leave_time+arrive_home_time + (2*use_towel_time))\n    \n    \n    if choice == 'Dry':\n        time += timedelta(minutes=total_use_time)\n    else : \n        time += timedelta(hours=(total_use_time//60), minutes=(total_use_time%60))\n        \n    return str(time)\n    \n\n\nif __name__=='__main__':    \n    print(\"Enter your preference:\")\n    print(\"[1] For Using Dry Cloth\")\n    print(\"[2] For Using Wet Cloth \")\n    user_input = int(input())\n    \n    result = calculate_handwash('Dry' if user_input==1 else 'Wet')\n    print(\"Time taken:\",result)",
            "id": 354
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (binary_operator left: (identifier) right: (identifier)) right: (identifier)) (binary_operator left: (binary_operator left: (identifier) right: (identifier)) right: (parenthesized_expression (binary_operator left: (integer) right: (identifier)))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier))))))) alternative: (else_clause body: (block (expression_statement (augmented_assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (parenthesized_expression (binary_operator left: (identifier) right: (integer)))) (keyword_argument name: (identifier) value: (parenthesized_expression (binary_operator left: (identifier) right: (integer))))))))))) (return_statement (call function: (identifier) arguments: (argument_list (identifier)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (conditional_expression (string (string_start) (string_content) (string_end)) (comparison_operator (identifier) (integer)) (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))))))\n**\n",
        "text": " 6",
        "token_cnt": 839
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "professional = input(\"Enter 'Doctor' or 'Nurse': \")\nhand_wash = True\n\n\ndef doctor():\n    \n    print(f\"{professional} : Wear gloves before touching patient.\")\n    \n\ndef nurse():\n    global hand_wash\n    \n    \n    if hand_wash == False:\n        \n        answer = input(\"Wash your hands? (y/n): \")\n        \n        \n        if answer.lower() == \"y\":\n            print(f\"{professional}: Washed their hands properly\")\n            hand_wash = True\n        else: \n            print(f\"{professional}: Did not wash their hands\")\n            \n    elif hand_wash == True:\n        \n        ans2 = input(\"Did you use Alcohol-Based Sanitiser ? (Y/N) : \")\n    \n        \n        if ans2.upper() == \"Y\":\n            print(f\"{professional}: Used proper PPE equipment while treating patients\")\n        else:    \n            print(f\"{professional}: Not following recommended precautions\")\n    \n    \n    \nif __name__ == '__main__':    \n    \n    if professional.title() == \"Doctor\":\n        doctor()\n        \n    elif professional.title() == \"Nurse\":\n        nurse()",
            "id": 356
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (true))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (global_statement (identifier)) (if_statement condition: (comparison_operator (identifier) (false)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (true)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end))))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (true)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end))))))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list)))) alternative: (elif_clause condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list)))))))))\n**\n",
        "text": " 4",
        "token_cnt": 808
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_eye_hygiene(consent):\n    \n    print(\"Dry Run:\")\n    \n    \n    if (consent == \"yes\"): \n        print(\"Patient has Provided Valid Consent\")\n        \n        \n        symptoms = input(\"Enter Symptoms (Itchy eyes, Redness, Watery eyes) \")\n    \n        switcher={\n            'Itchy eyes':\"Use Artificial Tears\", \n            'Redness':'Wash Hands', \n            'watery eyes' :\"Don't Rub Your Eyes\"}\n\n        treatment=switcher.get(symptoms,\"Consult Ophthalmologist\") \n\n        print(\"Treatment Suggested:\",treatment)\n\n    else:    \n        print(\"Consent Not Given ! Consult Doctor.\")",
            "id": 358
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 465
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_low_hygiene(trust):\n    \"\"\" \n    This function takes input from user as trust level (high, medium, low)\n    \n    Based upon the value provided by the user, following actions will be taken\n    1 - If high trust then no action required \n    2 - Else if Medium trust then inform about proper use of equipment like mask, hand sanitizer etc..\n    3 - else ask whether they want more details regarding hygiene practices at workplace   \n\n    Returns:\n        None    \n    \n    Raises:    \n        ValueError: Raised when invalid input is given    \n    \"\"\"    \n    \n    if not isinstance(trust, str):\n        raise ValueError(\"Invalid Input\")\n        \n    \n    HIGH = \"High\"\n    MEDIUM = \"Medium\"\n    LOW = \"Low\"\n    \n    if trust == HIGH:\n        print(\"No Action Required!\")\n    elif trust == MEDIUM:\n        print(\"Proper Usage Of Masks And Hand Sanitizers Is Important.\")\n        print(\"Wash Hands Frequently With Soap And Water For At Least 20 Seconds Or Use An Alcohol-Based Hand Sanitizer.\")\n        print(\"Avoid Touching Your Face, Nose, Mouth, And Eyes Without Washing Your Hands First.\")\n        print(\"Clean And Disinfect Surfaces Often Such As Desks, Doorknobs, Light Switches, Phones, Keyboards, And Toilets Regularly.\")\n        print(\"Stay Home If Sick And Avoid Close Contact With People Who Are Ill.\")\n    else:\n        print(\"Do you need any further information related to good hygiene practice ? \")\n        \nif __name__ == \"__main__\":\n    try:\n        while True:\n            trust = input(\"Enter 'HIGH', 'MEDIUM' or 'LOW': \").strip().upper()\n            transform_low_hygiene(trust)\n            \n    except EOFError:\n        pass",
            "id": 359
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (try_statement body: (block (while_statement condition: (true) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))))) (except_clause (identifier) (block (pass_statement)))))))\n**\n",
        "text": " 6",
        "token_cnt": 693
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import OneHotEncoder, OrdinalEncoder\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import train_test_split\n\ndef preprocess(df):\n    \n    num_cols = [\"passenger_count\", \"trip_distance\"]\n    cat_cols = [\n        \"pickup_datetime\",\n        \"dropoff_datetime\",\n        \"hour_of_day\",\n        \"month\",\n        \"year\",\n        \"weekday\",\n        \"pulocationid\",\n        \"dolocationid\",\n    ]\n\n    numeric_transformer = Pipeline([(\"imputer\", SimpleImputer(strategy=\"median\")),])\n    categorical_transformer = Pipeline(\n        [\n            (\"onehot\", OneHotEncoder(handle_unknown=\"ignore\")),\n            (\"ordinal\", OrdinalEncoder()),\n        ]\n    )\n\n    preprocessor = ColumnTransformer(\n        transformers=[\n            (\"num\", numeric_transformer, num_cols),\n            (\n                \"cat\",\n                categorical_transformer,\n                cat_cols,\n            ),\n        ]\n    )\n    \n    X = df[cat_cols + num_cols]\n    y = df[\"fare_amount\"]\n    \n    return preprocessor.fit_transform(X), y\n\nif __name__ == \"__main__\":\n    \n    df = pd.read_csv(\"data/uber_raw_data.csv\")\n\n    \n    X, y = preprocess(df)\n\n    \n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n    \n    ...\n\n    \n    ...",
            "id": 360
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list (tuple (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list (tuple (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (tuple (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (list (tuple (string (string_start) (string_content) (string_end)) (identifier) (identifier)) (tuple (string (string_start) (string_content) (string_end)) (identifier) (identifier)))))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (identifier))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (return_statement (expression_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))) (identifier))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (pattern_list (identifier) (identifier) (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (float)))))) (expression_statement (ellipsis)) (expression_statement (ellipsis)))))\n**\n",
        "text": " 6",
        "token_cnt": 1058
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def display_highfinance(ethic):\n    \"\"\"Displays high finance investment management information based on ethical considerations\n\n    Args:\n        ethic (str): The type of ethical consideration required by the user ('social', 'environmental' or 'both')\n\n    Raises:\n        ValueError: If `ethic` is not one of 'social', 'environmental' or 'both'\n        \n    Returns:\n        str: A markdown string containing relevant financial advice \n    \"\"\"\n    \n    \n    social_advice = \"\"\n    environmental_advice = \"\"\n    general_advice = \"\"\n    \n    \n    if ethic == \"social\":\n        social_advice = f\"\"\"\n        \n        \n        - Consider how companies treat their employees, customers, suppliers, and local communities when making investments\n        - Look for companies that prioritize socially responsible practices like fair labor standards, environmental protection, and community involvement\n        - Use tools like [Morningstar’s CSR Rating](https://www.morningstar.com/personalized/fund-ratings/corporate-social-responsibility-rating) to evaluate a company’s commitment to social responsibility\n        \"\"\"\n    elif ethic == \"environmental\":\n        environmental_advice = f\"\"\"\n        \n\n        - Look for funds that focus on low-carbon or renewable energy sources\n        - Avoid companies involved in controversial industries like coal mining or oil drilling\n        - Evaluate a fund’s carbon footprint using resources like [FundEcology](https://fundecology.org/)\n        \"\"\"\n    elif ethic == \"both\":\n        social_advice = f\"\"\"\n        \n        \n        - Consider how companies treat their employees, customers, suppliers, and local communities when making investments\n        - Look for companies that prioritize socially responsible practices like fair labor standards, environmental protection, and community involvement\n        - Use tools like [Morningstar’s CSR Rating](https://www.morningstar.com/personalized/fund-ratings/corporate-social-responsibility-rating) to evaluate a company’s commitment to social responsibility\n        \"\"\"\n    \n        environmental_advice = f\"\"\"\n        \n\n        - Look for funds that focus on low-carbon or renewable energy sources\n        - Avoid companies involved in controversial industries like coal mining or oil drilling\n        - Evaluate a fund’s carbon footprint using resources like [FundEcology](https://fundecology.org/)\n        \"\"\"\n    \n    else:\n        raise ValueError(\"Invalid argument provided for `ethic`. Must be either 'social', 'environmental' or 'both'.\")\n    \n    \n    combined_advice = \"\\n\\n\".join([general_advice, social_advice, environmental_advice])\n    return combined_advice",
            "id": 363
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)) attribute: (identifier)) arguments: (argument_list (list (identifier) (identifier) (identifier)))))) (return_statement (identifier)))))\n**\n",
        "text": " 4",
        "token_cnt": 492
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "item_price = float(input(\"Enter item price: \")) \npercentage_off1 = int(input(\"Enter percentage off (first offer): \")) \nif percentage_off2 != \"\":\n    percentage_off2 = int(input(\"Enter percentage off (second offer): \")) \nfree_shipping = input(\"Is free shipping available? [y/n]: \").lower() == \"y\" \ntaxes = input(\"Are taxes included in the price? [y/n]: \").lower() == \"y\" \n\n\ndef calculate_discount(item_price, percentage_off, include_taxes=True):\n    \"\"\"Calculate discount amount\"\"\"\n    discount = item_price * (percentage_off / 100) \n    if not include_taxes:\n        discount -= discount * (TAX_RATE / 100)\n    return round(discount, 2)\n\n\n\ntotal_savings = 0\nif free_shipping:\n    total_savings += item_price - calculate_discount(item_price, PERCENTAGE_OFFER_ONE)\nelif percentage_off2 > 0:\n    total_savings += max(calculate_discount(item_price, PERCENTAGE_OFFER_TWO),\n                        calculate_discount(item_price, PERCENTAGE_OFFER_ONE))\nelse:\n    total_savings += calculate_discount(item_price, PERCENTAGE_OFFER_ONE)\n    \nprint(f\"Total Savings: ${total_savings:.2f}\")",
            "id": 365
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (assignment left: (identifier) right: (comparison_operator (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (comparison_operator (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (default_parameter name: (identifier) value: (true))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (parenthesized_expression (binary_operator left: (identifier) right: (integer)))))) (if_statement condition: (not_operator argument: (identifier)) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (binary_operator left: (identifier) right: (parenthesized_expression (binary_operator left: (identifier) right: (integer)))))))) (return_statement (call function: (identifier) arguments: (argument_list (identifier) (integer)))))) (expression_statement (assignment left: (identifier) right: (integer))) (if_statement condition: (identifier) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (binary_operator left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (call function: (identifier) arguments: (argument_list (identifier) (identifier))))))))) alternative: (else_clause body: (block (expression_statement (augmented_assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier) format_specifier: (format_specifier)) (string_end))))))\n**\n",
        "text": " 6",
        "token_cnt": 864
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import os\nfrom datetime import date\n\n\ndef surface_disinfection(surface):\n    \"\"\"\n    This function takes input from the user as to what kind \n    of surface needs to be cleaned and then decides whether \n    any special precautions need to taken while cleaning such \n    a surface depending upon its state (whether someone at home \n    has been diagnosed with COVID19 or not)\n    \n    Parameters:\n        - surface (str): Type of surface that requires \n                    disinfection\n        \n    Returns:    \n        - instructions (list[str]): List containing detailed \n                            instructions about how to clean\n                            the specified surface along with any\n                            necessary precautions\n    \"\"\"\n\n    \n    instructions = []\n\n    \n    covid_status = check_covid_status()\n\n    \n    if covid_status == \"POSITIVE\":\n\n        \n        instructions.append(\"Wear gloves when touching soiled items\")\n        \n        \n        if surface in [\"bedsheets\", \"pillow covers\"]:\n            instructions.extend([\n                \"Wash clothes at highest temperature allowed by fabric care label\", \n                \"Use hot water extraction method\"])\n            \n        elif surface in [\"toilets\", \"sinks\"]:\n            instructions.extend([\"Use bleach solution following manufacturer’s directions\",\n                                \"Let sit for recommended time before rinsing\"])\n            \n    else:\n        \n        pass\n\n    return instructions\n    \n    \ndef check_covid_status():\n    \"\"\"\n    This function simulates checking the COVID-19 status of people living in the same household. It returns either 'NEGATIVE' or 'POSITIVE'.\n    The implementation can easily be extended to query external APIs or databases to fetch actual information.\n    For this simulation we will assume that everyone in the house tests negative until proven otherwise! :)    \n    \"\"\"    \n    \n    \n    member_statuses = [True] * 4   \n    \n    \n    for i in range(len(member_statuses)):\n        if member_statuses[i]:    \n            member_statuses[i+1:] = [False] * (3 - i)  \n            break                   \n    \n    \n    return \"POSITIVE\" if any(member_statuses) else \"NEGATIVE\"\n    \n\nif __name__ == \"__main__\":\n    \n    \n    print(\"*\"*80)\n    today = date.today()\n    print(f\"{today}: Welcome to our interactive tutorial!\")\n    print(\"*\"*80)\n    \n    \n    surface = input(\"Enter the name of the surface you wish to disinfect: \")\n    \n    \n    instructions = surface_disinfection(surface)\n    \n    \n    print(\"\\n\".join(instructions))",
            "id": 366
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))))))) alternative: (else_clause body: (block (pass_statement)))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (list (true)) right: (integer)))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (if_statement condition: (subscript value: (identifier) subscript: (identifier)) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (slice (binary_operator left: (identifier) right: (integer)))) right: (binary_operator left: (list (false)) right: (parenthesized_expression (binary_operator left: (integer) right: (identifier)))))) (break_statement))))) (return_statement (conditional_expression (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (identifier))) (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (integer))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (integer))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content (escape_sequence)) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 1100
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_low_travel(booking):\n    \n    print(\"Dry Run:\")\n    \n    \n    if \"user_id\" not in booking:\n        return False\n\n    \n    elif booking[\"user_id\"] not in REGISTERED_USERS: \n        return False \n\n    \n    else:    \n        dest = booking['destination']\n        if dest in TOP_TEN_DESTINATIONS: \n            return True \n\n        else:\n            return False \n\n\n\nbooking1 = { 'user_id': 'test', \n             'destination':'London' }\nprint(update_low_travel(booking1))\n\n\nOutput: \nDry Run:\nFalse",
            "id": 367
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) consequence: (block (return_statement (false))) alternative: (elif_clause condition: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (identifier)) consequence: (block (return_statement (false)))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (true))) alternative: (else_clause body: (block (return_statement (false)))))))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier)))))) (expression_statement (assignment left: (identifier) (ERROR (identifier)) type: (type (constrained_type (type (identifier)) (type (false)))))))\n**\n",
        "text": " 10",
        "token_cnt": 433
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_extreme_hygiene(symptoms):\n    \"\"\"This function takes symptom as input from user \n    based upon severity of symptoms recommends appropriate action\"\"\"\n    \n    \n    if 'fever' in symptoms:\n        print(\"Recommendations:\")\n        print(\"* Self Isolation at Home\")\n        print(\"* Wearing Mask while outside\")\n        print(\"* Regular Hand wash for 20 secs\")\n        print(\"* Avoid close contact with people especially those who are unwell \")\n        \n    else:    \n        \n        if ('cough'in symptoms) |('breathlessness'in symptoms):\n            print(\"Recommendations:\")\n            print(\"* Stay at home except for essential needs such as getting medical care.\")\n            print(\"* Cover nose and mouth when around others by wearing cloth face coverings\")\n            print(\"* Wash hands frequently with soap and water for at least 20 seconds\")\n            print(\"* Clean and disinfect surfaces touched often like doorknobs , light switches ,tables etc .\")\n        \n        else:    \n            \n            print(\"No specific recommendation required since there are no severe symptoms like high grade fever , cough or difficulty in breathing \")\n            \n    \n\n\nif __name__ == '__main__':\n    symptoms =input(\"Enter comma separated list of current symptoms (eg. headache,chills,body pain ) : \").strip()\n    symptoms=symptoms.split(',')\n    update_extreme_hygiene(symptoms)",
            "id": 369
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (if_statement condition: (binary_operator left: (parenthesized_expression (comparison_operator (string (string_start) (string_content) (string_end)) (identifier))) right: (parenthesized_expression (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))))\n**\n",
        "text": " 4",
        "token_cnt": 749
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def clean_ear(trust):\n    \"\"\"Updates extreme ear hygiene by cleaning outer ear based on provided trust score.\"\"\"\n\n    \n    action_map = {\n        0: \"Do nothing.\",\n        5: \"Wipe away visible dirt with cotton swab.\",\n        7: \"Use alcohol wipes to disinfect skin around ear canal.\",\n        9: \"Irrigate ear canal with sterile saline solution.\"\n    }\n    \n    \n    if not isinstance(trust, int) or trust < 0 or trust > 10:\n        raise ValueError(\"Invalid trust value.\")\n        \n    \n    if trust in action_map:\n        print(action_map[trust])\n    else:\n        print(\"No recommendation available for this trust score.\")\n\n\nif __name__ == \"__main__\":\n    try:\n        trust = float(input(\"Enter patient's trust level (0-10): \"))\n        clean_ear(trust)\n    except Exception as e:\n        print(f\"Error occurred: {e}\")",
            "id": 370
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (integer) value: (string (string_start) (string_content) (string_end))) (pair key: (integer) value: (string (string_start) (string_content) (string_end))) (pair key: (integer) value: (string (string_start) (string_content) (string_end))) (pair key: (integer) value: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (boolean_operator left: (boolean_operator left: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) right: (comparison_operator (identifier) (integer))) right: (comparison_operator (identifier) (integer))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (identifier)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_end)))))))))))\n**\n",
        "text": " 10",
        "token_cnt": 572
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_extreme_food_hygiene(data):\n    \"\"\"\n    This function takes input as dataframe 'data' which contains information about \n    restaurants. It checks whether extreme food hygiene measures were taken by those \n    restaurant during COVID pandemic or not based upon certain criteria provided below\n    \n    Parameters:\n        data (pandas DataFrame): Dataframe containing information about restaurants including\n            their name, address, cuisine type etc..\n            \n    Returns:\n        result (DataFrame): A new pandas dataframe consisting of original dataframe along \n            with additional column indicating whether extreme food hygiene was followed or not.\n        \n    Raises:\n        ValueError: If any of the input arguments has incorrect format or value.\n\n    \"\"\"\n    \n    required_columns = ['name', 'address', 'cuisine']\n    \n    \n    if set(required_columns) - set(data.columns):\n        raise ValueError(\"Given dataframe does not contain following columns:\", \n                         str(set(required_columns) - set(data.columns)))\n    \n    \n    covid_measures = False\n    \n    \n    for index, row in data.iterrows():\n        \n        \n        if pd.isnull(row['online_consent']):\n            return \"Consent Form Not Available\"\n        \n        \n        if int(row['number_of_people']) > 10:\n            return \"Social Distancing Not Followed\"\n        \n        \n        if pd.isnull(row['handwash_facilities']):\n            return \"Hand Wash Facility Not Available\"\n        \n        \n        elif pd.notnull(row['online_consent']) & \\\n                int(row['number_of_people']) <= 10 &\\\n                pd.notnull(row['handwash_facilities']):\n            covid_measures = True\n            \n        \n    \n    \n    data[\"covid_measures\"] = np.where(data.index, covid_measures, \"\")    \n    \n    return data",
            "id": 371
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (if_statement condition: (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier))))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))))))))))) (expression_statement (assignment left: (identifier) right: (false))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) body: (block (if_statement condition: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) (if_statement condition: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (binary_operator left: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (line_continuation) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (binary_operator left: (integer) (line_continuation) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) consequence: (block (expression_statement (assignment left: (identifier) right: (true)))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (identifier) (string (string_start) (string_end)))))) (return_statement (identifier)))))\n**\n",
        "text": " 4",
        "token_cnt": 894
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_high_temperature(minimum_safe_temp, max_tolerable):\n    \"\"\" \n    This function takes as inputs the minimum safe temperature (in degrees Celsius) and the maximum tolerable temperature (also in degrees celsius). It then determines whether the current outside air temperature falls within these bounds. If yes, it returns True; otherwise False.\n\n    Parameters:\n        minimum_safe_temp (float): Minimum acceptable safety temperature in degrees celcius \n        max_tolerable (float): Maximum allowed temperature excursion above minimum safety threshold before warning signs appear \n\n    Returns:\n        bool: Whether the current outdoor temperature is considered 'High' or not\n    \n    Raises:\n        ValueError: Raised when invalid input type detected\n    \"\"\"    \n    \n    try:    \n        float(minimum_safe_temp)\n        float(max_tolerable)\n    except Exception as e:\n        raise ValueError(\"Invalid Input Type Detected\") from e    \n\n    \n    if float(current_outside_air_temperature) > float(maximum_tolerable):\n        return \"Temperature Exceeds Tolerance\"\n    elif float(current_outside_air_temperature) >= float(minimum_safe_temp):\n        return \"Temperature Safe\"\n    else:\n        return \"Temperature Too Low\"",
            "id": 372
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (try_statement body: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) cause: (identifier))))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (call function: (identifier) arguments: (argument_list (identifier)))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (call function: (identifier) arguments: (argument_list (identifier)))) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 10",
        "token_cnt": 342
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_low_hygiene(responsibility):\n    \"\"\"\n    This function determines whether there was low hygiene \n    based on the responsibility provided\n    \n    Args:\n        responsibility (str): The name of the person who had \n            responsibility for cleaning\n\n    Returns:\n        str: A message indicating whether there was low hygiene\n            and who was responsible\n    \"\"\"\n    \n    no_message = \"There was no issue with hygiene\"\n    owner_message = f\"{responsibility} did not clean properly\"\n    cleaner_message = f\"{responsibility} cleaned correctly but {responsibility}2 didn't\"\n    both_message = f\"{responsibility} and {responsibility}2 did not wash their hands after using the bathroom\"\n    \n    \n    if responsibility == 'Owner':\n        return owner_message\n    elif responsibility == 'Cleaner' or responsibility == 'cleaner':\n        return cleaner_message\n    elif responsibility == 'both':\n        return both_message\n    else:\n        return no_message",
            "id": 373
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (identifier))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (identifier)))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (identifier)))) alternative: (else_clause body: (block (return_statement (identifier))))))))\n**\n",
        "text": " 6",
        "token_cnt": 414
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n\ndef transform(df):\n    \n    df = df.drop(['Unnamed: 0', 'Image'], axis=1)\n\n    \n    labels = {'Dry': 0, 'Moisturized': 1}\n    df['Label'] = df['Label'].map(labels)\n    \n    \n    if \"Transparency\" not in df.columns:\n        df[\"transparency\"] = round(df[\"RValue\"].mean())\n        \n    return df\n    \n\nif __name__ == '__main__':\n    \n    df = pd.read_csv('data.csv')\n    \n    \n    X_train, X_test, y_train, y_test = train_test_split(df.iloc[:, :-1], df['Label'], test_size=.25, random_state=42)\n    \n    \n    transformed_X_train = transform(X_train)\n    \n    \n    transformed_X_train.to_csv(\"transformed_X_train.csv\", index=False)\n    y_train.to_csv(\"y_train.csv\", index=False)\n    \n    \n    transformed_X_test = transform(X_test)\n    \n    \n    transformed_X_test.to_csv(\"transformed_X_test.csv\", index=False)\n    y_test.to_csv(\"y_test.csv\", index=False)",
            "id": 374
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (integer)))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list (identifier))))) (if_statement condition: (comparison_operator (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list)))))))) (return_statement (identifier)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (pattern_list (identifier) (identifier) (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (slice) subscript: (slice (unary_operator argument: (integer)))) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (float)) (keyword_argument name: (identifier) value: (integer)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (false))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (false))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (false))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (false))))))))\n**\n",
        "text": " 6",
        "token_cnt": 1003
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import datetime as dt\nfrom typing import List\nclass Patient:\n    def __init__(self, name: str, dob: str):\n        self.name = name\n        self.dob = dob\n    \n    @property\n    def age(self) -> int:\n        return (dt.datetime.now() - \n                dt.date.fromisoformat(self.dob)).days // 365\n\n    def get_trust_level(self) -> str:\n        \"\"\"Determines patient's trust level.\"\"\"\n        if self.age < 18:\n            return \"Minor\"\n        elif self.age >= 60:\n            return \"Senior Citizen\"\n        else:\n            return \"Adult\"\n\ndef schedule_examination(patients: List[Patient]):\n    exam_dates = []\n    for patient in patients:\n        \n        now = dt.datetime.now()\n        \n        \n        if patient.get_trust_level() == 'Minor':\n            duration = dt.timedelta(hours=2)\n        elif patient.get_trust_level() == 'Senior Citizen':\n            duration = dt.timedelta(minutes=30)\n        else:\n            duration = dt.timedelta(hours=4)\n    \n        \n        appointment_time = now + dt.timedelta(days=(patient.age//7))\n        appointment_date = appointment_time.strftime('%Y-%m-%d')\n    \n        \n        exam_dates.append((appointment_date, appointment_time))\n        \n    return exam_dates",
            "id": 376
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (class_definition name: (identifier) body: (block (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier)))) body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))))) (decorated_definition (decorator (identifier)) definition: (function_definition name: (identifier) parameters: (parameters (identifier)) return_type: (type (identifier)) body: (block (return_statement (binary_operator left: (attribute object: (parenthesized_expression (binary_operator left: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))))) attribute: (identifier)) right: (integer)))))) (function_definition name: (identifier) parameters: (parameters (identifier)) return_type: (type (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))))) (function_definition name: (identifier) parameters: (parameters (typed_parameter (identifier) type: (type (generic_type (identifier) (type_parameter (type (identifier))))))) body: (block (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (integer))))))) alternative: (elif_clause condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (integer)))))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (integer))))))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (parenthesized_expression (binary_operator left: (attribute object: (identifier) attribute: (identifier)) right: (integer))))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (tuple (identifier) (identifier))))))) (return_statement (identifier)))))\n**\n",
        "text": " 4",
        "token_cnt": 1118
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_low_handling(transparency):\n    \"\"\"\n    This function calculates the cost of \n    low handling cleaning accesssories based on transparency level\n    \n    Args:\n        transparency (float) - value between 0 and 1 indicating \n            how transparent the object being cleaned is\n\n    Returns:\n        float - Cost of required cleaning equipment\n    Raises:\n        ValueError - If input parameter out of range\n        \n    \"\"\"    \n    \n    cost_dict = {\n        0.25: 349.76, \n        0.5:  849.52,\n        0.75: 1349.28,\n        1.:   1849.04\n    }    \n    \n    \n    if not isinstance(transparency, float) or \\\n       not 0 <= transparency <= 1:\n           raise ValueError(\"Invalid Input\")\n           \n    \n    cost = min((v for k, v in cost_dict.items() \n                if k<=transparency), default=cost_dict[max(cost_dict)])\n            \n    return cost",
            "id": 377
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (float) value: (float)) (pair key: (float) value: (float)) (pair key: (float) value: (float)) (pair key: (float) value: (float))))) (if_statement condition: (boolean_operator left: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) (line_continuation) right: (not_operator argument: (comparison_operator (integer) (identifier) (integer)))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (generator_expression body: (identifier) (for_in_clause left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (if_clause (comparison_operator (identifier) (identifier)))) (keyword_argument name: (identifier) value: (subscript value: (identifier) subscript: (call function: (identifier) arguments: (argument_list (identifier))))))))) (return_statement (identifier)))))\n**\n",
        "text": " 10",
        "token_cnt": 364
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_low_eye_hygiene(privacy):\n    \"\"\"Update low eye hygiene score based on privacy level\n\n    Args:\n        privacy (int): A number between 0 and 1 indicating user’s privacy preference\n            where higher value indicates more private browsing behavior\n\n    Returns:\n        int: The updated low eye hygiene score after considering privacy level\n    \"\"\"\n    \n    conditions = [(True, 2), (False, -3)]\n    \n    \n    for condition in conditions: \n        if privacy >= condition[0]: \n            return condition[1] \n\n    raise ValueError(\"Invalid input\")",
            "id": 382
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (tuple (true) (integer)) (tuple (false) (unary_operator argument: (integer)))))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (identifier) (subscript value: (identifier) subscript: (integer))) consequence: (block (return_statement (subscript value: (identifier) subscript: (integer))))))) (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 10",
        "token_cnt": 195
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_high_handwashing(safety):\n    \n    if safety == \"low\":\n        print(\"Wash your hands thoroughly with soap under warm water for at least 20 seconds.\")\n        print(\"If soap and water are not available, use an alcohol-based hand rub\")\n\n    elif safety == \"medium\":\n        print(\"Use hand sanitizer gel if soap and water are not available.\")\n        print(\"Make sure to cover all surfaces of your hands and rub them until they feel dry.\")\n        \n    else:\n        print(\"There is no need to panic! This situation does not require immediate action.\")\n        \ntransform_high_handwashing('low')\ntransform_high_handwashing('medium')\ntransform_high_handwashing('high')",
            "id": 385
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))\n**\n",
        "text": " 6",
        "token_cnt": 395
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def weather_check(wind_speed,threshold):\n    \"\"\"\n    This function takes two arguments \n    'wind_speed' - A float value representing wind speed in MPH\n    'threshold'-A float value representing minimum safe wind speed limit in MPH\n    \n    Returns a string indicating whether there is a low wind situation or not.\n\n    \"\"\"\n    \n    try:\n        float(wind_speed) and float(threshold)\n    except ValueError as e:\n        return f\"{e}: Please enter numeric values only.\"\n\n    \n    if int(wind_speed) < int(threshold):\n        return \"Low wind Warning!\"\n    else:\n        return None",
            "id": 387
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (try_statement body: (block (expression_statement (boolean_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (call function: (identifier) arguments: (argument_list (identifier)))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (return_statement (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (call function: (identifier) arguments: (argument_list (identifier)))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (else_clause body: (block (return_statement (none))))))))\n**\n",
        "text": " 10",
        "token_cnt": 250
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_low_fitness(steps):\n    \"\"\"\n    This function takes input steps taken by user during day \n    and returns whether their daily activity falls within normal range \n    (5000 -7500) steps or not\n    \n    Parameters:\n        steps (int): Number of steps taken by user during the day\n        \n    Returns:\n        bool: True if daily activity falls within normal range; False otherwise\n    \"\"\"\n    \n    NORMAL_FITNESS_ZONE = [5000, 7500]\n\n    \n    if steps >= MINIMUM_STEPS and steps <= MAXIMUM_STEPS:\n        return True\n    elif steps < MINIMUM_STEPS:\n        print(\"Low Fitness Alert! Your current number of steps:\", steps, \"is below\", \n              MINIMUM_STEPS, \". Please take more steps today.\")\n    else:    \n        print(\"Low Fitness Alert! Your current number of steps:\", steps, \"is above\", \n              MAXIMUM_STEPS, \". Try reducing your total steps tomorrow.\")    \n        \n    \n\ncalculate_low_fitness(6843)",
            "id": 389
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (integer) (integer)))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (identifier)) right: (comparison_operator (identifier) (identifier))) consequence: (block (return_statement (true))) alternative: (elif_clause condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (integer)))))\n**\n",
        "text": " 10",
        "token_cnt": 327
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "print(\"Please enter patient age:\")\nage = float(input())\n\n\nif age < 18:\n    \n    print(\"Patient is below the legal age of consent.\")\n    print(\"Would you like us to obtain their parent's consent?\")\n    answer = input()\n\n    if answer == \"yes\":\n        \n        print(\"Parent's name:\")\n        father_name = input()\n        mother_name = input()\n\n        print(\"Father's phone number:\")\n        father_number = input()\n        \n        print(\"Mother's phone number:\")\n        mother_number = input()\n\n        \n        send_email(father_name, father_number, mother_name, mother_number)\n        print(\"Email sent successfully!\")\n    \n    else:\n        \n        print(\"Cannot schedule appointment without parental consent.\")\n\nelif age >= 18:\n    \n    pass\n\n\nvisited_dentist = input(\"Have you been to the dentist within the last six months? (Yes/No): \")\n\nif visited_dentist == 'Yes':\n    \n    pass\n\nelif visited_dentist == 'No':\n    \n    print(\"Scheduling immediate dentist visit...\")\n    book_appointment('Dentist')\n    \nelse:\n    \n    print(\"Invalid input. Please try again\")\n\n\ndef send_email(father_name, father_number, mother_name, mother_number):\n    \"\"\"\n    Sends an email to both parents informing them about the dentist appointment.\n    The email includes details such as date, time, location etc.\n    \"\"\"\n    subject = f\"Appointment Confirmation for {patient_name}\"\n    body = f\"\"\"\n    Dear Parents,\n\n    We have scheduled an appointment with Dr Smith for our son/daughter {patient_name} \n    for tomorrow at 2pm at the Family Dental Clinic.\n\n    Please contact us at {phone_number} if you have any questions or concerns.\n\n    Regards,\n    The Doctor's Office\n    \"\"\"\n\n    \n    body = body.replace('{patient_name}', patient_name).replace('{phone_number}', phone_number)\n\n    \n    \n\ndef book_appointment(service):\n    \"\"\"\n    Books an appointment with the specified service provider.\n    This function can connect to a database or external API to retrieve available timeslots.\n    \"\"\"\n    \n    timeslot = fetch_timeslot(service)\n\n    \n    save_appointment(patient_id, service, timeslot)\n\n    \ndef fetch_timeslot(service):\n    \"\"\"\n    Fetches an available timeslot for the specified service provider.\n    This function can connect to a database or external API to search for openings.\n    Returns a tuple containing the start and end time of the timeslot.\n    \"\"\"\n    \n    timeslots = query_database_or_api(service)\n\n    \n    return random.choice(timeslots)\n    \n    \ndef query_database_or_api(service):\n    \"\"\"\n    Queries a database or external API to retrieve available timeslots for the specified service provider.\n    Returns a list of tuples containing the start and end time of each timeslot.\n    \"\"\"\n    url = f\"{SERVICE_PROVIDER_API}/{service}/availabilities\"\n    response = requests.get(url)\n    timeslots = response.json()['timeslots']\n    return timeslots\n    \n    \ndef save_appointment(patient_id, service, timeslot):\n    \"\"\"\n    Saves an appointment for the specified patient with the given service and timeslot.\n    This function can connect to a database to store the appointment information.\n    \"\"\"\n    \n    appointment = {'patient_id': patient_id, 'service': service, 'start_time': timeslot[0], 'end_time': timeslot[1]}\n\n    \n    db.insert_appointment(appointment)",
            "id": 390
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list)))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier) (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (pass_statement)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (pass_statement)) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier))) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier)))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (return_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (subscript value: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) subscript: (string (string_start) (string_content) (string_end))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (subscript value: (identifier) subscript: (integer))) (pair key: (string (string_start) (string_content) (string_end)) value: (subscript value: (identifier) subscript: (integer)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))))\n**\n",
        "text": " 4",
        "token_cnt": 1708
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random \n\ndef calculate_low_security(data):\n    \"\"\"\n    This function calculates the low level of encyption by encrypting \n    the inputted string 'data' using a simple substitution cipher\n    \n    Args:\n        data (str): The plaintext message to be encrypted\n        \n    Returns:\n        str: An encoded ciphertext containing the original message\n    \"\"\"\n\n    \n    charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 !@\n\n    \n    cipher_text = []\n\n    \n    for char in data:\n\n        \n        rand_index = random.randint(0, len(charset) - 1)\n        \n        \n        \n        cipher_char = charset[rand_index] \n\n        \n        cipher_text.append(cipher_char) \n\n    \n    return ''.join(cipher_text) \n\n\nif __name__ == '__main__':\n    print(\"Enter some plain text:\")\n    data = input()\n    enc_data = calculate_low_security(data)\n    print(\"The Encrypted Text:\",enc_data)",
            "id": 391
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) (ERROR (string_start) (identifier) (UNEXPECTED '@')) right: (assignment left: (identifier) right: (list)))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (integer)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (return_statement (call function: (attribute object: (string (string_start) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))))))\n**\n",
        "text": " 6",
        "token_cnt": 459
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def display_tips(responsibility):\n    \n    if (role == \"engineer\"):\n        \n        switcher = {\n            \"beginner\": \"\"\"\n                Avoid consuming too much sugary foods such as candies, cookies, pastries etc., \n                since these can cause severe damage to teeth over time. Instead try eating more fruits and vegetables which contain natural sugars that won't harm enamel. \n            \"\"\",\n            \"intermediate\": \"\"\"\n                Try reducing the amount of soda and other sugary drinks consumed throughout the day. This will help prevent stains from developing on teeth and reduce risk of decay. Additionally, use a straw when possible to avoid direct contact between liquid and teeth surfaces. \n            \"\"\",\n            \"expert\": \"\"\"\n                For those who qualify as experts, flossing and brushing twice daily remains one of the most effective ways to maintain good dental health. In addition to this regular maintenance routine, consider incorporating additional steps like mouthwash, night guards, and professional cleanings into your regimen. These measures can further reduce risks associated with poor oral care practices. \n            \"\"\"    \n        }\n    \n        return switcher.get(responsibility, \"Invalid Role\")\n    \n    else:\n        print(\"Access denied! Insufficient privileges.\")",
            "id": 392
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))))) (return_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))\n**\n",
        "text": " 10",
        "token_cnt": 302
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_handwash(\n    soap_used = True, \n    water_temperature = 'warm', \n    duration='adequate'\n):\n    \n    \n    assert isinstance(soap_used, bool), \"Soap usage must be boolean\"\n    assert water_temperature in ['cold','lukewarm','warm'], f\"{water_temperature} not recognized as valid temperature\"\n    assert duration in ['short','adequate','long'],f\"{duration} not recognized as valid time interval\"\n\n    \n    if all([soap_used==True, water_temperature=='warm', duration == 'adequate']):\n        return \"Good job! This meets WHO guidelines for proper hand hygiene.\"\n    elif any([soap_used!=True, water_temperature!='warm'] ):\n        return (\n            \"Didn't use soap or water was too cold.\\n\" \n            + \"Wet hands with clean running water\\nand apply enough soap to cover all surfaces.\")\n    else: \n        return (\"Rinsed for insufficient time,\\nor did not wash under nails.\\n\"+\n                \"Wet hands with clean running water \\nand scrub all surfaces of both hands\")",
            "id": 393
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (default_parameter name: (identifier) value: (true)) (default_parameter name: (identifier) value: (string (string_start) (string_content) (string_end))) (default_parameter name: (identifier) value: (string (string_start) (string_content) (string_end)))) body: (block (assert_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (string (string_start) (string_content) (string_end))) (assert_statement (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end))) (assert_statement (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end))) (if_statement condition: (call function: (identifier) arguments: (argument_list (list (comparison_operator (identifier) (true)) (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (call function: (identifier) arguments: (argument_list (list (comparison_operator (identifier) (true)) (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))))) consequence: (block (return_statement (parenthesized_expression (binary_operator left: (string (string_start) (string_content (escape_sequence)) (string_end)) right: (string (string_start) (string_content (escape_sequence)) (string_end))))))) alternative: (else_clause body: (block (return_statement (parenthesized_expression (binary_operator left: (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)) right: (string (string_start) (string_content (escape_sequence)) (string_end)))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 631
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def get_accessory(expertise):\n    \"\"\"Get appropriate cleaning accessory for given expertise level.\"\"\"\n\n    \n    if expertise == 'beginner':\n        return \"Cloth\", \"Sponge\"\n    \n    \n    elif expertise == 'intermediate':\n        return \"Brush\", \"Mop\"\n        \n    \n    else:\n        return \"Vacuum cleaner\", \"Steam cleaner\"\n        \n\nprint(\"Accessory for beginners:\", get_accessory('beginner'))\nprint(\"Accessory for intermediates:\", get_accessory('intermediate'))\nprint(\"Accessory for experts:\", get_accessory('advanced'))",
            "id": 396
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (expression_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (expression_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (return_statement (expression_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 6",
        "token_cnt": 460
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "dryer_temp = float(input(\"Enter the expected final dryer temperature:\"))\nwasher_type = input(\"What type of washing machine do you use? (Top loader/Front Loader): \")\nwater_hardness = int(input(\"Enter the water hardness level (1 - 10): \"))\n\n\ndef calculate_safety_margin():\n    \n    \n    if material == 'cotton':\n        return cotton_time * 2\n    elif material == 'synthetic fiber':\n        return synthetic_fiber_time + extra_time\n    else: \n        raise ValueError('Invalid Fabric Type')\n\n\nif __name__ == '__main__':\n\n    try: \n\n        \n        material = input(\"Enter the name of the fabric:\")\n        cotton_time = float(input(\"Enter the recommended drying \"\n                                 \"time for cotton garments\"))\n        synthetic_fiber_time = float(\n            input(\"Enter the recommended drying time\"\n                  \"for synthetics fibers\"))\n        extra_time = float(input(\"Enter additional drying time required\"\n                                \"(in minutes), if any\"))\n\n        \n        assert isinstance(material, str), '`material` must be a string'\n        assert isinstance(cotton_time, float), \\\n            '`cotton_time` must be a floating point number'\n        assert isinstance(synthetic_fiber_time,\n                         float), '`synthetic_fiber_time` must be a floating point number'\n        assert isinstance(extra_time, float),\\\n           '`extra_time` must be a floating point number'\n        \n        \n        margin = calculate_safety_margin()\n    \n        print(\"\\nExpected Final Dryer Temperature:\", end=\" \")\n        print(round(dryer_temp, 1))\n        print(\"Water Hardness Level:\", end=\" \")\n        print(water_hardness)\n        print(\"Washing Machine Type:\", end=\" \")\n        print(washer_type)\n        print(\"Fabric Name:\", end=\" \")\n        print(material)\n        print(\"COTTON Recommended Dry Time:\", end=\" \")\n        print(round(cotton_time, 1))\n        print(\"Synthetic Fiber Recommended Dry Time:\", end=\" \")\n        print(round(synthetic_fiber_time, 1))\n        print(\"Additional Required Dry Time:\", end=\" \")\n        print(round(extra_time, 1))\n        print(\"Safety Margin:\", end=\" \")\n        print(round(margin, 1))\n    \n        \n        if dryer_temp >= margin: \n            print(\"Drying conditions appear suitable.\")\n        elif dryer_temp < margin:    \n            print((\"Insufficient heat during drying.\"\n                   \"\\nConsider raising the dryer temperate.\"))\n    \n        if washer_type == 'top loader' and water_hardness <= 6:     \n            print((f\"\\nFor top loading machines,\\n\"\n                    f\"{water_hardness} water hardness may cause scaling.\\n\"\n                    f\"This can lead to deteriorated fabrics over time.\\n\"\n                    f\"Check care labels before washing and follow instructions carefully.\"))\n    \n        if washer_type == 'front loader' and water_hardness > 8:      \n            print((f\"\\nFor front loading machines,\\n\"\n                    f\"{water_hardness} water hardness may cause damage.\\n\"\n                    f\"Hard water minerals can build up inside the machine.\\n\"\n                    f\"Use softened or distilled water instead.\"))\n    \n    except AssertionError as err:    \n        print(err)    \n    except ValueError as err:    \n        print(err)",
            "id": 398
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (binary_operator left: (identifier) right: (integer)))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (binary_operator left: (identifier) right: (identifier))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))))))) (assert_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (string (string_start) (string_content) (string_end))) (assert_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (string (string_start) (string_content) (string_end))) (assert_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (string (string_start) (string_content) (string_end))) (assert_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier) (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier) (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier) (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier) (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier) (integer)))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (parenthesized_expression (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content (escape_sequence)) (string_end)))))))))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (integer))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (parenthesized_expression (concatenated_string (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)) (string (string_start) (interpolation expression: (identifier)) (string_content (escape_sequence)) (string_end)) (string (string_start) (string_content (escape_sequence)) (string_end)) (string (string_start) (string_content) (string_end))))))))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (integer))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (parenthesized_expression (concatenated_string (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)) (string (string_start) (interpolation expression: (identifier)) (string_content (escape_sequence)) (string_end)) (string (string_start) (string_content (escape_sequence)) (string_end)) (string (string_start) (string_content) (string_end)))))))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))))))))\n**\n",
        "text": "ername: (identifier))))) identifier)))))) identifier)))))) identifier)))))) identifier)))))) identifier))))",
        "token_cnt": 2227
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import requests\nfrom bs4 import BeautifulSoup\n\n\ndef check_availability(sku):\n    \n    base_url = \"https://www.example.com\"\n    endpoint = \"/api/check-product-availablity/\"\n\n    \n    session = requests.Session()\n    \n    \n    resp = session.get(base_url + endpoint)\n    soup = BeautifulSoup(resp.text, 'html.parser')\n\n    \n    sku_el = soup.select(\"span\n    assert len(sku_el) == 1\n    extracted_sku = sku_el[0].text\n\n    print(f\"\\nChecking stock status for {sku} (extracted as '{extracted_sku}') ...\\n\")\n\n    \n    payload = {\"sku\": extracted_sku}\n    resp = session.post(base_url + endpoint, json=payload)\n    data = resp.json()\n\n    \n    available = data['available']\n    price = data['price']\n    currency = data['currency']\n\n    print(f\"{'-' * 80}\\n\")\n\n    if not available:\n        print(f\"Product with SKU `{sku}` is currently unavailable.\")\n        return\n\n    else: \n        print(\n            f\"Product with SKU `{sku}` is currently available.\\nPrice: {price} {currency}\"\n        )\n\n        \n        print(\"\\nSimulating purchase ... \")\n        time.sleep(3)\n        print(\"Purchase completed!\")\n\n\nif __name__ == \"__main__\": \n\n    \n    while True:    \n        try: \n            sku = input(\"Enter SKU Number: \").strip().upper()\n            break\n    \n        except ValueError:    \n            print(\"Invalid Input! Please enter a valid SKU number.\")\n\n\n    \n    check_availability(sku, dry_run=True)\n\n    \n    check_availability(sku)",
            "id": 399
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (ERROR (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) (ERROR (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (identifier) right: (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end)))))) (identifier) (attribute object: (identifier) attribute: (identifier)) (ERROR (string_start) (identifier)) (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (ERROR (call function: (attribute object: (subscript value: (integer) (ERROR (identifier) (identifier)) subscript: (integer)) attribute: (identifier)) (ERROR (identifier)) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content (escape_sequence)) (string_end)))) (identifier) (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier))) (identifier) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (identifier) right: (identifier)) (keyword_argument name: (identifier) value: (identifier)))) (identifier) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (identifier) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (identifier) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (identifier) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (integer))) (string_content (escape_sequence)) (string_end))))) (not_operator argument: (identifier))) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))) (return_statement))) (expression_statement (assignment left: (identifier) type: (type (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (ERROR (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) (while_statement condition: (true) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list)))) (break_statement)) (except_clause (identifier) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (true))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))))\n**\n",
        "text": " 4",
        "token_cnt": 1195
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_high_nailcare(parameter1, parameter2):\n    \"\"\"\n    This function takes two input values from user \n    (e.g., age of customer, time since last manicure) \n    and returns transformed value according to high nail care transformation rules\n    \n    Parameters:\n        parameter1 (float): first input value \n        parameter2 (float): second input value \n    \n    Returns:    \n        float: Transformed output value according to given inputs and transformation rule\n        \n    Raises:\n        ValueError: If either input value is not numeric\n            \n    \"\"\"    \n    \n    try:\n        float(parameter1)\n        float(parameter2)\n    except ValueError:\n        raise ValueError(\"Invalid input value\")    \n\n    \n    if parameter1 >=65 and parameter2 <=30:\n        return \"High\"\n    elif parameter1 < 65 and parameter2 > 30:\n        return \"Medium\"\n    else:\n        return \"Low\"\n    \n\nprint(transform_high_nailcare(70,45))   \nprint(transform_high_nailcare(80,90))   \nprint(transform_high_nailcare(55,65))",
            "id": 400
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (try_statement body: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))) (except_clause (identifier) (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (integer))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (integer))) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer) (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer) (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer) (integer)))))))\n**\n",
        "text": " 10",
        "token_cnt": 418
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd \nfrom sklearn import tree\nfrom sklearn.model_selection import train_test_split\n\n\ndef check_handwash(data):\n    \n    dry = True if (data['Wipe Type'] == 'Dry wipe') else False\n    alcohol = True if ('Alcohol' in data['Ingredients'].tolist()) else False\n    \n    \n    if dry and alcohol: \n        return \"Pass\"\n\n    \n    else:\n        return \"Fail\"\n    \n\nif __name__=='__main__': \n\n    \n    df = pd.read_csv('Handwash.csv') \n  \n    \n    df.drop(['Product Name', 'Formulation'], axis=1, inplace=True) \n      \n    \n    X = df.iloc[:, :-1].values \n    y = df.iloc[:,-1].values \n  \n    \n    X_train, X_test, y_train, y_test = train_test_split(X,y, test_size=.30, random_state=42,stratify=y) \n  \n    \n    clf = tree.DecisionTreeClassifier() \n    clf = clf.fit(X_train, y_train) \n  \n    \n    predictions = clf.predict(X_test) \n  \n    \n    acc = sum(predictions==y_test)/len(y_test)*100\n  \n     \n    print(\"Accuracy:\",acc,\"%\") \n  \n    \n    result = pd.DataFrame({'Actual':y_test,'Predicted':predictions}) \n  \n    \n    checked = result.apply(check_handwash,axis=1) \n  \n    \n    print(\"\\nSummary:\") \n    print(checked.value_counts())",
            "id": 405
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (conditional_expression (true) (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end)))) (false)))) (expression_statement (assignment left: (identifier) right: (conditional_expression (true) (parenthesized_expression (comparison_operator (string (string_start) (string_content) (string_end)) (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list)))) (false)))) (if_statement condition: (boolean_operator left: (identifier) right: (identifier)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (true))))) (expression_statement (assignment left: (identifier) right: (attribute object: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (slice) subscript: (slice (unary_operator argument: (integer)))) attribute: (identifier)))) (expression_statement (assignment left: (identifier) right: (attribute object: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (slice) subscript: (unary_operator argument: (integer))) attribute: (identifier)))) (expression_statement (assignment left: (pattern_list (identifier) (identifier) (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (float)) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (call function: (identifier) arguments: (argument_list (comparison_operator (identifier) (identifier)))) right: (call function: (identifier) arguments: (argument_list (identifier)))) right: (integer)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))))))\n**\n",
        "text": " 4",
        "token_cnt": 1237
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_dental(patient_data):\n    \n    dental_issues = [\"Cavities\", \"Gum disease\",\"Tooth decay\"]\n    \n    \n    for issue in dental_issues:\n        if issue in patient_data[\"Dental history\"]:\n            \n            if patient_data[\"Dental history\"][issue] == \"Mild\":\n                next_step = \"Recommend brushing twice daily\"\n                \n            elif patient_data[\"Dental history\"][issue] == \"Moderate\": \n                next_step = \"Refer to dentist for professional cleaning\"\n                \n            else:\n                next_step = \"Prescribe antibiotics and refer to specialist\"\n                \n            \n            patient_data[f\"{issue} Next Step\"] = next_step\n            \n    return patient_data",
            "id": 408
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (identifier) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) consequence: (block (if_statement condition: (comparison_operator (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end))) right: (identifier))))))) (return_statement (identifier)))))\n**\n",
        "text": " 6",
        "token_cnt": 474
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_extreme_floss(bias):\n    \"\"\"Determine whether extreme flossing exists given user preference.\"\"\"\n\n    \n    preferences = {\n        'Waxed': True, \n        'Unwaxed': False, \n        'Flavored': True, \n        'Unflavored': False}\n    \n    \n    if bias in preferences:\n        \n        \n        pref_value = preferences[bias]\n    \n        \n        if pref_value == True and ('Waxed' or 'Flavored'):\n            print(\"Strong evidence for existence of extreme waxed/flavored flossing\")\n        elif pref_value == True and ('Unwaxed' or 'Unflavored'):\n            print(\"Weak evidence against existence of extreme unwaxed/unflavored flossing\")\n        elif pref_value == False and ('Waxed' or 'Flavored'):\n            print(\"No indication of either extreme form of flossing\")\n        elif pref_value == False and ('Unwaxed' or 'Unflavored'):\n            print(\"Strong indication of absence of both types of flossing\")\n            \n    else:\n        print(\"Invalid input! Please enter one of the following options:\")\n        print(\", \".join(preferences))\n        \n\ndetermine_extreme_floss(input(\"Enter preferred bias [Waxed, Unwaxed, Flavored, Unflavored]: \"))",
            "id": 409
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (true)) (pair key: (string (string_start) (string_content) (string_end)) value: (false)) (pair key: (string (string_start) (string_content) (string_end)) value: (true)) (pair key: (string (string_start) (string_content) (string_end)) value: (false))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (true)) right: (parenthesized_expression (boolean_operator left: (string (string_start) (string_content) (string_end)) right: (string (string_start) (string_content) (string_end))))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (true)) right: (parenthesized_expression (boolean_operator left: (string (string_start) (string_content) (string_end)) right: (string (string_start) (string_content) (string_end))))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (false)) right: (parenthesized_expression (boolean_operator left: (string (string_start) (string_content) (string_end)) right: (string (string_start) (string_content) (string_end))))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (false)) right: (parenthesized_expression (boolean_operator left: (string (string_start) (string_content) (string_end)) right: (string (string_start) (string_content) (string_end))))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier))))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 6",
        "token_cnt": 835
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def make_decision(bias):\n    \n    if (bias > .5) & (bias <= .7):\n        return \"Continue\"\n    elif ((bias >= -.2) | (bias < .3)):\n        return \"Reconsider\"\n    else: \n        return \"Revise\"\n\n\n\nprint(\"Please enter your personal organizational bias:\")\nbias = float(input())\n\n\ndry_run = True\nif dry_run == True:\n    print(\"\\nDry Run Results:\\n\")\n\n    \n    for i in range(-10, 11, 1):    \n        outcome = make_decision(i / 10)\n        print(f\"{i:.1f}: {outcome}\")\n\n\nfinal_output = make_decision(bias)\nprint(f\"\\nFinal Output: {final_output}\\n\")",
            "id": 411
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (float))) right: (parenthesized_expression (comparison_operator (identifier) (float)))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (parenthesized_expression (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (unary_operator argument: (float)))) right: (parenthesized_expression (comparison_operator (identifier) (float))))) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list)))))) (expression_statement (assignment left: (identifier) right: (true))) (if_statement condition: (comparison_operator (identifier) (true)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (unary_operator argument: (integer)) (integer) (integer))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier) format_specifier: (format_specifier)) (string_content) (interpolation expression: (identifier)) (string_end))))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content (escape_sequence)) (string_end))))))\n**\n",
        "text": " 10",
        "token_cnt": 625
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_high_hand_hygiene(trust):\n    \"\"\"\n    This function calculates the probability of getting infected from touching face \n    while performing hand hygiene depending upon trust factor\n    \n    Args:\n        trust (float): A value between [0,1] indicating level of confidence about \n            cleanliness of hands performed by individual\n        \n    Returns:\n        float: Probability of getting infected from touching face during \n        hand washing expressed as a decimal number between 0 and 1\n    Raises:\n        ValueError: If input argument 'trust' is not within range [0,1]    \n    \"\"\"\n    \n    if isinstance(trust,float) == False or (trust < 0 or trust > 1):\n        raise ValueError(\"Invalid Input\")    \n\n    \n    low_trust = 0.2       \n    medium_trust = 0.5    \n    high_trust = 0.8      \n\n    \n    if trust >= 0.9:\n        return high_trust\n    elif trust >= 0.6:\n        return medium_trust\n    else:\n        return low_trust",
            "id": 413
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (false)) right: (parenthesized_expression (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (integer))))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (float))) (expression_statement (assignment left: (identifier) right: (float))) (expression_statement (assignment left: (identifier) right: (float))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (identifier))) alternative: (elif_clause condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (identifier)))) alternative: (else_clause body: (block (return_statement (identifier))))))))\n**\n",
        "text": " 10",
        "token_cnt": 297
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import os\nfrom datetime import timedelta\nfrom collections import deque\nfrom typing import Deque, Optional\n\nclass DataPoint:\n    def __init__(self, timestamp: float, value: int):\n        self.timestamp = timestamp\n        self.value = value\n\n    def __lt__(self, other) -> bool:\n        return self.timestamp < other.timestamp\n\ndef load_step_data(file_path: str) -> Deque[DataPoint]:\n    \"\"\"Loads step count data from CSV file.\"\"\"\n    data = []\n    with open(file_path, 'r') as f:\n        next(f) \n        for line in f:\n            fields = line.strip().split(',')\n            timestamp = float(fields[0])\n            steps = int(fields[1])\n            data.append(DataPoint(timestamp=timestamp, value=steps))\n    \n    return deque(sorted(data))\n\ndef get_daily_activity_counts(data: Deque[DataPoint], start_time: float, end_time: float) -> list[int]:\n    daily_counts = [0] * (end_time - start_time).days()\n    current_day = 0\n    while True:\n        try:\n            point = data[start_time:]\n            day_count = sum([p.value for p in point if p.timestamp >= start_time and p.timestamp <= end_time])\n            daily_counts[current_day] += day_count\n\n            start_time = max(point[-1].timestamp + 1, end_time)\n            current_day += 1\n        except IndexError:\n            break\n        \n    return daily_counts\n\ndef get_weekly_summary(daily_counts: list[int]):\n    weekly_summaries = []\n    week_start = None\n    total_steps = 0\n    for i, count in enumerate(daily_counts):\n        if not week_start:\n            week_start = i\n            total_steps += count\n        else:\n            days_in_week = i - week_start + 1\n            average_steps = round(total_steps / days_in_week)\n            weekly_summaries.append((week_start, week_start+days_in_week-1, average_steps))\n        \n            week_start = None\n            total_steps = count\n            \n    last_week = len(daily_counts)-i\n    if last_week > 0:\n        average_steps = round(total_steps / last_week)\n        weekly_summaries.append((week_start, len(daily_counts)-1, average_steps))\n        \n    return weekly_summaries\n\ndef print_weekly_summaries(summaries: list[(float, float, int)]):\n    fmt = '{start:.2f} - {end:.2f}: {avg}'\n    for s in summaries:\n        print(fmt.format(**s))\n        \nif __name__ == '__main__':    \n    input_dir = '/path/to/input/'\n    output_dir = '/path/to/output'\n    user_id = 'alice'\n    \n    input_file = os.path.join(input_dir, '{}.csv'.format(user_id))\n    output_file = os.path.join(output_dir, '{}_summary.txt'.format(user_id))\n    \n    data = load_step_data(input_file)\n    start_date, end_date = min(data)[0], max(data)[0]\n    daily_counts = get_daily_activity_counts(data, start_date, end_date)\n    weekly_sums = get_weekly_summary(daily_counts)\n    print_weekly_summaries(weekly_sums)",
            "id": 414
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier))) (class_definition name: (identifier) body: (block (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier)))) body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) return_type: (type (identifier)) body: (block (return_statement (comparison_operator (attribute object: (identifier) attribute: (identifier)) (attribute object: (identifier) attribute: (identifier)))))))) (function_definition name: (identifier) parameters: (parameters (typed_parameter (identifier) type: (type (identifier)))) return_type: (type (generic_type (identifier) (type_parameter (type (identifier))))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list))) (with_statement (with_clause (with_item value: (as_pattern (call function: (identifier) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))) alias: (as_pattern_target (identifier))))) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (integer)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (integer)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (identifier))))))))))) (return_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier)))))))) (function_definition name: (identifier) parameters: (parameters (typed_parameter (identifier) type: (type (generic_type (identifier) (type_parameter (type (identifier)))))) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier)))) return_type: (type (generic_type (identifier) (type_parameter (type (identifier))))) body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (list (integer)) right: (call function: (attribute object: (parenthesized_expression (binary_operator left: (identifier) right: (identifier))) attribute: (identifier)) arguments: (argument_list))))) (expression_statement (assignment left: (identifier) right: (integer))) (while_statement condition: (true) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (slice (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list_comprehension body: (attribute object: (identifier) attribute: (identifier)) (for_in_clause left: (identifier) right: (identifier)) (if_clause (boolean_operator left: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (identifier)) right: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (identifier))))))))) (expression_statement (augmented_assignment left: (subscript value: (identifier) subscript: (identifier)) right: (identifier))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (attribute object: (subscript value: (identifier) subscript: (unary_operator argument: (integer))) attribute: (identifier)) right: (integer)) (identifier))))) (expression_statement (augmented_assignment left: (identifier) right: (integer)))) (except_clause (identifier) (block (break_statement)))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (typed_parameter (identifier) type: (type (generic_type (identifier) (type_parameter (type (identifier))))))) body: (block (expression_statement (assignment left: (identifier) right: (list))) (expression_statement (assignment left: (identifier) right: (none))) (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier))) body: (block (if_statement condition: (not_operator argument: (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (identifier))) (expression_statement (augmented_assignment left: (identifier) right: (identifier)))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (identifier) right: (identifier)) right: (integer)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (identifier)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (tuple (identifier) (binary_operator left: (binary_operator left: (identifier) right: (identifier)) right: (integer)) (identifier))))) (expression_statement (assignment left: (identifier) right: (none))) (expression_statement (assignment left: (identifier) right: (identifier)))))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (identifier)))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (identifier)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (tuple (identifier) (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (integer)) (identifier))))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (typed_parameter (identifier) type: (type (generic_type (identifier) (type_parameter (type (tuple (identifier) (identifier) (identifier)))))))) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (dictionary_splat (identifier))))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier) (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier) (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (pattern_list (identifier) (identifier)) right: (expression_list (subscript value: (call function: (identifier) arguments: (argument_list (identifier))) subscript: (integer)) (subscript value: (call function: (identifier) arguments: (argument_list (identifier))) subscript: (integer))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))))\n**\n",
        "text": "swers: 10\n\n**\n\nimport ast\n\ndef calculate_cyclom",
        "token_cnt": 2472
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom scipy import signal\n\n\ndef detect_flatlines(df):\n    \"\"\"Detect flat lines (no acceleration) in a dataframe.\"\"\"\n\n    \n    df['diff'] = df['x'].diff()\n    \n    \n    flats = df[df['diff'] == 0].index\n    \n    return flats\n    \n\ndef compute_rmse(df, flats):\n    \"\"\"Compute root mean squared error over non-flat sections.\"\"\"\n\n    \n    nonflats = set(range(len(df))) - set(flats)\n    \n    \n    x = df.loc[nonflats, 'x']\n    y = df.loc[nonflats, 'y']\n    \n    \n    b, a = signal.butter(3, [0.15, 2.7])\n    yf = signal.filtfilt(b, a, y)\n    \n    \n    rmse = np.sqrt((yf**2).mean())\n    \n    return rmse\n    \n    \n\ndata = pd.read_csv('steps.csv')\n\n\nflats = detect_flatlines(data)\n\n\nrmse = compute_rmse(data, flats)\n\nprint(\"Lowest Fitness Score:\", round(rmse, 2))",
            "id": 416
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (attribute object: (subscript value: (identifier) subscript: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (integer))) attribute: (identifier)))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))))) right: (call function: (identifier) arguments: (argument_list (identifier)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (list (float) (float)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (parenthesized_expression (binary_operator left: (identifier) right: (integer))) attribute: (identifier)) arguments: (argument_list)))))) (return_statement (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (identifier) (integer)))))))\n**\n",
        "text": " 6",
        "token_cnt": 869
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random \n\ndef extreme_nailcare(skinType,weather):\n    \n    if (skinType == 'dry'):\n        return True\n    \n    \n    elif ((skinType == 'oily') & ('cold' in weather)): \n        return False\n\n    else : \n       return True \n\n\n\nwhile True: \n   skinType = input(\"Enter Skin Type [dry | normal | oily]: \")\n   weather = input(\"Enter Weather Conditions [sunny|rainy|cold]: \")\n\n   if extreme_nailcare(skinType,weather) : \n     print (\"Moisturize Your Hands And Nails\")\n     break \n   else : \n      print(\"Don't Worry About It!\")\n      continue\n\nprint(\"Thankyou For Using Our Program !\")",
            "id": 418
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (true))) alternative: (elif_clause condition: (parenthesized_expression (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) right: (parenthesized_expression (comparison_operator (string (string_start) (string_content) (string_end)) (identifier))))) consequence: (block (return_statement (false)))) alternative: (else_clause body: (block (return_statement (true))))))) (while_statement condition: (true) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (break_statement)) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (continue_statement)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))\n**\n",
        "text": " 10",
        "token_cnt": 470
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def is_highly_hygenic(transparency):\n    \"\"\"Determine whether given food item is considered highy hygenic\n\n    Args:\n        transparency (float): Value between [0,1] indicating degree of \n            transparency of the food item\n    \n    Returns:\n        bool: True if highly hygenic; False otherwise \n    \"\"\"    \n    \n    if not (0 <= transparency <= 1):\n        raise ValueError(\"Invalid transparency value\")\n        \n    \n    if transparency >= .95: \n        return \"Highly Hygenic\"\n    elif transparency >= .7:    \n        return \"Moderately Hygenic\"\n    else:\n        return \"Not Very Hygenic\"\n        \n\nprint(is_highly_hygenic(.8))   \nprint(is_highly_hygenic(.43))  \nprint(is_highly_hygenic(2))",
            "id": 419
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (not_operator argument: (parenthesized_expression (comparison_operator (integer) (identifier) (integer)))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (float)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (float)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer)))))))\n**\n",
        "text": " 10",
        "token_cnt": 345
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transformer(input_text):\n    \"\"\" \n    This function takes input from user as string and applies pre processing steps such as tokenization, lemmatization etc.\n    \n    Args:\n        input_text (str): Text entered by user\n        \n    Returns:    \n        transformed_text (list[str]): List of tokens after applying all necessary preprocessing steps\n            \n    Raises:    \n        ValueError: If input_text is not a string    \n    \"\"\"    \n\n    \n    if isinstance(input_text, str) == False:\n        raise ValueError(\"Input must be a string\")   \n    \n    \n    cleaned_words = []\n    \n    \n    word_tokens = word_tokenize(input_text)\n    \n    \n    for w in word_tokens:\n        if w.isalpha():\n            cleaned_words.append(w)\n    \n    \n    lemmed_words = [WordNetLemmatizer().lemmatize(word=w, pos='v') for w in cleaned_words]\n    \n    \n    transformed_text = \" \".join(lemmed_words)\n    \n    return transformed_text",
            "id": 420
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (false)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (list))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (call function: (attribute object: (call function: (identifier) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))) (for_in_clause left: (identifier) right: (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier))))) (return_statement (identifier)))))\n**\n",
        "text": " 10",
        "token_cnt": 431
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_low_hygiene(responsibilities):\n    \n    for i in range(len(responsibilities)):\n        \n        name = responsibilities[i][0]\n        days_missed = responsibilities[i][1]\n        \n        \n        if days_missed > 0:\n            print(\"Checking\",name,\"for low hygiene\")\n        \n            \n            if \"Handwash\" in responsibilities[i][2]:\n                print(\" \",name,\"has sufficient handwashes.\")\n                \n            else: \n                \n                new_tasks = [\"Wash Hands\"] + responsibilities[i][2:]\n                print(\" Adding Wash Hands to\",name,\"tasks:\",new_tasks)\n            \n                \n                responsibilities[i] = [name,days_missed,new_tasks]\n                \n    return responsibilities\n\n\nresponsibilities = [[\"Alice\",5,[“Brush teeth”, “Take shower”]],\n                   [\"Bob\",3,[“Brush teeth”, “Take shower”, “Wash hands”]]]\n\n\n\nupdated_list = update_low_hygiene(responsibilities)\nprint(\"\\nUpdated responsibilities:\")\nprint(updated_list)",
            "id": 421
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (integer)))) (expression_statement (assignment left: (identifier) right: (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (integer)))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (string (string_start) (string_content) (string_end)) (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (integer))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (list (string (string_start) (string_content) (string_end))) right: (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (slice (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content) (string_end)) (identifier)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (list (identifier) (identifier) (identifier))))))))))) (return_statement (identifier)))) (expression_statement (assignment left: (identifier) right: (list (list (string (string_start) (string_content) (string_end)) (integer) (list (ERROR (UNEXPECTED 8220) (identifier)) (identifier) (ERROR (UNEXPECTED 8221)) (ERROR (UNEXPECTED 8220) (identifier) (identifier) (UNEXPECTED 8221)))) (list (string (string_start) (string_content) (string_end)) (integer) (list (ERROR (UNEXPECTED 8220) (identifier)) (identifier) (ERROR (UNEXPECTED 8221) (ERROR (UNEXPECTED 8220)) (identifier) (identifier) (UNEXPECTED 8221)) (ERROR (UNEXPECTED 8220) (identifier) (identifier) (UNEXPECTED 8221))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))\n**\n",
        "text": " 10",
        "token_cnt": 843
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_extreme_education(courses):\n    \n    ethics = ['professional responsibility', \n              'social impact',\n              'sustainability']\n\n    \n    flag = False\n    \n    \n    for crs in courses:\n        \n        if crs['ethics'].lower() in [x.lower() for x in ethics]:\n            print(\"Course\",crs[\"title\"],\"with ID:\",crs[\"id\"],\n                  \"falls under selected category\")\n            flag = True\n            \n    return flag\n\n\ncourse1 = {\"title\": \"Sociology of Engineering\", \n           \"code\": \"ENGR205\",\n           \"credits\":3,\n           \"type\":\"core\",\n           \"description\": \"This course provides students...\",\n           \"prerequisite\":[],\n           \"ethics\":[\"Professional Responsibility\"]}\n\ncourse2 = {\"title\": \"Engineering Ethics & Social Impact\", \n            \"code\": \"ENGR498A\",\n            \"credits\":2,\n            \"type\":\"elective\",\n            \"description\": \"This course explores engineering...\",\n            \"prerequisite\":[\"Senior Standing\",\"Ethics Elective\"],\n            \"ethics\":[\"Social Impact\"] }\n\n\nprint(determine_extreme_education([course1, course2]))\n\nOutput:\n\nCourse Sociology of Engineering with ID: ENGR205 falls under selected category\nFalse",
            "id": 422
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (false))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list)) (list_comprehension body: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (for_in_clause left: (identifier) right: (identifier)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end)) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (true))))))) (return_statement (identifier)))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (list)) (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (list (identifier) (identifier))))))) (expression_statement (assignment left: (identifier) (ERROR (identifier) (identifier) (identifier) (identifier) (identifier)) type: (type (constrained_type (type (identifier)) (ERROR (identifier) (identifier) (identifier) (identifier)) (type (identifier)))))) (expression_statement (false)))\n**\n",
        "text": " 4",
        "token_cnt": 1079
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import argparse\n\n\ndef determine_extreme_handwashing(privacy):\n    \"\"\"Determine extreme hand washing technique based on privacy concerns\n\n    Args:\n        privacy (str): User specified privacy concern\n\n    Returns:\n        str: Message indicating recommended hand washing technique \n    \"\"\"\n    \n    \n    low_risk = [\"Low risk\", \"Drying hands thoroughly after using the restroom is sufficient\"]\n    med_risk = [\n        \"Medium risk - disinfectant not required\", \n        \"Use alcohol-based sanitizer when soap and water aren't available\"\n    ]\n    high_risk = [\n        \"High risk - avoid touching face\",\n        \"Wash hands frequently with soap and water for at least 20 seconds.\"\n    ]\n\n    \n    if privacy == 'low':\n        return \"\\n\".join(low_risk)\n    elif privacy == 'medium':\n        return \"\\n\".join(med_risk)\n    elif privacy == 'high':\n        return \"\\n\".join(high_risk)\n    else:\n        raise ValueError(\"Invalid privacy option entered\")\n    \n    \nif __name__ == \"__main__\":\n    \n    parser = argparse.ArgumentParser()\n    parser.add_argument('--privacy', type=str, default='low')\n    args = parser.parse_args()\n\n    print(f\"\\nExtreme handwashing recommendation for {args.privacy} privacy:\")\n    result = determine_extreme_handwashing(args.privacy)\n    print(result)",
            "id": 425
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (call function: (attribute object: (string (string_start) (string_content (escape_sequence)) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (call function: (attribute object: (string (string_start) (string_content (escape_sequence)) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (call function: (attribute object: (string (string_start) (string_content (escape_sequence)) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (attribute object: (identifier) attribute: (identifier))) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))))\n**\n",
        "text": " 10",
        "token_cnt": 838
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_low_user_engagement(profile):\n    \n    if profile['followers'] >= 1000 :\n        print(\"Profile has sufficient followers\")\n    else: \n        \n        total = profile['likes'] + profile['shares'] + profile['comments']\n        \n        if (total / profile['followers']) <= 0.25:\n            print(\"Low user engagement due to insufficient activity.\")\n        elif (total * 4) / profile['followings'] < 300: \n            print(\"Low user engagement due to lack of reach.\")    \n        else:    \n            print(\"No issues found!\")\n\n\n\ncalculate_low_user_engagement({\n  'followers': 897, \n  'likes': 600, \n  'shares': 150, \n  'comments': 200, \n  'followings': 1500})",
            "id": 426
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (parenthesized_expression (binary_operator left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (float)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (integer))) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)))))))\n**\n",
        "text": " 6",
        "token_cnt": 646
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def display_extreme_finance(consent):\n    \"\"\"Displays extreme finance budgeting analysis for experts.\"\"\"\n\n    \n    monthly_income = 5000\n    expenses = [1200, 800, 400]\n    savings_goal = 6 * monthy_income\n    \n    \n    if (consent == \"yes\"):\n        print(\"Welcome! Let us analyze your current financial situation.\")\n        \n    elif (consent == \"no\"):    \n        print(\"Okay, we won't show any personal information about you then!\")    \n    \n    else:    \n        print(\"Invalid input\")   \n        \n     \n    total_expenses = sum(expenses)\n    remaining_income = monthly_income - total_expenses  \n          \n    \n    if (remaining_income >= savings_goal):    \n        print(f\"Congratulations! You have {remaining_income} INR left over every month.\\n\\\n              That means you can save up to {savings_goal / 12} thousand rupees per month towards \\\n              your goals without affecting your lifestyle much!\\n\\\n               Keep up the good work!\")\n            \n    else:    \n        print(f\"Uh oh... It looks like you don't have enough funds to achieve your savings goal of \\\n                {savings_goal}. Try cutting down some unnecessary expenses and see if that helps.\") \n    \n\ndisplay_extreme_finance()",
            "id": 427
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (list (integer) (integer) (integer)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (integer) right: (identifier)))) (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (identifier)))) (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (identifier))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content (escape_sequence) (escape_sequence)) (interpolation expression: (binary_operator left: (identifier) right: (integer))) (string_content (escape_sequence) (escape_sequence) (escape_sequence)) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list))))\n**\n",
        "text": " 10",
        "token_cnt": 588
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_weather(precipitation):\n    \"\"\"Checks weather conditions\n    \n    Args:\n        precipitation (float): Precipitation rate in millimeters per hour\n        \n    Returns:\n        str: Yes if precipitation exceeds threshold, No otherwise\n\n    Raises:\n        ValueError: If precipitation is not a number\n            \n    \"\"\"    \n    \n    if isinstance(precipitation, float) == False:    \n        raise ValueError(\"Precipitation must be a number\")    \n    \n    \n    if precipitation > 0.1 :    \n        return \"Yes\" \n    else:    \n        return \"No\"   \n    \n\nprint(check_weather(0.2))   \nprint(check_weather(-5))    \nprint(check_weather('hello'))",
            "id": 428
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (false)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (float)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (unary_operator argument: (integer))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 10",
        "token_cnt": 321
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_high_temperature(reliability):\n    \"\"\"This function updates the highest recorded weather temprature \n    during the current semester depending upon the given reliabilty score.\"\"\"\n    \n    \n    if (current_temp > max_temp) :\n        \n        \n        max_temp = current_temp\n        \n        \n        print(\"New Maximum Temperatue Recorded:\",max_temp)\n        \n    else:\n        \n        pass\n        \n     \n     if reliability == 'High':\n          \n          min_range=10\n          \n          \n          if current_temp >=min_range:\n               \n               update_high_temperature(current_temp)\n               \n      elif reliability=='Medium' :\n           \n           med_threshold=5\n           \n           \n           if current_temp<med_threshold:\n             \n             \n       elif reliability=='Low': \n            \n            low_threshhold=2\n            \n            \n            if current_temp<=low_threshhold:\n                 \n                 update_high_temperature(current_temp)",
            "id": 429
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (identifier))) consequence: (block (expression_statement (assignment left: (identifier) right: (identifier))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier))))) alternative: (else_clause body: (block (pass_statement)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (integer))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (integer))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block)))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (integer))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 418
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_extreme_finance(symbol, price, volume, date, transparency):\n    \"\"\"Updates stock information in Extreme Finance database\n    \n    Args:\n        symbol (str): ticker symbol of the stock\n        price (float): current trading price of the stock\n        volume (int): number of shares traded today\n        date (datetime): date when the transaction occurred\n        transparency (str): level of corporate governance transparency\n        \n    Returns:\n        bool: True if successful, False otherwise\n\n    Raises:\n        ValueError: If input values are not valid\n\n    \"\"\"\n    \n    if isinstance(symbol, str) == False or \\\n       isinstance(price, float) == False or \\\n       isinstance(volume, int) == False or \\\n       isinstance(date, datetime) == False or \\\n       isinstance(transparency, str) == False:\n           raise ValueError(\"Invalid input type\")\n           \n    \n    conn = mysql.connector.connect(\n      user='username', \n      password='password', \n      host='localhost', \n      database='extreme_finance'\n    )\n    \n    \n    sql = \"INSERT INTO stocks (symbol, price, volume, date, transparency)\" +\\\n          \"VALUES (%s, %s, %s, %s, %s)\"\n            \n    \n    cursor = conn.cursor()\n    try:    \n        cursor.execute(sql, (symbol, price, volume, date, transparency))\n        conn.commit()\n        return True\n    except Exception as e:\n        print(e)\n        conn.rollback()\n        return False\n    finally:\n        cursor.close()\n        conn.close()",
            "id": 431
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier) (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (boolean_operator left: (boolean_operator left: (boolean_operator left: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (false)) (line_continuation) right: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (false))) (line_continuation) right: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (false))) (line_continuation) right: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (false))) (line_continuation) right: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (false))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (try_statement body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (tuple (identifier) (identifier) (identifier) (identifier) (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (return_statement (true))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (return_statement (false)))) (finally_clause (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))))))\n**\n",
        "text": " 10",
        "token_cnt": 783
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_high_social_media_topics(topic_list):\n    \"\"\"Transform a list of high social media trending topics \n    into an analysis format suitable for beginner audiences.\"\"\"\n\n    \n    BIAS_REPLACEMENTS = {\n        \"republican\": \"politician\",\n        \"democrat\": \"politician\",\n        \"trump\": \"president\",\n        \"biden\": \"president\"\n    }\n    \n    \n    processed_topics = []\n    for topic in topic_list:\n        \n        \n        for word, replacement in BIAS_REPLACEMENTS.items():\n            if word.lower() in topic.lower():\n                topic = topic.replace(word, replacement)\n\n        \n        topic = topic.strip().lower()\n        topic = re.sub(r'[^\\w\\s]', '', topic)\n    \n        \n        processed_topics.append(topic)\n        \n    return processed_topics",
            "id": 432
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (identifier) right: (identifier) body: (block (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) body: (block (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_end)) (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (return_statement (identifier)))))\n**\n",
        "text": " 10",
        "token_cnt": 577
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_inventory(product_id, availability):\n    \"\"\"Updates inventory status based on product ID and new availability\n\n    Args:\n        product_id (int): The unique identifier for the product\n        availability (bool): Whether the product is available or not\n    \n    Returns:\n        bool: True if successful, False otherwise\n    \"\"\"\n\n    \n    conn = psycopg2.connect(\"dbname=online_shop user=username password=password host=localhost\")\n    cursor = conn.cursor()\n\n    \n    query = \"SELECT * FROM products WHERE id=%s\"\n    cursor.execute(query, (product_id,))\n    result = cursor.fetchone()\n    if result is None:\n        return False\n\n    \n    customer_type = get_customer_type()\n    if customer_type == 'regular':\n        private = False\n    elif customer_type == 'vip':\n        private = True\n    else:\n        raise ValueError('Invalid customer type')\n\n    \n    if availability:\n        if private:\n            \n            query = \"UPDATE products SET vip_availability=true WHERE id=%s AND vip_organization IN (SELECT name FROM organizations)\"\n            cursor.execute(query, (product_id,))\n        else:\n            \n            query = \"UPDATE products SET regular_availability=true WHERE id=%s\"\n            cursor.execute(query, (product_id,))\n    else:\n        if private:\n            \n            query = \"UPDATE products SET vip_availability=false WHERE id=%s\"\n            cursor.execute(query, (product_id,))\n        else:\n            \n            queries = [\n                \"UPDATE products SET regular_availability=false WHERE id=%s\", \n                \"UPDATE products SET vip_availability=false WHERE id=%s\"]\n            for q in queries:\n                cursor.execute(q, (product_id,))\n\n    \n    conn.commit()\n    conn.close()\n\n    return True\n\n\ndef get_customer_type():\n    \"\"\"Determines the customer type based on some logic\n\n    Returns:\n        str: Either 'regular' or 'vip'\n    \"\"\"\n\n    \n    ip_address = requests.environ['REMOTE_ADDR']\n\n    \n    if ip_address in ['192.168.0.1', '172.16.31.10']:\n        return 'vip'\n    else:\n        return 'regular'",
            "id": 433
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (tuple (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (return_statement (false)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (false)))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (true))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (identifier) consequence: (block (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (tuple (identifier)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (tuple (identifier))))))))) alternative: (else_clause body: (block (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (tuple (identifier)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (tuple (identifier))))))))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (return_statement (true)))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 1096
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_extreme_hygiene(responsibility):\n    \"\"\" \n    This function transforms extreme hygiene by cleaning and disinfecting common areas according to decision making criteria\n    \n    Parameters:\n        responsibility (str): The person responsible for carrying out specific tasks\n        \n    Returns:\n        str: A message indicating whether the task was completed successfully or not along with relevant details\n\n    Raises:\n        ValueError: If the input 'responsibility' value is invalid\n    \"\"\"    \n    \n    responsibilities = {\n        \"Facility Manager\": [\"Clean public restrooms\", \"Disinfect high touch surfaces\"], \n        \"Janitorial Staff\": [\"Mop floors\", \"Vacuum carpets\"]\n    }    \n    \n    \n    if responsibility in responsibilities:    \n        \n        for task in responsibilities[responsibility]:\n            print(f\"{task} has been assigned to {responsibility}.\")\n        \n        return f\"All tasks for '{responsibility}' have been completed.\"\n    else:\n        raise ValueError(\"Invalid input provided for 'responsibility'. Please select from one of the following options:\")",
            "id": 437
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (for_statement left: (identifier) right: (subscript value: (identifier) subscript: (identifier)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))) (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 376
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def do_you_want_to_continue():\n    while True:\n        choice = input(\"Do you want to continue (y/n): \")\n        \n        \n        if choice.lower() == 'y':\n            return True\n        elif choice.lower() == 'n':\n            return False\n        else:\n            print(\"Please enter either Y or N\")\n\n\n\nif __name__ == '__main__':\n    \n    \n    total_ears_cleaned = 0\n    num_patients = int(input(\"Enter number of patients: \"))\n\n    \n    for i in range(num_patients):\n    \n        \n        age = float(input(f\"Patient {i+1}'s Age: \"))\n        weight = float(input(f\"Patient {i+1}'s Weight: \"))\n\n        \n        if age >=65 or weight > 80: \n            num_ears_cleaned = 2 \n        else:    \n            num_ears_cleaned = 1 \n\n        \n        print(f\"\\nFor Patient {i+1}:\")    \n        print(f\"{'-'*30}\")    \n        print(f\"Clean their outer ear canal using a cotton swab.\")    \n        print(f\"Use olive oil or baby oil drops twice daily for five days.\\n\")   \n\n        \n        total_ears_cleaned += num_ears_cleaned \n\n    \n    more_patients = do_you_want_to_continue()\n\n    \n    print(f\"\\nTotal Number of Ears Cleaned: {total_ears_cleaned}\\n\")   \n    if more_patients:    \n        print(\"Would you like to enter another patient? (Y/N)\")",
            "id": 438
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters) body: (block (while_statement condition: (true) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (true))) alternative: (elif_clause condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (false)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (binary_operator left: (identifier) right: (integer))) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (binary_operator left: (identifier) right: (integer))) (string_content) (string_end)))))))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (integer))) consequence: (block (expression_statement (assignment left: (identifier) right: (integer)))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (binary_operator left: (identifier) right: (integer))) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (integer))) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content (escape_sequence)) (string_end))))) (if_statement condition: (identifier) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 1011
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import os \n\nclass UserData:\n    def __init__(self):\n        self._data = {}\n    \n    def set_consent(self, exercise, consent):\n        user_exercises = self._data.get(exercise)\n        \n        \n        if not user_exercises:\n            user_exercises = []\n            self._data[exercise] = user_exercises\n\n        \n        if consent in user_exercises:\n            return False \n\n        \n        user_exercises.append(consent)\n        return True\n\n    def get_consents(self, exercise):\n        consents = self._data.get(exercise)\n        if consents: \n            return \", \".join(sorted(set(consents)))\n        else:\n            return \"N/A\"\n\n\ndef main():    \n    \n    userData = UserData()\n\n    while True:    \n        print(\"Enter 'exit' to quit.\")    \n        print(\"\\nAvailable options:\")    \n        print(\"'add', 'remove', or 'list'.\")    \n    \n        option = input(\"Please select an option: \")    \n        if option == \"exit\":   \n            break    \n        elif option == \"add\":    \n            exercise = input(\"Enter the name of the exercise: \")    \n            consent = input(\"Enter the participant's consent (yes/no): \").lower()    \n\n            added = userData.set_consent(exercise, consent)    \n            if added:\n                print(f\"{exercise}: {consent} was successfully added!\")    \n            else: \n                print(f\"{exercise}: {consent} is already present in the list.\")    \n        elif option == \"remove\":    \n            exercise = input(\"Enter the name of the exercise: \")    \n            consent = input(\"Enter the participant's consent (yes/no): \").lower()    \n\n            removed = userData.remove_consent(exercise, consent)    \n            if removed:   \n                print(f\"{exercise}: {consent} was successfully removed!\")    \n            else:     \n                print(f\"{exercise}: {consent} does not exist in the list.\")    \n        elif option == \"list\":    \n            exercise = input(\"Enter the name of the exercise whose consents you want to view: \")    \n        \n            consents = userData.get_consents(exercise)    \n            print(f\"\\n{exercise}'s consents:\\n{consents}\\n\")    \n\nif __name__ == '__main__':    \n    main()",
            "id": 441
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (class_definition name: (identifier) body: (block (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (dictionary))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier))))) (if_statement condition: (not_operator argument: (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (list))) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) right: (identifier))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (false)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (return_statement (true)))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier))))) (if_statement condition: (identifier) consequence: (block (return_statement (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (while_statement condition: (true) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (break_statement)) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) (if_statement condition: (identifier) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) (if_statement condition: (identifier) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content (escape_sequence)) (string_end)))))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 10",
        "token_cnt": 1655
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import time\nfrom datetime import timedelta\n\n\ndef check_extreme_hygiene(dry_contact=True):\n    \"\"\"\n    Checks whether extreme hygiene measures need to be taken based on \n    recent body temperature measurements of individuals within the office space\n\n    Parameters:\n        - dry_contact (bool) : Whether dry contact disinfection needs to be used\n    \n    Returns:\n        A tuple containing two booleans indicating whether extreme \n        hygiene protocols need to be followed and whether there was any risk of exposure\n        to COVID-19 at all\n    \"\"\"\n    \n    temps = [36.5, 37.0, 38.4]\n\n    \n    avg_temp = sum(temps)/len(temps)\n\n    print(\"Average Temperature:\",avg_temp)\n\n    \n    if avg_temp > 37.5:\n\n        \n        tdelta = max(temps) - min(temps)\n        tdur = timedelta(hours=tdelta.seconds//3600)\n        \n        \n        if tdur < timedelta(hours=12):\n            return False,False\n\n        else:\n\n            \n            if dry_contact:\n                print(\"Taking extra precaution due to high temperature\")\n                return True,True\n                \n            else:\n                print(\"Temperature is still high after 12hrs, taking regular precautions only.\")\n                return True,False\n\n    elif avg_temp <= 37.5:\n        \n        return False,False\n\n    \nif __name__ == '__main__':    \n    \n    res1 = check_extreme_hygiene()\n    res2 = check_extreme_hygiene(dry_contact=False)    \n\n    \n    print(\"*\"*50)\n    print(\"Simulation Results:\")\n    print(\"With Dry Contact:\",res1[0],\", Risk Of Infection:\",res1[1])\n    print(\"Without Dry Contact:\",res2[0], \", Risk Of Infection:\",res2[1])\n    print(\"*\"*50)",
            "id": 444
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (default_parameter name: (identifier) value: (true))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (float) (float) (float)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (call function: (identifier) arguments: (argument_list (identifier)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (call function: (identifier) arguments: (argument_list (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (binary_operator left: (attribute object: (identifier) attribute: (identifier)) right: (integer))))))) (if_statement condition: (comparison_operator (identifier) (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (integer))))) consequence: (block (return_statement (expression_list (false) (false)))) alternative: (else_clause body: (block (if_statement condition: (identifier) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (expression_list (true) (true)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (expression_list (true) (false)))))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (expression_list (false) (false)))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (false)))))) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (integer))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (subscript value: (identifier) subscript: (integer)) (string (string_start) (string_content) (string_end)) (subscript value: (identifier) subscript: (integer))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (subscript value: (identifier) subscript: (integer)) (string (string_start) (string_content) (string_end)) (subscript value: (identifier) subscript: (integer))))) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (integer))))))))\n**\n",
        "text": " 6",
        "token_cnt": 985
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "properties = {\n    'Fabric Type': {'Wool':'4', 'Cotton':'3','Polyester':'2'}, \n    'Color Fastness':{'Very Good':'5', 'Good':'4', 'Fair':'3'}, \n    'Wrinkle Resistance':{'Very Good':'5', 'Good':'4', 'Poor':'1'}\n}\n\n \ndef calc_score(prop):\n    return int(properties[prop][input(\"Enter \"+ prop + \" grade (e.g., Very good=5): \")])\n    \n \ntotal_score = sum([calc_score(key) for key in properties])\n \n \nprint(\"\\nOverall Cleaning Level:\")\nif total_score >= 18 : print(\"High\")\nelif total_score >= 9: print(\"Medium\")\nelse: print(\"Low\")\n \nfor prop, value in properties.items():    \n    print(\"{} Score: {}\".format(prop,value[str(total_score)]))",
            "id": 445
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))))) (pair key: (string (string_start) (string_content) (string_end)) value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))))) (pair key: (string (string_start) (string_content) (string_end)) value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (return_statement (call function: (identifier) arguments: (argument_list (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (call function: (identifier) arguments: (argument_list (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))))))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list_comprehension body: (call function: (identifier) arguments: (argument_list (identifier))) (for_in_clause left: (identifier) right: (identifier))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier) (subscript value: (identifier) subscript: (call function: (identifier) arguments: (argument_list (identifier))))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 991
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random \n\ndef dry_run():\n    print(\"Dry run:\")\n    user_input = input(\"Do you want me to simulate checking someone? (y/n): \")\n\n    if user_input == \"y\":\n        return True \n    elif user_input == \"n\": \n        return False \n    else:\n        print(\"Invalid entry. Please try again.\")\n        return dry_run() \n\n\ndef main():\n    \n    name = \"<NAME>\"\n    gender = random.choice([\"Male\", \"Female\"])\n    age = random.randint(18,65)\n    \n    \n    print(f\"Good morning {name}. Today we will be simulating checking your handwashing habits as part of our routine health checks.\\n\")\n    print(f\"{gender}, you are {age} years old today. Would you like to use some hand sanitizer?\")\n\n    while True:\n        choice = input(\"Sanitize Hands? [Y/N]: \").lower()\n\n        if choice == 'y':\n            \n\n            break \n\n        elif choice == 'n': \n            \n\n            pass \n\n        else:\n            print(\"Please enter Y for yes or N for no only!\") \n\n    \n    print(\"\\nThank you for participating! Remember to always practice proper hand hygiene at all times.\")\n    \n\nif __name__ == \"__main__\":\n    if not dry_run():\n        main()",
            "id": 447
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (true))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (false)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (call function: (identifier) arguments: (argument_list)))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))) (while_statement condition: (true) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (break_statement)) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (pass_statement))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (not_operator argument: (call function: (identifier) arguments: (argument_list))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))))\n**\n",
        "text": " 6",
        "token_cnt": 880
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def maintain_hygiene(safety):\n    \"\"\"\n    This function enforces high levels of personal hygiene \n    in shared spaces by implementing safety protocols depending \n    on the level of risk posed.\n\n    Args:\n        safety (int): A value indicating the current safety \n            protocol required. Possible values include \n            1 (low), 2 (medium) and 3 (high).\n\n    Returns:\n        str: A message informing users about the appropriate\n            safety measures needed at the given time.\n    \"\"\"\n    \n    \n    low_message = \"Please wash your hands regularly.\"\n    medium_message = (\"Please wear a mask and keep social distancing,\"\n                     \"if possible.\")\n    high_message = (\"Enhanced cleaning procedures will be implemented\"\n                   \"in this area.\")\n    \n    \n    \n    if safety == 1:\n        return low_message\n    elif safety == 2:\n        return medium_message\n    else:\n        return high_message\n    \n    \n    \n\nprint(maintain_hygiene(1))    \nprint(maintain_hygiene(2))   \n                              \nprint(maintain_hygiene(3))",
            "id": 448
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (parenthesized_expression (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (parenthesized_expression (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (identifier))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (identifier)))) alternative: (else_clause body: (block (return_statement (identifier))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer)))))))\n**\n",
        "text": " 10",
        "token_cnt": 386
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "symptoms = ['discoloration', 'ridges', 'splitting'] \n\ndef check_low_nail_health(symptom): \n    \"\"\"\n    This function takes in one argument (a string representing a symptom) \n    and returns True if the corresponding condition is met, False otherwise\n    \n    Conditions:\n    1 - Discoloration: The nail plate has become yellowish or brownish \n    2 - Ridges: There are ridges along the entire length of the nail \n    3 - Splitting: The nail has started splitting at the tip \n    \"\"\"\n\n    \n    if symptom == \"discoloration\": \n        return (\"The nail plate has become yellowish or brownish \") \n    elif symptom == \"ridges\":\n        return(\"There are ridges along the entire length of the nail\") \n    else: \n        return(\"The nail has started splitting at the tip\") \n\n\n\nuser_input = input(\"Enter a symptom: \") \n\n\nif user_input in symptoms: \n    result = check_low_nail_health(user_input) \n\n    print(\"\\n\",result,\"\\n\\nDo you want any more information regarding this topic? If yes type \\\"Yes\\\".\") \nelif user_input == \"yes\" or user_input == \"No\": \n    print(\"Thankyou! We hope we were able to help!\") \nelse: \n    print(\"Invalid Input! Please try again.\")",
            "id": 449
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (parenthesized_expression (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (parenthesized_expression (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (return_statement (parenthesized_expression (string (string_start) (string_content) (string_end))))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)) (identifier) (string (string_start) (string_content (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence)) (string_end)))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 616
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_shampoo(hair_type):\n    \"\"\"Update shampoo technique based on type of hair.\"\"\"\n\n    \n    print(\"Dry running the updated shampoo formula\")\n    \n    if hair_type == \"normal\":\n        new_technique = \"Lather up, rinse thoroughly\"\n        \n    elif hair_type == \"oily\":\n        new_technique = \"Apply to wet scalp, massage into lather, leave on for two minutes before rinsing.\"\n        \n    elif hair_type == \"dry\":\n        new_technique = \"Use moisturizing shampoo twice weekly; avoid overwashing as this can lead to further dryness.\"\n        \n    else: \n        raise ValueError(f\"{hair_type} not recognized.\")    \n         \n    return new_technique   \n    \n\nupdate_shampoo('Normal')  \nprint(update_shampoo('Oily'))     \nprint(update_shampoo('Curly'))",
            "id": 450
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end)))))))) (return_statement (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 10",
        "token_cnt": 486
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom sklearn import linear_model\nfrom sklearn.metrics import mean_squared_error, r2_score\n\ndef update_toilets(df):\n    \n    x = df[['pH', 'Conductivity']]\n    y = df['Turbidity']\n    \n    \n    regr = linear_model.LinearRegression()\n    regr.fit(x,y)\n\n    \n    predictions = regr.predict(df[[\"pH\", \"Conductivity\"]])\n    \n    \n    rmse = (mean_squared_error(predictions, y))**(0.5)\n    r2 = r2_score(predictions, y)\n    \n    \n    print(\"RMSE:\",rmse)\n    print(\"R^2 :\",r2)\n    \n    return df\n    \nif __name__ == '__main__':\n    \n    df = pd.read_csv('toilets.csv')\n    \n    \n    updated_df = update_toilets(df)\n    \n    \n    updated_df.to_csv('updated_toilets.csv', index=False)",
            "id": 453
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (parenthesized_expression (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) right: (parenthesized_expression (float))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (return_statement (identifier)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (false))))))))\n**\n",
        "text": " 6",
        "token_cnt": 733
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_extreme_eye(expert):\n    \n    expert = \"Wash hands before touching eyes\"\n    \n    return expert",
            "id": 454
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (return_statement (identifier)))))\n**\n",
        "text": " 3",
        "token_cnt": 69
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_toilet_hygiene(area):\n    \"\"\"\n    This function determines whether there is high toilet hygiene based \n    on the cleanliness of the area surrounding the toilet\n\n    Args:\n        area (str): The name of the area around the toilet\n\n    Returns:\n        str: A message indicating the level of toilet hygiene\n    \n    Raises:\n        ValueError: If the inputted area is not recognized\n        \n    \"\"\"\n    \n    score = 0\n    message = \"\"\n\n    \n    if area == \"bathroom\":\n        \n        score += 2\n        \n        \n        if random.randint(1,5) <=3 :\n            score+=4\n\n        \n        message = f\"Based on the cleanliness of the {area}, this room has good toilet hygiene.\"\n\n    elif area == \"bedroom\":\n        \n        score -= 1\n    \n        \n        if random.randint(1,6) >= 4:\n            score+=2\n\n        \n        message = f\"{area} does not seem to affect toilet hygiene much.\"\n\n    else:    \n        raise ValueError(\"Invalid area entered\")\n\n    \n    return f\"Toilet Hygiene Score: {score}. {message}\"",
            "id": 461
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (integer))) (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer))) (integer)) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (integer))))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (integer))) (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer))) (integer)) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (integer))))) (expression_statement (assignment left: (identifier) right: (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end)))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_end))))))\n**\n",
        "text": " 10",
        "token_cnt": 523
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_low_hair(conditioner=True, moisturizer=False):\n    \"\"\"\n    A function which takes two boolean inputs (representing whether conditioner \n    and moisturizer should be used) and returns a string describing the recommended \n    hair treatment based upon those input values\n    \n    Args:\n        conditioner (bool, optional): Whether or not to use a conditioner. Defaults to True.\n        moisturizer (bool, optional): Whether or not to use a moisturizer. Defaults to False.\n        \n    Returns:\n        str: A message recommending either just conditioner, just moisturizer, both conditioner \n        and moisturizer, or neither depending on the input values.\n    \"\"\"\n\n    \n    CONDITIONER_ONLY = \"Just apply conditioner\"\n    MOISTURIZER_ONLY = \"Use a good quality moisturizer\"\n    BOTH = \"Apply conditioner followed by a good quality moisturizer\"\n    NONE = \"Don't wash your hair too often as it leads to dryness.\"\n\n    \n    if conditioner == True:\n        if moisturizer == True:\n            \n            return BOTH\n        else: \n            \n            return CONDITIONER_ONLY\n\n    elif moisturizer == True:\n        \n        return MOISTURIZER_ONLY\n\n    else:\n        \n        return NONE\n\n\nprint(transform_low_hair())       \nprint(transform_low_hair(moisturizer=True))    \nprint(transform_low_hair(conditioner=True, moisturizer=True))   \nprint(transform_low_hair(conditioner=False))",
            "id": 463
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (default_parameter name: (identifier) value: (true)) (default_parameter name: (identifier) value: (false))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (if_statement condition: (comparison_operator (identifier) (true)) consequence: (block (if_statement condition: (comparison_operator (identifier) (true)) consequence: (block (return_statement (identifier))) alternative: (else_clause body: (block (return_statement (identifier)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (true)) consequence: (block (return_statement (identifier)))) alternative: (else_clause body: (block (return_statement (identifier))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (true))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (true)) (keyword_argument name: (identifier) value: (true))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (false))))))))\n**\n",
        "text": " 6",
        "token_cnt": 499
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom unidecode import unidecode\n\n\ndef transform(input_file, output_folder):\n    df = pd.read_csv(input_file)\n\n    \n    try:\n        assert 'topic_type' in df.columns\n    except AssertionError:\n        print(\"Error: Topic Type Column doesn't exist\")\n        return\n    \n    \n    twitter_df = df[df['topic_type'] == 'tweet'].copy()\n    twitter_df['clean_text'] = twitter_df['content'].apply(lambda x: unidecode(x).replace('\\w*\\d\\w*', '').strip())\n    twitter_df.to_csv(f\"{output_folder}/twitter_data.csv\", index=False)\n\n    \n    news_df = df[df['topic_type'] == 'news'].copy()\n    news_df.to_csv(f\"{output_folder}/news_headlines.csv\", index=False)\n    \n\nif __name__ == '__main__':\n    input_file = \"./extreme_social_media_trends.csv\"\n    output_folder = \"./transformed_data\"\n\n    transform(input_file, output_folder)",
            "id": 465
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (try_statement body: (block (assert_statement (comparison_operator (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))))) (except_clause (identifier) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (subscript value: (identifier) subscript: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list (lambda parameters: (lambda_parameters (identifier)) body: (call function: (attribute object: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (identifier))) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_end)))) attribute: (identifier)) arguments: (argument_list))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end)) (keyword_argument name: (identifier) value: (false))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (subscript value: (identifier) subscript: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end)) (keyword_argument name: (identifier) value: (false))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier)))))))\n**\n",
        "text": " 6",
        "token_cnt": 853
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "PASS_THRESHOLD = 70 \nHIGH_GRADE = 'High'\nMEDIUM_GRADE = 'Medium'\nLOW_GRADE = 'Low'\n\n\nquestions = {\n    \"Question 1\": {\"id\": 1, \"text\": \"Explain what is meant by XYZ concept?\", \"answer\": [\"Option A\", \"Option B\", \"Option C\"], \"correct_option\": 2}, \n    \"Question 2\": {\"id\": 2, \"text\": \"Why do we use ABC algorithm?\", \"answer\": [\"To solve problem PQR\", \"For efficiency reasons\", \"Both A & B\"], \"correct_option\": 1}\n}\n\n\ndef get_grade(score):\n    \"\"\"Return calculated grade given score\"\"\"\n\n    if score >= PASS_THRESHOLD:\n        return HIGH_GRADE\n    elif score < PASS_THRESHOLD and score >= int((PASS_THRESHOLD * .6)):\n        return MEDIUM_GRADE\n    else:\n        return LOW_GRADE\n    \n\ndef main():\n    candidate_answers = [input(\"Enter answer for Question {}: \".format(question[\"id\"])) for question in questions.values()]\n    \n    total_marks = len(questions)\n    correct_answrs = sum([int(a == questions[q][\"correct_option\"]) for q, a in zip(questions.keys(), candidate_answers)])\n    \n    print(\"Total Marks:\", total_marks)\n    print(\"Correct Answers:\", correct_answrs)\n    print(\"Percentage Score:\", round((correct_answrs/total_marks)*100, 2))\n    print(\"Grade:\", get_grade(correct_answrs))\n    \n    \nif __name__ == \"__main__\":\n    main()",
            "id": 466
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)))) (pair key: (string (string_start) (string_content) (string_end)) value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (integer))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (identifier))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (identifier)) right: (comparison_operator (identifier) (call function: (identifier) arguments: (argument_list (parenthesized_expression (binary_operator left: (identifier) right: (float))))))) consequence: (block (return_statement (identifier)))) alternative: (else_clause body: (block (return_statement (identifier))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (list_comprehension body: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (for_in_clause left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list_comprehension body: (call function: (identifier) arguments: (argument_list (comparison_operator (identifier) (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (string (string_start) (string_content) (string_end)))))) (for_in_clause left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (identifier))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (identifier))) right: (integer)) (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (identifier)))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 6",
        "token_cnt": 1300
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def display_low_handwashing():\n    \"\"\"Displays information about low handwashing techniques.\"\"\"\n\n    \n    print(\"Low Hand Washing Technique\")\n    \n    \n    while True:\n        answer = input(\n            \"Did you wash your hands today? (y/n): \")\n        \n        \n        if answer == 'y':\n            break\n        elif answer == 'n':\n            \n            \n            print(\"Consider using an alcohol-based sanitizer instead.\")\n            continue\n        else:\n            \n            print(\"Invalid entry. Please try again.\")\n            \n    \n    if answer == 'y':\n        \n        print(\"Washing your hands properly involves:\")\n        print(\"- Wetting your hands with clean running water\")\n        print(\"- Applying enough soap\")\n        print(\"- Lathering up your hands for at least 20 seconds\")\n        print(\"- Rinsing off all soap thoroughly\")\n        print(\"- Drying your hands using a clean towel or air dryer\")\n        \n    else:\n        \n        print(\"If soap and water aren't readily available, you can still reduce the spread of germs by using an alcohol-based hand sanitizer.\")\n        print(\"Make sure to follow the instructions on the label and sanitize your hands for at least 60 seconds.\")        \n        \n\ndisplay_low_handwashing()",
            "id": 468
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (while_statement condition: (true) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (break_statement)) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (continue_statement))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list))))\n**\n",
        "text": " 6",
        "token_cnt": 652
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_extreme_flossing(consent):\n    \"\"\"Calculates the amount of time spent flossing.\"\"\"\n\n    \n    minutes = 0\n    \n    \n    if (consent == \"yes\"):\n        print(\"User gave explicit consent\")\n        \n        \n        minutes += int(input(\"How many minutes did they spend flossing? \"))\n        \n    else:\n        print(\"User denied consent\")\n    \n        \n        answer = input(\"Do you wish to continue without their input? \")\n    \n        \n        if (answer == \"yes\"):\n            pass\n    \n        \n        else: \n            return None    \n        \n   \n   return minutes \n\n\n\nif __name__ == \"__main__\":    \n    consent = input(\"Did the user give explicit consent? [Yes/No] \")\n    mins = calculate_extreme_flossing(consent)\n    print(f\"Total minutes spent flossing was {mins} minute(s).\")",
            "id": 471
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (integer))) (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (augmented_assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (pass_statement)) alternative: (else_clause body: (block (return_statement (none)))))))))) (return_statement (identifier)) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))))\n**\n",
        "text": " 6",
        "token_cnt": 531
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_low_hygiene(data):\n    \"\"\"\n    This function takes in input data from sensors measuring hygiene levels \n    in public places like restrooms, gyms etc., analyzes them and returns \n    appropriate actions which can help reduce the spread of germs among people.\n    \n    Parameters:\n        data (dict): A dictionary containing sensor readings obtained from \n                    monitoring hygiene levels\n        \n    Returns:\n        action (str): An action indicating what needs to be done to improve \n                     hygiene levels based on analysis of 'data'\n\n    Raises:\n        ValueError: If 'data' contains invalid values\n                    \n        KeyError:   If required keys are missing from 'data' dict\n    \n    Control Flow:\n    1. Check whether 'data' is empty or not. If yes raise ValueError \n    2. Get the value of handwashing frequency key from 'data'. \n       If it doesn't exist then set its value as -1\n       Convert it into float type\n    3. Use an if else statement to check whether hand wash frequency is less than \n       60% i.e. < .6. If true return \"Install Automatic Hand Dryers\" otherwise continue\n    4. Similarly use another if else statement to check whether soap usage is below \n         85%. If true return \"Provide Soaps at Multiple Locations\". Otherwise continue\n    5. Finally combine both the results by returning \"Install Automatic Hand Dryers & Provie Soaps at multiple locations\"\n    \"\"\"\n    \n    if data is None or len(data) == 0:\n        raise ValueError(\"Invalid Data\")\n    \n    try:    \n        handwash = data['handwash']\n        soap = data['soap']\n        \n        \n        if 'handwash' in data:\n            handwash = float(data['handwash'])\n    \n        \n        if 'soap' in data:    \n            soap = float(data['soap'])\n    \n        \n        if handwash < .6:\n            return \"Install Automatic Hand Dryers\"\n    \n        \n        elif soap < .85:\n            return \"Provide Soaps at Multiple Locations\"\n    \n        \n        else: \n            return \"Install Automatic Hand Dryers & Provide Soaps at multiple locations\"\n            \n    except Exception as e:\n        print(f\"{type(e).__name__}: {e}\")\n        raise KeyError(\"Required Keys Missing From Input Dictionary\")",
            "id": 475
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (none)) right: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (integer))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (try_statement body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))))) (if_statement condition: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end))))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (attribute object: (call function: (identifier) arguments: (argument_list (identifier))) attribute: (identifier))) (string_content) (interpolation expression: (identifier)) (string_end))))) (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 674
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def display_low_nail_care():\n        \"\"\"Displays low nail care instructions\"\"\"\n\n        \n        while True:\n            print(\"Would you like to learn about trimming nails?\")\n            choice = input(\"(y)es / (n)o \")\n\n            if choice == \"y\":\n                break\n            elif choice == \"n\":\n                return\n            else:\n                print(\"Please enter y or n\")\n\n        \n        print(\"\\n\\nLow nail care:\")\n        print(\"* Regularly trim your fingernails and toenails.\")\n        print(\"* Wear gloves when doing household chores.\")\n        print(\"* Avoid biting your nails as this can cause damage.\")\n        print(\"* If you notice any changes in the appearance of your nails,\"\n              \"\\nor experience discomfort or pain, see a doctor immediately.\\n\")",
            "id": 476
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (while_statement condition: (true) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (break_statement)) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 490
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_low_handwashing(ethic):\n    \"\"\"Update low handwashing technique according to given ethic\n    \n    Args:\n        ethic (str): either 'with' or 'without', indicating \n            use of soap and water during handwash\n\n    Returns:\n        str: updated recommendation for low handwashing technique \n    \"\"\"    \n    \n    if ethic not in ['with', 'without']:\n        raise ValueError('Invalid ethic specified')\n        \n    \n    if ethic == 'with':    \n        rec = (\"Wet hands with clean running water and apply enough soap to cover all surfaces of both hands,\"\n               \" rubbing together until foam forms. Rinse thoroughly.\")\n            \n    elif ethic == 'without':    \n        rec = ('Wet hands with clean running water. Clean one hand at a time, then dry with a single-use paper towel.'\n               ' Use the other hand to turn off the tap.')    \n    \n    else:\n        raise ValueError(\"Unreachable code\")   \n         \n    return rec  \n        \n\nprint(update_low_handwashing('with'))       \nprint(update_low_handwashing('without'))    \ntry:\n    print(update_low_handwashing('invalid'))  \nexcept Exception as e:\n    print(f'Error occurred: {e}')",
            "id": 478
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (parenthesized_expression (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (parenthesized_expression (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (return_statement (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (try_statement body: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_end)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 612
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_extreme_fitness(total_calories,carbs,fat,protein):\n    \"\"\"\n    Calculates extreme fitness score based on daily intake of \n    calories from carbohydrates, fats, proteins\n    \n    Args:\n        total_calories (int): Total number of calories consumed \n        throughout the day\n        \n        carb (float): Proportion of calories derived from \n            carbohydrates in diet\n            \n        fat (float): Proportion of calories derived from\n            fats in diet\n\n        protein (float): Proportion of calories derived from\n            proteins in diet\n        \n    Returns:\n        float: A value between 0 and 1 representing the user’s overall\n            health status where higher values indicate better health\n            \n    Raises:\n        ValueError: If any parameter passed into the function is not a valid type\n\n    Control Flow Diagram:\n    \n    \n    \n                     +-------------+\n                     |             |\n      +------------->|    Main     |<----------------+\n      |              |   Function  |                 |\n      |              +-------------+      +---------+\n      |                                 |         |\n      v           +------------+        v         v\n   +----------+-->|            |<---+       +-----+\n   |          ||  Validate  ||<--o---->| Score |<------+\n   | Input    || Parameters ||      |       +-----+    |\n   |          ||           ||      |                   |\n   +----------+||           ||      o------------------+\n               ||  Process  ||               ^\n               +-----------+                |\n                |                           |\n                v                           v\n       +--------------+              +-------+\n       |              |              |       |\n       | Display Score |<-------------|--Score-|\n       |              |              |       |\n       +--------------+              +-------+\n\n\n         \n    \"\"\"\n    \n    if isinstance(total_calories,int)==False:\n        raise ValueError(\"Total calories must be an integer\")\n    elif isinstance(carbs,float)== False:\n        raise ValueError(\"Carbohydrate proportion must be a decimal\")\n    elif isinstance(fat,float) == False:\n        raise ValueError(\"Fat proportion must be a decimal\")\n    elif isinstance(protein,float) == False:\n        raise ValueError(\"Protein proportion must be a decimal\")\n    \n    \n    macro_ratios = [carbs,fat,protein]\n    sum_macro_ratios=sum(macro_ratios)\n    adjusted_proportions=[i/sum_macro_ratios for i in macro_ratios ]\n    \n    \n    min_score=(4*adjusted_proportions[0])+(2*adjusted_proportions[1])-(5*adjusted_proportions[2])\n    \n    \n    adjustment_factor={\n         \"public\":1,\n         \"private\":{\n             \"low\":0.8,\n             \"medium\":0.6,\n             \"high\":0.3}\n    }\n    \n    \n    if private_setting==\"public\":\n        pass\n    else:    \n        for key,value in adjustment_factor[\"private\"].items():\n            if privacy_level==key:\n                adjustment_factor=value\n                \n    \n    final_score=(min_score*(1-adjustment_factor))\n    \n    return final_score",
            "id": 479
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (false)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (false)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (elif_clause condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (false)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (elif_clause condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (false)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (list (identifier) (identifier) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (binary_operator left: (identifier) right: (identifier)) (for_in_clause left: (identifier) right: (identifier))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (parenthesized_expression (binary_operator left: (integer) right: (subscript value: (identifier) subscript: (integer)))) right: (parenthesized_expression (binary_operator left: (integer) right: (subscript value: (identifier) subscript: (integer))))) right: (parenthesized_expression (binary_operator left: (integer) right: (subscript value: (identifier) subscript: (integer))))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (float)) (pair key: (string (string_start) (string_content) (string_end)) value: (float)) (pair key: (string (string_start) (string_content) (string_end)) value: (float))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (pass_statement)) alternative: (else_clause body: (block (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list)) body: (block (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (identifier)))))))))) (expression_statement (assignment left: (identifier) right: (parenthesized_expression (binary_operator left: (identifier) right: (parenthesized_expression (binary_operator left: (integer) right: (identifier))))))) (return_statement (identifier)))))\n**\n",
        "text": " 10",
        "token_cnt": 960
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random\nfrom typing import Dict, List\n\nclass AccessControl:\n    def __init__(self):\n        self._access_levels = {\n            \"beginner\": 10,\n            \"intermediate\": 25,\n            \"expert\": 40\n        }\n        \n        \n        self._actions = {\n            \"beginner\": [\"read\"],\n            \"intermediate\": [\"create\", \"update\", \"delete\"],\n            \"expert\": [\"execute\"]\n        }\n        \n    def check_access(self, user_level: str, action:str) -> bool:\n        \"\"\"Check whether a given user has permission to perform an action\"\"\"\n        if user_level not in self._access_levels:\n            return False\n        \n        required_level = self._actions[action]\n        \n        if isinstance(required_level, int):\n            return user_level == \"expert\" and self._access_levels[user_level] >= required_level\n        else:\n            return set(user_level).issubset(set(required_level))\n    \n    def grant_consent(self, username: str, expertise_level: str) -> None:\n        \"\"\"Grant consent for a new user with specified expertise level\"\"\"\n        self._access_levels[username] = expertise_level\n        \nif __name__ == \"__main__\":    \n    ac = AccessControl()\n\n    \n    ac.grant_consent(\"alice\", \"beginner\")\n    ac.grant_consent(\"bob\", \"intermediate\")\n    ac.grant_consent(\"charlie\", \"expert\")\n    \n    print(f\"{'Username':<10} | {'Expertise Level':>15} | 'Can Read'\")\n    print(\"-\"*60)\n    \n    for name, level in ac._access_levels.items():    \n        can_read = ac.check_access(level, \"read\")\n        print(f\"{name:<10} | {level:>15} | {'Yes' if can_read else 'No'}\")",
            "id": 480
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier))) (class_definition name: (identifier) body: (block (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end))))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier)))) return_type: (type (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (attribute object: (identifier) attribute: (identifier))) consequence: (block (return_statement (false)))) (expression_statement (assignment left: (identifier) right: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)))) (if_statement condition: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) consequence: (block (return_statement (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) (identifier))))) alternative: (else_clause body: (block (return_statement (call function: (attribute object: (call function: (identifier) arguments: (argument_list (identifier))) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier)))) return_type: (type (none)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) right: (identifier))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (string (string_start) (string_content) (string_end)) format_specifier: (format_specifier)) (string_content) (interpolation expression: (string (string_start) (string_content) (string_end)) format_specifier: (format_specifier)) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (integer))))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier) format_specifier: (format_specifier)) (string_content) (interpolation expression: (identifier) format_specifier: (format_specifier)) (string_content) (interpolation expression: (conditional_expression (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content) (string_end)))) (string_end))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 1464
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import os\nfrom datetime import timedelta\nfrom googlemaps import Client\n\n\nos.environ['GOOGLE_API_KEY'] = 'YOUR_API_KEY'\nclient = Client(key=os.getenv('GOOGLE_API_KEY'))\n\ndef get_bus_schedule(stop_name):\n    \n    results = client.distance_matrix([{'origin': 'your origin', 'destination': stop_name}], ['public_transport'], mode='driving')\n\n    \n    row = results[0]\n    durations = [r['duration']['value'] for r in row['rows'][0]['elements']]\n    distances = [r['distance']['value'] for r in row['rows'][0]['elements']]\n    \n    return sum(durations)/sum(distances), durations, distances\n\ndef analyze_schedules():\n    \n    stops = ['Stop A', 'Stop B', 'Stop C']\n\n    \n    avg_waits = {'Monday': [], 'Tuesday': [], 'Wednesday': [],\n                'Thursday': [], 'Friday': [], 'Saturday': [], 'Sunday': []}\n\n    for stop in stops:\n        print(f\"Analyzing {stop}\")\n\n        \n        for i in range(7):\n            wait_time, _, _ = get_bus_schedule(stop)\n            avg_waits[calendar.day_name[i]].append(wait_time)\n        \n        \n        sorted_days = sorted(avg_waits.items(), key=lambda x:x[1][-1], reverse=True)[:5]\n        for d in sorted_days:\n            print(f\"{d[0]}: {d[1][-1]:.2f} minutes\")\n\nif __name__ == '__main__':\n    analyze_schedules()",
            "id": 485
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)))) (list (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (integer)))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (string (string_start) (string_content) (string_end))) (for_in_clause left: (identifier) right: (subscript value: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (integer)) subscript: (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (string (string_start) (string_content) (string_end))) (for_in_clause left: (identifier) right: (subscript value: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (integer)) subscript: (string (string_start) (string_content) (string_end))))))) (return_statement (expression_list (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (call function: (identifier) arguments: (argument_list (identifier)))) (identifier) (identifier))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (list)) (pair key: (string (string_start) (string_content) (string_end)) value: (list)) (pair key: (string (string_start) (string_content) (string_end)) value: (list)) (pair key: (string (string_start) (string_content) (string_end)) value: (list)) (pair key: (string (string_start) (string_content) (string_end)) value: (list)) (pair key: (string (string_start) (string_content) (string_end)) value: (list)) (pair key: (string (string_start) (string_content) (string_end)) value: (list))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_end))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (integer))) body: (block (expression_statement (assignment left: (pattern_list (identifier) (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (attribute object: (subscript value: (identifier) subscript: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier))) attribute: (identifier)) arguments: (argument_list (identifier)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (keyword_argument name: (identifier) value: (lambda parameters: (lambda_parameters (identifier)) body: (subscript value: (subscript value: (identifier) subscript: (integer)) subscript: (unary_operator argument: (integer))))) (keyword_argument name: (identifier) value: (true)))) subscript: (slice (integer))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (subscript value: (identifier) subscript: (integer))) (string_content) (interpolation expression: (subscript value: (subscript value: (identifier) subscript: (integer)) subscript: (unary_operator argument: (integer))) format_specifier: (format_specifier)) (string_content) (string_end))))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 1",
        "token_cnt": 1588
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_low_fitness(steps):\n    \n    if steps < 5000:\n        return \"Low\"\n    \n    elif (steps >= 5000) & (steps <=12000):\n        return \"Moderate\"\n\n    else : \n        return \"High\"\n\n\n\nprint(\"For\", 4999,\"steps:\",determine_low_fitness(4999))\nprint(\"For\", 6000 ,\"steps:\",determine_low_fitness(6000))\nprint(\"For\",8000 , \"steps:\",determine_low_fitness(8000))\nprint(\"For\",13000,\"steps:\",determine_low_fitness(13000))\nprint(\"For\",17000,\"steps:\",determine_low_fitness(17000))",
            "id": 486
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (integer))) right: (parenthesized_expression (comparison_operator (identifier) (integer)))) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (integer) (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (integer) (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (integer) (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (integer) (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (integer) (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (integer)))))))\n**\n",
        "text": " 6",
        "token_cnt": 537
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_weather(city):\n    \n    url = f\"https://www.google.com/search?q={city}&oq={city}+weather+\"\n\n    \n    page = requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    \n    \n    temp = soup.find('div', class_='BNeawe').text.strip()\n    desc = soup.find('div', class_='BNeawe yt-formatted-string').text.strip()\n    rainfall = soup.find('span', attrs={'class': 'UFICommentBody'}).text.strip()\n    \n    return {'temperature' : temp , 'description' :desc ,'rainfall' : rainfall }\n\n\nif __name__ == '__main__':\n    city = input(\"Enter City Name : \")\n    weather = get_weather(city)\n    print(f\"\\nTemperature : {weather['temperature']}\")\n    print(f\"Description : {weather['description']}\")\n    print(f\"Rainfall    : {weather['rainfall']} \\n\")",
            "id": 490
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))))))) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)))) (return_statement (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content (escape_sequence)) (string_end))))))))\n**\n",
        "text": " 6",
        "token_cnt": 1002
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random\nfrom typing import List\n\n\nactions = [\"door knob\", \"keyboard\", \"mouse\"]\n\ndef dry_run(action: str):\n    print(\"Dry run:\", action)\n\ndef get_expert_input() -> int:\n    \n    probas = [0.3, 0.45, 0.2]\n\n    \n    return sum([random.uniform(0, p) for p in probas])\n\ndef decide(probability_map: dict[str, float]):\n    \"\"\"Decide whether to perform surface disinfection\"\"\"\n    assert isinstance(probability_map, dict), f\"Expected dictionary as argument but got {type(probability_map)}\"\n    \n    \n    hour = datetime.now().hour\n\n    \n    if not simulation:\n        \n        max_proba, chosen_action = max((p, k) for k, p in probability_map.items())\n        \n        \n        print(f\"{datetime.now()}: Decided to disinfect '{chosen_action}' ({max_proba:.2%})\")\n\n        return chosen_action\n\n    else:\n        \n        rand = random.random()\n        for action, proba in probability_map.items():\n            if rand < proba:\n                dry_run(action)\n                \nif __name__ == \"__main__\":\n    \n    simulation = True\n\n    \n    probability_map = {}\n    while True:\n        t = Timeslot(*time_window)\n        expert_probas = get_expert_inputs()\n        probability_map[t] = expert_probas\n    \n        \n        if t >= last_timeslot:\n            break\n        \n    \n    for d in days_of_week:\n        \n        overall_proba = probability_map[(d, 8)] * probability_map[(d, 17)]\n        \n        \n        \n    \n    \n    decided_on = decide(overall_proba)",
            "id": 492
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (function_definition name: (identifier) parameters: (parameters (typed_parameter (identifier) type: (type (identifier)))) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))))) (function_definition name: (identifier) parameters: (parameters) return_type: (type (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (list (float) (float) (float)))) (return_statement (call function: (identifier) arguments: (argument_list (list_comprehension body: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (identifier))) (for_in_clause left: (identifier) right: (identifier)))))))) (function_definition name: (identifier) parameters: (parameters (typed_parameter (identifier) type: (type (generic_type (identifier) (type_parameter (type (identifier)) (type (identifier))))))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (assert_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (string (string_start) (string_content) (interpolation expression: (call function: (identifier) arguments: (argument_list (identifier)))) (string_end))) (expression_statement (assignment left: (identifier) right: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)))) (if_statement condition: (not_operator argument: (identifier)) consequence: (block (expression_statement (assignment left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (generator_expression body: (tuple (identifier) (identifier)) (for_in_clause left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier) format_specifier: (format_specifier)) (string_content) (string_end))))) (return_statement (identifier))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) body: (block (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (true))) (expression_statement (assignment left: (identifier) right: (dictionary))) (while_statement condition: (true) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list_splat (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (identifier))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (break_statement))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (subscript value: (identifier) subscript: (tuple (identifier) (integer))) right: (subscript value: (identifier) subscript: (tuple (identifier) (integer)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))))))\n**\n",
        "text": " 10",
        "token_cnt": 1160
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def analyze_nosespray(input):\n    \"\"\"Transform 'extreme' nose spray usage instructions into appropriate ones.\"\"\"\n\n    \n    BOTTLE_TYPES = [\"Flonase\", \"Nasonex\", \"Rhinocort\"]\n    \n    \n    if not input:\n        raise ValueError(\"No input provided\")\n        \n    \n    split_input = input.split()\n    if len(split_input) != 2:\n        raise ValueError(\"Invalid input format; expected two words separated by space.\")    \n    \n    \n    bottle_type = split_input[0]\n    dose_amount = split_input[1]\n    \n    \n    if bottle_type not in BOTTLE_TYPES:\n        raise ValueError(f\"Invalid bottle type '{bottle_type}'; please enter one of {BOTTLE_TYPES}.\")   \n    \n    \n    if bottle_type == \"Flonase\":    \n        new_dose = f\"{float(dose_amount)*1.5} mcg\"       \n    elif bottle_type == \"Nasonex\":    \n        new_dose = f\"{dose_amount} sprays\"      \n    else:    \n        new_dose = f\"{float(dose_amount)/3} mL\"     \n    \n    \n    return f\"'{input}' -> Use {new_dose} twice daily.\"",
            "id": 493
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (if_statement condition: (not_operator argument: (identifier)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (integer)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (integer)))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (integer)))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (interpolation expression: (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (float))) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (interpolation expression: (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (integer))) (string_content) (string_end))))))) (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))\n**\n",
        "text": " 6",
        "token_cnt": 724
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_high_transport(safety):\n    \"\"\"Determine highest rated transport option based on user inputted preference\n    \n    Args:\n        safety (int): User defined level of safety from 1 - 5\n        \n    Returns:\n        str: Name of selected mode of transporation\n    Raises:\n        ValueError: If invalid value passed for `safety` parameter    \n    \"\"\"\n    \n    options = [(\"Bicycle\", 4), (\"Walking\", 3), \n               (\"Public Transit\", 2), (\"Carpooling\", 1)]\n\n    \n    if safety >= 5:\n        return max((option[0] for option in options if option[1] == max(option)[1]))\n    elif safety >= 3:\n        return \"Bicycle\" if any([opt[1] > 3 for opt in options]) else min((option[0] for option in options if option[1] == max(option)[1])))\n    elif safety >= 1:\n        return \"Walking\" if any([opt[1] > 2 for opt in options]) else [\"Public Transit\"][any([opt[1] > 1 for opt in options])]\n    raise ValueError(\"Invalid value entered for 'safety' parameter\")\n\n\nif __name__ == \"__main__\":\n    print(determine_high_transport(5))   \n    print(determine_high_transport(3))   \n    print(determine_high_transport(1))",
            "id": 495
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (tuple (string (string_start) (string_content) (string_end)) (integer)) (tuple (string (string_start) (string_content) (string_end)) (integer)) (tuple (string (string_start) (string_content) (string_end)) (integer)) (tuple (string (string_start) (string_content) (string_end)) (integer))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (call function: (identifier) arguments: (argument_list (generator_expression body: (subscript value: (identifier) subscript: (integer)) (for_in_clause left: (identifier) right: (identifier)) (if_clause (comparison_operator (subscript value: (identifier) subscript: (integer)) (subscript value: (call function: (identifier) arguments: (argument_list (identifier))) subscript: (integer))))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) (ERROR (return_statement (conditional_expression (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (list_comprehension body: (comparison_operator (subscript value: (identifier) subscript: (integer)) (integer)) (for_in_clause left: (identifier) right: (identifier))))) (call function: (identifier) arguments: (argument_list (generator_expression body: (subscript value: (identifier) subscript: (integer)) (for_in_clause left: (identifier) right: (identifier)) (if_clause (comparison_operator (subscript value: (identifier) subscript: (integer)) (subscript value: (call function: (identifier) arguments: (argument_list (identifier))) subscript: (integer)))))))))) consequence: (block)) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (conditional_expression (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (list_comprehension body: (comparison_operator (subscript value: (identifier) subscript: (integer)) (integer)) (for_in_clause left: (identifier) right: (identifier))))) (subscript value: (list (string (string_start) (string_content) (string_end))) subscript: (call function: (identifier) arguments: (argument_list (list_comprehension body: (comparison_operator (subscript value: (identifier) subscript: (integer)) (integer)) (for_in_clause left: (identifier) right: (identifier))))))))))) (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 877
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_high_handling(items):\n    \"\"\"Updates high handling personal items based on expert analysis.\"\"\"\n\n    \n    biases = [\"Hygiene\", \"Allergies\"]\n    \n    \n    for i in range(len(items)):\n        \n        name, description, category, bias = items[i]\n        \n        \n        found_bias = False\n        for b in biases:\n            if b in description.lower():\n                found_bias = True\n                break\n    \n        \n        if found_bias:    \n            new_status = \"High\" if (category == \"Personal\") else \"Medium\"\n        \n            \n            print(\"Item:\", name)\n            print(\"\\tCurrent Status:\", category)\n            print(\"\\tNew Status:\", new_status)\n            print()\n                \n            \n            items[i][2] = new_status\n            \n    return items",
            "id": 499
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (expression_statement (assignment left: (pattern_list (identifier) (identifier) (identifier) (identifier)) right: (subscript value: (identifier) subscript: (identifier)))) (expression_statement (assignment left: (identifier) right: (false))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (identifier) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) consequence: (block (expression_statement (assignment left: (identifier) right: (true))) (break_statement))))) (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (conditional_expression (string (string_start) (string_content) (string_end)) (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)) (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)) (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list))) (expression_statement (assignment left: (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (integer)) right: (identifier))))))) (return_statement (identifier)))))\n**\n",
        "text": " 10",
        "token_cnt": 570
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_low_clothing(stains):\n    \"\"\"Update low clothing based on stain removal techniques.\"\"\"\n\n    \n    if get_consent() == \"yes\":\n        \n        if isinstance(stain, dirt):\n            wash_with_detergent(stained_item)\n        elif isinstance(stain, blood):\n            apply_hydrogen_peroxide(stained_item)\n        else: \n            return(\"Stain not recognized\")\n    \n    \n    else:\n        print(\"No consent provided.\")\n        print(\"To remove common stains such as dirt or blood from clothes:\")\n        print(\"- Washing machine with detergent can usually help remove light dirt stains.\")\n        print(\"- Hydrogen peroxide may work well for removing blood stains.\")\n        print(\"- Baking soda paste might absorb oil and grease stains.\")\n        print(\"- Club soda can help neutralize some food stains like ketchup or mustard.\")\n        print(\"\")\n        print(\"However, always test any cleaning method first on an inconspicuous area \")\n        print(\"of the fabric to ensure there will be no damage to the garment.\")\n        \n    \n\n\ndef wash_with_detergent(garment):\n    pass \n    \ndef apply_hydrogen_peroxide(garment):\n    pass \n\n\n\n\ndef get_consent():\n    while True:    \n        consent = input(\"Do you give permission to treat the item? (Yes/no): \")\n        \n        if consent.lower() == 'yes':\n            return('yes')\n        elif consent.lower() == 'no':\n            return ('no')\n        else:\n            print(\"Invalid entry. Please try again.\")",
            "id": 500
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))) alternative: (elif_clause condition: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))) alternative: (else_clause body: (block (return_statement (parenthesized_expression (string (string_start) (string_content) (string_end)))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (pass_statement))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (pass_statement))) (function_definition name: (identifier) parameters: (parameters) body: (block (while_statement condition: (true) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (parenthesized_expression (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (parenthesized_expression (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 904
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_low_education(marks_in_maths, marks_in_english):\n    \n    total = (marks_in_maths + marks_in_english) / 2\n    \n    if total >= 50 :\n        return \"Passed\"\n    else: \n        return \"Failed\"\n    \n\nif __name__ == '__main__':    \n    mark1 = float(input(\"Enter Marks in Maths:\"))    \n    mark2 = float(input(\"Enter Marks in English:\"))     \n\n    result = check_low_education(mark1, mark2)\n    print(\"Result:\",result)",
            "id": 501
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (identifier))) right: (integer)))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))))))\n**\n",
        "text": " 6",
        "token_cnt": 376
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_extreme_hair(problem):\n    \"\"\"\n    This function updates the information about \n    problem faced by user while following 'Extreme Hair Care - Handling Problems' course\n    \n    Args:\n        problem (str): Problem statement entered by the user\n        \n    Returns:    \n        str: Response message after updating database\n            \n    Raises:\n        ValueError: If input value is not valid    \n    \"\"\"    \n\n    \n    existing_problems = [\"Hair fall\", \"Dandruff\", \"Itchy scalp\"]\n    if problem in existing_problems:\n    \n        \n        query = \"SELECT count FROM PROBLEMS WHERE name=?\"\n        cursor.execute(query, [problem])\n        \n        \n        row = cursor.fetchone()\n        \n        \n        new_count = int(row[0])+1\n        update_stmt = \"UPDATE PROBLEMS SET count=? WHERE name=?\"\n        cursor.execute(update_stmt, [new_count, problem])\n        \n        return f\"Thankyou! The count for {problem} has now increased to {new_count}\"\n    \n    else:\n        raise ValueError(\"Invalid Input\")",
            "id": 502
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (integer)))) right: (integer)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (list (identifier) (identifier))))) (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_end)))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 455
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_toilet_hygiene(trust):\n    \"\"\"\n    This function checks whether there is sufficient \n    evidence of high toilet hygiene based on the given trust value\n\n    Args:\n        trust (float): A score between 0 and 1 indicating the level \n            of confidence in the observed behavior\n    \n    Returns:\n        str: \"Pass\" if sufficient evidence exists, otherwise\n            \"Fail\"\n    \"\"\"\n    \n    clean_threshold = 0.75\n    dirty_threshold = 0.25\n\n    \n    if trust >= clean_threshold:\n        return \"Pass\"\n    elif trust < dirty_threshold:\n        return \"Fail\"\n    else:\n        \n        return \"Insufficient Evidence\"\n\n\n\nprint(check_toilet_hygiene(0.8))   \nprint(check_toilet_hygiene(0.6))   \nprint(check_toilet_hygiene(0.4))",
            "id": 503
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (float))) (expression_statement (assignment left: (identifier) right: (float))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (float)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (float)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (float)))))))\n**\n",
        "text": " 10",
        "token_cnt": 308
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random \nfrom datetime import date \n \ndef get_age(dob): \n    current_date = date.today() \n    return (current_date.year - dob.year) - ((current_date.month, current_date.day) < (dob.month, dob.day)) \n \ndef calculate_body_mass_index(height, weight): \n    bmi = round((weight / (height ** 2)), 1) \n    if bmi >= 30: \n        print(\"Obesity\") \n    elif bmi >= 25: \n        print(\"Overweight\") \n    else: \n        print(\"Normal Weight\") \n \ndef take_blood_pressure(): \n    systolic = random.randint(90, 160) \n    diastolic = random.randint(40, 80) \n    blood_pressure = f\"{systolic}/{diastolic}\" \n    print(f\"Your BP reading today is {blood_pressure}. Is this normal?\") \n \ndef main(): \n    \n    age = int(input(\"Enter your Age : \")) \n    height = float(input(\"Enter your Height in meters : \")) \n    weight = float(input(\"Enter your Weight in kilograms : \")) \n    dob = input(\"Enter your Date of birth (DD-MM-YYYY) : \") \n    dob = tuple([int(i) for i in dob.split(\"-\")]) \n     \n    \n    body_mass_index = calculate_body_mass_index(height, weight) \n     \n    \n    take_blood_pressure() \n     \n    \n    print(\"\") \n    print(f\"Your age is {get_age(dob)} years.\") \n    print(f\"Your BMI is {body_mass_index}.\") \n    print(\"\") \n \nif __name__ == '__main__': \n    main()",
            "id": 504
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (return_statement (binary_operator left: (parenthesized_expression (binary_operator left: (attribute object: (identifier) attribute: (identifier)) right: (attribute object: (identifier) attribute: (identifier)))) right: (parenthesized_expression (comparison_operator (tuple (attribute object: (identifier) attribute: (identifier)) (attribute object: (identifier) attribute: (identifier))) (tuple (attribute object: (identifier) attribute: (identifier)) (attribute object: (identifier) attribute: (identifier))))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (parenthesized_expression (binary_operator left: (identifier) right: (parenthesized_expression (binary_operator left: (identifier) right: (integer))))) (integer))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer))))) (expression_statement (assignment left: (identifier) right: (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_end)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list_comprehension body: (call function: (identifier) arguments: (argument_list (identifier))) (for_in_clause left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (call function: (identifier) arguments: (argument_list (identifier)))) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 10",
        "token_cnt": 1301
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import requests\nfrom bs4 import BeautifulSoup as soup\n\n\ndef getCurrentWeather(city):\n    \n    url = \"https://api.openweathermap.org/data/2.5/weather?q=\" + city + \"&appid=YOUR_API_KEY\"\n\n    \n    res = requests.get(url)\n    data = res.json()\n    \n    try:\n        \n        temp = round(float(data[\"main\"][\"temp\"]) - 273.15, 1)\n        humid = int(data[\"main\"][\"humidity\"])\n\n        \n        windSpeed = float(data[\"wind\"][\"speed\"])\n        \n        return (f'Current Temperature: {temp}°C\\nHumidity: {humid}%\\nWind Speed: {windSpeed} m/s')\n        \n    except KeyError as e:\n        print(\"Error:\", e)\n        \n\nlocation = input('Enter a location: ')\n    \n\nprint(getCurrentWeather(location))",
            "id": 505
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (call function: (identifier) arguments: (argument_list (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (string (string_start) (string_content) (string_end))))) right: (float)) (integer))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (string (string_start) (string_content) (string_end))))))) (return_statement (parenthesized_expression (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content) (string_end))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier))))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier)))))))\n**\n",
        "text": " 6",
        "token_cnt": 729
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_low_nail_care(moisturized):\n    \"\"\"Determine whether nail care is low based on moisturization status\n\n    Args:\n        moisturized (bool): Whether hands were recently moisturized\n\n    Returns:\n        str: \"Low\" if nail care is considered substandard, else \"Normal\"\n    \n    Raises:\n        ValueError: If input value is not boolean type\n        \n    \"\"\"\n    \n    if isinstance(moisturized, bool) == False: \n        raise ValueError(\"Input must be of type 'boolean'\") \n\n    \n    conditions = [(True, \"Low\"), (False, \"Normal\")] \n    message = \"\" \n    \n    \n    for c, m in conditions: \n        if c == moisturized: \n            message = m \n            break \n            \n    return message",
            "id": 508
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (false)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (list (tuple (true) (string (string_start) (string_content) (string_end))) (tuple (false) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (for_statement left: (pattern_list (identifier) (identifier)) right: (identifier) body: (block (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (identifier))) (break_statement))))) (return_statement (identifier)))))\n**\n",
        "text": " 10",
        "token_cnt": 287
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random\n\ndef print_menu():\n    print(\"1 - Use Soap and Water\")\n    print(\"2 - Use Alcohol Based Hand Sanitizer\")\n    print(\"3 - Dry Run (Simulate Actions Without Executing)\")\n    print(\"4 - Exit Program\")\n    \ndef main():    \n    \n    print_menu()\n    \n    while True:\n        choice = int(input(\"\\nEnter your selection: \"))\n        \n        if choice == 1:\n            action = \"useSoap\"\n        elif choice == 2:\n            action = \"useSanitizer\"\n        elif choice == 3:\n            action = \"dryRun\"\n        elif choice == 4:\n            exit()\n        else:\n            print(\"Invalid Choice!\")\n            continue\n    \n        \n        perform_action(action)\n        \ndef perform_action(action):\n    if action == \"useSoap\":\n        print(\"--- Using SOAP ---\")\n        print(\"Wash hands thoroughly for at least 20 seconds.\")\n        print(\"\")\n        \n    elif action == \"useSanitizer\":\n        print(\"--- Using HAND SANITIZER ---\")\n        print(\"Apply enough product to cover all surfaces of both hands.\")\n        print(\"Let sit for at least 60 seconds before removing.\")\n        print(\"\")\n\n    elif action == \"dryRun\":\n        print(\"*** DRY RUN ***\")\n        print(\"Would you:\")\n        print(\"* Use SOAP?\")\n        answer = input(\"(Y/N): \")\n\n        if answer.lower().startswith('y'):\n            print(\"Wash hands thoroughly for at least 20 seconds.\")\n            print(\"\")\n        else:\n            print(\"Use alcohol-based hand sanitizer.\")\n            print(\"Apply enough product to cover all surfaces of both hands.\")\n            print(\"Let sit for at least 60 seconds before removing.\")\n            print(\"\")\n            \n    else:\n        print(\"Error: Invalid Action Selected\")    \n            \nif __name__ == \"__main__\":\n    main()",
            "id": 509
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list))) (while_statement condition: (true) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (continue_statement)))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_end))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_end)))))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 6",
        "token_cnt": 1471
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd \nfrom sklearn import linear_model \n\n\ndef main(): \n    \n    df = pd.read_csv(\"feet_data.csv\") \n\n    \n    x = df[[\"temperature\", \"humidity\"]].values\n    y = df[\"moisture\"].values\n\n    \n    regr = linear_model.LinearRegression()\n    regr.fit(x,y)\n    \n    \n    predictions = regr.predict(x)\n\n    \n    print(\"Coefficients:\", regr.coef_)\n    print(\"Intercept:\",regr.intercept_)\n\n    \n    dry_skin = predictions < 30\n\n    \n    if dry_skin.sum()>0 : \n        apply_lotion(dry_skin)\n        record_event('Moisturized', 'Feet')\n        \n    else: \n        record_event('No action needed','Feet')\n\n\ndef apply_lotion(mask): \n    \n    ...\n    \n\ndef record_event(action, location): \n    \n    ...\n    \n    \nif __name__ == '__main__': \n    main()",
            "id": 512
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (attribute object: (subscript value: (identifier) subscript: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) attribute: (identifier)))) (expression_statement (assignment left: (identifier) right: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))))) (expression_statement (assignment left: (identifier) right: (comparison_operator (identifier) (integer)))) (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (ellipsis)))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (ellipsis)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 6",
        "token_cnt": 777
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_high_foot_moisturizer(trust):\n    \"\"\"Transform high foot moisturizer based on trust level\n    \n    Args:\n        trust (int): The degree of customer trust, ranging from 0 to 100\n\n    Returns:\n        str: A transformed version of the input string\n        \n    Raises:\n        ValueError: If `trust` is not within range [0, 100]\n        \n    \"\"\"\n    \n    if isinstance(trust, int) and 0 <= trust <= 100:\n        pass\n    else:\n        raise ValueError(\"Invalid input 'trust' value\")\n\n    \n    transformations = {\n        95: \"Ultra Premium\",\n        85: \"Premium Plus\",\n        75: \"Gold Standard\",\n        65: \"Standard\",\n        55: \"Budget\"\n    }\n\n    \n    if trust in transformations:\n        return transformations[trust]\n    elif trust >= 45:\n        return \"Midrange\"\n    else:\n        return \"Basic\"",
            "id": 514
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) right: (comparison_operator (integer) (identifier) (integer))) consequence: (block (pass_statement)) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (integer) value: (string (string_start) (string_content) (string_end))) (pair key: (integer) value: (string (string_start) (string_content) (string_end))) (pair key: (integer) value: (string (string_start) (string_content) (string_end))) (pair key: (integer) value: (string (string_start) (string_content) (string_end))) (pair key: (integer) value: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (subscript value: (identifier) subscript: (identifier)))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 10",
        "token_cnt": 419
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def extreme_haircare(conditioning, moisturization):\n    \"\"\"\n    This function calculates the level of 'extreme' required \n    by incorporating both conditioning and moisturization values\n\n    Args:\n        conditioning (float): A value between 0 and 1 indicating \n            how much conditioner was used\n        moisturization (float): A value between 0 and 1 indicating\n            how much moisturizer was used\n    \n    Returns:\n        int: An integer representing the degree of 'extreme' needed \n             ranging from 0 (low) to 3 (highest). The higher the number\n             the more extreme the treatment required.\n        \n    Raises:\n        ValueError: If either `conditioning` or `moisturization` \n                    is not within [0, 1] range\n                    \n    \"\"\"    \n    \n    if not isinstance(conditioning, float) or \\\n       not isinstance(moisturization, float) or \\\n       conditioning < 0 or conditioning > 1 or \\\n       moisturization < 0 or moisturization > 1:\n         raise ValueError(\"Invalid input values\")\n         \n    \n    avg = (conditioning + moisturization)/2\n    \n    \n    if avg >= .75:\n        return 3   \n    elif avg >= .6:\n        return 2    \n    else:\n        return 1",
            "id": 517
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (boolean_operator left: (boolean_operator left: (boolean_operator left: (boolean_operator left: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) (line_continuation) right: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (line_continuation) right: (comparison_operator (identifier) (integer))) right: (comparison_operator (identifier) (integer))) (line_continuation) right: (comparison_operator (identifier) (integer))) right: (comparison_operator (identifier) (integer))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (identifier))) right: (integer)))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (integer))) alternative: (elif_clause condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (integer)))) alternative: (else_clause body: (block (return_statement (integer))))))))\n**\n",
        "text": " 6",
        "token_cnt": 375
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom sklearn import tree\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score\n\n\ndf = pd.read_csv('data.csv')\nX = df.iloc[:, :-1].values\ny = df.iloc[:, -1].values\n\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)\n\n\nclf = tree.DecisionTreeClassifier()\n\n\nclf.fit(X_train, y_train)\n\n\npredictions = clf.predict(X_test)\n\n\naccuracy = accuracy_score(y_test, predictions)\nprint(\"Accuracy:\", round(accuracy * 100, 2), \"%\")\n\ndef checkHygiene(trust):\n    \n    if (trust < 3):\n        return True\n    \n    \n    else:\n        return False\n\n\nif __name__ == '__main__':\n    print(checkHygiene(2)) \n    print(checkHygiene(6))",
            "id": 518
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (attribute object: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (slice) subscript: (slice (unary_operator argument: (integer)))) attribute: (identifier)))) (expression_statement (assignment left: (identifier) right: (attribute object: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (slice) subscript: (unary_operator argument: (integer))) attribute: (identifier)))) (expression_statement (assignment left: (pattern_list (identifier) (identifier) (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (float)) (keyword_argument name: (identifier) value: (integer)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (integer)) (integer))) (string (string_start) (string_content) (string_end))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (integer))) consequence: (block (return_statement (true))) alternative: (else_clause body: (block (return_statement (false))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer)))))))))\n**\n",
        "text": " 5",
        "token_cnt": 777
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def cleansing_body(gender):\n    \n    shower = False\n    soap = True\n    water = \"warm\"\n\n    \n    if (gender == 'male'):\n        shower = True\n        soap = False\n    \n    elif (gender == 'female'):\n        pass\n\n    else:\n        print(\"Invalid input\")\n        return None\n\n    \n    print(\"Low bathing routine:\")\n    print(\"- Shower:\", shower)\n    print(\"- Soap:\", soap)\n    print(\"- Water temperature:\", water)\n\n\n\ncleansing_body(input(\"Enter 'Male' or 'Female': \"))",
            "id": 521
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (false))) (expression_statement (assignment left: (identifier) right: (true))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (true))) (expression_statement (assignment left: (identifier) right: (false)))) alternative: (elif_clause condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (pass_statement))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (none))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 5",
        "token_cnt": 468
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random\nfrom typing import Dict, List\n\nclass AccessControl:\n    def __init__(self):\n        self._access_codes: Dict[str, str] = {}\n    \n    def register(self, username: str, password: str) -> None:\n        \"\"\"Registers a new user.\"\"\"\n        self._access_codes[username] = password\n\n    def authenticate(self, username: str, password: str) -> bool:\n        \"\"\"Authenticates a registered user\"\"\"\n        correct_password = self._access_codes.get(username) == password\n        return correct_password\n\n    def generate_code(self, username: str) -> int:\n        \"\"\"Generates a unique authorization code for the given user.\"\"\"\n        \n        auth_code = random.randint(100000, 999999)\n\n        while (auth_code in self._access_codes.values()):\n            auth_code = random.randint(100000, 999999)\n        \n        \n        self._access_codes[username] = str(auth_code)\n    \n        return auth_code\n\n    def verify_code(self, username: str, code: int) -> bool:\n        \"\"\"Verifies whether the provided authorization code matches the one stored for the given user.\"\"\"\n        expected_code = self._access_codes.get(username)\n        valid_code = False\n        if isinstance(expected_code, str) and expected_code.isdigit():\n            try:\n                actual_code = int(code)\n                valid_code = actual_code == int(expected_code)\n            except ValueError:\n                pass\n        return valid_code",
            "id": 522
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier))) (class_definition name: (identifier) body: (block (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) type: (type (generic_type (identifier) (type_parameter (type (identifier)) (type (identifier))))) right: (dictionary))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier)))) return_type: (type (none)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) right: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier)))) return_type: (type (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (comparison_operator (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier))) (identifier)))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier)))) return_type: (type (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer))))) (while_statement condition: (parenthesized_expression (comparison_operator (identifier) (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer))))))) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier)))) return_type: (type (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (false))) (if_statement condition: (boolean_operator left: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) consequence: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (comparison_operator (identifier) (call function: (identifier) arguments: (argument_list (identifier))))))) (except_clause (identifier) (block (pass_statement)))))) (return_statement (identifier)))))))\n**\n",
        "text": " 10",
        "token_cnt": 982
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom sklearn import preprocessing\n\ndef determine_extreme_education(df):\n    \n    privacy_vals = ['Public', 'Private']\n    \n    \n    le = preprocessing.LabelEncoder()\n    df['Education'] = le.fit_transform(df['Education'])\n\n    \n    grouped = df.groupby(['Education', 'Privacy']).agg({'Enrollment': ('sum',)})\n\n    \n    maxval = grouped.max().reset_index()\n\n    \n    if (maxval['Privacy'][0] == 'Public'):\n        \n        idx1 = maxval[(maxval['Education'] == 3) & (maxval['Privacy'] == 'Public')]['Enrollment'].idxmax()\n\n        \n        if ((grouped.iloc[idx1, 0] < grouped['Enrollment'][2]) & (grouped['Education'][2] != 4)):\n            return \"Higher Ed - Public\", True\n        \n        else: \n            return \"Lower Ed - Public\", False\n        \n    else: \n        \n        if (maxval['Education'][0] == 4):\n            \n            idx2 = maxval[(maxval['Education'] != 4) | (maxval['Privacy'] != 'Public')]['Enrollment'].idxmax()\n\n            \n            if (grouped['Privacy'][idx2] == 'Public'):\n                return \"Higher Ed - Private\", True\n                \n            elif (grouped['Privacy'][idx2] == 'Private'): \n                return \"Lower Ed - Private\", False\n    \n        else:   \n            \n            if (grouped['Enrollment'][1] >= grouped['Enrollment'][0]):\n                return \"More Doctorates\", True\n                \n            else:\n                return \"Less Doctors\", False\n        \nif __name__ == '__main__':    \n    \n    df = pd.read_csv('data.csv')\n    \n    \n    print(\"Extreme Education:\", determine_extreme_education(df), \"\\n\\ndry_run=True\")",
            "id": 524
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) attribute: (identifier)) arguments: (argument_list (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (tuple (string (string_start) (string_content) (string_end))))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (parenthesized_expression (comparison_operator (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (integer)) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (subscript value: (subscript value: (identifier) subscript: (binary_operator left: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (integer))) right: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end)))))) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (parenthesized_expression (binary_operator left: (parenthesized_expression (comparison_operator (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (integer)) (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (integer)))) right: (parenthesized_expression (comparison_operator (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (integer)) (integer))))) consequence: (block (return_statement (expression_list (string (string_start) (string_content) (string_end)) (true)))) alternative: (else_clause body: (block (return_statement (expression_list (string (string_start) (string_content) (string_end)) (false))))))) alternative: (else_clause body: (block (if_statement condition: (parenthesized_expression (comparison_operator (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (integer)) (integer))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (subscript value: (subscript value: (identifier) subscript: (binary_operator left: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (integer))) right: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end)))))) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (parenthesized_expression (comparison_operator (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (identifier)) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (expression_list (string (string_start) (string_content) (string_end)) (true)))) alternative: (elif_clause condition: (parenthesized_expression (comparison_operator (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (identifier)) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (expression_list (string (string_start) (string_content) (string_end)) (false))))))) alternative: (else_clause body: (block (if_statement condition: (parenthesized_expression (comparison_operator (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (integer)) (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (integer)))) consequence: (block (return_statement (expression_list (string (string_start) (string_content) (string_end)) (true)))) alternative: (else_clause body: (block (return_statement (expression_list (string (string_start) (string_content) (string_end)) (false)))))))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (identifier))) (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))))))))\n**\n",
        "text": " 10",
        "token_cnt": 1747
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random\nfrom datetime import timedelta\n\n\ndef clean_area(time):\n    print(\"Cleaned area\")\n    \n\ndef disinfect_area():\n    print(\"Disinfected area\")\n    \n    \ndef main():\n    \n    \n    time = timedelta(hours=random.randint(1,2))\n\n    \n    has_transparency = True if random.uniform(0,1)>0.5 else False \n\n    \n    clean_area(time)\n    if has_transparency:\n        disinfect_area()\n        \n    \n    if has_transparency: \n        disinfect_area()\n    else:\n        clean_area(time)\n        \n    \n\n    \nmain()",
            "id": 525
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer)))))))) (expression_statement (assignment left: (identifier) right: (conditional_expression (true) (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer))) (float)) (false)))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (if_statement condition: (identifier) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))) (if_statement condition: (identifier) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))))))) (expression_statement (call function: (identifier) arguments: (argument_list))))\n**\n",
        "text": " 6",
        "token_cnt": 440
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_high_handling(transparency):\n    \"\"\"\n    Calculate the risk level associated with 'High' handling instructions \n    given the specified transparency value\n\n    Args:\n        transparency (float): The degree of visibility into the contents \n            of the package\n\n    Returns:\n        str: A string indicating the calculated risk level ('Low', 'Medium',\n            or 'High')\n    \n    Raises:\n        ValueError: If the input transparency value is not within the valid range [0,1]\n        \n    \"\"\"\n    \n    if isinstance(transparency, float) and 0 <= transparency <= 1:\n        pass\n    else:\n        raise ValueError(\"Invalid input argument type or value\")\n\n    \n    if transparency >= 0.95:\n        risk = \"High\"\n    elif transparency >= 0.7:\n        risk = \"Medium\"\n    else:\n        risk = \"Low\"\n\n    return risk",
            "id": 528
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) right: (comparison_operator (integer) (identifier) (integer))) consequence: (block (pass_statement)) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (float)) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))))) (return_statement (identifier)))))\n**\n",
        "text": " 10",
        "token_cnt": 313
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "print(\"Dry Run\")\n\n\ndef check_trust(user_input):\n    \n    trust = float(user_input)\n\n    if (trust >=0.85):\n        return \"Excellent\"\n    elif ((trust > 0.6) & (trust < 0.85)):\n        return \"Good\"\n    else: \n        return \"Caution Required\"\n\n\n\nwhile True:\n    \n    print(\"\\nWelcome to High Nose Care Program\\n\")\n    print(\"Enter your degree of confidence:\")\n    user_input = input()\n\n    result = check_trust(user_input)\n    print(\"Your Degree Of Confidence Is:\",result,\"\\n\")\n\n    repeat = input(\"Do you want to recheck? [y/n]\")\n\n    if repeat == 'n':\n        break\n\nprint(\"Thankyou for using our service.\")",
            "id": 531
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (float))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (parenthesized_expression (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (float))) right: (parenthesized_expression (comparison_operator (identifier) (float))))) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (while_statement condition: (true) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (break_statement))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))\n**\n",
        "text": " 6",
        "token_cnt": 592
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_fraud_detection(consent):\n    \"\"\"Updates the fraud detection model based on user consent\n\n    Args:\n        consent (str): User provided consent regarding sharing of personal information\n    \n    Returns:\n        str: Message indicating whether the changes were applied successfully or not\n        \n    Raises:\n        ValueError: If invalid input value is passed as argument    \n    \"\"\"\n    \n    if isinstance(consent, str) == False:    \n        raise ValueError(\"Invalid input type\")    \n    \n    message = \"\"   \n    \n    \n    if consent.lower() == \"yes\":    \n        message = \"Changes applied successfully\"    \n        \n    elif consent.lower() == \"no\":    \n        message = \"No changes made\"    \n        \n    \n    return message",
            "id": 535
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (false)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))))) (return_statement (identifier)))))\n**\n",
        "text": " 10",
        "token_cnt": 334
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "guidelines = \"\"\"\n1. Wear facemasks inside enclosed public places (e.g., malls) regardless of vaccination status.\n2. Maintain physical distance of at least one meter between individuals not living together unless they belong to the same household or bubble.\n3. Regularly wash hands with soap under running water for at least 20 seconds especially after going to the bathroom; before eating; and after blowing your nose, coughing, or sneezing. If soap and water are unavailable, use hand sanitizer with at least 60% alcohol content.\n4. Avoid touching eyes, nose, and mouth with unwashed hands.\n5. Cover coughs and sneezes with disposable tissues and immediately throw them away afterwards. Then, wash hands thoroughly.\n6. Stay home when feeling ill except to get medical care.\n7. Get tested and self-isolate if symptomatic until test results are known.\n8. Minimize close contact with people who are more vulnerable to severe COVID-19 outcomes such as older adults and those with underlying health conditions.\"\"\"\n\n\ndef calculate_extreme_hygiene(guidelines):\n    score = 0\n\n    \n    mask_required = False\n    for line in guidelines.split('\\n'):\n        if 'wear'in line.lower() and 'facemask'in line.lower():\n            mask_required = True\n    \n    if mask_required:\n        score += 1\n\n    \n    social_distancing_advised = False\n    for line in guidelines.split('\\n'):\n        if ('maintain'in line.lower())and('distance'in line.lower()):\n            social_distancing_advised = True\n            \n    if social_distancing_advised:    \n        score+=1    \n        \n    \n    handwashing_recommended = False\n    for line in guidelines.split('\\n'):\n        if 'regularly'in line.lower() and 'handwashing'in line.lower():\n            handwashing_recommended =True            \n            \n    if handwashing_recommended:    \n        score+=1        \n        \n     \n    respiratory_etiquette_emphasized=False\n    for line in guidelines.split('\\n'):\n        if 'respiratory'in line.lower() and ('cough'in line.lower()or 'sneeze'in line.lower()):\n            respiratory_etiquette_emphasized=True                \n            \n    if respiratory_etiquette_emphasized:    \n        score+=1   \n    \n     \n    isolation_instructions_given = False\n    for line in guidelines.split('\\n'):\n        if 'isolation'in line.lower() and 'self isolate'in line.lower():\n            isolation_instructions_given =True           \n            \n    if isolation_instructions_given:    \n        score+=1          \n          \n    return score\n\nprint(\"Extreme Hygiene Score:\",calculate_extreme_hygiene(guidelines))",
            "id": 537
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (false))) (for_statement left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))) body: (block (if_statement condition: (boolean_operator left: (comparison_operator (string (string_start) (string_content) (string_end)) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) right: (comparison_operator (string (string_start) (string_content) (string_end)) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) consequence: (block (expression_statement (assignment left: (identifier) right: (true))))))) (if_statement condition: (identifier) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (integer))))) (expression_statement (assignment left: (identifier) right: (false))) (for_statement left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))) body: (block (if_statement condition: (boolean_operator left: (parenthesized_expression (comparison_operator (string (string_start) (string_content) (string_end)) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) right: (parenthesized_expression (comparison_operator (string (string_start) (string_content) (string_end)) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) consequence: (block (expression_statement (assignment left: (identifier) right: (true))))))) (if_statement condition: (identifier) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (integer))))) (expression_statement (assignment left: (identifier) right: (false))) (for_statement left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))) body: (block (if_statement condition: (boolean_operator left: (comparison_operator (string (string_start) (string_content) (string_end)) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) right: (comparison_operator (string (string_start) (string_content) (string_end)) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) consequence: (block (expression_statement (assignment left: (identifier) right: (true))))))) (if_statement condition: (identifier) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (integer))))) (expression_statement (assignment left: (identifier) right: (false))) (for_statement left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))) body: (block (if_statement condition: (boolean_operator left: (comparison_operator (string (string_start) (string_content) (string_end)) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) right: (parenthesized_expression (boolean_operator left: (comparison_operator (string (string_start) (string_content) (string_end)) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) right: (comparison_operator (string (string_start) (string_content) (string_end)) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))) consequence: (block (expression_statement (assignment left: (identifier) right: (true))))))) (if_statement condition: (identifier) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (integer))))) (expression_statement (assignment left: (identifier) right: (false))) (for_statement left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))) body: (block (if_statement condition: (boolean_operator left: (comparison_operator (string (string_start) (string_content) (string_end)) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) right: (comparison_operator (string (string_start) (string_content) (string_end)) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) consequence: (block (expression_statement (assignment left: (identifier) right: (true))))))) (if_statement condition: (identifier) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (integer))))) (return_statement (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (identifier)))))))\n**\n",
        "text": " 11",
        "token_cnt": 1389
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_extreme_ear_hygiene(qtips):\n    \"\"\"\n    Calculates how many times more effective it is \n    to use cotton buds instead of q-tips when cleaning ears\n    \n    Args:\n        qtips (int): Number of q-tips used per clean\n\n    Returns:\n        int: The number of washes required to achieve \n            similar effectiveness as one wash with cotton swabs\n    \"\"\"\n    \n    assert isinstance(qtips, int), \"Input must be integer\"\n    assert qtips >=0 , \"Number of q-tips cannot be negative\"\n\n    if qtips == 1: \n        return 365   \n    elif qtips <=24:    \n        return round((365 / qtips) * 7)    \n    else:\n        return 1     \n\n\nif __name__ == '__main__':\n    print(\"For\",calculate_extreme_ear_hygiene(1),\"washes\")\n    print(\"Instead Of \",calculate_extreme_ear_hygiene(24),\"days\")\n    print(\"It takes just over\",calculate_extreme_ear_hygiene(987),\"years!\")",
            "id": 538
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (assert_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (string (string_start) (string_content) (string_end))) (assert_statement (comparison_operator (identifier) (integer)) (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (integer))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (parenthesized_expression (binary_operator left: (integer) right: (identifier))) right: (integer))))))) alternative: (else_clause body: (block (return_statement (integer))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (integer))) (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (integer))) (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (integer))) (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 6",
        "token_cnt": 482
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_low_fitness(individual):\n    \n    if individual['fitness'] < 0.5:\n        \n        if 'bias' in individual:\n            \n            if random() < 0.1:\n                return True, 'Increased chance of mutation due to presence of bias.'\n            else: \n                return False, 'No change in probability of mutation.'\n        \n        else:    \n            individual['bias'] = 0.2\n            return True, 'Added bias node with default value 0.2.'\n    \n    \n    return False, ''",
            "id": 540
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (float)) consequence: (block (if_statement condition: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) consequence: (block (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list)) (float)) consequence: (block (return_statement (expression_list (true) (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (expression_list (false) (string (string_start) (string_content) (string_end)))))))) alternative: (else_clause body: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (float))) (return_statement (expression_list (true) (string (string_start) (string_content) (string_end))))))))) (return_statement (expression_list (false) (string (string_start) (string_end)))))))\n**\n",
        "text": " 10",
        "token_cnt": 319
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_handwash(user_input):\n    \"\"\"\n    This function checks whether user follows proper \n    hand hygiene techniques during workplace.\n\n    Args:\n        user_input (str): User input regarding their \n            handwashing habits. Possible values include\n            \"Yes\", \"No\" and \"N/A\".\n\n    Returns:\n        str: A message indicating whether the user followed \n            appropriate handwashing practices or not.\n\n    Raises:\n        ValueError: If `user_input` is not one of the allowed values.\n    \"\"\"\n    \n    \n    valid_inputs = [\"Yes\", \"No\", \"N/A\"]\n\n    \n    if user_input not in valid_inputs:\n        raise ValueError(\"Invalid input\")\n\n    \n    if user_input == \"Yes\":\n        outcome = \"Congratulations! You follow good hand hygiene practice.\"\n    elif user_input == \"No\":\n        outcome = (\"We recommend you start practicing better hand hygiene immediately. \"\n                   \"Hand sanitizers may help reduce bacteria when soap and water aren't available.\")\n    else:\n        outcome = \"It doesn't appear you washed your hands today. Please do so before leaving this area.\"\n\n    return outcome",
            "id": 541
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (parenthesized_expression (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))))) (return_statement (identifier)))))\n**\n",
        "text": " 6",
        "token_cnt": 393
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import numpy as np\nimport pandas as pd\n\n\ndef transform_high_finance(high_finance_df,trust_name):\n    \"\"\"\n    This function transforms the inputted high finance dataset according \n    to rules defined by the specified trust.\n    \n    Parameters:\n        high_finance_df (pd.DataFrame): A Pandas DataFrame containing \n            hypothetical high finance data.\n        \n        trust_name (str): The name of the trust whose guidelines will\n            be used to transform the data.\n        \n    Returns:\n        pd.DataFrame: A transformed version of the inputted \n        high_finance_df dataframe.\n        \n    Raises:\n        ValueError: If the inputted trust_name is not recognized.\n    \"\"\"\n\n    \n    transformations = {\n        \"Trust1\": [\n            {\"if\":{\"asset_class\":\"Equities\",\"market_cap>=\":\"$50B\"},\n             \"then\":[\"Restructure debt\"],\"else\":[\"No action\"]},\n            {\"if\":{\"liabilities > assets\"},\"then\":[\"Sell assets\"], \n             \"else\":[\"No action\"]}\n        ],\n        \"Trust2\":[\n            {\"if\":{\"asset_class == 'Bonds' & rating <='BBB-'\"}},\n            {\"if\":{\"annual income >= $300k\"}},\n            {\"then\":[\"Hold asset class\"],\n             \"else\":[\"Reduce exposure to bonds\",\n                     \"Invest more aggressively elsewhere\"]}\n        ]\n    }\n\n    \n    if trust_name not in transformations:\n        raise ValueError(\"Invalid trust name\")\n\n    \n    for index,row in high_finance_df.iterrows():\n\n        \n        applied_transformations = []\n    \n        \n        for rule in transformations[trust_name]:\n        \n            \n            if \"if\" in rule:\n            \n                \n                cond_expr = rule[\"if\"]\n        \n                \n                eval_result = eval(cond_expr.format(**row))\n        \n                \n                if eval_result:\n                \n                    \n                    if \"then\" in rule:\n                        \n                        applied_transformations += rule['then']\n                        \n                    \n                    elif \"else\" in rule:\n                        \n                        applied_transformations += rule['else']\n                \n            else:\n                \n                applied_transformations.append(rule)\n                \n        \n        for trans in applied_transformations:\n            exec(trans.strip())\n            \n    return high_finance_df\n\n\nhigh_finance_df = pd.read_csv('high_finance_data.csv')\ntransformed_df = transform_high_finance(high_finance_df,\"Trust1\")\nprint(transformed_df)",
            "id": 543
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (list (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))))) (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end))))) (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (set (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end))))))) (pair key: (string (string_start) (string_content) (string_end)) value: (list (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (set (string (string_start) (string_content) (string_end))))) (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (set (string (string_start) (string_content) (string_end))))) (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) body: (block (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (identifier) right: (subscript value: (identifier) subscript: (identifier)) body: (block (if_statement condition: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (dictionary_splat (identifier)))))))) (if_statement condition: (identifier) consequence: (block (if_statement condition: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))))))) alternative: (else_clause body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))))))) (return_statement (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))\n**\n",
        "text": " 10",
        "token_cnt": 1385
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import requests\nfrom bs4 import BeautifulSoup\n\n\ndef get_exam_results(university):\n    \n    page = requests.get(\"https://example.edu/exams\")\n    soup = BeautifulSoup(page.content, \"html.parser\")\n    \n    \n    tables = soup.find_all('table')\n    exam_result_table = [\n        t for t in tables \n        if 'Examination Results' in str(t)\n    ][0]\n\n    \n    rows = exam_result_table.find_all('tr')\n    headers = [th.text.strip() for th in rows[0].find_all('th')]\n    entries = [[td.text.strip() for td in row.find_all('td')] for row in rows[1:]]\n    return {h: e[i] for h,e in zip(headers,entries)}\n    \n\n\nCRITERIA = [\n    ('University Name', lambda u: u['Name']),\n    ('Total Students', int),\n    ('Pass Rate', float),\n    ('Course Difficulty', float),\n    ('Facilities Quality', float),\n    ('Student Satisfaction', float),\n]\n\n\ndef evaluate_univeristy(data):\n    score = sum((c[1](u[c[0]]) * c[2] \n                for c in CRITERIA)) / sum(c[2] for c in CRITERIA)\n    return {'Score':score}\n    \n    \nif __name__ == '__main__':    \n    \n    uni_results = {\n        u['Name']: get_exam_results(u) for u in UNIVERSITIES\n    }\n    \n    \n    scores = sorted([evaluate_univeristy(r) \n                    for r in uni_results.values()], \n                   key=lambda s: s['Score'], reverse=True)\n    \n    print(\"Overall Best University:\")\n    best_uni = scores[0]['University Name']\n    print(best_uni)",
            "id": 544
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (list_comprehension body: (identifier) (for_in_clause left: (identifier) right: (identifier)) (if_clause (comparison_operator (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (identifier)))))) subscript: (integer)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) (for_in_clause left: (identifier) right: (call function: (attribute object: (subscript value: (identifier) subscript: (integer)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (list_comprehension body: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) (for_in_clause left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (for_in_clause left: (identifier) right: (subscript value: (identifier) subscript: (slice (integer))))))) (return_statement (dictionary_comprehension body: (pair key: (identifier) value: (subscript value: (identifier) subscript: (identifier))) (for_in_clause left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))))))) (expression_statement (assignment left: (identifier) right: (list (tuple (string (string_start) (string_content) (string_end)) (lambda parameters: (lambda_parameters (identifier)) body: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (tuple (string (string_start) (string_content) (string_end)) (identifier)) (tuple (string (string_start) (string_content) (string_end)) (identifier)) (tuple (string (string_start) (string_content) (string_end)) (identifier)) (tuple (string (string_start) (string_content) (string_end)) (identifier)) (tuple (string (string_start) (string_content) (string_end)) (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (generator_expression body: (binary_operator left: (call function: (subscript value: (identifier) subscript: (integer)) arguments: (argument_list (subscript value: (identifier) subscript: (subscript value: (identifier) subscript: (integer))))) right: (subscript value: (identifier) subscript: (integer))) (for_in_clause left: (identifier) right: (identifier))))) right: (call function: (identifier) arguments: (generator_expression body: (subscript value: (identifier) subscript: (integer)) (for_in_clause left: (identifier) right: (identifier))))))) (return_statement (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (dictionary_comprehension body: (pair key: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) value: (call function: (identifier) arguments: (argument_list (identifier)))) (for_in_clause left: (identifier) right: (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list_comprehension body: (call function: (identifier) arguments: (argument_list (identifier))) (for_in_clause left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (keyword_argument name: (identifier) value: (lambda parameters: (lambda_parameters (identifier)) body: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (keyword_argument name: (identifier) value: (true)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (subscript value: (identifier) subscript: (integer)) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))))\n**\n",
        "text": " 10",
        "token_cnt": 1547
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_low_nose(\n    patient_age, \n    symptoms, \n    recent_travel, \n    exposure_to_illness\n):\n\n    \n    RESPONSES = {\n        \"yes\": (\"Low nose care may be necessary.\",), \n        \"no\": (\"No further action needed at this time.\"), \n    }\n    \n    \n    if all([patient_age < 2, symptoms == 'congestion', not recent_travel]):\n        return random.choice(RESPONSES['yes'])\n    elif any([recent_travel, exposure_to_illness]) and patient_age >= 65:\n        return random.choice(RESPONSES['yes'])\n    else:\n        return random.choice(RESPONSES['no'])\n    \n\nprint(determine_low_nose(70, 'discharge', False, True))",
            "id": 547
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (tuple (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (parenthesized_expression (string (string_start) (string_content) (string_end))))))) (if_statement condition: (call function: (identifier) arguments: (argument_list (list (comparison_operator (identifier) (integer)) (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) (not_operator argument: (identifier))))) consequence: (block (return_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) alternative: (elif_clause condition: (boolean_operator left: (call function: (identifier) arguments: (argument_list (list (identifier) (identifier)))) right: (comparison_operator (identifier) (integer))) consequence: (block (return_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))))) alternative: (else_clause body: (block (return_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer) (string (string_start) (string_content) (string_end)) (false) (true)))))))\n**\n",
        "text": " 10",
        "token_cnt": 502
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_trust(state):\n    \n    if state['node'] == 'Laundromat':\n        return 1\n    \n    elif state['node'] == 'Washed' or state['node'] == 'Unwashed':\n        washed = True if state['node'] == 'Washed' else False\n        \n        \n        if not any([\n            \n            ('Dryer broke down', True), \n            \n            (f'{SEVERITY[stain]} Stain', True) if stain in SEVERITY else None, \n            \n            (None, washed)]):\n            \n            new_trust = max((\n                TRUST_CHANGE['initial'] * (1 + TRUST_CHANGE['extra']), \n                TRUST_FLOOR))\n                \n            return int(new_trust*100)/100\n    \n        \n        child_states = [\n            {'node':'Dryer'}, \n            {'node':f\"{state['node']}\"} if washed else {'node':f\"Not {state['node']}\"}]\n        \n        updated_child_states = []\n        for cs in child_states:\n            updated_cs = update_trust(cs)\n            updated_child_states.append({'node':cs['node'], 'trust':updated_cs})\n            \n        \n        best_child = max(updated_child_states, key=lambda x:x['trust'])\n\n        return best_child['trust']\n    \n\ntest_state = {'node':'Laundromat'}\nprint(update_trust(test_state))",
            "id": 550
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (integer))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end))) right: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (conditional_expression (true) (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end))) (false)))) (if_statement condition: (not_operator argument: (call function: (identifier) arguments: (argument_list (list (tuple (string (string_start) (string_content) (string_end)) (true)) (conditional_expression (tuple (string (string_start) (interpolation expression: (subscript value: (identifier) subscript: (identifier))) (string_content) (string_end)) (true)) (comparison_operator (identifier) (identifier)) (none)) (tuple (none) (identifier)))))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (tuple (binary_operator left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (parenthesized_expression (binary_operator left: (integer) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (identifier)))))) (return_statement (binary_operator left: (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (integer)))) right: (integer))))) (expression_statement (assignment left: (identifier) right: (list (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))) (conditional_expression (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_end)))) (identifier) (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (lambda parameters: (lambda_parameters (identifier)) body: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))))) (return_statement (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier)))))))\n**\n",
        "text": " 4",
        "token_cnt": 1169
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_high_toilet_hygiene(consent):\n    \"\"\"Transform high toilet hygiene by avoiding contamination through \n    expert decisions based on given consents.\"\"\"\n\n    \n    conditions = {\n        \"yes\": clean_restrooms(),\n        \"no\": inform_public()\n    }\n    \n    \n    return conditions[consent]\n\n\n\ndef clean_restrooms():\n    print(\"Restroom cleaning crew dispatched!\")\n    return \"Restrooms cleaned.\"\n\n\ndef inform_public():\n    print(\"Posters posted reminding people of proper hand washing.\")\n    return \"Public notified.\"",
            "id": 552
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (call function: (identifier) arguments: (argument_list))) (pair key: (string (string_start) (string_content) (string_end)) value: (call function: (identifier) arguments: (argument_list)))))) (return_statement (subscript value: (identifier) subscript: (identifier))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (string (string_start) (string_content) (string_end))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (string (string_start) (string_content) (string_end))))))\n**\n",
        "text": " 5",
        "token_cnt": 311
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_low_social_media(data):\n    \"\"\"Transform low social media engagement metrics into higher values.\"\"\"\n\n    \n    new_data = []\n    \n    \n    for index, row in enumerate(data):\n        responsibility = row['Responsibility']\n        \n        \n        if responsibility == 'Content Creation':\n            content_score = row['Score']\n            \n            \n            if content_score < 4:\n                \n                new_row = {'Responsibility': responsibility,\n                           'Score': 8}\n                \n            \n            else:\n                new_row = {'Responsibility': responsibility,\n                           'Score': content_score}\n                \n        elif responsibility == 'Community Management':\n            community_score = row['Score']\n        \n            \n            if community_score < 3:\n                \n                new_row = {'Responsibility': responsibility,\n                           'Score': 6}\n                \n            \n            else:\n                new_row = {'Responsibility': responsibility,\n                           'Score': community_score}\n                    \n        elif responsibility == 'Influencer Outreach':\n            influencer_score = row['Score']\n        \n            \n            if influencer_score < 2:\n                \n                new_row = {'Responsibility': responsibility,\n                           'Score': 5}\n                \n            \n            else:\n                new_row = {'Responsibility': responsibility,\n                           'Score': influencer_score}\n\n        \n        new_data.append(new_row)\n        \n    return new_data",
            "id": 553
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier))) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier))))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)))))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier))))))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (return_statement (identifier)))))\n**\n",
        "text": " 6",
        "token_cnt": 940
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_low_eye_hygiene(bias):\n    \"\"\"Transforms low eye hygiene data into usable insights for professionals\n\n    Args:\n        bias (str): The type of bias present in the input data\n\n    Returns:\n        str: A markdown table containing relevant information about managing \n        eye irritation based on the provided bias type\n    \n    Raises:\n        ValueError: If the specified bias type is not recognized\n        \n    \"\"\"\n    \n    \n    plans = {\n        \"age\": \"As people age, their eyes become more sensitive to light and dryer.\",\n        \"gender\": \"Women tend to experience more dryness due to hormonal changes.\",\n        \"environmental factors\": \"Pollution, smoke, dust, and other airborne particles can cause irritation.\"\n    }\n\n    \n    if bias in plans:\n        return f\"\n    else:\n        raise ValueError(\"Invalid bias type\")",
            "id": 555
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement) (ERROR (string_start)) (expression_statement (assignment left: (identifier) (ERROR (identifier)) type: (type (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 274
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def dry_air(humidity):\n    \n    if (humidity < 40):\n        return 60\n    \n    \n    return humidity\n\n\n\ntemp = float(input(\"Enter Temperature:\"))\nhumidity = float(input(\"Enter Humidity:\"))\n\n\nwetbulb = 0.378 * temp + (0.155 * humidity) - 0.028 * temp*humidity\nprint(\"Wet Bulb Temp:\", round(wetbulb, 2), \"°C\")\n\n\nnew_humidity = dry_air(humidity)\n\n\nprint(\"Humidity:\", int(new_humidity), \"%\")",
            "id": 558
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (integer))) consequence: (block (return_statement (integer)))) (return_statement (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (float) right: (identifier)) right: (parenthesized_expression (binary_operator left: (float) right: (identifier)))) right: (binary_operator left: (binary_operator left: (float) right: (identifier)) right: (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (identifier) (integer))) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (identifier))) (string (string_start) (string_content) (string_end))))))\n**\n",
        "text": " 6",
        "token_cnt": 447
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\n\n\ndef calculate_extreme_hygiene(reliability):\n    \"\"\"\n    Calculates extreme hygeine score given topic reliability\n\n    Args:\n        reliability (float): Topic reliablity between 0 and 1\n    \n    Returns:\n        float: Extreme hygentie score between 0 and 1 \n    \"\"\"\n    \n    df = pd.read_csv(\"reliabilities.csv\")\n\n    \n    best_answer = max(df[\"reliability\"])\n\n    \n    if reliability > best_answer:\n\n        \n        questions = pd.read_csv(\"dryruns.csv\")\n        relevant_questions = [\n            q for q in questions[\"question\"] if \"cough etiquette\" in q.lower()\n        ]\n        \n        \n        total = sum([get_reliability(q) for q in relevant_questions])\n        count = len(relevant_questions)\n        avg_reliability = round((total / count),2)\n    \n        \n        new_row = {\n            \"topic\": \"Coughing and sneezing etiquette\", \n            \"cough_etiquette\": f\"{avg_reliability}\", \n            \"reliability\": reliability\n        }\n        df = df.append(new_row, ignore_index=True)\n    \n        return reliability\n    \n    else:\n        print(f\"Current reliability ({reliability}) not high enough.\")\n        return None\n    \n    \n    \ndef get_reliability(question):\n    \"\"\"\n    Gets reliability score for a specific question \n\n    Args: \n        question (str): Question asked by stuents during classtime\n        \n    Returns:\n        int: Relibility score between 0 and 5\n    \"\"\"    \n    \n    cleaned_question = re.sub(\"[^a-zA-Z0-9\\s]\", \"\", str(question).strip().lower())\n    \n    \n    tokens = word_tokenize(cleaned_question)\n    \n    \n    filtered_tokens = [word for word in tokens if word not in stopwords.words('english')]\n    \n    \n    lemmed_tokens = [WordNetLemmatizer().lemmatize(token) for token in filtered_tokens]\n    \n    \n    bow = CountVectorizer(stop_words='english').fit(lemmed_tokens)\n    bag_of_words = bow.transform(lemmed_tokens).toarray()\n    \n    \n    nb = MultinomialNB()\n    predicted = nb.predict(bag_of_words)\n    \n    \n    return predicted[0]\n\n    \n    \n\nif __name__ == \"__main__\":    \n\n    \n    for topic in [\"Topic A\",\"Topic B\"]:\n        calculate_extreme_hygiene(topic_reliability)",
            "id": 560
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (identifier) (for_in_clause left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (if_clause (comparison_operator (string (string_start) (string_content) (string_end)) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list_comprehension body: (call function: (identifier) arguments: (argument_list (identifier))) (for_in_clause left: (identifier) right: (identifier))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (parenthesized_expression (binary_operator left: (identifier) right: (identifier))) (integer))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (interpolation expression: (identifier)) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (true)))))) (return_statement (identifier))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))) (return_statement (none))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_end)) (call function: (attribute object: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (identifier))) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (identifier) (for_in_clause left: (identifier) right: (identifier)) (if_clause (comparison_operator (identifier) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (call function: (attribute object: (call function: (identifier) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (identifier))) (for_in_clause left: (identifier) right: (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (return_statement (subscript value: (identifier) subscript: (integer))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (for_statement left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))))))\n**\n",
        "text": " 4",
        "token_cnt": 1490
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "irritant_level = float(input(\"Enter level of irritancy (0 - 1): \"))\neye_condition = input(\"Enter condition of eyes (dry, redness, burning etc.) \")\nconsent = input(\"Do you give consent? [y/n]: \").lower()\n\n\ndef calculate_low_eye_hygiene():\n    \n    if irritant_level >= .5 and eye_condition == \"burning\":\n        print(\"Wash eyes immediately\")\n\n    elif irritant_level >= .3 and eye_condition in [\"red\", \"itchy\"]:\n        print(\"Use artificial tears\")\n\n    else: \n        print(\"No action required\")\n\n\nif consent == 'yes':\n    calculate_low_eye_hygiene()\nelif consent =='no':\n    print(\"Seek medical attention\")\n\nelse:\n    print(\"Invalid entry. Please try again.\")",
            "id": 562
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)))) (function_definition name: (identifier) parameters: (parameters) body: (block (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (float)) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (float)) right: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list)))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 5",
        "token_cnt": 616
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_handwash(consent):\n    \"\"\"\n    This function takes input from user regarding whether they \n    want to participate in new study about improving hand hygiene techniques\n    \n    Parameters:\n        - consent (str) : User provided information indicating \n            whether they wish to take part in the study or not\n        \n    Returns:    \n        - message (str) : Informational message sent back to user\n            informing them about next steps depending upon their choice\n            \n    Raises: \n        ValueError : If invalid value is passed for 'consent' parameter    \n\n    \"\"\"    \n    \n    consent_message = (\"Thank you for sharing your feedback! Your responses will help us improve our products and services.\")\n    decline_message = (\"We appreciate you taking the time to share your thoughts with us. However, we respectfully request that you do not provide any personal health information such as symptoms or diagnoses without first consulting with a qualified medical professional.\")\n    error_message = (\"Sorry, there was an issue processing your request. Please try again later.\")\n    \n    \n    if consent not in [\"yes\", \"no\"]:\n        raise ValueError(\"Invalid value '{}' entered for 'consent' parameter. Valid values are ['yes', 'no']\".format(consent))   \n    \n    \n    if consent == \"yes\":\n        return consent_message\n    elif consent == \"no\":\n        return decline_message\n    else:\n        print(\"Error\")",
            "id": 565
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (parenthesized_expression (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (parenthesized_expression (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (parenthesized_expression (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (identifier))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (identifier)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 410
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_extreme_clothing_cleanliness(stains):\n    \"\"\"This function determines the extreme clothing cleanliness based \n    on the stain removal techniques used.\"\"\"\n\n    \n    highest_level = \"Beginner\"\n    lowest_level = \"Expert\"\n    \n    \n    for technique in stains:\n        if len([method for method in stains[technique] \n                if method not in [\"None\", None]]) > \\\n                len([method for method in stains[highest_level] \n                    if method not in [\"None\", None]]):\n            highest_level = technique\n        \n        elif len([method for method in stains[technique] \n                  if method not in [\"None\", None]]) < \\\n                  len([method for method in stains[lowest_level] \n                      if method not in [\"None\", None]]):\n            lowest_level = technique\n            \n    return f\"{highest_level} ({len([method for method in stains[highest_level] \n                                        if method not in ['None', None]])}), \"\\\n           f\"{lowest_level} ({len([method for method in stains[lowest_level]\n                                        if method not in ['None', None]])})\"\n\n\n\nstains = {\n    'Technique': [\n        'Bleach (Chlorine bleach)', \n        'Oxygen Bubble Cleaner', \n        'Enzyme Prewash', \n        'Steam Pressure Washing'],\n    'Stain Type': [\n        'Blood', \n        'Coffee', \n        'Grass', \n        'Mud'],\n    'Test Color': [\n        '\n        '\n        '\n        '\n    'Before & After Pics?': [True, False, True, False],\n    'Responsibility': [\n        'Manufacturer', \n        'Retailer', \n        'Launderer', \n        'Consumer']\n}\nprint(determine_extreme_clothing_cleanliness(stains))",
            "id": 566
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (list_comprehension body: (identifier) (for_in_clause left: (identifier) right: (subscript value: (identifier) subscript: (identifier))) (if_clause (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (none))))))) (line_continuation) (call function: (identifier) arguments: (argument_list (list_comprehension body: (identifier) (for_in_clause left: (identifier) right: (subscript value: (identifier) subscript: (identifier))) (if_clause (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (none)))))))) consequence: (block (expression_statement (assignment left: (identifier) right: (identifier)))) alternative: (elif_clause condition: (comparison_operator (call function: (identifier) arguments: (argument_list (list_comprehension body: (identifier) (for_in_clause left: (identifier) right: (subscript value: (identifier) subscript: (identifier))) (if_clause (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (none))))))) (line_continuation) (call function: (identifier) arguments: (argument_list (list_comprehension body: (identifier) (for_in_clause left: (identifier) right: (subscript value: (identifier) subscript: (identifier))) (if_clause (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (none)))))))) consequence: (block (expression_statement (assignment left: (identifier) right: (identifier)))))))) (return_statement (concatenated_string (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (call function: (identifier) arguments: (argument_list (list_comprehension body: (identifier) (for_in_clause left: (identifier) right: (subscript value: (identifier) subscript: (identifier))) (if_clause (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (none)))))))) (string_content) (string_end)) (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (call function: (identifier) arguments: (argument_list (list_comprehension body: (identifier) (for_in_clause left: (identifier) right: (subscript value: (identifier) subscript: (identifier))) (if_clause (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (none)))))))) (string_content) (string_end)))))) (ERROR (identifier) (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) (string (string_start) (string_content) (string_end)) (subscript value: (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (ERROR) subscript: (true) subscript: (false) subscript: (true) subscript: (false)) (ERROR (string (string_start) (string_content) (string_end)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier)))))))\n**\n",
        "text": " 6",
        "token_cnt": 1248
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import os\nfrom datetime import date\n\n\ndef update_record(reliable):\n    \"\"\"Update record function.\"\"\"\n\n    today = date.today()\n    filename = \"high_ear_hygiene_\" + str(today) + \".txt\"\n    \n    \n    if not os.path.exists(\"data\"):\n        os.mkdir(\"data\")\n        \n    \n    with open(os.path.join(\"data\",filename), 'a') as f:\n        \n        \n        if reliable == True:\n            print(f\"\\nDry Run Info:\\tUpdating {filename}...\")\n        \n        elif reliable == False:\n            print(f\"\\nInvalid Data Found!\\tSkipping {filename}.\\n\")\n            \n            return None\n\n        \n        f.write(f\"{'*'*50}\\n{today:%B %d, %Y}\\n{'*'*50}\\nReliable Information:\"\n                f\"\\nOuter ear canal must be cleaned daily.\\nNo Q-tips allowed.\"\n                f\"\\n\\nUnreliable Source:\\nA random website.\")\n    \n    \nif __name__ == '__main__':    \n    reliable = input(\"\\nIs this source reliable? [y/N]: \")\n    \n    if reliable.lower().strip()[0] == 'y':\n        update_record(True)\n            \n    elif reliable.lower().strip()[0] == 'n':\n        update_record(False)\n        \n    \nprint(\"\\nScript Complete!\")",
            "id": 567
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (call function: (identifier) arguments: (argument_list (identifier)))) right: (string (string_start) (string_content) (string_end))))) (if_statement condition: (not_operator argument: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (with_statement (with_clause (with_item value: (as_pattern (call function: (identifier) arguments: (argument_list (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier))) (string (string_start) (string_content) (string_end)))) alias: (as_pattern_target (identifier))))) body: (block (if_statement condition: (comparison_operator (identifier) (true)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (interpolation expression: (identifier)) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (false)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (interpolation expression: (identifier)) (string_content (escape_sequence)) (string_end))))) (return_statement (none))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (concatenated_string (string (string_start) (interpolation expression: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (integer))) (string_content (escape_sequence)) (interpolation expression: (identifier) format_specifier: (format_specifier)) (string_content (escape_sequence)) (interpolation expression: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (integer))) (string_content (escape_sequence)) (string_end)) (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)) (string (string_start) (string_content (escape_sequence) (escape_sequence) (escape_sequence)) (string_end)))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))) (if_statement condition: (comparison_operator (subscript value: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list)) subscript: (integer)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (true))))) alternative: (elif_clause condition: (comparison_operator (subscript value: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list)) subscript: (integer)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (false))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))))\n**\n",
        "text": " 4",
        "token_cnt": 1169
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_low_food_hygiene(reliability):\n    \"\"\"\n    This function checks whether food has been handled properly according \n    to safe food handling guidelines. It takes as input the reliability of \n    the person who performed the task (e.g., \"Engineer for experts\") and returns \n    True if the food was handled correctly, False otherwise.\n\n    Args:\n        reliability (str): The level of expertise of the person performing \n            the task (e.g., \"Engineer for experts\").\n\n    Returns:\n        bool: Whether the food was handled correctly or not.\n        \n    Raises:\n        ValueError: If the provided reliability value is not recognized.\n    \"\"\"\n    \n    \n    \n    reliability_to_risk = {\n        'Unskilled worker': 5, \n        'Semiskilled worker': 10, \n        'Skilled worker': 20, \n        'Engineering technician': 30, \n        'Engineer for routine work': 40, \n        'Engineer for noncritical tasks': 60, \n        'Engineer for critical tasks': 80, \n        'Engineer for complex tasks': 90, \n        'Engineer for experts': 95\n    }\n    \n    try:    \n        \n        risk_level = reliability_to_risk[reliability]\n    \n        \n        import random\n        rand_num = random.random()\n    \n        \n        if rand_num < (risk_level / 100):\n            return True\n        else:\n            return False\n            \n    except KeyError:\n        raise ValueError(\"Invalid reliability value provided.\")",
            "id": 568
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer))))) (try_statement body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))) (import_statement name: (dotted_name (identifier))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (parenthesized_expression (binary_operator left: (identifier) right: (integer)))) consequence: (block (return_statement (true))) alternative: (else_clause body: (block (return_statement (false)))))) (except_clause (identifier) (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))\n**\n",
        "text": " 5",
        "token_cnt": 499
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_high_footcare(trust):\n    \"\"\"This function updates the level of trust given to expert advice regarding \n    high footcare by considering whether they trim their own toe nails or not\n\n    Args:\n        trust (int): The current level of trust given to this expert\n    \n    Returns:\n        int: Updated level of trust after considering new information about them\n    \"\"\"\n    \n    if not do_you_trim_your_toe_nails():\n        return max(0, trust - 1)\n\n    \n    else:\n        return min(10, trust + 2)",
            "id": 569
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (not_operator argument: (call function: (identifier) arguments: (argument_list))) consequence: (block (return_statement (call function: (identifier) arguments: (argument_list (integer) (binary_operator left: (identifier) right: (integer)))))) alternative: (else_clause body: (block (return_statement (call function: (identifier) arguments: (argument_list (integer) (binary_operator left: (identifier) right: (integer)))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 163
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_high_earnig(income):\n    \"\"\"\n    This function updates high earning person status \n    by seeking professional help when income > 200k\n    \n    Args:\n        income (int): The current monthly income\n        \n    Returns:\n        str: A message indicating whether the user needs \n        to seek professional advice or not\n    \"\"\"\n\n    \n    if income >= 200000:\n        \n        \n        return \"Seeking professional tax adviser as income exceeded 200K\"\n    \n    else:\n    \n        \n        return \"No need to seek professional help as income is below 200K\"",
            "id": 571
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 5",
        "token_cnt": 127
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_nose(reliability):\n    \"\"\"\n    This function takes input from user regarding their level \n    of confidence (reliability) in given output\n    \n    Args:\n        reliability (float): A value between [0,1] indicating \n            degree of certainty about the outcome\n        \n    Returns:\n        str: Output message depending upon the reliability score\n            obtained\n            \n    Raises:\n        ValueError: If invalid input type is provided    \n    \"\"\"\n    \n    if isinstance(reliability, float):    \n        pass\n    else:\n        raise ValueError(\"Invalid Input Type\")    \n\n    \n    msgs = {\n        0.9 : \"Highly Confident\", \n        0.75: \"Somewhat Confident\",\n        0.5 : \"Uncertain\",\n        0.25: \"Very Unlikely\"\n    }\n    \n    \n    print(\"*Dry Run*:\", end=\" \")\n    for key,val in msgs.items():\n        if reliability >=key:\n            print(\"{} ({:.0%}) | \".format(val,key),end=\"\")\n    print()\n    \n    \n    if reliability>=0.9:\n        return msgs[0.9]\n    elif reliability>=0.75:\n        return msgs[0.75]\n    elif reliability>=0.5:\n        return msgs[0.5]\n    else:\n        return msgs[0.25]\n    \n\nif __name__ == '__main__':\n    while True:\n        try:\n            reliability=input(\"\\nEnter your level of confidence (on a scale of 0 to 1):\\t\")\n            break\n        except:\n            print(\"Error! Please enter a number.\")\n    result=transform_nose(float(reliability))\n    print(\"Your transformed nose looks like this:\\n\\t\",result,\"\\n\")",
            "id": 574
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) consequence: (block (pass_statement)) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (float) value: (string (string_start) (string_content) (string_end))) (pair key: (float) value: (string (string_start) (string_content) (string_end))) (pair key: (float) value: (string (string_start) (string_content) (string_end))) (pair key: (float) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) body: (block (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))) (keyword_argument name: (identifier) value: (string (string_start) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (subscript value: (identifier) subscript: (float)))) alternative: (elif_clause condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (subscript value: (identifier) subscript: (float))))) alternative: (elif_clause condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (subscript value: (identifier) subscript: (float))))) alternative: (else_clause body: (block (return_statement (subscript value: (identifier) subscript: (float)))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (while_statement condition: (true) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)))))) (break_statement)) (except_clause (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)) (identifier) (string (string_start) (string_content (escape_sequence)) (string_end))))))))\n**\n",
        "text": " 10",
        "token_cnt": 908
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import os\nfrom pathlib import Path\n\n\ndef display_toilet_tips():\n    \n    responsibilities = [\"wipe\", \"lid\", \"seat\"]\n    responses = [\n        \"* Wipe from front to back after every use.\", \n        \"* Put the lid down when not in use.\",\n        \"* Clean the seat regularly.\"\n    ]\n\n    \n    cwd = str(Path.cwd())\n    \n    \n    filename = f\"{cwd}/high_toilet_hygiene.txt\"\n    if os.path.exists(filename):\n        print(\"File already exists.\")\n        return\n\n    \n    with open(filename, 'w') as file:\n\n        \n        for i in range(len(responsibilities)):\n            print(f\"\\n{i+1}. {responsibilities[i]}\")\n\n            \n            inp = input(\"> \")\n            \n            \n            while True:\n                try:\n                    index = int(inp) - 1\n                    break\n                except ValueError:\n                    print(\"Invalid input. Please enter a number between 1 and 3:\")\n                    inp = input(\"> \")\n                    \n            \n            file.write(responses[index] + \"\\n\\n\")\n            \nif __name__ == \"__main__\":\n    display_toilet_tips()",
            "id": 576
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))) (expression_statement (assignment left: (identifier) right: (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end)))) (if_statement condition: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement))) (with_statement (with_clause (with_item value: (as_pattern (call function: (identifier) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))) alias: (as_pattern_target (identifier))))) body: (block (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (binary_operator left: (identifier) right: (integer))) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (identifier))) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (while_statement condition: (true) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (integer)))) (break_statement)) (except_clause (identifier) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (subscript value: (identifier) subscript: (identifier)) right: (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)))))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 6",
        "token_cnt": 911
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_investment_strategy(trust):\n    \"\"\"Determine investment strategy based on client trust level\n    \n    Args:\n        trust (int): Client trust level from 0 to 100\n        \n    Returns:\n        str: Investment strategy ('conservative', 'moderate', or 'aggressive')\n    \"\"\"\n    \n    assert isinstance(trust, int) and 0 <= trust <= 100, \"Invalid trust level\"\n\n    if trust >= 85: \n        return 'aggressive'\n    elif trust >= 65:\n        return 'moderate'\n    else:\n        return 'conservative'",
            "id": 577
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (assert_statement (boolean_operator left: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) right: (comparison_operator (integer) (identifier) (integer))) (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 235
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom xgboost import XGBClassifier\nfrom imblearn.over_sampling import SMOTE\n\n\ndef main():\n    \n    df = pd.read_csv(\"data.csv\")\n\n    \n    y = df[\"handwashing\"]\n    X = df[df.columns.difference([\"handwashing\"])]\n    \n    \n    X_train, X_test, y_train, y_test = train_test_split(X, y)\n\n    \n    smote = SMOTE()\n    X_train, y_train = smote.fit_resample(X_train, y_train)\n\n    \n    lr = LogisticRegression()\n    lr.fit(X_train, y_train)\n\n    xgbc = XGBClassifier()\n    xgbc.fit(X_train, y_train)\n\n    \n    print(\"Logistic Regression Accuracy:\", lr.score(X_test, y_test))\n    print(\"XG Boost Classifier Accuracy:\", xgbc.score(X_test, y_test))\n\n    \n    pred_lr = lr.predict(X_test)\n    pred_xgbc = xgbc.predict(X_test)\n    num_pos_lr = sum([1 for i in range(len(pred_lr)) if pred_lr[i]==1])\n    num_neg_lr = len(pred_lr)-num_pos_lr\n    prop_pos_lr = (num_pos_lr/len(y_test))*100\n    prop_neg_lr = (num_neg_lr/len(y_test))*100\n    num_pos_xgbc = sum([1 for i in range(len(pred_xgbc)) if pred_xgbc[i]==1])\n    num_neg_xgbc = len(pred_xgbc)-num_pos_xgbc\n    prop_pos_xgbc = (num_pos_xgbc/len(y_test))*100\n    prop_neg_xgbc = (num_neg_xgbc/len(y_test))*100\n    if prop_pos_lr > prop_neg_xgbc:\n        bias = \"Unfair\"\n    elif prop_pos_xgbc > prop_neg_lr:\n        bias = \"Unfair\"\n    else:\n        bias = \"Balanced\"\n\n    \n    print(\"\\nDetermined Bias:\")\n    print(bias)\n\n    \n    def analyze_professional(restaurant):\n        \"\"\"Analyze restaurant for professional\"\"\"\n        url = f\"https://api.example.com/{restaurant}/analysis\"\n        resp = requests.get(url)\n        data = resp.json()[\"results\"]\n\n        \n        ...\n        \n        return result\n\n    \n    analyze_professional(\"Burger King\")\n\n    \n    restaurants = [\"Burger King\", \"McDonald's\", ...]\n    results = [analyze_professional(r) for r in restaurants]\n\n    \n    save_to_file(restaurants, results)\n    \n\nif __name__ == \"__main__\":\n    main()",
            "id": 578
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (pattern_list (identifier) (identifier) (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list_comprehension body: (integer) (for_in_clause left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier)))))) (if_clause (comparison_operator (subscript value: (identifier) subscript: (identifier)) (integer)))))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) right: (integer)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) right: (integer)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list_comprehension body: (integer) (for_in_clause left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier)))))) (if_clause (comparison_operator (subscript value: (identifier) subscript: (identifier)) (integer)))))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) right: (integer)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) right: (integer)))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (subscript value: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (ellipsis)) (return_statement (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (ellipsis)))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (call function: (identifier) arguments: (argument_list (identifier))) (for_in_clause left: (identifier) right: (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 5",
        "token_cnt": 1980
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def display_high_dental_hygiene():\n    \n    age = input(\"Please enter your age:\")\n    \n    \n    try:\n        int(age)\n        \n        \n        if int(age) < 18:\n            print(\"Congratulations! You made it this far without needing braces.\")\n            \n            \n            answer = input(\"Do you brush your teeth twice daily? (y/n): \")\n        \n            \n            if answer == \"y\":\n                print(\"Great job! Keep up the good work and remember to floss as well.\")\n                \n            elif answer == \"n\":\n                print(\"It's never too late to start developing healthy dental hygiene practices.\"\n                      \"\\nFocusing on basic care like regular brushing and flossing can make\"\n                      \"a big difference in long term dental health.\\nRemember to always use\"\n                      \"fluoride toothpaste and a soft bristled toothbrush when brushing,\"\n                      \"and aim to spend at least two minutes doing so.\")\n                \n            else: \n                print(\"Invalid Input\")\n                \n        else:\n            print(\"Sorry, but we cannot offer any advice regarding high dental hygiene\"\n                  \"for individuals over the age of 17.\")\n            \n    except ValueError:\n        print(\"Invalid Input\")\n        \ndisplay_high_dental_hygiene()",
            "id": 582
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (try_statement body: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content (escape_sequence)) (string_end)) (string (string_start) (string_content (escape_sequence)) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))))))) (except_clause (identifier) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list))))\n**\n",
        "text": " 6",
        "token_cnt": 623
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import datetime as dt \n\ndef get_date(day): \n    current_time = dt.datetime.now()\n    date = int(input(\"Enter desired date (in format YYYYMMDD) \"))\n\n    while True: \n        try: \n            selected_date = dt.datetime.strptime(str(date), \"%Y%m%d\")\n            break\n        except ValueError: \n            print(\"Invalid input! Please enter a valid date in YYYYMMDD format.\")\n            continue\n    \n    return selected_date \n\n\ndef schedule_engineer(): \n\n    responsibilities = {\n        1: [\"Design review\", \"Project meeting\"], \n        2: [\"Code debugging\", \"Bug fix\"] \n    }\n\n    today = get_date(current_time.strftime(\"%Y%m%d\"))\n\n    engineer_id = int(input(\"Enter ID of the engineer: \"))\n    responsible_for = int(input(\"Enter the engineer's designated responsibility [1/2]: \"))\n\n    appointments = []\n\n    \n    for day in responsibilities[responsible_for]: \n\n        appointment_time = input(f\"Enter time for {day} ({today.strftime('%A %B %-d')}) \")\n\n        while True: \n            try: \n                start_time = dt.datetime.combine(selected_date, appointment_time).time()\n                end_time = start_time + dt.timedelta(hours=0.5)\n\n                overlap = False\n                for existing_appointment in appointments: \n                    if not (existing_appointment['end'] < start_time <= existing_appointment['start']):\n                        continue\n                    else: \n                        overlap = True\n                        print(\n                            f\"\\nError: Appointment conflicts with another event!\\nExisting Event:\\\n                                \\nStart Time:{existing_appointment['start'].strftime('%I:%M %p')} End Time: \\\n                                    {existing_appointment['end'].strftime('%I:%M %p')}\\nNewly Proposed Event:\\\n                                        \\nStart Time: {start_time.strftime('%I:%M %p')} End Time: \\\n                                            {end_time.strftime('%I:%M %p')}\"\n                        )\n                        confirm = str(input(\"\\nDo you want to reschedule? (y/N): \")).lower().strip()[0]\n\n                        if confirm == 'y': \n                            pass\n                        elif confirm != 'n': \n                            raise ValueError('Invalid Input!')\n                        else: \n                            exit()\n                        \n                if not overlap: \n                    appointments.append({'title': day, 'start': start_time, 'end': end_time})\n                    print(f\"{day}: Scheduled from {start_time.strftime('%I:%M %p')} to\\\n                        \\n{end_time.strftime('%I:%M %p')}\")\n\n            except ValueError: \n                print(\"Invalid input! Please provide a valid time in 24hr HH:MM format.\")\n\n    \nif __name__ == '__main__': \n    schedule_engineer()",
            "id": 583
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (while_statement condition: (true) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))) (string (string_start) (string_content) (string_end)))))) (break_statement)) (except_clause (identifier) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (continue_statement)))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (integer) value: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) (pair key: (integer) value: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (identifier) right: (subscript value: (identifier) subscript: (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (string_content) (string_end)))))) (while_statement condition: (true) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (float))))))) (expression_statement (assignment left: (identifier) right: (false))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (not_operator argument: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (identifier) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) consequence: (block (continue_statement)) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (true))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence)) (interpolation expression: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (string_content (escape_sequence)) (interpolation expression: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (string_content (escape_sequence) (escape_sequence) (escape_sequence)) (interpolation expression: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (string_content (escape_sequence)) (interpolation expression: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (call function: (attribute object: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list)) subscript: (integer)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (pass_statement)) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))))))) (if_statement condition: (not_operator argument: (identifier)) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (string_content (escape_sequence) (escape_sequence)) (interpolation expression: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (string_end)))))))) (except_clause (identifier) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": "ername)) arguments: (argument_list (string (string_start) (string_content)",
        "token_cnt": 2055
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom sklearn import preprocessing\n\n\ndef determine_extreme(df):\n    \"\"\"\n    This function takes dataframe df containing features like price, rating etc \n    related to ridesharing service providers and returns a boolean value indicating whether \n    there exists any provider who provides better deal than others\n    \n    Parameters:\n        - df (pandas DataFrame): Dataframe containing relevant feature columns\n        \n    Returns:\n        - bool: True if there exist atleast one provider offering better deal otherwise False    \n    \"\"\"\n\n    \n    num_cols = [col for col in df.columns if df[col].dtype == \"float64\"]\n    df[num_cols] = df[num_cols].astype(\"float32\")\n\n    \n    scaler = preprocessing.MinMaxScaler()\n    scaled_data = scaler.fit_transform(df)\n\n    \n    scaled_df = pd.DataFrame(scaled_data, columns=df.columns)\n\n    \n    best_provider_index = scaled_df.idxmax(axis=1).tolist()\n\n    \n    if len(best_provider_index) != len(set(best_provider_index)):\n        return True\n\n    else:\n        return False",
            "id": 584
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (identifier) (for_in_clause left: (identifier) right: (attribute object: (identifier) attribute: (identifier))) (if_clause (comparison_operator (attribute object: (subscript value: (identifier) subscript: (identifier)) attribute: (identifier)) (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (call function: (attribute object: (subscript value: (identifier) subscript: (identifier)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (integer)))) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier)))))) consequence: (block (return_statement (true))) alternative: (else_clause body: (block (return_statement (false))))))))\n**\n",
        "text": " 10",
        "token_cnt": 581
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import os\n    from email.mime.text import MIMEText\n    from smtplib import SMTP\n    \n    \n    EMAIL_SUBJECT = \"Reminder - Please make decisions\"\n    EMAIL_BODY = \"\"\"\\\n        Dear Expert,\n        \n        This is just a friendly reminder to please make important decisions regarding your project. \n        Your prompt responses are greatly appreciated! If you need more time to consider our suggestions, feel free to let us know. \n        \n        Thank you again for all your help, we couldn't do this without you!\n    \n        Best regards,\n        [Your Name]\"\"\"\n    SENDER_EMAIL = \"[your gmail address]\"\n    RECEIVER_EMAILS = [\"[email1]\", \"[email2]\"]\n    \n    def send_emails(subject, body):\n        \n        smtp = SMTP(\"smtp.gmail.com\", 587)\n        smtp.ehlo()\n        smtp.starttls()\n        smtp.login(SENDER_EMAIL, \"[your password]\")\n    \n        \n        msg = MIMEMultipart(\"alternative\")\n        msg[\"Subject\"] = subject\n        msg[\"From\"] = SENDER_EMAIL\n        msg[\"To\"] = \", \".join(RECEIVER_EMAILS)\n    \n        \n        part1 = MIMEText(body, \"html\")\n        msg.attach(part1)\n    \n        \n        try:\n            smtp.sendmail(SENDER_EMAIL, RECEIVER_EMAILS, msg.as_string())\n            print(\"Email sent!\")\n        except Exception as e:\n            print(\"Error:\", e)\n    \n        finally:\n            \n            smtp.quit()\n    \n    def main():    \n        \n        while True:\n            choice = input(\"\\nDry Run (y/n)? \")\n            if choice == \"y\":\n                break\n            elif choice == \"n\":\n                pass\n            else: \n                print(\"Invalid input. Try again.\")\n    \n        \n        name = input(\"Please enter your name: \")\n        project = input(\"What is the name of your project? \")\n    \n        \n        if __name__ == '__main__':\n            consent = input(f\"\\n{name}, {project} requires some urgent attention.\\nDo you want to provide feedback?(Y/N)\\n\").lower().strip()[0]\n        \n            if consent == 'y':\n                send_emails(EMAIL_SUBJECT, EMAIL_BODY)\n                \n            elif consent == 'n':\n                print(f\"{name}: Understood. We'll reach out when there's something critical.\")\n                \n            else:\n                print('Invalid Input')\n                \n    if __name__ == '__main__':\n        main()",
            "id": 586
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier) (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content (escape_sequence)) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (integer))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (try_statement body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))))) (finally_clause (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (while_statement condition: (true) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (break_statement)) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (pass_statement))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (subscript value: (call function: (attribute object: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content (escape_sequence) (escape_sequence)) (string_end)))) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list)) subscript: (integer)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 1",
        "token_cnt": 1602
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import requests\nfrom bs4 import BeautifulSoup\n\ndef update_low_finance():\n    \n    url = \"https://www.investopedia.com/articles/072516/the-ultimate-guide-to-stock-market-analysis.asp\"\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36'\n    }\n\n    \n    response = requests.get(url, headers=headers)\n    soup = BeautifulSoup(response.content, 'html.parser')\n\n    \n    articles = soup.find('div', class_='articleBody').text\n    \n    \n    reliable_source = False \n\n    \n    if \"Disclosure:\" not in articles: \n        print(\"Low finance has been updated.\") \n\n        \n        reliable_source = True \n\n    else: \n        print(\"Unable to update low finance due to unreliable source\") \n\n     \n     if reliable_source == True: \n         pass\n\n     elif reliable_source == False:\n         raise ValueError(\"Unreliable Source\") \n\n\nif __name__ == '__main__':\n    update_low_finance()",
            "id": 599
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))) attribute: (identifier)))) (expression_statement (assignment left: (identifier) right: (false))) (if_statement condition: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (true)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (comparison_operator (identifier) (true)) consequence: (block (pass_statement)) alternative: (elif_clause condition: (comparison_operator (identifier) (false)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 6",
        "token_cnt": 650
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_extreme_ear_hygeine(symptoms):\n    \"\"\"\n    This function checks whether seeking professional help for analysis \n    regarding ear hygiene might be necessary based on given symptoms\n\n    Parameters:\n        - symptoms (list): A list containing all observed symptoms\n    \n    Returns:\n        - str: A message indicating whether seeking medical attention is recommended or not\n    \"\"\"\n\n    \n    symptom_severity = {\n        \"Itchiness\": 1, \n        \"Discharge\": 2, \n        \"Redness\": 3, \n        \"Swelling\": 4, \n        \"Pain\": 5\n    }\n\n    \n    total_score = sum([symptom_severity[s] for s in symptoms])\n\n    \n    if total_score >= 3:\n        return (\"Seek immediate medical care as there seems to be severe issues\"\n                \"with your ears' hygiene.\")\n    else:\n        return(\"Don't worry too much about it but you may want to consider seeing\"\n               \"a doctor just to make sure everything is okay.\")",
            "id": 601
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list_comprehension body: (subscript value: (identifier) subscript: (identifier)) (for_in_clause left: (identifier) right: (identifier))))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (parenthesized_expression (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (return_statement (parenthesized_expression (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 403
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_low_fitness(exercise):\n    \"\"\"\n    This function takes input from user regarding their workout routine \n    and returns transformed output after ensuring its fitness level meets minimum criteria\n    \n    Args:\n        exercise (dict): A dictionary containing information about each individual exercise performed during \n            a particular session\n        \n    Returns:\n        dict: The same input dictionary with additional keys indicating whether the given set of exercises\n            was sufficiently challenging enough to improve low fitness levels\n            \n    Raises:\n        ValueError: If any value passed into the function is not of expected type    \n    \"\"\"\n\n    \n    required_keys = [\"name\", \"duration\", \"distance\"]\n    for key in required_keys:\n        if key not in exercise:\n            raise ValueError(\"Invalid input - missing {}\".format(key))\n\n    \n    min_time = timedelta(minutes=30)\n    min_dist = 5\n\n    \n    result = {\"safe\": True}\n\n    \n    tot_time = sum([ex[\"duration\"] for ex in exercise])\n\n    \n    result[\"total_time\"] = tot_time\n\n    \n    if tot_time < min_time:\n        result[\"safe\"] = False\n        result[\"reason\"] = f\"Total time ({tot_time}) spent exercising is below recommended minimum ({min_time})\"\n\n    \n    tot_dist = sum([ex[\"distance\"] for ex in exercise])\n\n    \n    if tot_dist < min_dist:\n        result[\"safe\"] = False\n        result[\"reason\"] = f\"Total distance ({tot_dist}) travelled while exercising is below recommended minimum ({min_dist})\"\n\n    \n    return result",
            "id": 603
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (integer)))))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (true))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list_comprehension body: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (for_in_clause left: (identifier) right: (identifier))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (false))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list_comprehension body: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (for_in_clause left: (identifier) right: (identifier))))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (false))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))))) (return_statement (identifier)))))\n**\n",
        "text": " 10",
        "token_cnt": 828
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_extreme_ear_hygiene(privacy):\n    \"\"\"Calculates the optimal level of ear hygeine based on \n    personal privacy preferences\n\n    Args:\n        privacy (str): A string indicating the desired degree \n            of personal privacy ('public', 'semi-private',\n            or 'private')\n\n    Returns:\n        float: The calculated score between 0 and 1 representing \n            the recommended level of ear hygene\n    \n    Raises:\n        ValueError: If input privacy value is not one of \n            ['public', 'semi-private', 'private']\n        \n    \"\"\"    \n    \n    allowed = [\"public\", \"semi-private\", \"private\"]\n    if privacy not in allowed:\n        raise ValueError(\"Invalid privacy value\")    \n\n    \n    if privacy == \"public\":    \n        score = 0.95       \n    elif privacy == \"semi-private\":    \n        score = 0.8        \n    else:                 \n        score = 0.65      \n\n    return score",
            "id": 604
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (float)))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (float))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (float)))))) (return_statement (identifier)))))\n**\n",
        "text": " 10",
        "token_cnt": 320
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_high_dental_hygiene(data):\n    \"\"\"Transform high dental hygiene: flossing for decision making for beginners.\"\"\"\n\n    \n    age = data['age']\n    gender = data['gender']\n    teeth_condition = data['teeth condition']\n    smoker = data['smoker?']\n    diabetic = data['diabetes?']\n    weight = data['weight (kg)']\n    \n    \n    if age < 20 and gender == 'Male' and teeth_condition >= 3 and not smoker and not diabetic and weight <= 85:\n        message = \"Congratulations! Your current habits are great for maintaining good dental health.\"\n        \n    elif age > 40 and gender != 'Female':\n        message = \"It seems like you may need to make some changes to improve your dental health. Consider seeing a dentist regularly and adjusting your daily routine accordingly.\"\n        \n    else:    \n        message = \"Remember to brush twice a day for two minutes at a time, floss once a day, and visit the dentist every six months for cleanings and checkups.\"    \n    \n    return message",
            "id": 607
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (if_statement condition: (boolean_operator left: (boolean_operator left: (boolean_operator left: (boolean_operator left: (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) right: (comparison_operator (identifier) (integer))) right: (not_operator argument: (identifier))) right: (not_operator argument: (identifier))) right: (comparison_operator (identifier) (integer))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))))) (return_statement (identifier)))))\n**\n",
        "text": " 6",
        "token_cnt": 607
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import tweepy\nfrom textblob import TextBlob\n\n\ndef get_social_media(tweet):\n    \"\"\"This function takes input as tweet object from twitter API \n    and returns sentiment score of each platform\"\"\"\n\n    \n    platforms = {\"Facebook\":0,\"Instagram\":0,\"Twitter\":0}\n    \n    \n    for entity in tweet.entities['user_mentions']:\n        \n        if entity['screen_name'] in [\"facebook\",\"instagram\",\"twitter\"]:\n            \n            blob = TextBlob(entity['name'])\n            platforms[entity['screen_name']] += blob.sentiment.polarity\n            \n    return platforms\n    \n\n\nconsumer_key = 'YOUR CONSUMER KEY'\nconsumer_secret = 'YOUR CONSUMER SECRET'\naccess_token = 'YOUR ACCESS TOKEN'\naccess_token_secret = 'YOUR ACCESS TOKEN SECRET'\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\napi = tweepy.API(auth)\n\n\nquery = '\ntweets = api.search(q=query, count=100)\n\n\nfor tweet in tweets:\n    platforms = get_social_media(tweet)\n    print(\"Tweet:\",tweet.text,\"\\nPlatforms Scores:\")\n    for key,value in platforms.items():\n        print(\"{}:{}\".format(key,round(value,2)))\n    print(\"\\n\")",
            "id": 612
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer))))) (for_statement left: (identifier) right: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (string (string_start) (string_content) (string_end))) body: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (expression_statement (augmented_assignment left: (subscript value: (identifier) subscript: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) right: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)))))))) (return_statement (identifier)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) (ERROR (string_start)) right: (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (integer))))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content (escape_sequence)) (string_end))))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier) (call function: (identifier) arguments: (argument_list (identifier) (integer)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))))))\n**\n",
        "text": " 6",
        "token_cnt": 1074
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_extreme_security(input):\n    \"\"\"\n    This function takes as input a string representing \n    a security level from \"Low\" to \"Extreme\", and returns \n    another string indicating how this security level has been transformed by the algorithm\n    \n    Parameters:\n        - input (str): A string containing the name of the security level to be transformed\n        \n    Returns:\n        - output (str): The transformed version of the given security level\n        \n    Raises:\n        ValueError: If the input value does not correspond to any known security level\n            \n    Control Flow Diagram:\n        1. Check whether the input parameter is None\n            * If so, raise a ValueError exception saying that no input was provided\n        2. Convert the input parameter into uppercase letters to ensure consistency throughout the rest of the function\n        3. Use an if statement to check which of the four extreme levels (\"Very Low\", \"Low\", \"Medium\", \"High\") matches the input parameter\n            1. If there is a match, return a new string indicating that the security level has been successfully transformed \n            2. Else, use a default message indicating that the transformation failed\n    \"\"\"\n    \n    if input == None:\n        raise ValueError(\"No input provided!\")\n\n    \n    input = input.upper()\n\n    \n    output = \"\"\n\n    \n    if input == \"VERY LOW\":\n        output = \"The system will now operate at Very High safety standards.\"\n    elif input == \"LOW\":\n        output = \"The system will now operate at Higher than normal safety standards.\"\n    elif input == \"MEDIUM\":\n        output = \"The system will continue operating under current safety protocols.\"\n    elif input == \"HIGH\":\n        output = \"The system will now revert back to basic safety precautions due to emergency circumstances.\"\n    else:\n        output = f\"Failed to transform {input} to an appropriate security level!\"\n\n    \n    return output",
            "id": 613
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))) (return_statement (identifier)))))\n**\n",
        "text": " 6",
        "token_cnt": 512
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_high_flossing(frequency):\n    \"\"\"Check whether given frequency indicates 'high' flossing\n    \n    Args:\n        frequency (str): A string indicating user's toothbrushing frequency\n            e.g., \"once per day\", \"twice a week\" etc.\n            \n    Returns:\n        bool: Whether the provided frequency represents 'high' flossing behavior\n            True means 'yes', False otherwise\n        \n    Raises:\n        ValueError: If input argument isn't valid type or value    \n\n    \"\"\"\n    \n    freq2bool = { \n        \"never\":False,    \n        \"rarely\":False,    \n        \"sometimes\":True,    \n        \"often\":True,    \n        \"always\":True    \n    }   \n    \n    try:    \n        \n        frequency = str(frequency).lower().strip()    \n        \n        return freq2bool[frequency]    \n    except KeyError as err:    \n        raise ValueError(\"Invalid frequency:\", frequency) from err   \n\nif __name__ == '__main__':    \n    print(check_high_flossing('Once daily'))   \n    print(check_high_flossing('Twice weekly')) \n    print(check_high_flossing('Never'))         \n    print(check_high_flossing('three times a year'))",
            "id": 614
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (false)) (pair key: (string (string_start) (string_content) (string_end)) value: (false)) (pair key: (string (string_start) (string_content) (string_end)) value: (true)) (pair key: (string (string_start) (string_content) (string_end)) value: (true)) (pair key: (string (string_start) (string_content) (string_end)) value: (true))))) (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (identifier))) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list)))) (return_statement (subscript value: (identifier) subscript: (identifier)))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier))) cause: (identifier))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 590
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import yfinance as yf\nfrom tabulate import tabulate\n\n\ndef get_stock_data(ticker, start_date, end_date):\n    \"\"\"\n    Fetches stock data from Yahoo Finance API\n    \n    Args:\n        ticker (str): Ticker symbol of the company\n        start_date (datetime): Starting date for the historical data\n        end_date (datetime): Ending date for the historical data\n        \n    Returns:\n        pandas.DataFrame: Dataframe containing the stock information\n    \"\"\"    \n    \n    df = yf.download(ticker, start=start_date, end=end_date)\n\n    return df\n    \n\ndef analyze_stock(df, eps_min, pe_max, sort_by=\"eps\"):\n    \"\"\"\n    Analyzes stock data based on given criteria\n    \n    Args:\n        df (pandas.DataFrame): DataFrame containing the stock data\n        eps_min (float): Minimum earning per share required\n        pe_max (float): Maximum price earnings ratio allowed\n        sort_by (str): Sort results by 'eps', 'pe', or 'revenue' or 'profit'\n        \n    Returns:\n        list: List of tuples containing the analyzed stock data\n    \"\"\"    \n    \n    \n    filtered_df = df[(df['EPS'] >= eps_min) & (df['PE'] <= pe_max)]\n    \n    \n    sorted_df = filtered_df.sort_values(by=[sort_by], ascending=False)\n    \n    \n    columns = ['Ticker', 'Company Name', 'EPSTTM', 'Revenue Growth %', 'Profit Margin (%)']\n    table = []\n    for index, row in sorted_df.iterrows():\n        table.append((row['Symbol'], row['Name'], round(row['EPS'],2), round(row['Growth'],2), round(row['Margin'],2)))\n    \n    print(tabulate(table, headers=columns))\n    \n    \n    \n\nif __name__ == '__main__':\n    \n    \n    ticker = input('Enter stock ticker: ')\n    start_date = input('Enter starting date (yyyy-mm-dd): ')\n    end_date = input('Enter ending date (yyyy-mm-dd): ')\n    eps_min = float(input('Enter minimum EPS: '))\n    pe_max = float(input('Enter maximum PE ratio: '))\n    sort_by = input('Sort by [eps|pe|revenue|profit]: ')\n    \n    try:\n        \n        \n        if not ticker:\n            raise ValueError('Invalid ticker')\n        elif not start_date:\n            raise ValueError('Invalid start date')\n        elif not end_date:\n            raise ValueError('Invalid end date')\n        else:\n        \n            \n            df = get_stock_data(ticker, start_date, end_date)\n            \n            \n            analyze_stock(df, eps_min, pe_max, sort_by)\n            \n    except Exception as e:\n        print(e)",
            "id": 616
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (identifier)))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier) (default_parameter name: (identifier) value: (string (string_start) (string_content) (string_end)))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (binary_operator left: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (identifier))) right: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (identifier))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (list (identifier))) (keyword_argument name: (identifier) value: (false)))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (tuple (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (integer))) (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (integer))) (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (integer))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (identifier))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (try_statement body: (block (if_statement condition: (not_operator argument: (identifier)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (not_operator argument: (identifier)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (elif_clause condition: (not_operator argument: (identifier)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier) (identifier)))))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))))))))\n**\n",
        "text": " 4",
        "token_cnt": 1509
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random\nfrom typing import List\n\nclass ToiletHygiene:\n    def __init__(self):\n        self._toilets = [\"Western\", \"Japanese\"]\n\n    def display_extreme(self) -> None:\n        \"\"\"Displays extreme examples of toilet hygeine\"\"\"\n\n        \n        choice = random.choice(self._toilets)\n        \n        print(\"Extremely clean toilets can come in many forms:\")\n\n        if choice == 'Western':\n            print(\"- Western style toilets with auto flush and washlet\")\n            print(\"- Urinals separated from bathrooms by stalls doors\")\n            print(\"- Bidet usage becoming more commonplace\")\n        elif choice == 'Japanese' : \n            print(\"- Japanese style toilets called Washlets\")\n            print(\"- Heated seats, warm air dryers, deodorizers etc.\")\n            print(\"- Water pressure adjustable for each user\")\n        else:\n            raise ValueError(f\"Invalid option {choice}\")\n\nif __name__ == \"__main__\":\n    th = ToiletHygiene()\n    th.display_extreme()",
            "id": 617
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (class_definition name: (identifier) body: (block (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) return_type: (type (none)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_end)))))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))))\n**\n",
        "text": " 5",
        "token_cnt": 709
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_high_hygiene(respect_guidelines, maintain_privacy):\n    \"\"\" \n    This function takes two boolean values (respect_guidelines,maintain_privacy) as input and returns True if both are true else False\n    \n    Parameters:\n        respect_guidelines (bool): A flag indicating whether following health & safety guidelines strictly is important or not\n        maintian_privacy (bool): A flag indicating whether maintaining personal information about individuals must be protected at all costs or not\n        \n    Returns:\n        bool: Indicates whether strict adherence to health&safety guidelines alongwith protection of individual privacy is considered 'High' level of hygeine or not    \n    \"\"\"    \n\n    \n    if respect_guidelines ==True and maintain_privacy==True: \n        return True \n\n    \n    elif respect_guidelines ==True or maintain_privacy==True:    \n        return False   \n\n    \n    else:\n        raise ValueError(\"Invalid Input\")   \n\n\nprint(determine_high_hygiene(respect_guidelines=False,maintain_privacy=True)) \nprint(determine_high_hygiene(respect_guidelines=True,maintain_privacy=False)) \ntry:\n   print(determine_high_hygiene(respect_guidelines=False,maintain_privacy=False)) \nexcept ValueError as e:\n  print(e)",
            "id": 618
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (true)) right: (comparison_operator (identifier) (true))) consequence: (block (return_statement (true))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (true)) right: (comparison_operator (identifier) (true))) consequence: (block (return_statement (false)))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (false)) (keyword_argument name: (identifier) value: (true))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (true)) (keyword_argument name: (identifier) value: (false))))))) (try_statement body: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (false)) (keyword_argument name: (identifier) value: (false)))))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))))))\n**\n",
        "text": " 6",
        "token_cnt": 429
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def display_bathing_routine(gender):\n    \"\"\"Displays high bathing routine based upon \n    consent given by user.\"\"\"\n\n    \n    if give_consent():\n        print(\"High Bathing Routine For \" + str(gender) + \":\")\n\n        \n        if gender == 'Male':\n            print(\"- Wash face with warm water.\")\n            print(\"- Use body wash and lather all over the body.\")\n            print(\"- Rinse off thoroughly under running water.\")\n            print(\"- Pat dry with a clean towel.\")\n            print(\"- Moisturize skin after patting dry.\")\n\n            \n        elif gender == 'Female':\n            print(\"- Clean intimate areas gently with mild soap.\")\n            print(\"- Gently massage entire body with moisturizing lotion.\")\n            print(\"- Rinse well and pat dry.\")\n            print(\"- Apply sunscreen before going outdoors.\")\n            print(\"- Trim pubic hair regularly to avoid irritation.\")\n    else:\n        print(\"User did not provide their consent.\")\n\n\n\ndef give_consent():\n    while True:\n        consent = input(\"Do you want to see the high bathing routine? (y/n): \")\n        \n        if consent.lower() == 'y':\n            return True\n        elif consent.lower() == 'n':\n            return False\n        else:\n            print(\"Invalid entry. Please try again.\")",
            "id": 620
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (call function: (identifier) arguments: (argument_list)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (call function: (identifier) arguments: (argument_list (identifier)))) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (while_statement condition: (true) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (true))) alternative: (elif_clause condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (false)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 881
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_low_clothing_cleaning(stains):\n        \"\"\"\n        Calculate the recommended cleaning method for common stains on \n        low quality clothes\n        \n        Args:\n            stains (list[str]): A list of stain types present on the garment\n\n        Returns:\n            str: The recommended cleaning method\n        \"\"\"\n    \n        \n        recommendations = {\n            \"Blood\": \"Cold water wash\",\n            \"Grass\": \"Hot water extraction\",\n            \"Coffee\": \"Oxygen bleach treatment\"\n        }\n    \n        \n        if stain in recommendations:\n            return recommendations[stain]\n    \n        \n        else:\n            return \"Unknown stain - professional dry cleaning required\"",
            "id": 621
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (subscript value: (identifier) subscript: (identifier)))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 261
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import requests\nfrom datetime import timedelta\nfrom dateutil.relativedelta import relativedelta\n\ndef check_low_weather(city):\n    \"\"\"\n    This function takes a city name as input \n    and returns whether there will likely be low temperatures (below freezing) within the next week\n    \n    Args:\n        city (str): The name of the city\n        \n    Returns:\n        bool: Whether there is a high likelihood of low tempertures (<32F) within the next week    \n    \"\"\"    \n\n    \n    base_url = \"https://api.openweathermap.org/data/2.5/forecast?\"\n    api_key = \"&appid=\" + YOUR_API_KEY\n    units = \"&units=imperial\"\n    complete_url = base_url + \"q=\" + city + units + api_key\n\n    \n    response = requests.get(complete_url)\n    weather_data = response.json()\n\n    \n    now = datetime.now().astimezone()\n\n    \n    min_temps = []\n    for daily_forecast in weather_data[\"list\"]:\n        dt = daily_forecast[\"dt\"]\n        sunrise = daily_forecast[\"sys\"][\"sunrise\"]\n        sunset = daily_forecast[\"sys\"][\"sunset\"]\n\n        \n        sunrise_time = datetime.utcfromtimestamp(sunrise).replace(tzinfo=timezone.utc)\n        sunset_time = datetime.utcfromtimestamp(sunset).replace(tzinfo=timezone.utc)\n        forecast_date = datetime.utcfromtimestamp(dt).replace(tzinfo=timezone.utc)\n        \n        \n        days_until_end = (sunset_time - forecast_date).days\n    \n        \n        if forecast_date <= now < sunrise_time:\n            continue\n    \n        elif now >= forecast_date and now < sunrise_time:\n            delta = relativedelta(hours=(sunrise_time - now).total_seconds())\n            mins_before_sunrise = int((60 * delta.minutes) % 60)\n        \n            \n            min_temps.append(daily_forecast['main']['temp'] - mins_before_sunrise)\n    \n        else:\n            min_temps.append(daily_forecast['main']['temp'])\n            \n    \n    min_temp = min(min_temps)\n    if min_temp < 32:\n        return True\n    else:\n        return False\n    \n\nprint(check_low_weather('San Francisco'))",
            "id": 622
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (identifier) right: (string (string_start) (string_content) (string_end))) right: (identifier)) right: (identifier)) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier))))))) (expression_statement (assignment left: (identifier) right: (attribute object: (parenthesized_expression (binary_operator left: (identifier) right: (identifier))) attribute: (identifier)))) (if_statement condition: (comparison_operator (identifier) (identifier) (identifier)) consequence: (block (continue_statement)) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (identifier)) right: (comparison_operator (identifier) (identifier))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (call function: (attribute object: (parenthesized_expression (binary_operator left: (identifier) right: (identifier))) attribute: (identifier)) arguments: (argument_list))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (parenthesized_expression (binary_operator left: (integer) right: (attribute object: (identifier) attribute: (identifier)))) right: (integer)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))))))) alternative: (else_clause body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (string (string_start) (string_content) (string_end))))))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (true))) alternative: (else_clause body: (block (return_statement (false))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 10",
        "token_cnt": 1493
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_low_weather(current_humidity):\n    \n    if current_humidity < 30:\n        return \"Set humidifier to high\"\n    \n    elif current_humidity >= 65: \n        return \"Turn off humidifier\"\n\n    else:    \n        return \"No change needed\"",
            "id": 625
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 10",
        "token_cnt": 152
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_low_nail_care(moisture_level):\n    \"\"\"\n    This function takes input from user regarding their current \n    hand & nail condition (moisture level) and returns recommended steps \n    they can take to improve their overall nail health.\n\n    Parameters:\n        - moisture_level (str): Indicates user's current hand & nail \n                                 moisture level ('dry', 'normal' or 'oily')\n    \n    Returns:\n        - str: A detailed description of the transformation step(s), along \n                with any relevant product recommendations, to help the user\n                achieve healthy looking hands and stronger nails.\n        \n    Raises:\n        ValueError: If invalid value is passed for \"moisture_level\" parameter.\n    \"\"\"    \n    \n    if moisture_level not in ['dry', 'normal', 'oily']:\n        raise ValueError(\"Invalid moisture level '{}' provided!\".format(\n            moisture_level))    \n\n    \n    msg = \"Hello there!\\n\\nAs an expert in nail health,\\nI'd like to suggest ways\\nyou could improve your nail care routine.\\n\\nCurrently, your {} skin type suggests:\\n\\n\".format(\n        moisture_level)   \n\n    \n    if moisture_level == 'dry':    \n        \n        msg += \"\\t1. Apply a thick, creamy moisturizer several times daily\\n\"\n        \n        \n    elif moisture_level == 'normal':    \n        \n        msg += \"\\t1. Continue using your existing moisturizer\\n\"\n        \n        \n    else:    \n        \n        msg += \"\\t1. Wash your face morning and night with a mild cleanser\\n\"\n        \n        \n\n    \n    return msg + \"\\n\\t2. Consult with a board certified dermatologist \\\n                    if symptoms persist.\"",
            "id": 631
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (string (string_start) (string_content (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence)) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)))))) alternative: (else_clause body: (block (expression_statement (augmented_assignment left: (identifier) right: (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))))))) (return_statement (binary_operator left: (identifier) right: (string (string_start) (string_content (escape_sequence) (escape_sequence) (escape_sequence)) (string_end)))))))\n**\n",
        "text": " 6",
        "token_cnt": 538
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random\nfrom faker import Faker\n\n\ndef calculate_extreme_hygiene(bias):\n    \"\"\"\n    Calculates extreme hygine based upon bias input\n\n    Args:\n        - bias (float) -> probability of getting infected by someone who has higher than average chance of being contagious\n    \n    Returns:\n        - int -> number of days required to recover from disease after exposure \n    \"\"\"\n    \n    fake = Faker()\n    name = fake.name()\n    age = random.randint(18,65)\n    gender = random.randint(0,1)\n    symptoms = [fake.pystr(),fake.pystr()]\n    likelihood_of_infection = {\n        \"Name\": name, \n        \"Age\" : age,\n        \"Gender\":gender,\n        \"Symptoms\":symptoms}\n\n    \n    proba = sum([random.uniform(0.7,1)*i for i,j in enumerate(likelihood_of_infection[\"Symptoms\"])]) * (1+bias) ** len(likelihood_of_infection[\"Symptoms\"])\n\n    \n    recovery_time = {\"Very Low\":2,\"Low\":3,\"Medium\":4,\"High\":5}[max(min((proba*len([\"Very Low\",\"Low\",\"Medium\",\"High\"])//sum([i==k for k,i in zip([\"Very Low\",\"Low\",\"Medium\",\"High\"],[0.2,0.3,0.4,0.3])]))-1,4),0)]\n\n    return f\"{recovery_time} Days Required To Recover From Illness After Exposure To Person With Likelihood Of Becoming Infected As Per The Provided Information.\"\n\n\n\n\nif __name__ == '__main__':\n    print(\"Extreme Hygine During Illness:\")\n    user_input = float(input(\"Enter Your Social Distancing Bias Between People Having Higher Chance Of Contamination Than Average:\"))\n    result = calculate_extreme_hygiene(user_input)\n    print(result)",
            "id": 632
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer))))) (expression_statement (assignment left: (identifier) right: (list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (list_comprehension body: (binary_operator left: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (float) (integer))) right: (identifier)) (for_in_clause left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))))) right: (binary_operator left: (parenthesized_expression (binary_operator left: (integer) right: (identifier))) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))))) (expression_statement (assignment left: (identifier) right: (subscript value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer))) subscript: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (binary_operator left: (parenthesized_expression (binary_operator left: (binary_operator left: (identifier) right: (call function: (identifier) arguments: (argument_list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) right: (call function: (identifier) arguments: (argument_list (list_comprehension body: (comparison_operator (identifier) (identifier)) (for_in_clause left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (float) (float) (float) (float)))))))))) right: (integer)) (integer))) (integer)))))) (return_statement (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))))\n**\n",
        "text": " 10",
        "token_cnt": 1291
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def hand_hygiene(symptoms):\n    \n    if \"fever\" in symptoms or \"cough\" in symptoms or \"runny nose\" in symptoms:\n        print(\"Wash hands thoroughly with soap and water\")\n    \n    else:\n        print(\"No need for handwashing as no respiratory symptoms present.\")\n        \n    \n\nhand_hygiene([\"sore throat\", \"headache\"])",
            "id": 633
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (boolean_operator left: (boolean_operator left: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) right: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier))) right: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))))\n**\n",
        "text": " 6",
        "token_cnt": 267
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_low_food_hygiene(trust):\n    \"\"\"\n    This function updates the status of food establishments based on their level \n    of trustworthiness as determined by experts during the safe food handling process\n\n    Parameters:\n        - trust (float): A value between 0 and 1 indicating the degree of expert trust\n    \n    Returns:\n        - new_status (str): The updated status of the restaurant after being evaluated\n            according to its level of trustworthiness\n    \"\"\"\n\n    \n    status_thresholds = [\n        (\"High\", 0.8), \n        (\"Medium\", 0.6), \n        (\"Low\", 0.4)\n    ]\n\n    \n    for status, threshold in status_thresholds:\n\n        if trust >= threshold:\n\n            \n            return status\n\n    \n    return \"Unknown\"",
            "id": 634
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (tuple (string (string_start) (string_content) (string_end)) (float)) (tuple (string (string_start) (string_content) (string_end)) (float)) (tuple (string (string_start) (string_content) (string_end)) (float))))) (for_statement left: (pattern_list (identifier) (identifier)) right: (identifier) body: (block (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (identifier)))))) (return_statement (string (string_start) (string_content) (string_end))))))\n**\n",
        "text": " 5",
        "token_cnt": 210
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\n\n\ndef get_info(url):\n    \n    resp = requests.get(url)\n\n    \n    soup = BeautifulSoup(resp.content, 'html.parser')\n    \n    \n    table = soup.find('table', class_='dataframe')\n    \n    \n    info = []\n    \n    \n    for tr in table.findAll('tr'):\n        tds = tr.findAll('td')\n        \n        \n        info.append([x.text.strip() for x in tds])\n        \n    return info\n\n\nurls = [\n    \"https://www.cdc.gov/nchs/data/vsrr8/low_reg_healthcheckup.htm\",\n    \"https://www.who.int/health-topics/coronavirus\n]\n\n\nindicator_dict = {\n    'BMI (Body Mass Index)': 0,\n    'Blood Pressure': 1,\n    'Total Cholesterol': 2,\n    'HDL (\"Good\") Cholesterol': 3,\n    'LDL (\"Bad\") Cholesterol': 4,\n    'Smoking Status': 5    \n}\n\n\nall_info = []\n\nfor url in urls:    \n    \n    info = get_info(url)\n    \n    \n    all_info += info\n    \n\ndf = pd.DataFrame(all_info[1:], columns=all_info[0][1:])\n\n\ndf.rename(columns=indicator_dict, inplace=True)",
            "id": 636
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list_comprehension body: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) (for_in_clause left: (identifier) right: (identifier)))))))) (return_statement (identifier)))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (ERROR (string_start) (identifier)) (binary_operator left: (binary_operator left: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) right: (identifier)) right: (binary_operator left: (identifier) right: (identifier)))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer))))) (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (slice (integer))) (keyword_argument name: (identifier) value: (subscript value: (subscript value: (identifier) subscript: (integer)) subscript: (slice (integer)))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (true))))))\n**\n",
        "text": " 10",
        "token_cnt": 999
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_low_personal_organization(consent):\n    \"\"\"Determine whether individual has poor personal organization based \n    on their level of consent regarding task management and decision making\n\n    Args:\n        consent (str): Individuals' self reported level of consent \n            regarding task management and decision making\n\n    Returns:\n        str: 'Low', 'Medium', or 'High' risk categorization of individuals\n            likelihood of having poor personal organization based on provided\n            information about their level of consent regarding task management\n            and decision making\n\n    Raises:\n        ValueError: If input value for `consent` parameter is not one of \n            ('Strongly Disagree', 'Disagree', 'Neutral', 'Agree', 'Strongly Agree')\n    \n    \"\"\"\n    \n    if consent not in ['Strongly Disagree', 'Disagree', 'Neutral', \n                      'Agree', 'Strongly Agree']:\n        raise ValueError('Invalid input value for \"consent\" parameter.')\n\n    \n    if consent in ['Strongly Disagree', 'Disagree']:\n        return 'High'\n    elif consent == 'Neutral':\n        return 'Medium'\n    else:\n        return 'Low'",
            "id": 637
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 360
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_availability(consent):\n    \"\"\"Determine whether low online shopping: product availability meets \n    certain criteria depending upon user consent.\"\"\"\n\n    \n    if consent == 'yes':\n        return True  \n    elif consent == 'no':\n        return False  \n    else:\n        raise ValueError('Invalid input')  \n\n\n\nprint(check_availability('yes'))  \nprint(check_availability('no'))   \ntry:\n    print(check_availability('maybe'))  \nexcept Exception as e:\n    print(\"Error:\", str(e))",
            "id": 640
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (true))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (false)))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (try_statement body: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (identifier))))))))))\n**\n",
        "text": " 10",
        "token_cnt": 414
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def clean_ears(consent):\n    \"\"\"\n    Checks high ear hygiene based on user input regarding \n    whether they consented to cleaning their own ears or not\n\n    Args:\n        consent (bool): Whether the user consents to cleaning \n            their own ears or not\n\n    Returns:\n        str: A recommendation message indicating whether\n            the user needs to see a doctor or can continue \n            without medical attention\n    \"\"\"\n    \n    \n    if not consent:\n        return \"See a doctor as soon as possible because there may be an issue with your ear health.\"",
            "id": 641
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (not_operator argument: (identifier)) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 4",
        "token_cnt": 92
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_low_flossing(age, gender):\n    \"\"\"Determine whether someone has low flossing based \n    on their age and gender\n    \n    Args:\n        age (int): The patient's age\n        gender (str): The patient's gender ('male' or 'female')\n        \n    Returns:\n        str: A message indicating whether the person has \n        low flossing or not\n    \"\"\"\n\n    \n    criteria = {\n        \"Male\": {\"min_age\": 35, \"max_flossing_percentage\": 40},\n        \"Female\": {\"min_age\": 40, \"max_flossing_percentage\": 25}\n    }\n\n    \n    if age < criteria[gender][\"min_age\"]:\n        return f\"Based on age alone, {gender.title()} does not meet the minimum age requirement for low flossing.\"\n\n    \n    avg_days_between_visits = input(\"Please enter the average number of days between dentist appointments:\")\n\n    try:\n        avg_days_between_visits = float(avg_days_between_visits)\n    except ValueError as e:\n        return \"Invalid input! Please provide a numeric value for the average number of days between dentist visits.\"\n\n    \n    max_flossing_percentage = criteria[gender][\"max_flossing_percentage\"] / 100\n    daily_flossing_rate = input(f\"Please enter the average daily flossing rate ({max_flossing_percentage:.2%})\")\n\n    try:\n        daily_flossing_rate = float(daily_flossing_rate)\n    except ValueError as e:\n        return \"Invalid input! Please provide a numeric value for the average daily flossing rate.\"\n\n    if daily_flossing_rate > max_flossing_percentage:\n        return f\"{gender.title()} has high flossing frequency compared to others of similar age group.\"\n\n    \n    num_missed_teeth = int((daily_flossing_rate * avg_days_between_visits) / (1 - max_flossing_percentage))\n\n    \n    if num_missed_teeth == 0:\n        return f\"{gender.title()} has excellent flossing habit and no chance of missing any teeth!\"\n    elif num_missed_teeth <= 6:\n        return f\"{gender.title()} may miss up to {num_missed_teeth} tooth{'' if num_missed_teeth==1 else 's'} due to lack of proper flossing.\"\n    else:\n        return f\"{gender.title()} has very poor flossing habit and there is a significant risk of missing multiple teeth ({num_missed_teeth}+).\"\n\n\nprint(determine_low_flossing(30, \"Male\"))\nprint(determine_low_flossing(45, \"Female\"))\nprint(determine_low_flossing(70, \"Male\"))\nprint(determine_low_flossing(65, \"Female\"))\nprint(determine_low_flossing(80, \"Male\"))\nprint(determine_low_flossing(60, \"Female\"))",
            "id": 642
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)))) (pair key: (string (string_start) (string_content) (string_end)) value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer))))))) (if_statement condition: (comparison_operator (identifier) (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (string (string_start) (string_content) (interpolation expression: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier)))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (return_statement (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (string (string_start) (string_content) (string_end))) right: (integer)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier) format_specifier: (format_specifier)) (string_content) (string_end)))))) (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier)))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (return_statement (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (string (string_start) (interpolation expression: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (identifier))) right: (parenthesized_expression (binary_operator left: (integer) right: (identifier)))))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (interpolation expression: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (interpolation expression: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (conditional_expression (string (string_start) (string_end)) (comparison_operator (identifier) (integer)) (string (string_start) (string_content) (string_end)))) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (interpolation expression: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer) (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer) (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer) (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer) (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer) (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer) (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 4",
        "token_cnt": 1435
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import requests\nfrom bs4 import BeautifulSoup\n\n\ndef check_handwashing():\n    \n    url = \"https://www.google.com\"\n\n    \n    resp = requests.get(url)\n\n    \n    soup = BeautifulSoup(resp.content, 'html.parser')\n\n    \n    links = soup.find_all('a')\n\n    \n    for link in links:\n        \n        if link.has_attr('href'):\n            \n            link_url = link['href']\n\n            \n            if 'wikipedia' in link_url:\n                print(\"Please wash your hands before returning to work.\")\n                return True\n    \n    \n    print(\"Hand hygeine looks good!\")\n    return False\n\n\nif __name__ == '__main__':\n    dry_run = True \n\n    if not dry_run:\n        result = check_handwashing()\n    else:\n        result = None \n        \n    print(\"\")\n    print(\"*\" * 50)\n    print(\"Dry Run Results:\")\n    print(\"*\" * 50)\n    if result is not None:\n        print(\"Result:\", result)",
            "id": 644
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (true)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (false)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (true))) (if_statement condition: (not_operator argument: (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (none)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (integer))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (integer))))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))))))))\n**\n",
        "text": " 10",
        "token_cnt": 828
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom typing import List\n\n\ndf = pd.read_csv(\"higher_education_academic_planning_for_engineers.csv\")\n\ndef update_reliable_citations(df:pd.DataFrame) -> None:\n    \"\"\"Update reliable citations in higher education academic planning for engineers.\"\"\"\n\n    \n    reliable_citations:List[dict] = []\n    \n    \n    for index, row in df.iterrows():\n        \n        if row[\"Reliability\"] > 0:\n            \n            reliable_citation = {\n                \"Source\":row[\"Source\"], \n                \"Author\":row[\"Author\"], \n                \"Year\":row[\"Year\"], \n                \"Link\":row[\"Link\"], \n                \"Description\":row[\"Description\"], \n                \"Reliability\":row[\"Reliability\"]}\n            reliable_citations.append(reliable_citation)\n            \n    \n    df_new = df.copy()\n    df_new = df_new.drop([\"Reliability\", \"DOI\"], axis=1)\n    df_new = df_new.append(reliable_citations, ignore_index=True)\n    \n    return df_new\n    \n\nprint(\"Dry Run Results:\")\nupdate_reliable_citations(df)",
            "id": 645
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (function_definition name: (identifier) parameters: (parameters (typed_parameter (identifier) type: (type (attribute object: (identifier) attribute: (identifier))))) return_type: (type (none)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) type: (type (generic_type (identifier) (type_parameter (type (identifier))))) right: (list))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) body: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (integer)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (true)))))) (return_statement (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))\n**\n",
        "text": " 6",
        "token_cnt": 913
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_high_flossing(patient_age, patient_gender):\n    \"\"\"\n    This function takes two inputs - patient age and gender \n    and returns the appropriate dental floss based on those factors\n    \n    If the patient is under 18 years old, then they cannot consent to having their personal information shared, so we return \"Flossie\" (a fictional brand) which does not share any personal information\n    Else if the patient is over 65 years old, regardless of gender, we recommend Colgate Total Advanced Clean because it has been shown to reduce gum inflammation better than other products\n    Else if the patient is male, we suggest Glide Pro-Health since it reduces plaque more effectively compared to regular flosses\n    Else if the patient is female, we suggest Oral B Satin Care since it removes up to 40% more plaque than traditional floss\n    In all cases where we don't know what recommendation to make, we default to recommending Flossie as well\n\n    Args:\n        patient_age (int): The age of the patient\n        patient_gender (str): The gender of the patient (\"Male\", \"Female\")\n        \n    Returns:\n        str: A recommended dental floss brand name\n    \"\"\"\n    \n    \n    if patient_age < 18:\n        \n        return \"Flossie\"\n    \n    elif patient_age >= 65:\n        \n        return \"Colgate Total Advanced Clean\"\n    \n    else:    \n        \n        if patient_gender == \"Male\":\n            return \"Glide Pro Health\"\n        \n        elif patient_gender == \"Female\":\n            return \"Oral B Satin Care\"\n    \n        else: \n            \n            return \"Flossie\"\n    \n\nprint(transform_high_flossing(23, \"Male\"))    \nprint(transform_high_flossing(79, \"Female\"))   \nprint(transform_high_flossing(17, \"\"))         \nprint(transform_high_flossing(66, None))",
            "id": 650
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end))))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer) (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer) (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer) (string (string_start) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer) (none)))))))\n**\n",
        "text": " 6",
        "token_cnt": 488
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_extreme_sneeze_cough_etiquette(trust):\n    \"\"\"\n    This function determines appropriate \n    extreme sneezing and coughing etiquette \n    based upon trust levels between people\n    \n    Parameters:\n        - trust (str) : Level of trust between individuals\n            Possible values = \"High\", \"Medium\", \"Low\"\n        \n    Returns:\n        A string indicating what action \n        should be taken by the person with respect \n    to other persons present in the vicinity.\n\n    Raises:\n        ValueError if input value for `trust` parameter \n            is not one of the accepted values\n            \n    \"\"\"\n    \n    allowed_values = [\"High\",\"Medium\",\"Low\"]\n    if trust not in allowed_values:\n        raise ValueError(\"Invalid value for `trust` parameter\")\n    \n    \n    if trust == \"High\":\n        return f\"{excuse yourself} while covering your mouth and nose with a tissue.\"\n    elif trust == \"Medium\" or trust == \"Low\":\n        return f\"{ask permission from others}, leave the room when granted, and ensure proper hygiene practices like handwashing afterward.\"\n    else:\n        return \"Improper behaviour detected! Please refrain from any excessive noisemaking behaviors.\"",
            "id": 651
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (string (string_start) (interpolation (ERROR (identifier)) expression: (identifier)) (string_content) (string_end)))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (string (string_start) (interpolation (ERROR (identifier) (identifier)) expression: (identifier)) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 389
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_extreme_oral_health(habits):\n    \"\"\" \n    This function checks whether the given list of habits contains any extreme oral health related ones\n    \n    Args:\n        habits (list[str]): A list containing strings representing each habit\n\n    Returns:\n        str: Either \"No issues\" or a description of one or more extreme oral health habits found \n\n    Raises:\n        ValueError: If input 'habits' is not a list type\n        \n    \"\"\"    \n    \n    if not isinstance(habits, list):\n        raise ValueError(\"Input must be a list\")    \n    \n    \n    issues = \"\"   \n    \n    \n    for i in range(len(habits)-1):    \n        for j in range(i+1, len(habits)):\n            \n            if habits[i] == \"Smoking\" and habits[j] == \"Chewing tobacco\":\n                issues += f\"\\nAvoiding both smoking and chewing tobacco can significantly reduce risk of several oral diseases.\"\n                \n            elif habits[i] == \"Drinking alcohol regularly\" and habits[j] == \"Consuming highly processed foods\": \n                issues += \"\\nLimiting consumption of alcohol alongside eating lots of highly processed foods may help prevent gum disease.\"\n                \n    return (\"No issues\" if not issues else issues)",
            "id": 654
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (integer)))) body: (block (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (integer)) (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (if_statement condition: (boolean_operator left: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (string (string_start) (string_content) (string_end))) right: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (string (string_start) (string_content (escape_sequence)) (string_end))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (string (string_start) (string_content) (string_end))) right: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (string (string_start) (string_content (escape_sequence)) (string_end))))))))))) (return_statement (parenthesized_expression (conditional_expression (string (string_start) (string_content) (string_end)) (not_operator argument: (identifier)) (identifier)))))))\n**\n",
        "text": " 10",
        "token_cnt": 570
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_low_education(grade):\n    \"\"\"\n    This function takes in a grade as input \n    and returns whether the education level is low\n    \n    Args:\n        grade (float): The students overall grade\n        \n    Returns:\n        bool: Whether the education level is considered low or not\n\n    Raises:\n        ValueError: If the input value is not numeric\n            \n    \"\"\"\n    \n    try: \n        grade = float(grade)\n    except ValueError:\n        raise ValueError(\"Invalid input type\")    \n    \n    \n    highschool = 4.0\n    college = 2.5\n    postgraduate = 1.8\n    \n    \n    if grade >= highschool and grade < college:\n        return \"High School\"\n    elif grade >= college and grade < postgraduate:\n        return \"College\"\n    else:\n        return \"Post Graduate\"\n    \n        \n\nprint(check_low_education(3.6))   \nprint(check_low_education(7.9))   \nprint(check_low_education('A'))",
            "id": 655
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier)))))) (except_clause (identifier) (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (float))) (expression_statement (assignment left: (identifier) right: (float))) (expression_statement (assignment left: (identifier) right: (float))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (identifier)) right: (comparison_operator (identifier) (identifier))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (identifier)) right: (comparison_operator (identifier) (identifier))) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (float)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (float)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 10",
        "token_cnt": 461
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_flight_reservation(passengers):\n    \"\"\"Transform flight reservations into decisions.\"\"\"\n\n    \n    if all([p['data_sharing'] == 'yes' for p in passengers]):\n        return \"Flight booking approved.\"\n    \n    elif any([p['biometric_info'] != 'no' for p in passengers]):\n        return (\n            f\"Passenger {', '.join([str(p) for p in [\n                x for x in passengers \n                if x['biometric_info'] != 'no']])} needs biometrics verification.\")\n        \n    elif any([p['credit_check'] != 'no' for p in passengers]):\n        return (\n            f\"Passenger {', '.join([str(p) for p in [\n                x for x in passengers \n                if x['credit_check'] != 'no']])} need credit check approval.\")\n    \n    else:\n        return \"Please provide missing information before proceeding.\"\n\n\n\npassengers = [{\n    'name': 'Alice', \n    'age': 25, \n    'gender': 'FEMALE', \n    'nationality': 'US Citizen', \n    'data_sharing': 'yes', \n    'biometric_info': 'no', \n    'credit_check': 'maybe'}, \n   {'name': 'Bob', \n    'age': 30, \n    'gender': 'MALE', \n    'nationality': 'Canadian Permanent Resident', \n    'data_sharing': 'no', \n    'biometric_info': 'yes', \n    'credit_check': 'no'}]\n    \nprint(transform_flight_reservation(passengers))",
            "id": 657
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (call function: (identifier) arguments: (argument_list (list_comprehension body: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end))) (for_in_clause left: (identifier) right: (identifier))))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (call function: (identifier) arguments: (argument_list (list_comprehension body: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end))) (for_in_clause left: (identifier) right: (identifier))))) consequence: (block (return_statement (parenthesized_expression (string (string_start) (string_content) (interpolation expression: (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (list_comprehension body: (call function: (identifier) arguments: (argument_list (identifier))) (for_in_clause left: (identifier) right: (list_comprehension body: (identifier) (for_in_clause left: (identifier) right: (identifier)) (if_clause (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end)))))))))) (string_content) (string_end)))))) alternative: (elif_clause condition: (call function: (identifier) arguments: (argument_list (list_comprehension body: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end))) (for_in_clause left: (identifier) right: (identifier))))) consequence: (block (return_statement (parenthesized_expression (string (string_start) (string_content) (interpolation expression: (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (list_comprehension body: (call function: (identifier) arguments: (argument_list (identifier))) (for_in_clause left: (identifier) right: (list_comprehension body: (identifier) (for_in_clause left: (identifier) right: (identifier)) (if_clause (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end)))))))))) (string_content) (string_end)))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (list (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))) (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier)))))))\n**\n",
        "text": " 10",
        "token_cnt": 1398
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_high_transportation(service):\n    \"\"\"\n    This function checks whether a given \n    ridesharing service follows high standard of \n    user privacy or not\n    \n    Parameters:\n        service (str): Name of the rideshare service\n        \n    Returns:\n        bool: True if service adheres to \n            high level of privacuy, False otherwise\n            \n    Raises:\n        ValueError: If input argument 'service'\n            is not string type    \n    \"\"\"\n\n    \n    if isinstance(service, str) == False:\n        raise ValueError(\"Input argument must be a string\")    \n    \n    \n    popular_services = [\"Uber\", \"Lyft\"]\n    \n    \n    if service in popular_services:    \n        return True\n    else:    \n        return False",
            "id": 658
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (false)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (true))) alternative: (else_clause body: (block (return_statement (false))))))))\n**\n",
        "text": " 6",
        "token_cnt": 221
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_high_ear_hygiene(data):\n    \n    print(\"Dry Run Input Data:\")\n    print(data)\n\n    \n    action_list = [\n        (\"Use cotton buds\", lambda x: True), \n        (\"Use swab\", lambda x: False)]\n    \n    \n    for action_name, condition in action_list:\n        if condition(data):\n            return f\"Recommend {action_name}\"\n        \n    \n    return \"Error: No suitable action found.\"",
            "id": 664
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (list (tuple (string (string_start) (string_content) (string_end)) (lambda parameters: (lambda_parameters (identifier)) body: (true))) (tuple (string (string_start) (string_content) (string_end)) (lambda parameters: (lambda_parameters (identifier)) body: (false)))))) (for_statement left: (pattern_list (identifier) (identifier)) right: (identifier) body: (block (if_statement condition: (call function: (identifier) arguments: (argument_list (identifier))) consequence: (block (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_end))))))) (return_statement (string (string_start) (string_content) (string_end))))))\n**\n",
        "text": " 10",
        "token_cnt": 276
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_low_cough(data):\n    \"\"\"Transform low sneezing and coughing etiquette by covering mouths and noses\n    \n    Args:\n        data (DataFrame): Dataframe containing information about each observation\n        \n    Returns:\n        DataFrame: Modified dataframe with new column indicating whether \n            appropriate precautions were taken during analysis\n            \n    Raises:\n        ValueError: If there is any missing data in the input dataframe \n    \"\"\"\n\n    \n    if pd.isna(data).any().any():\n        raise ValueError(\"There are missing values in the input dataframe\")\n\n    \n    responses = [\n        (\"Yes\", \"Y\"), \n        (\"No\", \"N\"),\n        (\"Unsure\", \"U\")]\n\n    \n    data[\"Precautions\"] = np.nan\n\n    \n    for index, row in data.iterrows():\n\n        \n        sneeze = row['Sneeze']\n        cough = row['Cough']\n\n        \n        if sneeze == \"Cover nose\" and cough == \"Cover mouth\":\n            response = \"Yes\"\n        elif sneeze != \"Cover nose\" or cough != \"Cover mouth\":\n            response = \"No\"\n        \n        \n        for r in responses:\n            if r[1] == response:\n                data.at[index, \"Precautions\"] = r[0]\n                \n    return data",
            "id": 666
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (call function: (attribute object: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (list (tuple (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (tuple (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (tuple (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier)))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (integer)) (identifier)) consequence: (block (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (subscript value: (identifier) subscript: (integer)))))))))) (return_statement (identifier)))))\n**\n",
        "text": " 5",
        "token_cnt": 799
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import argparse\n\ndef main():\n    \n    parser = argparse.ArgumentParser()\n\n    \n    parser.add_argument('symptoms', help='Enter symptom(s) such as runny nose, sneezing etc.')\n    \n    \n    args = parser.parse_args()\n\n    \n    symptoms = args.symptoms.split(',')\n\n    \n    for symptom in symptoms:\n        if symptom == \"Runny Nose\":\n            print(\"Remedy: Use a saline nasal spray or rinse to clear congestion.\\n\")\n        elif symptom == \"Sneezing\":\n            print(\"Remedy: Try taking allergy medications like antihistamines or decongestants\\n\")\n        else:\n            print(\"{}: No specific remedy available\".format(symptom))\n            \nif __name__ == '__main__':\n    main()",
            "id": 667
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier))))))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 6",
        "token_cnt": 544
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def get_cleaning_level(fabric):\n    \"\"\"Determine the appropriate cleaning method for a given fabric.\"\"\"\n\n    \n    CLEANING_LEVELS = [\n        (\"Dry-Clean Only\", lambda f: \"dry\" in f),\n        (\"Machine Washable\", lambda f: not any(c in f for c in [\"wet\", \"dry\"])),\n        (\"Handwash Recommended\", lambda f: all(c in f for c in [\"hand\", \"machine wash\"]))\n    ]\n\n    \n    for name, criterion in CLEANING_LEVELS:\n        if criterion(fabric):\n            return name\n    \n    \n    return CLEANING_LEVELS[0][0]\n\n\nprint(\"Fabric\\tCleaning Level\")\nprint(\"-----\\t-------------\")\nfor fabric in [\"100% cotton (dry)\", \"polyester / spandex (hand wash)\", \"silk\"]:\n    print(f\"{fabric}\\t{get_cleaning_level(fabric)}\")\n\nOutput: \n\nFabric\tCleaning Level\n------\t-------------\n100% cotton (dry)\tDry-Clean Only\npolyester / spandex (hand wash)\tHandwash Recommended\nsilk\tDry-Clean Only",
            "id": 669
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (tuple (string (string_start) (string_content) (string_end)) (lambda parameters: (lambda_parameters (identifier)) body: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)))) (tuple (string (string_start) (string_content) (string_end)) (lambda parameters: (lambda_parameters (identifier)) body: (not_operator argument: (call function: (identifier) arguments: (generator_expression body: (comparison_operator (identifier) (identifier)) (for_in_clause left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))))))) (tuple (string (string_start) (string_content) (string_end)) (lambda parameters: (lambda_parameters (identifier)) body: (call function: (identifier) arguments: (generator_expression body: (comparison_operator (identifier) (identifier)) (for_in_clause left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))))))))) (for_statement left: (pattern_list (identifier) (identifier)) right: (identifier) body: (block (if_statement condition: (call function: (identifier) arguments: (argument_list (identifier))) consequence: (block (return_statement (identifier)))))) (return_statement (subscript value: (subscript value: (identifier) subscript: (integer)) subscript: (integer))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (for_statement left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content (escape_sequence)) (interpolation expression: (call function: (identifier) arguments: (argument_list (identifier)))) (string_end))))))) (expression_statement (assignment left: (identifier) type: (type (identifier)))) (ERROR (identifier) (identifier)) (expression_statement (binary_operator left: (binary_operator left: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (integer)))))))))))))))))))) right: (call function: (identifier) arguments: (argument_list (identifier)))) (ERROR (identifier)) (ERROR (identifier)) right: (identifier))) (expression_statement (binary_operator left: (identifier) (ERROR (call function: (identifier) arguments: (argument_list (identifier) (ERROR (identifier)))) (identifier)) right: (identifier))) (expression_statement (binary_operator left: (identifier) (ERROR (identifier)) (ERROR (identifier)) right: (identifier))))\n**\n",
        "text": " 10",
        "token_cnt": 943
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import os\nfrom getpass import getuser\n\n\ndef clean_tongue():\n    \"\"\"Prompt user for permission to clean their tongue.\"\"\"\n    while True:\n        consent = input(f\"{getuser()}, do you want me to clean your tongue? [y/n]: \")\n        if consent == 'y':\n            break\n        elif consent == 'n':\n            return False\n        else:\n            print(\"Invalid input! Please enter y or n.\")\n\n    \n    print(f\"{getuser()}'s tongue is now super fresh!\")\n    return True\n\n\n\ndry_run = input(\"Dry run? [Y/n]\")\nif dry_run != 'N' and dry_run != 'n':\n    print(\"* DRY RUN *\")\n    if clean_tongue():\n        print(\"* CLEANING ACTIVATED *\")\n    else:\n        print(\"* SKIPPING CLEANING *\")\nelse:\n    if clean_tongue():\n        print(\"* CLEANING ACTIVATED *\")\n    else:\n        print(\"* USER DECLINED CLEANING *\")\nprint()\nprint(\"Summary:\")\nif dry_run != 'N' and dry_run != 'n':\n    print(\"* DRY RUN COMPLETE *\")\nelif clean_tongue():\n    print(\"* CLEANING PERFORMED *\")\nelse:\n    print(\"* NO CLEANING DONE *\")",
            "id": 670
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (while_statement condition: (true) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (call function: (identifier) arguments: (argument_list))) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (break_statement)) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (false)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (call function: (identifier) arguments: (argument_list))) (string_content) (string_end))))) (return_statement (true)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (if_statement condition: (call function: (identifier) arguments: (argument_list)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))) alternative: (else_clause body: (block (if_statement condition: (call function: (identifier) arguments: (argument_list)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))))) (expression_statement (call function: (identifier) arguments: (argument_list))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (call function: (identifier) arguments: (argument_list)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 999
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_low_flossing(transparency):\n    \"\"\"\n    This function transforms low flossing data by correcting \n    the flossing technique based on expert analysis\n    \n    Parameters:\n        transparency (float): The level of dental transparence after flossed teeth\n        \n    Returns:\n        float: The transformed value of dental transparence after flossing\n            \n    Raises:\n        ValueError: If input parameter 'transparency' is not within expected range [0, 1]\n\n    Control Flow Diagram:\n        1. Check whether 'transparency' is valid (within expected range)\n           - Yes: continue to step 2\n           - No: raise exception\n        2. Based on 'transparency', determine appropriate transformation method \n           and apply it to get the transformed result\n           - If 'transparency' <= 0.35: use linear transformation\n             y = x * 4 + 6\n           - Else: use square root transformation \n             y = sqrt(x)\n        3. Return the transformed result\n    \"\"\"    \n    \n    if not isinstance(transparency, float) or \\\n       (transparency < 0 or transparency > 1):\n        raise ValueError(\"Invalid input parameter 'transparency'. \"\n                         \"Expected value within range [0, 1]\")    \n    \n    \n    if transparency <= 0.35:\n        transformed_value = transparency * 4 + 6\n    else:    \n        transformed_value = math.sqrt(transparency)   \n    \n    return transformed_value",
            "id": 671
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) (line_continuation) right: (parenthesized_expression (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (integer))))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (identifier) right: (integer)) right: (integer))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))))) (return_statement (identifier)))))\n**\n",
        "text": " 10",
        "token_cnt": 316
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_extreme_nose(symptoms):\n    \"\"\"Determine extreme nose condition based on symptoms\n\n    Args:\n        symptoms (list[str]): List of symptoms experienced by patient\n\n    Returns:\n        str: Condition determined based on input symptoms\n    \n    Raises:\n        ValueError: If no valid condition can be determined from given symptoms\n\n    Note: \n        This function assumes that all values in `symptoms` list are either 'runny' or 'blocked'. \n    \"\"\"\n    \n    invalid_values = [s for s in symptoms if s not in [\"runny\", \"blocked\"]]\n    if len(invalid_values) > 0:\n        raise ValueError(\"Invalid input values found:\", \", \".join(invalid_values))\n\n    \n    counts = {\"runny\": 0, \"blocked\": 0}\n    for s in symptoms:\n        counts[s] += 1\n\n    \n    if counts[\"runny\"] >= counts[\"blocked\"]:\n        return \"severe congestion\"\n    else:\n        return \"allergy\"",
            "id": 673
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (identifier) (for_in_clause left: (identifier) right: (identifier)) (if_clause (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (integer)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (subscript value: (identifier) subscript: (identifier)) right: (integer))))) (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 498
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "HOT_BATH = 40 \nWARM_BATH = 37 \nCOOL_BATH = 35 \n\ndef check_high_bathing(transparency):\n    \"\"\"\n    Checks whether high bathing is required based on transparency level\n\n    Args:\n        transparency (float): Level of water clarity from 1 (clear) to 10 (murky)\n    \n    Returns:\n        str: \"High bathing recommended\" or \"Normal bathing conditions\" \n    \"\"\"\n    if transparency >= 6:\n        return f'High bathing recommended ({transparency} transparency)'\n    else:\n        return 'Normal bathing conditions'\n\n\nif __name__ == '__main__':\n    print(check_high_bathing(8)) \n    print(check_high_bathing(2))",
            "id": 677
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer)))))))))\n**\n",
        "text": " 10",
        "token_cnt": 295
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_extreme_education(data):\n    \"\"\"\n    This function takes input as dataframe of students \n    Dataframe contains columns like 'Name', 'Age', 'Reliability' etc\n    \n    Returns calculated value alongwith its reliabilty score\n    \"\"\"\n    \n    dict1 = {}\n\n    \n    for index,row in data.iterrows():\n        \n        name = row['Name']\n        age = row['Age']\n        reliability = row['Reliability']\n\n        \n        if name in dict1:\n            \n            dict1[name] = (age+dict1[name][0],reliability+dict1[name][1])\n        \n        else:\n            \n            dict1[name] =(age,reliability)\n            \n    \n    result = []\n\n    \n    sorted_x =sorted(dict1.items(),key=lambda x:x[0]) \n\n    \n    for i in range(len(sorted_x)):    \n        \n        result.append((sorted_x[i][1]))\n        \n    return result",
            "id": 678
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (tuple (binary_operator left: (identifier) right: (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (integer))) (binary_operator left: (identifier) right: (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (integer))))))) alternative: (else_clause body: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (tuple (identifier) (identifier))))))))) (expression_statement (assignment left: (identifier) right: (list))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (keyword_argument name: (identifier) value: (lambda parameters: (lambda_parameters (identifier)) body: (subscript value: (identifier) subscript: (integer)))))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (parenthesized_expression (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (integer)))))))) (return_statement (identifier)))))\n**\n",
        "text": " 10",
        "token_cnt": 626
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def extreme_nailcare(gender):\n    \"\"\"Displays extreme nail care tips based upon user input regarding \n    their gender\n\n    Args:\n        gender (str): User specified gender ('male' or 'female')\n    \n    Returns:\n        str: Content describing recommended nail care routine for \n            the specified gender\n    Raises:\n        ValueError: If invalid value is passed for argument \"gender\"    \n    \"\"\"\n    \n    if not isinstance(gender, str) or len(gender) == 0:\n        raise ValueError(\"Invalid input type\")\n        \n    \n    base_message = f\"\"\"Extreme Nail Care Tips For {gender}:\n\n    1.) Keep hands clean by washing regularly\n    2.) Use gloves when doing housework or gardening\n    3.) Avoid exposure to chemicals such as cleaning products \n    4.) Apply hand cream daily to keep skin hydrated\n    5.) Trim cuticles every few days\n    6.) Soak feet in warm water twice weekly\n    \"\"\"\n\n    \n    if gender.lower() == \"male\":\n        return base_message + \"\\n7.) Consider wearing protective gloves while working with tools\\n8.) Get regular manicures and pedicures\"\n\n    elif gender.lower() == \"female\":\n        return base_message + \"\\n7.) Paint nails once a week with non-toxic polish\\n8.) Try acrylic nails only under professional supervision\"\n\n    else:\n        raise ValueError(\"Invalid input value\")\n\n\n\nprint(extreme_nailcare('Male'))\nprint(extreme_nailcare('Female'))\nprint(extreme_nailcare('invalid input'))",
            "id": 679
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) right: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (integer))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (binary_operator left: (identifier) right: (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))))) alternative: (elif_clause condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (binary_operator left: (identifier) right: (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 6",
        "token_cnt": 586
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_high_fitness(user):\n    \n    if (user.current_step_count > user.highest_step_count):\n        print(\"New personal best!\")\n        user.highest_step_count = user.current_step_count\n\n    else: \n        print(\"Keep up the good work\")\n    \n    return \n\n\nupdate_high_fitness(user1)",
            "id": 682
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (parenthesized_expression (comparison_operator (attribute object: (identifier) attribute: (identifier)) (attribute object: (identifier) attribute: (identifier)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (attribute object: (identifier) attribute: (identifier))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (return_statement))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))\n**\n",
        "text": " 10",
        "token_cnt": 218
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_high_clothing_cleanliness(safety):\n    \"\"\"\n    This function calculates the probability of contamination \n    during washing process depending upon safety level\n    \n    Args:\n        safety (int) -> value between 0 and 100 indicating \n            degree of risk associated with laundering procedure\n\n    Returns:\n         float -> Probability of microbial growth after \n             laundry process expressed as decimal number\n         \n    Raises:    \n        ValueError -> If input parameter 'safety' is not within\n            allowed range [0,100]\n        \n    \"\"\"    \n    \n    outcomes = [(95 - x, x / 4.2) for x in range(6)] + [(85, .3), (75, .15), (0, .01)]\n    \n    \n    for outcome in outcomes:\n        if outcome[0] >= safety:\n            return outcome[1]\n            \n    raise ValueError(\"Invalid input value '{}'\".format(safety))\n\n\nif __name__ == '__main__':\n    print('Dry Run:')\n    dry_run_results = {\n        0: \"No visible soil\", \n        5: \"Mildly soiled\", \n        10: \"Heavily soiled\"\n    }\n    for i in range(11):\n        result = calculate_high_clothing_cleanliness(i)\n        print(\"{}% safety: P(contaminated)={:.2f} ({})\".format(i, result, dry_run_results[result]))\n    \n    print('\\nReal World Example:')\n    real_world_scenarios = [{\n        'input': {'risk_level': 5}, \n        'output': 'P(contaminated)=0.95 (Mildly soiled)'\n    }, {\n        'input': {'risk_level': 30}, \n        'output': 'P(contaminated)=0.30 (Moderately soiled)'\n    }]\n    for scenario in real_world_scenarios:\n        input_params = scenario['input']\n        output = calculate_high_clothing_cleanliness(**input_params)\n        print(\"For {}%, expected output is: {}\".format(input_params['risk_level'], scenario['output']))",
            "id": 683
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (list_comprehension body: (tuple (binary_operator left: (integer) right: (identifier)) (binary_operator left: (identifier) right: (float))) (for_in_clause left: (identifier) right: (call function: (identifier) arguments: (argument_list (integer))))) right: (list (tuple (integer) (float)) (tuple (integer) (float)) (tuple (integer) (float)))))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (integer)) (identifier)) consequence: (block (return_statement (subscript value: (identifier) subscript: (integer))))))) (raise_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (integer) value: (string (string_start) (string_content) (string_end))) (pair key: (integer) value: (string (string_start) (string_content) (string_end))) (pair key: (integer) value: (string (string_start) (string_content) (string_end)))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (integer))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (subscript value: (identifier) subscript: (identifier))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (assignment left: (identifier) right: (list (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))) (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (dictionary_splat (identifier)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))))))))))\n**\n",
        "text": " 10",
        "token_cnt": 1049
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import numpy as np\nfrom scipy import optimize\n\ndef calculate_extreme_transport(demand, capacity):\n    \"\"\"\n    Calculates the optimal number of drivers required \n    based on minimum cost of service\n    \n    Args:\n        demand (numpy array): daily demand by hour\n        capacity (float): total driver capacity\n        \n    Returns:\n        float: minimum cost of service\n    \"\"\"\n    def objective_function(x, *args):\n        \n        demand = args[0]\n        \n        \n        num_drivers = int(x)\n    \n        \n        revenue = np.sum((capacity / num_drivers) * demand)\n    \n        return revenue\n\n    \n    assert isinstance(demand, np.ndarray), \"Demand must be provided as a NumPy array\"\n    assert len(demand.shape) == 1, \"Demand must be a one dimensional array\"\n    assert demand.dtype == 'int', \"Demands values must be integers\"\n    \n    \n    n = len(demand)\n    \n    \n    x0 = round(n/2)\n    \n    \n    results =optimize.minimize(objective_function, x0=x0, args=(demand,))\n    \n    \n    min_cost =results.fun\n    \n    return min_cost",
            "id": 685
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (function_definition name: (identifier) parameters: (parameters (identifier) (list_splat_pattern (identifier))) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (integer)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (identifier))) right: (identifier)))))) (return_statement (identifier)))) (assert_statement (call function: (identifier) arguments: (argument_list (identifier) (attribute object: (identifier) attribute: (identifier)))) (string (string_start) (string_content) (string_end))) (assert_statement (comparison_operator (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))) (integer)) (string (string_start) (string_content) (string_end))) (assert_statement (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (integer)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (tuple (identifier))))))) (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))) (return_statement (identifier)))))\n**\n",
        "text": " 6",
        "token_cnt": 607
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_high_clothing_cleanliness(data):\n    \"\"\"\n    This function takes in input dataframe \"data\" which contains \n    high clothing cleaning dataset\n    \n    Parameters:\n        data (DataFrame): Input DataFrame containing high clothing \n            cleaning dataset\n        \n    Returns:    \n        transformed_df (DataFrame): Transformed output DataFrame after applying\n            necessary transformations\n            \n    Raises:\n        ValueError: If invalid value passed for parameter 'data'\n        \n    Control Flow:\n        1) Check whether the input argument \"data\" is valid by calling \n           _check_input_dataframe method\n        \n        2) Use an if else statement based on the consent column value\n           i) For Yes, apply log transformation to the values of columns \n              ['Fine Fragrance', 'Flavors']\n           ii) Else do nothing\n        \n        3) Return the transformed DataFrame \"transformed_df\"    \n    \"\"\"    \n    \n    \n    data = _check_input_dataframe(data)\n    \n    \n    transformed_df = data.copy()\n    \n    \n    if transformed_df['Consent'].eq('Yes').any():\n        \n        \n        selected_cols = [col for col in transformed_df.columns\n                        if ('Fine Fragrance' in col or 'Flavor' in col)]\n        \n        \n        for col in selected_cols:\n            transformed_df[col] = np.log1p(transformed_df[col])\n            \n\n    return transformed_df\n    \n    \n    \n\ndef _check_input_dataframe(data):\n    \"\"\"\n    Helper function to validate input dataframe\n    \n    Args:\n        data (pd.DataFrame): Input dataframe\n        \n    Returns:\n        pd.DataFrame: Validated input dataframe\n        \n    Raises:\n        ValueError: If input dataframe is not of type pandas.core.frame.DataFrame\n    \"\"\"     \n    \n    if isinstance(data, pd.DataFrame):\n        return data\n    raise ValueError(\"Invalid input dataframe\")",
            "id": 686
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (call function: (attribute object: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)) consequence: (block (expression_statement (assignment left: (identifier) right: (list_comprehension body: (identifier) (for_in_clause left: (identifier) right: (attribute object: (identifier) attribute: (identifier))) (if_clause (parenthesized_expression (boolean_operator left: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) right: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)))))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (identifier)))))))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (call function: (identifier) arguments: (argument_list (identifier) (attribute object: (identifier) attribute: (identifier)))) consequence: (block (return_statement (identifier)))) (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 6",
        "token_cnt": 544
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import tweepy \n \n\nconsumer_key = 'YOUR CONSUMER KEY'\nconsumer_secret = 'YOUR CONSUMER SECRET'\n \n\naccess_token = 'YOUR ACCESS TOKEN'\naccess_token_secret = 'YOUR ACCESS TOKEN SECRET'\n \nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n \napi = tweepy.API(auth)\n \ndef get_low_social_media():\n    low_socmeds = []\n    public_tweets = api.search('engineering', result_type='mixed', count=10)['statuses']\n    \n    for tweet in public_tweets:\n        user =tweet['user']['screen_name']\n        \n        followers = tweet['user']['followers_count']\n        following = tweet['user']['friends_count']\n        \n        ratio = round((following / followers)*100,2)\n    \n        if (ratio <35):\n            low_socmeds.append([user,followers,following,ratio])\n            \n    return low_socmeds\n \n def display_low_social_media(low_socmeds):\n     print(\"Low social media users:\")\n     \n     for socmed in low_socmeds:\n         username ,follower,following,ratio = socmed\n         \n         print(f\"User:{username} Followers:{follower} Following :{following} Ratio {ratio}%\")\n \n \nif __name__ == '__main__':\n    low_socmeds =get_low_social_media()\n    display_low_social_media(low_socmeds)",
            "id": 689
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (list))) (expression_statement (assignment left: (identifier) right: (subscript value: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (integer)))) subscript: (string (string_start) (string_content) (string_end))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (identifier))) right: (integer)) (integer))))) (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (integer))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (identifier) (identifier) (identifier) (identifier))))))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (pattern_list (identifier) (identifier) (identifier) (identifier)) right: (identifier))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))))\n**\n",
        "text": " 6",
        "token_cnt": 1058
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_clothing_cleanliness(transparency):\n        \"\"\"Updates clothing cleaning level based on transparency\n        \n        Args:\n            transparency (float): Percentage of particles detected by sensor 1 / Sensor 2 combined\n        Returns:\n            str: New cleaned clothing level\n        Raises:\n            ValueError: If input value is outside valid range [0, 1]    \n        \"\"\"\n    \n        \n        if not isinstance(transparency, float) or (transparency < 0 or transparency > 1):\n            raise ValueError(\"Invalid input value\")\n    \n        \n        if transparency >= 0.95:\n            return \"Very Clean\"\n        elif transparency >= 0.8:\n            return \"Clean\"\n        else:\n            return \"Somewhat Dirty\"",
            "id": 691
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) right: (parenthesized_expression (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (integer))))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 10",
        "token_cnt": 288
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_low_travel(trust):\n    \"\"\"Determine whether user has sufficient trust to make reservations at lower fare levels\n    \n    Args:\n        trust (int): User's trust score between 0 and 100\n        \n    Returns:\n        bool: Whether user can book low travel ticket or not\n\n    Raises:\n        ValueError: If `trust` value is outside of expected range [0, 100]    \n    \"\"\"    \n    \n    \n    if not isinstance(trust, int) or trust < 0 or trust > 100:    \n        raise ValueError(\"Invalid input 'trust' value\")   \n    \n    \n    if trust >= 85: \n        return True   \n    elif trust >= 70:  \n        return False  \n    else:          \n        return None",
            "id": 692
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (boolean_operator left: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) right: (comparison_operator (identifier) (integer))) right: (comparison_operator (identifier) (integer))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (true))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (false)))) alternative: (else_clause body: (block (return_statement (none))))))))\n**\n",
        "text": " 10",
        "token_cnt": 237
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_health_check(age, height, weight):\n    \n    if (age < 18) | (age >65):\n        return \"Due to age restrictions, children under 18 years old or senior citizens above 65 cannot avail of this service.\"\n    \n    \n    elif ((height / weight) <=0.9): \n        return f\"Your BMI ({round((height / weight),2)}) indicates that you may be at risk for being Underweight. It is recommended that you consult with a doctor about incorporating healthy eating habits and engaging in physical activity as part of a comprehensive weight management plan.\"\n\n    \n    else:    \n        return \"Based on provided information, there does not seem to be any immediate concerns regarding your general health status. However, we still recommend that you schedule routine medical examinations to monitor your overall wellness and identify potential issues early on.\"",
            "id": 693
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) body: (block (if_statement condition: (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (integer))) right: (parenthesized_expression (comparison_operator (identifier) (integer)))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (parenthesized_expression (comparison_operator (parenthesized_expression (binary_operator left: (identifier) right: (identifier))) (float))) consequence: (block (return_statement (string (string_start) (string_content) (interpolation expression: (call function: (identifier) arguments: (argument_list (parenthesized_expression (binary_operator left: (identifier) right: (identifier))) (integer)))) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 10",
        "token_cnt": 259
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_high_online_shopping(price):\n    \"\"\"\n    This function checks whether the price of an item being sold online \n    is considered high compared to other similar items available for purchase.\n    \n    Parameters:\n        price (float): The current selling price of the item\n        \n    Returns:\n        bool: A boolean value indicating whether the price is considered \n            \"high\" or not\n            \n    Raises:\n        ValueError: If the input 'price' parameter is not a float type\n            value\n    \"\"\"    \n    \n    if isinstance(price, float) == False:\n        raise ValueError(\"The 'price' parameter must be a floating point number\")    \n\n    \n    THRESHOLD = 100.00   \n    \n    \n    if price > THRESHOLD:    \n        return True\n    else:    \n        return False\n    \n\nitem_one_price = 259.99\nis_price_high = check_high_online_shopping(item_one_price)\nprint(f\"Is the price of {item_one_price} considered high? -> {is_price_high}\")",
            "id": 694
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (false)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (float))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (true))) alternative: (else_clause body: (block (return_statement (false))))))) (expression_statement (assignment left: (identifier) right: (float))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_end))))))\n**\n",
        "text": " 10",
        "token_cnt": 293
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_low_nose(symptoms):\n    \"\"\"Checks whether user has entered symptom of 'Low Nose'\n\n    Args:\n        symptoms (list[str]): List of inputted symptoms\n\n    Returns:\n        str: Indicates severity level of symptom ('None', 'Mild', 'Severe')\n            Based on provided list of symptoms \n    Raises:\n        ValueError: If no matching symptom found from input list\n    \n    >>> check_low_nose(['runny nose'])\n    'Mild'\n    >>> check_low_nose(['sneezing', 'congestion'])\n    'Moderate'\n    >>> check_low_nose(['bloody discharge', 'fever'])\n    'Severe'\n    >>> check_low_nose(['headache', 'nausea'])\n    Traceback (most recent call last):\n      ...\n    ValueError: No match found between entered symptoms and possible conditions.\n    \"\"\"\n    \n    POSSIBLE_SYMPTOMS = [\n        \"runny nose\", \n        \"stuffy nose\", \n        \"blocked nose\", \n        \"congested nasal passages\"\n    ]\n\n    \n    for symptom in symptoms:\n        if symptom in POSSIBLE_SYMPTOMs:\n            return \"Mild\"\n        elif all([x in symptoms for x in [\"sneezing\", \"watery eyes\"]]):\n            return \"Moderate\"\n        elif \"bloody discharge\" in symptoms:\n            return \"Severe\"\n\n    raise ValueError(\"No match found between entered symptoms and possible conditions.\")",
            "id": 696
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (call function: (identifier) arguments: (argument_list (list_comprehension body: (comparison_operator (identifier) (identifier)) (for_in_clause left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))))) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 6",
        "token_cnt": 410
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_low_bathing_routine(input_text):\n    \n    bather_weight = float(input(\"Please enter your weight (kg) : \"))\n    water_temperature = int(input(\"What temperature do you want to bathe at? \\n1 - Cold\\n2 - Lukewarm\\n3 - Warm\"))\n\n    \n    if water_temperature == 1:\n        recommended_time = round((bather_weight * 0.5), 1)\n        print(f\"For cold water ({water_temperature}), soak for {recommended_time} minutes\")\n    \n    elif water_temperature == 2:\n        recommended_time = round((bather_weight * 0.75), 1)\n        print(f\"For lukewarm water ({water_temperature}), soak for {recommended_time} minutes\")\n        \n    else: \n        recommended_time = round((bather_weight * 1), 1)\n        print(f\"For warm water ({water_temperature}), soak for {recommended_time} minutes\")\n        \n     \n    while True:    \n        user_response = str(input(\"\\nAre you sure about this recommendation [y/N]? \")).lower()\n    \n        if user_response[0] == 'y':\n            break\n        \n        elif user_response[0] == 'n':\n            print(\"Okay! Let me know what other queries you may have.\")\n            return None\n\n        else: \n            print(\"Invalid entry. Please try again.\")\n            \n    \n    output_md = f\"\"\"| Topic | Description |\\n|---|---|\\n| **Low Bathing Routine** | Soaking in water for a specific duration can help improve blood circulation, relieve stress, relax muscles, etc. This section provides guidelines on choosing the right water temperature according to one’s body weight.|\n    | **Water Temperature Recommendations**| The ideal amount of time spent in each water temperature category depends on individual preferences and comfort levels.\\n* For cold water (`{water_temperature}`): Soak for `{recommended_time}` mins\\n* For luke warm water (`{water_temperature}`):\\Soak for `{recommended_time}` mins\\n* For warm water(`{water_temperature}`):\\Soak for `{recommended_time}` mins|\\n| **Safety Precautions** | Before indulging in any form of hydrotherapy, it is important to consult a doctor and follow proper hygiene protocols such as showering prior to getting into the water.\"\"\"    \n    \n    return output_md",
            "id": 697
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence) (escape_sequence)) (string_end)))))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (parenthesized_expression (binary_operator left: (identifier) right: (float))) (integer))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (parenthesized_expression (binary_operator left: (identifier) right: (float))) (integer))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (parenthesized_expression (binary_operator left: (identifier) right: (integer))) (integer))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))))))) (while_statement condition: (true) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (integer)) (string (string_start) (string_content) (string_end))) consequence: (block (break_statement)) alternative: (elif_clause condition: (comparison_operator (subscript value: (identifier) subscript: (integer)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (none)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content (escape_sequence) (escape_sequence) (escape_sequence)) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content (escape_sequence)) (string_end)))) (return_statement (identifier)))))\n**\n",
        "text": " 4",
        "token_cnt": 991
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def display_low_hygiene(fruits_and_veggies):\n    \"\"\"Display warning message when food items has low cleaning scores.\"\"\"\n\n    \n    high_reliability = 70\n    medium_reliability = 50\n    low_reliability = 30\n    \n    \n    for item in fruits_and_veggies:\n        \n        if (reliability[item] >= high_reliability):\n            print(\"Item:\", item, \"has High Hygiene Score\")\n        elif (reliability[item] >= medium_reliability) : \n            print(\"Item:\", item,\"has Medium Hygiene Score:\")\n        else:\n            print(\"WARNING: Item:\", item ,\"has LOW HYGIENE SCORE!\")\n            break",
            "id": 699
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (identifier)) (identifier))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (identifier)) (identifier))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content) (string_end))))) (break_statement)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 382
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_extreme(transparency, color):\n    \n    combos = [(t, c) for t in range(0, 256) / 255 for c in ['red', 'blue']]\n\n    def is_extreme(combo):\n        return combo[0] < .9 and combo[1] == 'blue'\n    \n    \n    for i in range(len(combos)):\n        result = is_extreme(combos[i])\n        if result:\n            print(\"Dry Run:\", combos[i], \" returned\", result)\n            break\n\n    \n    if is_extreme((transparency, color)) : \n        print(\"Extreme Flossing! \", color,\" Thread with low transparency\")\n    else:\n        print(\"Not Extreme Flossing!\")\n\n\n\nif __name__ == '__main__':    \n    \n    while True:    \n        try: \n            transparency = float(input('Enter Transparency Value [0-1]: '))\n            color = str(input('Enter Color [\"Red\"/\"Blue\"]: '))\n            break\n        except ValueError:\n            continue\n        \n    \n    if not (0 <= transparency <= 1) or color not in ['red', 'blue']:\n        raise ValueError(\"Invalid Input\")\n\n    \n    determine_extreme(transparency, color)",
            "id": 701
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (list_comprehension body: (tuple (identifier) (identifier)) (for_in_clause left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (integer) (integer))) right: (integer))) (for_in_clause left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (return_statement (boolean_operator left: (comparison_operator (subscript value: (identifier) subscript: (integer)) (float)) right: (comparison_operator (subscript value: (identifier) subscript: (integer)) (string (string_start) (string_content) (string_end))))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (identifier)))))) (if_statement condition: (identifier) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (subscript value: (identifier) subscript: (identifier)) (string (string_start) (string_content) (string_end)) (identifier)))) (break_statement))))) (if_statement condition: (call function: (identifier) arguments: (argument_list (tuple (identifier) (identifier)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (while_statement condition: (true) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (break_statement)) (except_clause (identifier) (block (continue_statement)))))) (if_statement condition: (boolean_operator left: (not_operator argument: (parenthesized_expression (comparison_operator (integer) (identifier) (integer)))) right: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier)))))))\n**\n",
        "text": " 10",
        "token_cnt": 898
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def expert_toilet_hygiene(user_input):\n    \"\"\" \n    This function checks whether there was any potential contamination during sample collection for expert analysis\n    \n    Parameters:\n        user_input (str): User input regarding possible sources of contamination\n\n    Returns:\n        str: Message indicating result of test and next steps\n        \n    Raises:\n        ValueError: If invalid input provided    \n    \"\"\"    \n    \n    \n    if not isinstance(user_input, str):    \n        raise ValueError(\"Invalid input type\")   \n    \n    \n    sources = [\"User\", \"Lab technician\", \"Environment\"]  \n    \n    \n    for source in sources: \n        if source in user_input.lower(): \n            return f\"Potential {source} contamination detected! Please repeat the process.\"     \n    \n    \n    return \"No evidence of contamination found!\"",
            "id": 702
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (identifier) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) consequence: (block (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))) (return_statement (string (string_start) (string_content) (string_end))))))\n**\n",
        "text": " 10",
        "token_cnt": 306
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n\ndef preprocess(df):\n    \n    df = df.dropna()\n    \n    \n    df['pickup_datetime'] = pd.to_datetime(df['pickup_datetime'])\n\n    return df\n    \n\ndef split_data(df):\n    \n    X_train, X_test, y_train, y_test = train_test_split(\n        df[['dropoff_latitude', 'dropoff_longitude']], \n        df['fare_amount'], test_size=0.3)\n        \n    return X_train, X_test, y_train, y_test\n    \n    \ndef transform_for_engineer(df):\n    \"\"\"Transform the given dataframe such \n    that only those rows whose consent flag is true \n    remain after dropping all other columns.\"\"\"\n    \n    \n    df = preprocess(df)\n    \n    \n    mask = (df['consent'] == True)\n    \n    \n    selected_rows = df[mask]\n    \n    \n    df.drop(index=~mask.values, inplace=True)\n    \n    \n    num_remaining_rows = len(df)\n    print(f\"Number of remaining rows after filtering: {num_remaining_rows}\")\n    \n    \n    X_train, X_test, y_train, y_test = split_data(selected_rows)\n    \n    \n    print(\"Training set shape:\", X_train.shape)\n    print(\"Testing set shape:\", X_test.shape)\n    \n    return X_train, X_test, y_train, y_test\n\n    \nif __name__ == '__main__':\n    \n    df = pd.read_csv('sample_data.csv')\n    \n    \n    print(\"\\nDry Run:\")\n    transformed_df = transform_for_engineer(df)\n    \n    \n    print(\"\\nActual Transformation:\")\n    transformed_df = transform_for_engineer(df)",
            "id": 705
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (pattern_list (identifier) (identifier) (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (float)))))) (return_statement (expression_list (identifier) (identifier) (identifier) (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (true))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (unary_operator argument: (attribute object: (identifier) attribute: (identifier)))) (keyword_argument name: (identifier) value: (true))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_end))))) (expression_statement (assignment left: (pattern_list (identifier) (identifier) (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))))) (return_statement (expression_list (identifier) (identifier) (identifier) (identifier))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))))))\n**\n",
        "text": " 6",
        "token_cnt": 1083
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_high_food_hygiene(reliability):\n    \"\"\"\n    This function updates high food hygiene based on reliability score\n    \n    Args:\n        reliability (float): The reliability score between 0 and 1\n        \n    Returns:\n        str: A markdown string containing details about updated hygeine standard \n    \"\"\"\n\n    \n    level_one = \"Good\"\n    level_two = \"Very Good\"\n    level_three = \"Excellent\"\n    descriptions = {\n        0.8 : f\"{level_one} ({descriptions[0.7]})\",\n        0.9 : f\"{level_two} ({descriptions[0.8]})\",\n        1    : f\"{level_three}\"\n    }\n    \n    \n    if reliability >= 0.8:\n        return f\"`{descriptions[reliability]}` - Standard met.\"\n    elif reliability < 0.8 and reliability >= 0.7:\n        return f\"`{descriptions[reliability]}` - Needs improvement.\"\n    else:\n        return \"**Failed**\"\n\n\nprint(update_high_food_hygiene(0.9)) \nprint(update_high_food_hygiene(0.65)) \nprint(update_high_food_hygiene(0.3))",
            "id": 706
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (float) value: (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (float))) (string_content) (string_end))) (pair key: (float) value: (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (float))) (string_content) (string_end))) (pair key: (integer) value: (string (string_start) (interpolation expression: (identifier)) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (string (string_start) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (identifier))) (string_content) (string_end)))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (float)) right: (comparison_operator (identifier) (float))) consequence: (block (return_statement (string (string_start) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (identifier))) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (float)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (float)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (float)))))))\n**\n",
        "text": " 10",
        "token_cnt": 603
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_availability(product_name, stores):\n    \"\"\"Check availability of a product across multiple online stores\n    \n    Args:\n        product_name (str): Name of the product\n        stores (list): List of dictionaries containing details about \n            each online store including 'name', 'link' and 'inventory'\n        \n    Returns:\n        bool: True if the product is available at all stores, False otherwise\n\n    Raises:\n        ValueError: If the product name is empty or NoneType\n    \"\"\"    \n    \n    if not isinstance(product_name, str) or len(product_name.strip()) == 0: \n        raise ValueError(\"Product name cannot be blank\") \n\n    if not isinstance(stores, list) or len(stores) == 0: \n        raise ValueError(\"Invalid stores list provided\") \n    \n    \n    avail = True    \n    \n    \n    for s in stores:    \n        \n        inv = s['inventory']\n        \n        \n        for p in inv:\n            \n            if p['name'].lower() == product_name.lower(): \n                if p['available']: \n                    break\n                else:\n                    avail = False   \n                    \n        \n        if avail: \n            break  \n            \n    return avail",
            "id": 708
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) right: (comparison_operator (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (integer))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (boolean_operator left: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) right: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (integer))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (true))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list)) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) consequence: (block (if_statement condition: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) consequence: (block (break_statement)) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (false)))))))))) (if_statement condition: (identifier) consequence: (block (break_statement))))) (return_statement (identifier)))))\n**\n",
        "text": " 10",
        "token_cnt": 560
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import requests\nfrom bs4 import BeautifulSoup\n\ndef get_transparency_score(company_name):\n    url = f\"https://www.investopedia.com/{company_name}-financials/\"\n    page = requests.get(url)\n    soup = BeautifulSoup(page.content, \"html.parser\")\n\n    \n    tables = soup.find(\"table\", {\"class\": \"tableFINFlexTable\"})\n    \n    \n    trs = tables.findAll('tr')\n    tot_rev = float(trs[6].text.strip().split('\\n')[1])\n\n    \n    op_profit = float(trs[9].text.strip().split('\\n')[2])\n    net_sales = float(trs[7].text.strip().split('\\n')[2])\n    ebitda_margin = round((op_profit / net_sales) * 100, 2)\n\n    \n    avg_assets = float(trs[38].text.strip().split('\\n')[2])\n    rev = float(tot_rev)\n    atv = round((rev / avg_assets) * 100, 2)\n\n    \n    lt_liab = float(trs[41].text.strip().split('\\n')[2])\n    sh_eq = float(trs[40].text.strip().split('\\n')[2])\n    debtratio = round((lt_liab / sh_eq) * 100, 2)\n\n    \n    metrics = {\n        'Total Revenue': tot_rev, \n        'EBITDA Margin (%)': ebitda_margin,\n        'Asset Turnover (x)': atv,\n        'Debt Ratio (%)': debtratio\n    }\n\n    return metrics\n\n\nprint(get_transparency_score(\"blackrock\"))",
            "id": 712
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (call function: (attribute object: (call function: (attribute object: (attribute object: (subscript value: (identifier) subscript: (integer)) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))) subscript: (integer)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (call function: (attribute object: (call function: (attribute object: (attribute object: (subscript value: (identifier) subscript: (integer)) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))) subscript: (integer)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (call function: (attribute object: (call function: (attribute object: (attribute object: (subscript value: (identifier) subscript: (integer)) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))) subscript: (integer)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (identifier))) right: (integer)) (integer))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (call function: (attribute object: (call function: (attribute object: (attribute object: (subscript value: (identifier) subscript: (integer)) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))) subscript: (integer)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (identifier))) right: (integer)) (integer))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (call function: (attribute object: (call function: (attribute object: (attribute object: (subscript value: (identifier) subscript: (integer)) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))) subscript: (integer)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (call function: (attribute object: (call function: (attribute object: (attribute object: (subscript value: (identifier) subscript: (integer)) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))) subscript: (integer)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (identifier))) right: (integer)) (integer))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier))))) (return_statement (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 10",
        "token_cnt": 1489
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def DetermineLowHandHygieneOutsideTheHome(expert_mode):\n    \n    print(\"Determining Low Hand Hygiene Outside Home\")\n    \n    \n    if expert_mode ==True:\n        \n        choice =input(\"Has person been observed carrying wet wipes? [Y/N]\")\n        \n        \n        if choice.upper()=='Y':\n            print(\"Expert Mode Enabled : Person was likely observing good hand hygiene practices.\")\n        elif choice.upper()=='N':\n            print(\"Expert Mode Enabled : Person may need additional education about proper hand hygiene techniques.\")\n            \n    else:\n        \n        print(\"No Expert Mode Specified : Defaulting to recommending use of hand towels as primary method of reducing risk of spreading germs \")\n        \n    return\n    \n\nif __name__==\"__main__\":    \n    expert_mode=False \n    \n    \n    while True:\n        try: \n            expert_choice = input(\"Do you wish to enable expert mode?(y/n)\").lower()\n            \n            \n            if expert_choice == \"y\":\n                expert_mode = True \n                break\n                \n            \n            elif expert_choice == \"n\":\n                expert_mode = False  \n                break\n        \n            \n           else:\n               raise ValueError(\"Invalid Choice Entered Please Try Again!\")\n    \n        except ValueError as e:\n            print(f\"{e}\")  \n        \n\n    DetermineLowHandHygieneOutsideTheHome(expert_mode)",
            "id": 717
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (true)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (return_statement))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (false))) (while_statement condition: (true) body: (block (try_statement (ERROR (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (true))) (break_statement)) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (false))) (break_statement))))) (identifier)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))))\n**\n",
        "text": " 6",
        "token_cnt": 749
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import os\nfrom getpass import getuser\n\n\ndef check_trust(username):\n    \"\"\"Check if username is trusted\"\"\"\n    \n    \n    TRUSTED_USERS = ['trusted']\n\n    \n    return username in TRUSTed_users\n    \n\ndef display_extreme_bathing():\n    print(\"Extreme Bathing Routine:\")\n    print(\"* Dry yourself thoroughly after taking a shower\")\n    print(\"* Wipe down all surfaces with disinfectant wipes\")\n    print(\"* Use a hairdryer to blow warm air onto every part of your body\")\n    print(\"* Take extra care around sensitive areas like your face, groin, and feet\")\n    print(\"\")\n    print(\"This process takes longer than usual but can help prevent illness.\")\n    print(\"Do you want me to guide you through this process? (y/n)\")\n    \n    \ndef main():\n    \n    username = getuser()\n    \n    \n    if not check_trust(username):\n        print(f\"Hello {username}, unfortunately you do not have enough trust \"\n              f\"level to use this feature yet!\")\n        \n        \n        prompt_increased_trust()\n        \n    else:    \n        \n        display_extreme_bathing()\n        \n    \n\n    \ndef prompt_increased_trust():    \n    while True:\n        choice = input(\"Would you like to try again as another user? (Y/N) \")\n    \n        if choice.lower().startswith('y'):\n            break\n        elif choice.lower().startswith('n'):\n            exit(\"Thank you for trying out our product! Goodbye!\")\n            \n        else:\n            print(\"Please enter Y or N\")\n            \n    \n    main()\n    \n    \nif __name__ == '__main__':\n    main()",
            "id": 719
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end))))) (return_statement (comparison_operator (identifier) (identifier))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (if_statement condition: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (concatenated_string (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list)))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (while_statement condition: (true) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) consequence: (block (break_statement)) alternative: (elif_clause condition: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 6",
        "token_cnt": 1012
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "username = input(\"Enter username:\") \npassword = input(\"Enter password:\") \n \nif (username == \"John Doe\" and password == \"pa$$w0rd\"): \n    print(\"Welcome John Doe!\") \n     \n    \n    update_type = input(\"What do you want to update? \") \n         \n    \n    if update_type == 'Add new topic': \n        add_new_topic() \n    elif update_type == 'Update existing topic': \n        update_existing_topic() \n    else: \n        print(\"Invalid option selected.\") \nelif (username == \"Jane Doe\" and password == \"<PASSWORD>\"): \n    print(\"Welcome Jane Doe!\") \n     \n    \n    operation = input(\"Do you want to (A)dd new topic or (U)pdate existing one?\") \n             \n    \n    if operation == 'A': \n        add_new_topic() \n    elif operation == 'U': \n        update_existing_topic() \n    else: \n        print(\"Invalid operation selected\") \nelse: \n    print(\"Incorrect login details provided.\") \n \ndef add_new_topic(): \n    \n    topic_name = input(\"Enter topic name: \") \n          \n    \n    with open('oral_health_habits.txt', 'a') as f: \n        f.write(f\"\\n\\n{topic_name}\") \n           \n    print(f\"{topic_name} added successfully!\") \n \ndef update_existing_topic(): \n    \n    with open('oral_health_habits.txt', 'r') as f: \n        content = f.readlines() \n  \n    \n    for line in content: \n        splitted_line = line.split(\": \", maxsplit=1) \n        topic_name = splitted_line[0] \n          \n        \n        if input(f\"{topic_name}: Do you need to update this section? [y/N]: \").lower().startswith('y'): \n            updated_content = input(f\"Please provide updated content for {topic_name}: \") \n              \n            \n            with open('oral_health_habits.txt', 'w') as f: \n                f.writelines([f\"{topic_name}: {updated_content}\\n\"]) \n                 \n            break \n            \n    else: \n        print(\"No matching topic found.\")",
            "id": 720
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (parenthesized_expression (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list)))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))) alternative: (elif_clause condition: (parenthesized_expression (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list)))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (with_statement (with_clause (with_item value: (as_pattern (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) alias: (as_pattern_target (identifier))))) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (interpolation expression: (identifier)) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (with_statement (with_clause (with_item value: (as_pattern (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) alias: (as_pattern_target (identifier))))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (integer)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (integer)))) (if_statement condition: (call function: (attribute object: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))))) (with_statement (with_clause (with_item value: (as_pattern (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) alias: (as_pattern_target (identifier))))) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content (escape_sequence)) (string_end)))))))) (break_statement)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))\n**\n",
        "text": " 5",
        "token_cnt": 1647
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import requests\nfrom datetime import timedelta,datetime\n\n\ndef update_high_temperature(city):\n    \n    if city is None or len(city.strip()) ==0 :\n        print(\"Please provide a valid City Name\")\n        return\n\n    url = f\"https://api.openweathermap.org/data/2.5/weather?q={city}&appid=YOUR_APIKEY&units=metric\"\n    \n    try: \n        response =requests.get(url)\n        \n        if response.status_code != 200:\n            raise Exception(\"Error while fetching Data\")\n\n        data =response.json()\n\n        temp = data['main']['temp']\n        min_temp = temp -10\n        max_temp = temp +10\n        now = datetime.now()\n        next_week = [now+timedelta(days=x)for x in range(7)]\n\n        high_weahter={\"City\":city,\"Lowest Temperature\":[min_temp]*7,\"HighestTemperature\":[max_temp]*7}\n\n        i=0\n        for day in next_week:\n\n            forecast_url =f\"http://api.openweathermap.org/data/2.5/forecast?q={city}&appid=YOUR_APIKEY&cnt=1&units=metric&dt={day.timestamp()} \"\n            \n            forecast_response = requests.get(forecast_url)\n        \n            if forecast_response.status_code!=200:\n                continue\n                \n            forecast_data = forecast_response.json()['list'][0]\n            \n          \n            low = forecast_data['main']['temp_min']\n            high = forecast_data['main']['temp_max']\n\n            high_weahter[\"Lowest Temperature\"][i]=low\n            high_weahter[\"HighestTemperature\"][i]=high\n            i+=1\n\n        return high_weahter\n\n\n    except Exception as e:\n        print(e)",
            "id": 721
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (none)) right: (comparison_operator (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (integer))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (integer)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (integer)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (integer)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (binary_operator left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier))))) (for_in_clause left: (identifier) right: (call function: (identifier) arguments: (argument_list (integer))))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (binary_operator left: (list (identifier)) right: (integer))) (pair key: (string (string_start) (string_content) (string_end)) value: (binary_operator left: (list (identifier)) right: (integer)))))) (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (integer)) consequence: (block (continue_statement))) (expression_statement (assignment left: (identifier) right: (subscript value: (subscript value: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) subscript: (string (string_start) (string_content) (string_end))) subscript: (integer)))) (expression_statement (assignment left: (identifier) right: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (identifier)) right: (identifier))) (expression_statement (assignment left: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (identifier)) right: (identifier))) (expression_statement (augmented_assignment left: (identifier) right: (integer))))) (return_statement (identifier))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))))))))\n**\n",
        "text": " 10",
        "token_cnt": 1345
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def analyze_cuticles(condition):\n    \"\"\"Determines extreme nail care level based on cuticle condition.\"\"\"\n\n    \n    SEVERITY = {\n        \"Excellent\": (0,1), \n        \"Good\":    (2,3),    \n        \"Fair\":    (4,5)    \n    }\n    \n    try:\n        \n        \n        if isinstance(condition, str) == False:\n            raise ValueError(\"Invalid input type\")\n    \n        \n        condition = condition.lower()\n    \n        \n        min_severity, max_severity = SEVERITY[condition]\n    \n        \n        if min_severity <= 2 and max_severity >= 4: \n            return f\"Cuticles appear healthy ({condition}). No further action required.\"\n        elif min_severity > 2 and max_severity < 4:\n            return f\"Cuticles require attention ({condition}), but no immediate intervention is necessary.\"\n        else:\n            return f\"Severe deterioration detected! Immediate medical attention needed ({condition})\"\n        \n    except KeyError as e:\n        print(f\"{e}: Invalid condition specified.\")\n    \n\nprint(analyze_cuticles('excellent'))   \nprint(analyze_cuticles('GOOD'))        \nprint(analyze_cuticles('FAIR'))        \nprint(analyze_cuticles(7))            \nprint(analyze_cuticles(['poor', 'but', 'trying']))",
            "id": 723
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (tuple (integer) (integer))) (pair key: (string (string_start) (string_content) (string_end)) value: (tuple (integer) (integer))) (pair key: (string (string_start) (string_content) (string_end)) value: (tuple (integer) (integer)))))) (try_statement body: (block (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (false)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (pattern_list (identifier) (identifier)) right: (subscript value: (identifier) subscript: (identifier)))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (integer))) consequence: (block (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (integer))) consequence: (block (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 847
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import time \n\ndef determine_nosebleed(moisture):\n    \"\"\"Determines whether user has low nose bleeds based \n    upon provided moisture value from sensor\"\"\"\n\n    \n    if moisture < 30:\n        print(\"Low Moisture Detected\")\n\n        \n        \n        durations = [15, 20]\n        count = 0 \n\n        while True:\n            try:\n                \n                \n                time.sleep(1)\n                count += 1 \n            except KeyboardInterrupt:\n                break\n\n            \n            if count in durations:\n                print(f\"Nosebleed detected after {count} seconds.\")\n                return \"Nasal Bleed\"\n    \n    else:\n        print(\"Normal Moisture Levels Detected\")\n\n\n\nif __name__ == \"__main__\":\n    sensor = get_nasal_sensor()\n    moisture = read_moisture_level(sensor)\n    result = determine_nosebleed(moisture)\n\n    if result == \"Nasal Bleed\":\n        take_appropriate_action()",
            "id": 725
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list (integer) (integer)))) (expression_statement (assignment left: (identifier) right: (integer))) (while_statement condition: (true) body: (block (try_statement body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer)))) (expression_statement (augmented_assignment left: (identifier) right: (integer)))) (except_clause (identifier) (block (break_statement)))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))) (return_statement (string (string_start) (string_content) (string_end)))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))))\n**\n",
        "text": " 10",
        "token_cnt": 564
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import math \n\ndef celsius_to_fahrenheit(celsius):\n    \"\"\"Convert Celcius degrees to Fahrenheit\"\"\"\n    return (9 / 5) * celsius + 32\n    \ndef fahrenheit_to_kelvin(fahrenheit):\n    \"\"\"Convert Fahrenheit degree to Kelvin.\"\"\"\n    return (fahrenheit - 32) * (5 / 9) + 273.15\n\ndef calculate_extreme_weather_temp(temperature_in_c, ethic='human'):\n    \"\"\"Calculate the extreme weather temp given input temp and ethical consideration\n    \n    Args:\n        temperature_in_c (float): Input temperature in celcius\n        ethic (str, optional): 'human' or 'machine'. Defaults to 'human'.\n\n    Returns:\n        float: The calculated extreme weather temp \n    Raises:\n        ValueError: If `ethic` is not one of ('human', 'machine')\n        \n    \"\"\"    \n    \n    if isinstance(temperature_in_c, int) or isinstance(temperature_in_c, float):    \n        pass\n    else:\n        raise ValueError(\"Invalid input type! Expected float or integer.\")    \n    \n    \n    kelvin = celsius_to_fahrenheit(temperature_in_c) + 273.15   \n    \n    \n    if ethic == \"human\":\n        extreme_weather_temp = max([kelvin, 0])   \n    elif ethic == \"machine\":\n        extreme_weather_temp = min([kelvin, 450.8]) \n    else:\n        raise ValueError(\"Invalid argument for 'ethic'! Expecting either 'human' or 'machine'\")        \n    \n    \n    result_in_c = extreme_weather_temp - 273.15\n    \n    return round(result_in_c, 2)\n    \n    \nif __name__ == '__main__':\n    print(\"Extreme weather temp calculation:\")\n    inp_temp_c = float(input(\"Enter temperature in Celsius: \"))\n    ext_wea_temp_c = calculate_extreme_weather_temp(inp_temp_c)\n    print(f\"The extreme weather temp is {ext_wea_temp_c}°C\")",
            "id": 726
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (return_statement (binary_operator left: (binary_operator left: (parenthesized_expression (binary_operator left: (integer) right: (integer))) right: (identifier)) right: (integer))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (return_statement (binary_operator left: (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (integer))) right: (parenthesized_expression (binary_operator left: (integer) right: (integer)))) right: (float))))) (function_definition name: (identifier) parameters: (parameters (identifier) (default_parameter name: (identifier) value: (string (string_start) (string_content) (string_end)))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) consequence: (block (pass_statement)) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (float)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list (identifier) (integer))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list (identifier) (float)))))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (float)))) (return_statement (call function: (identifier) arguments: (argument_list (identifier) (integer)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))))\n**\n",
        "text": " 5",
        "token_cnt": 885
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import time\n \ndef main():\n    \n    temp = float(input(\"Enter Temperature : \"))\n    humi = float(input(\"Enter Humidity    : \"))\n \n    \n    vis_res = int(input(\"Is there any visible dirt? (0/1): \"))\n    \n    \n    if ((temp < 50 )and (humi<60)) and (vis_res == 0):\n        print(\"Toilet cleanliness level is Good\")\n    elif (((temp >=49)or(humi>=70)) and (vis_res==1)):\n        print(\"Toilet needs immediate attention \")\n    else: \n        print(\"Please recheck the readings and repeat the test.\")\n \n \nif __name__ == '__main__':\n    start_time = time.time()\n    main()\n    end_time = time.time()\n    run_time = round((end_time - start_time),2)\n    print(\"Total runtime:\",run_time,\"seconds\")",
            "id": 728
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (boolean_operator left: (parenthesized_expression (boolean_operator left: (parenthesized_expression (comparison_operator (identifier) (integer))) right: (parenthesized_expression (comparison_operator (identifier) (integer))))) right: (parenthesized_expression (comparison_operator (identifier) (integer)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (parenthesized_expression (boolean_operator left: (parenthesized_expression (boolean_operator left: (parenthesized_expression (comparison_operator (identifier) (integer))) right: (parenthesized_expression (comparison_operator (identifier) (integer))))) right: (parenthesized_expression (comparison_operator (identifier) (integer))))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (identifier) arguments: (argument_list))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (parenthesized_expression (binary_operator left: (identifier) right: (identifier))) (integer))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 5",
        "token_cnt": 744
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def sanitize_hand(has_soap):\n    \"\"\"\n    This function determines whether \n    the user should apply hand sanitizer\n    \n    Args:\n        has_soap (bool): Whether there is soap available\n\n    Returns:\n        str: A message indicating whether \n            they should apply hand sanitizer or not\n    \"\"\"\n    \n    if has_soap:\n        return \"Apply hand sanitizer\"\n        \n    else: \n        \n        return \"Wash hands thoroughly with soap and water for at least 20 seconds.\"\n\n\n\nif __name__ == '__main__':    \n    \n    has_soap = bool(input(\"Do you have soap? (y/n) \"))\n    \n    print(sanitize_hand(has_soap))",
            "id": 729
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (identifier) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 246
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def high_cloth_cleaning(stain):\n    \"\"\"Determine appropriate laundry cleaning method based on type of stain.\"\"\"\n\n    \n    stains = {\n        'minor': ['pre-treat', 'wash'],\n        'moderate': ['pre-treat', 'bleach', 'wash'],\n        'severe': ['pre-treat', 'bleach', 'soak', 'wash']\n    }\n    \n    \n    for level in stains:\n        if stain == level:\n            return stains[level]\n        \n    \n    raise ValueError('Invalid stain level')",
            "id": 732
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (subscript value: (identifier) subscript: (identifier))))))) (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 10",
        "token_cnt": 389
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_hygiene(surface):\n    \"\"\"\n    Checks whether given surface requires \n    additional cleaning measures according to \n    WHO guidelines\n    \n    Parameters\n    ----------\n    surface : str\n        Type of surface requiring disinfection\n        \n    Returns\n    -------\n    bool\n        Whether extra precautions required or not\n\n    Raises\n    ------\n    ValueError\n        If input 'surface' is not recognized type of surface\n    \"\"\"    \n    \n    if __name__ == '__main__':    \n        print(\"Dry Run Mode:\")    \n    \n    \n    responsible = get_responsible(surface)\n    \n    \n    if (responsible == \"patient\"):    \n        return check_for_respiratory_secretions(surface) \\\n            and check_for_faeces(surface) \\\n            and check_for_urine(surface) \\\n            and check_for_vomitus(surface) \\\n            and check_for_blood(surface)\n            \n    elif (responsible == \"healthcare worker\" \n            or responsible == \"visitor\"):    \n        return check_for_sputum(surface) \\\n            and check_for_saliva(surface) \\\n            and check_for_mucous_membrane_contact(surface)\n            \n    else:    \n        raise ValueError(\"Invalid value provided for parameter 'responsibility'.\")\n\n\n\ndef get_responsible(surface):    \n    if surface in [\"bed\", \"mattress\"]:    \n        return \"patient\"    \n    elif surface in [    \n        \"door knob\", \n        \"handrail\", \n        \"toilet flush button\", \n        \"tap\", \n        \"keyboard\", \n        \"computer mouse\"]:    \n        return \"household member\"    \n    elif surface in [    \n        \"hospital gown\", \n        \"surgical mask\", \n        \"face shield\"]:    \n        return \"healthcare worker\"    \n    elif surface in [\"shopping cart\", \"public transport seat\"]:    \n        return \"visitor\"    \n    else:    \n        raise ValueError(\"Invalid value provided for parameter 'surface'.\")\n    \n\n\ndef check_for_respiratory_secretions(surface):    \n    if surface in [\"pillow\", \"duvet\"]:    \n        return True    \n    else:    \n        return False    \n\ndef check_for_faeces(surface):    \n    if surface in [\"carpet\", \"floor mat\"]:    \n        return True    \n    else:    \n        return False   \n\ndef check_for_urine(surface):    \n    if surface in [\"seat cushion\", \"chair\"]:    \n        return True    \n    else:    \n        return False  \n\ndef check_for_vomitus(surface):    \n    if surface in [\"tablecloth\", \"wallpaper\"]:    \n        return True    \n    else:    \n        return False     \n        \ndef check_for_blood(surface):    \n    if surface in [\"towel\", \"napkin\"]:    \n        return True    \n    else:    \n        return False      \n    \ndef check_for_sputum(surface):    \n    if surface in [\"phone\", \"tablet\"]:    \n        return True    \n    else:    \n        return False       \n    \ndef check_for_saliva(surface):    \n    if surface in [\"kitchen countertop\", \"refrigerator door\"]:    \n        return True    \n    else:    \n        return False          \n    \ndef check_for_mucous_membrane_contact(surface):    \n    if surface in [\"glasses\", \"spectacle lenses\"]:    \n        return True    \n    else:    \n        return False",
            "id": 733
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (boolean_operator left: (boolean_operator left: (boolean_operator left: (boolean_operator left: (call function: (identifier) arguments: (argument_list (identifier))) (line_continuation) right: (call function: (identifier) arguments: (argument_list (identifier)))) (line_continuation) right: (call function: (identifier) arguments: (argument_list (identifier)))) (line_continuation) right: (call function: (identifier) arguments: (argument_list (identifier)))) (line_continuation) right: (call function: (identifier) arguments: (argument_list (identifier)))))) alternative: (elif_clause condition: (parenthesized_expression (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))))) consequence: (block (return_statement (boolean_operator left: (boolean_operator left: (call function: (identifier) arguments: (argument_list (identifier))) (line_continuation) right: (call function: (identifier) arguments: (argument_list (identifier)))) (line_continuation) right: (call function: (identifier) arguments: (argument_list (identifier))))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (true))) alternative: (else_clause body: (block (return_statement (false))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (true))) alternative: (else_clause body: (block (return_statement (false))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (true))) alternative: (else_clause body: (block (return_statement (false))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (true))) alternative: (else_clause body: (block (return_statement (false))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (true))) alternative: (else_clause body: (block (return_statement (false))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (true))) alternative: (else_clause body: (block (return_statement (false))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (true))) alternative: (else_clause body: (block (return_statement (false))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (true))) alternative: (else_clause body: (block (return_statement (false))))))))\n**\n",
        "text": " 10",
        "token_cnt": 1804
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_low_travel(reliability):\n    \n    outcomes = [\"Flight A\", \"Flight B\", \"No flights\"]\n    probabilites = [0.3, 0.45, 0.2]\n\n    \n    max_value = -float(\"inf\")\n    best_outcome = None\n    for i in range(len(outcomes)):\n        value = outcomes[i]*probabilites[i] * reliability \n        if (max_value < value):\n            max_value = value \n            best_outcome = outcomes[i]\n    \n    return best_outcome\n\n\n\nif __name__ == '__main__':\n    reliability = float(input(\"Enter reliability of system:\"))\n    outcome = calculate_low_travel(reliability)\n    print(\"Lowest cost option:\", outcome)",
            "id": 735
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list (float) (float) (float)))) (expression_statement (assignment left: (identifier) right: (unary_operator argument: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (none))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (subscript value: (identifier) subscript: (identifier)) right: (subscript value: (identifier) subscript: (identifier))) right: (identifier)))) (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (identifier))) consequence: (block (expression_statement (assignment left: (identifier) right: (identifier))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))))))) (return_statement (identifier)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))))))\n**\n",
        "text": " 6",
        "token_cnt": 540
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_extreme_toilet_hygiene(trust):\n    \n    trust = float(input(\"Please enter the level of trust (0 -1): \"))\n\n    if trust <= .3:\n        print(\"The area around this toilet needs immediate attention.\")\n        return \"Needs Attention\"\n    \n    elif (.3 < trust) & (trust <= .6):\n        print(\"There may still be issues but further investigation is needed\")\n        return \"Further Investigation Needed\"\n        \n    else: \n        print(\"This toilet appears to be clean!\")\n        return \"Clean\"\n        \n    \nif __name__ == \"__main__\":\n    result = determine_extreme_toilet_hygiene(0.5)\n    print(result)",
            "id": 736
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (binary_operator left: (parenthesized_expression (comparison_operator (float) (identifier))) right: (parenthesized_expression (comparison_operator (identifier) (float)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (float))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))))\n**\n",
        "text": " 6",
        "token_cnt": 432
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def display_high_handling_personal_items(beginner_analysis):\n    \"\"\"Displays high handling personal item sanitization process \n    based upon beginner level analysis requirement\"\"\"\n\n    \n    if beginner_analysis == \"basic\":\n        print(\"Basic Cleaning Steps:\")\n\n        \n        print(\"- Wash Hands Thoroughly With Soap And Water For At Least 20 Seconds Before And After Preparing Food\")\n        \n        \n        print(\"- Avoid Touching Eyes, Nose, And Mouth With Unwashed Hands \")\n        \n        \n        print(\"- Cook Meat And Eggs Until They Reach A Safe Minimum Internal Temperature Of 165 Degrees Fahrenheit\")\n        \n        \n        print(\"- Clean And Disinfect Surfaces That Come Into Contact With Raw Meats Such As Countertops, Cutting Boards, Utensils, Etc.\")\n        \n        \n        print(\"- Wear Gloves When Handling Raw Meat, Poultry, Seafood, And Their Juices To Avoid Cross Contamination\")\n        \n    else:\n        print(\"Advanced Disinfection Methods:\")\n    \n        \n        print(\"- Use A Solution Of One Part Chlorine Bleach To Nine Parts Water For Regular Cleaning And Disinfection Tasks Around The House\")\n        \n        \n        print(\"- Heat The Oven To Its Highest Setting For At Least Two Hours Can Effectively Kill Bacteria, Viruses, Fungi, And Spores\")\n        \n        \n        print(\"- Ultraviolet Light Boxes Can Also Be Used To Sterilize Hard Nonporous Objects Like Phones, Remotes, Keyboards, Etc.\")\n    \n    return None",
            "id": 738
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (return_statement (none)))))\n**\n",
        "text": " 6",
        "token_cnt": 455
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def ask_questions():\n    flosses = input(\"Do you floss every day? (y/n): \")\n    brushes = input(\"Do you brush twice daily? (y/n): \")\n    mouthwash = input(\"Do you use mouth wash once daily? (y/n): \")\n\n    return [flosses, brushes, mouthwash]\n\n\ndef analyze(responses):\n    \n    total_points = len([r for r in responses if r == \"y\"])\n    \n    if total_points >= 3:\n        print(\"Congratulations! You follow excellent dental hygiene habits.\")\n    elif total_points == 2:\n        print(\"Your dental hygiene could be better. Try improving one habit at a time.\")\n    else:\n        print(\"It looks like you don't practice proper dental care. Please improve your routine.\")\n        \n    \nif __name__ == \"__main__\":\n    responses = ask_questions()\n    analyze(responses)",
            "id": 739
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (return_statement (list (identifier) (identifier) (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list_comprehension body: (identifier) (for_in_clause left: (identifier) right: (identifier)) (if_clause (comparison_operator (identifier) (string (string_start) (string_content) (string_end))))))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))))\n**\n",
        "text": " 10",
        "token_cnt": 533
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random\n\n\ndef main():\n    \n    while True:\n        print(\"Do you agree to maintain good oral hygiene practices?\")\n        choice = input(\"(Y)es / (N)o : \")\n\n        if choice == \"Yes\" or choice == \"yes\":\n            break\n        \n        elif choice == \"No\" or choice == \"no\":\n            print(\"In this case we will provide some tips regarding maintaining proper dental care.\")\n            break\n\n    \n    if choice == \"Yes\" or choice == \"yes\":\n        print(\"\\nGood oral hygiene starts with a balanced diet rich in vitamins A, C, and K along\")\n        print(\"with calcium and phosphorus. Some foods that can help strengthen your teeth:\")\n        print(\"- Leafy greens like kale, spinach, collard greens\\n- Carrots\\n- Broccoli\\n- Milk\\n- Yogurt\\n- Cheese\\n- Almonds\\n- Sweet potatoes\\n- Apples\\n- Oranges\\n- Strawberries\\n- Watermelon\\n- Pineapple\\n- Salmon\\n- Tuna\\n- Turkey\\n\\nIt is also important to avoid sugary drinks and snacks between meals,\\nand to brush twice daily for two minutes each time.\\nFloss once a day and visit your dentist regularly for cleanings and exams.\\nIf you experience any pain or discomfort, don’t hesitate to contact us!\")\n    \n    else:\n        print(\"User declined to participate further. Thankyou!!\")\n    \n    \n    \nif __name__ == \"__main__\":\n    main()",
            "id": 742
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters) body: (block (while_statement condition: (true) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (break_statement)) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (break_statement)))))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence)) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 6",
        "token_cnt": 697
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd \n\n\ndf = pd.read_csv(\"data.csv\") \n\n\ndef get_reliable_exams(exam_results): \n    \n    reliable_exams = [\"GMAT\", \"LSAT\"] \n\n    \n    for exam in exam_results: \n        if exam in reliable_exams: \n            return True\n\n    \n    return False \n\n\n\n\ndf['Reliable Exam'] = df['Exam Name'].apply(get_reliable_exams) \n\n\n\nprint(df.head())",
            "id": 744
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (true)))))) (return_statement (false)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))))\n**\n",
        "text": " 5",
        "token_cnt": 346
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def display_extreme_flossing(ethic):\n    \"\"\"Displays appropriate message depending on ethical consideration\"\"\"\n\n    \n    messages = {\n        'yes': \"Extreme flossing can improve gum health!\", \n        'no' : \"Flossing regularly is still important even without extreme measures.\",\n        'maybe' : \"It depends on individual circumstances.\"\n    }\n    \n    \n    if ethic == 'yes':\n        print(messages['yes'])\n    elif ethic == 'no':\n        print(messages['no'])\n    else:\n        print(messages['maybe'])\n        \n\ndisplay_extreme_flossing(input(\"Do you think extreme flossing is necessary? (Yes/No/Maybe) \"))",
            "id": 746
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 6",
        "token_cnt": 459
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_travel_itinerary(travel_itinerary):\n    \n    new_list = deepcopy(travel_itinerary)\n    \n    \n    for i in range(len(new_list)):\n        \n        curr_dict = new_list[i]\n        \n        \n        orig_city = curr_dict['origin']\n        des_city = curr_dict['destination']\n        \n        \n        if (check_direct_flight(orig_city,des_city)):\n            \n            curr_dict['reliability'] = 10\n            \n            continue\n        \n        \n        count = 0\n        \n        \n        for j in range(len(new_list)):\n            \n            next_dict = new_list[(j+1)% len(new_list)]\n        \n            \n            if (next_dict['origin']==curr_dict['destination']):\n                \n                count+=1\n        \n        \n        curr_dict['reliability'] = max((count//2)+3,(count*5)//4)\n        \n    return new_list\n\n\n\n\n\ndef check_direct_flight(from_city,to_city):\n    \n    return True",
            "id": 747
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (if_statement condition: (parenthesized_expression (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (integer))) (continue_statement))) (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (integer))) right: (call function: (identifier) arguments: (argument_list (identifier))))))) (if_statement condition: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (integer))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (integer))) right: (integer)) (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (integer))) right: (integer)))))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (return_statement (true)))))\n**\n",
        "text": " 6",
        "token_cnt": 687
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def display_low_education(df):\n    \n    if df['Percentage of pupils eligible for free school meals (FSM)'].mean() > 30 :\n        return \"The \"+ df['Trust'][0] + \"has high level of deprivation among students\"\n    \n    else: \n        return \"The \"+ df['Trust'][0] +\" doesnot have significant proportion of disadvantaged young people.\"",
            "id": 748
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list)) (integer)) consequence: (block (return_statement (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (integer))) right: (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (integer))) right: (string (string_start) (string_content) (string_end))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 296
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_high_flossing(expertise):\n    \"\"\"Determine appropriate high flossing method based on \n    specified expertise level.\"\"\"\n\n    \n    levels = {\n        'beginner': 'Wax on, wax off',\n        'intermediate': 'Fingerguns',\n        'advanced': \"Use the force Luke\"\n    }\n    \n    \n    if expertise in levels:\n        return levels[expertise]\n    else:\n        raise ValueError(\"Invalid expertise level\")",
            "id": 749
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (subscript value: (identifier) subscript: (identifier)))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))\n**\n",
        "text": " 10",
        "token_cnt": 274
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "user_age = input(\"Enter your age:\")\nuser_gender = input(\"Enter your gender (m/f):\")\nprivacy_level = input(\"Enter your privacy level(1-5): \")\n\n\ndef calculate_sugar_intake():\n    \n    BMR = 20 * int(user_weight) + 3600 * int(user_height) /4.8\n    \n    \n    physical_activity_multiplier = {\n        \"Very active\": 1.75, \n        \"Active\": 1.5, \n        \"Moderately Active\": 1.25, \n        \"Sedentary\": 1}\n\n    physical_activity = input(\"How physically active do you consider yourself? Choose one:\\n\"\n                              \"[1] Very active\\n[2] Active \\n [3] Moderately active\\n [4] Sedentary\")\n\n    TEE = float(BMR) * float(physical_activity_multiplier[physical_activity])\n\n    \n    NEAT = .5 * BMR\n    sleep_time = 7.5 * int(user_hours_slept)\n    thermoneutral_zone = 9.4 * BMR \n\n    \n    TDEE = TEE - NEAT - sleep_time - thermoneutral_zone\n\n    \n    carbohydrates = input(\"What percentage of your diet comes from carbs?\")\n    proteins = input(\"What percentage of your diet comes from protein?\")\n    fats = input(\"What percentage of your diet comes from fat?\")\n\n    macro_ratios = {\"Carbohydrates\":carbohydrates,\"Proteins\":proteins,\"Fats\":fat}\n\n    \n    carb_ratio = float(macro_ratios[\"Carbohydrates\"])/100\n    prot_ratio = float(macro_ratios[\"Proteins\"])/100\n    fat_ratio = float(macro_ratios[\"Fat\"])/100\n\n    \n    carbohydrate_grams = TDEE*carb_ratio/4\n    protein_grams = TDEE*prot_ratio\n    fat_grams = TDEE*fat_ratio\n\n    return {'Total Daily Energy Expenditure':TEE,'Non Exercise Activity Thermogenisis':NEAT,\n            'Sleep Time':sleep_time ,'Thermoneutral Zone' :thermoneutral_zone , \n            'Daily Carbohydrate Grams':carbohydrate_grams, 'Protein Grams':protein_grams,\n            'Fat Grams':fat_grams }\n\n\n\nif __name__ == '__main__':\n    print(\"\n    print(\"Welcome to our dental calculator!\")\n    print(\"\n\n    while True:\n\n        choice=input(\"\"\"Choose what you want to calculate:\n        1.) Your Total daily energy expenditure (TEE)\\n \n        2.) Non Exercise Activity Thermogenisis (NEAT)\\n \n        3.) Sleep time recommendations\\n \n        4.) Thethomneutral Zome\\n \n        5.) Macronutrient Ratios\\n\"\"\")\n        \n        if choice=='1':\n            result=calculate_sugar_intake()\n            break\n        elif choice=='2':\n            result=calculate_sugar_intake()['Non Exercise Activity Thermogenisis']\n            break\n        elif choice=='3':\n            result=calculate_sugar_intake()['Sleep Time']\n            break\n        elif choice=='4':\n            result=calculate_sugar_intake()['Thermoneutral Zone']\n            break\n        else:\n            result=calculate_macronutrient_ratios()\n            break\n        \n    print(result)",
            "id": 752
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (integer) right: (call function: (identifier) arguments: (argument_list (identifier)))) right: (binary_operator left: (binary_operator left: (integer) right: (call function: (identifier) arguments: (argument_list (identifier)))) right: (float))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (float)) (pair key: (string (string_start) (string_content) (string_end)) value: (float)) (pair key: (string (string_start) (string_content) (string_end)) value: (float)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (concatenated_string (string (string_start) (string_content (escape_sequence)) (string_end)) (string (string_start) (string_content (escape_sequence) (escape_sequence) (escape_sequence)) (string_end))))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (identifier))))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (float) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (float) right: (call function: (identifier) arguments: (argument_list (identifier)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (float) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (identifier) right: (identifier)) right: (identifier)) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) right: (integer)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) right: (integer)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) right: (integer)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (identifier) right: (identifier)) right: (integer)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (identifier)))) (return_statement (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (ERROR (identifier) (identifier) (identifier) (identifier) (identifier) (UNEXPECTED '\"') (string_start))))) (expression_statement (assignment left: (identifier) (ERROR (string_start) (identifier) (true)) type: (type (identifier)) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence)) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (break_statement)) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (subscript value: (call function: (identifier) arguments: (argument_list)) subscript: (string (string_start) (string_content) (string_end))))) (break_statement))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (subscript value: (call function: (identifier) arguments: (argument_list)) subscript: (string (string_start) (string_content) (string_end))))) (break_statement))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (subscript value: (call function: (identifier) arguments: (argument_list)) subscript: (string (string_start) (string_content) (string_end))))) (break_statement))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (break_statement)))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))))\n**\n",
        "text": " 2",
        "token_cnt": 2001
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random\n\n\ndef germ_prevention(trust):\n    \"\"\"\n    This function takes input from user regarding their \n    perception about other person's trustworthiness and then decides whether they need to maintain proper hygiene while interacting with them\n\n    Args:\n        trust (int) - It represents how much confidence user has on another individual based upon his past experiences with him\n    \n    Returns:\n        str - It returns message according to outcome of interaction i.e., either \"Wash Hands\" or \"No Need To Worry\"\n        \n    Raises:\n        ValueError - If invalid value is passed as argument\n    \"\"\"\n    \n    \n    if not isinstance(trust, int):\n        raise ValueError(\"Invalid Input\")\n    \n    \n    rand = random.randint(1, 10)\n    \n    \n    if rand <= trust // 2:\n        return \"Wash Your Hands\"\n    else:\n        return \"Don't Worry, You Are Safe!\"\n    \n    \nif __name__ == '__main__':\n    print(germ_prevention(7))    \n    print(germ_prevention(-5))   \n    print(germ_prevention('a'))",
            "id": 754
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer))))) (if_statement condition: (comparison_operator (identifier) (binary_operator left: (identifier) right: (integer))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (unary_operator argument: (integer))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 423
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "temperature = float(input(\"Enter temperature of nails:\"))\nhumidity = int(input(\"Enter humidity level (0 -100):\"))\nillness = str(input(\"Has any one member of family got ill recently? Enter 'yes' or 'no': \"))\n\n\ndef extreme_nailcare():\n    \n    if ((temperature >95) | (humidity <40)):\n        print(\"Take necessary precautions\")\n    \n    elif (((temperature >=80)&(temperature <=95)) & (humidity<60)):\n        print(\"Use moisturizer regularly \")\n        \n    else: \n        print(\"No need to worry as per current condition.\")\n        \n    \nif illness == \"Yes\":\n    print(\"In case someone from household falls sick due to fungal infection then consult doctor immediately .\")\n    extreme_nailcare()\n    \n    \nelif illness == \"No\" :\n    extreme_nailcare()\n    \n\nelse:\n    print(\"Invalid Input! Please enter either yes or no only \")",
            "id": 755
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (if_statement condition: (parenthesized_expression (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (integer))) right: (parenthesized_expression (comparison_operator (identifier) (integer))))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (parenthesized_expression (binary_operator left: (parenthesized_expression (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (integer))) right: (parenthesized_expression (comparison_operator (identifier) (integer))))) right: (parenthesized_expression (comparison_operator (identifier) (integer))))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list)))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 5",
        "token_cnt": 664
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "HAND_SANITIZER_CONCENTRATION = 0.5 \nMINIMUM_USAGE_RATE = 1 / 8 \nMAXIMUM_USAGE_RATE = 4 / 7 \n\ndef calculate_hygiene(trust):\n    \"\"\"Calculates the recommended frequency of use for hand sanitizers\n    \n    Args:\n        trust (int): The level of trust between 0 and 3 representing low, medium, \n            or high confidence respectively\n        \n    Returns:\n        float: A value indicating the recommended number of uses per day \n    \"\"\"\n    if trust == 0:\n        return None \n\n    elif trust <= 2:\n        \n        return random.uniform(MAXIMUM_USAGE_RATE, MAXIMUM_USAGE_RATE * 2) \n\n    else:\n        \n        return random.uniform(MINIMUM_USAGE_RATE, MINIMUM_USAGE_RATE * 0.5) \n\nif __name__ == '__main__':    \n    \n    user_inputted_concentration = 0.6\n    user_inputted_trust = 3    \n\n    print(\"For\", user_inputted_concentration, \"grams of alcohol per ml:\")\n    print(\"The recommended usage rate:\", \n          round(calculate_hygiene(user_inputted_trust), 2),\n          \"times per day\")",
            "id": 757
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (float))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (integer) right: (integer)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (integer) right: (integer)))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (none))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (binary_operator left: (identifier) right: (integer))))))) alternative: (else_clause body: (block (return_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (binary_operator left: (identifier) right: (float)))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (float))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))) (integer))) (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 6",
        "token_cnt": 484
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_low_nose_care(age):\n    \"\"\"\n    Calculates low nose care by asking users for their age \n    and determining whether they need to use nasal spray correctly according to their age group\n\n    Args:\n        age (int): User's current age\n    \n    Returns:\n        str: A message indicating whether the user needs to use nasal spray correctly or not\n    \"\"\"\n\n    \n    if age < 18:\n        return f\"Based on your age ({age}), you do NOT need to use nasal spray CORRECTLY.\"\n\n    \n    elif age >= 18 and age <= 64:\n        return f\"Based on your age ({age}), you may need to use nasal spray ACCORDING TO THE DIRECTIONS.\"\n\n    else:\n        return f\"Based on your age ({age}), you DO need to use nasal spray CORRECTLY.\"",
            "id": 758
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (integer))) consequence: (block (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))))))))\n**\n",
        "text": " 10",
        "token_cnt": 234
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_low_travel(df):\n    \n    print(\"Before updating:\")\n    display(df)\n\n    \n    for index,row in df.iterrows():\n        lowest_fare = min([flight['fare'] for flight in flights[row['origin'],row['destination']] ])\n        if (row[\"fare\"] < lowest_fare):\n            \n            updated_fares = [flight for flight in flights[row['origin'],row['destination']] if flight['airline']==row['airline']]\n            for i in range(len(updated_fares)):\n                updated_fares[i]['fare']=lowest_fare\n\n            \n            notes= [\"Lowest Fares Applied Due To Professional Ethical Obligations \"] + [\"\"]*(len(flights)-1)\n            df.loc[index,\"notes\"]= \",\".join(notes)\n    \n    \n    print(\"\\nAfter updating:\")\n    display(df)\n\n\nif __name__ == '__main__':\n    update_low_travel(df)",
            "id": 762
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list_comprehension body: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (for_in_clause left: (identifier) right: (subscript value: (identifier) subscript: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))))))) (if_statement condition: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (identifier))) consequence: (block (expression_statement (assignment left: (identifier) right: (list_comprehension body: (identifier) (for_in_clause left: (identifier) right: (subscript value: (identifier) subscript: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (if_clause (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (expression_statement (assignment left: (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (list (string (string_start) (string_content) (string_end))) right: (binary_operator left: (list (string (string_start) (string_end))) right: (parenthesized_expression (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (integer))))))) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))))\n**\n",
        "text": " 6",
        "token_cnt": 917
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_hand_hygeine(transparency):\n    \"\"\"Determines hand hygene level based on transparency of wipe or towel\n\n    Args:\n        transparency (float): value between 0 and 1 indicating how transparent the item is\n\n    Returns:\n        str: \"low\", \"moderate\" or \"high\" depending on the degree of hygenie \n    \"\"\"\n    \n    \n    if isinstance(transparency, float) == True:\n\n        \n        \n        if transparency >= .85:\n            return \"high\"\n        elif transparency >= .6:\n            return \"moderate\"\n        else: \n            return \"low\"\n        \n    \n    except ValueError as e:\n        print(\"Invalid Input\")",
            "id": 763
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (ERROR (function_definition name: (identifier) parameters: (parameters (identifier)) (ERROR (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (true)) consequence: (block (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (ERROR (identifier)) (as_pattern (identifier) alias: (as_pattern_target (identifier)))) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 10",
        "token_cnt": 272
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def display_hand_hygiene():\n    \n    options = [\"sneeze\", \"cough\"]\n\n    for option in options:\n        print(f\"For {option}, wash hands immediately with soap and water.\")\n\n        \n        if option == \"sneeze\":\n            print(\"If tissues aren't available, use elbow instead.\")\n        elif option == \"cough\":\n            print(\"Avoid touching eyes, nose, and mouth with unwashed hands.\")\n\ndisplay_hand_hygiene()",
            "id": 765
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))) (expression_statement (call function: (identifier) arguments: (argument_list))))\n**\n",
        "text": " 10",
        "token_cnt": 308
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform(input_value, low_trust, high_trust):\n    \n    if (low_trust <= input_value) & (input_value < high_trust):\n        transformed_value = do_transformations(input_value)\n        \n        \n        if check1(transformed_value):\n            return transformed_value\n        else: \n            raise ValueError(\"Invalid output\")\n            \n    elif input_value >= high_trust:\n        \n        return input_value\n    \n    else:\n        \n        return None\n\n\n\ntry:\n    result = transform('some input', .5, 2.)\n    print(result)\n    \nexcept Exception as e:\n    print(f\"Error occurred: {e}\")",
            "id": 766
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) body: (block (if_statement condition: (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (identifier))) right: (parenthesized_expression (comparison_operator (identifier) (identifier)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (call function: (identifier) arguments: (argument_list (identifier))) consequence: (block (return_statement (identifier))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (identifier)))) alternative: (else_clause body: (block (return_statement (none))))))) (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (float) (float))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_end)))))))))\n**\n",
        "text": " 10",
        "token_cnt": 399
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_low_bathroom_routine(gender):\n    \"\"\"\n    This function checks whether the user has used \n    appropriate bath products based on their gender\n\n    Args:\n        gender (str): The gender of the user ('male' or 'female')\n    \n    Returns:\n        str: A message indicating whether the user has followed \n            the correct bathing procedure or not\n        \n    Raises:\n        ValueError: If the input gender is neither male nor female\n    \"\"\"\n    \n    required_products = {\n        \"Male\": [\"Shampoo\", \"Body Wash\"], \n        \"Female\": [\"Shampoo\", \"Body Wash\", \"Face Wash\"]\n    }\n\n    \n    if gender == \"Male\" or gender == \"female\":    \n        \n        for product in required_products[gender]:\n            if product not in used_products:\n                return f\"{product} was not used.\"\n        \n        \n        return \"All bath products were used.\"    \n    \n    else:\n        raise ValueError(\"Invalid Gender\")\n\n\n\nprint(check_low_bathroom_routine('Male')) \nprint(check_low_bathroom_routine('Female')) \ntry:\n    print(check_low_bathroom_routine('Other')) \nexcept ValueError as e:\n    print(e)",
            "id": 767
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (for_statement left: (identifier) right: (subscript value: (identifier) subscript: (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end))))))) (return_statement (string (string_start) (string_content) (string_end)))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (try_statement body: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))))))\n**\n",
        "text": " 6",
        "token_cnt": 618
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_high_nose(responsibility):\n    \"\"\"Update high nose care instructions according to specified professional \n    responsibility type.\"\"\"\n\n    \n    dry_run = False\n    \n    \n    if responsibility == \"Physician\":\n        action = \"Assess symptoms and perform necessary tests.\"\n        \n        \n        if not dry_run:\n            add_note(\"Refer to ENT specialist if needed.\")\n            \n    elif responsibility == \"Nurse\":\n        action = \"Administer saline spray and provide OTC pain relievers.\"\n        \n        \n        if not dry_run:\n            call_doctor()\n        \n    elif responsibility == \"Pharmacist\":\n        action = \"Recommend over-the-counter medications and supplements.\"\n        \n        \n        if not dry_run:\n            recommend_referral()\n            \n    else:\n        raise ValueError(\"Invalid responsibility type\")\n        \n     \n    instructions = f\"For {action}, follow these steps:\"\n    \n    return instructions",
            "id": 768
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (false))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (if_statement condition: (not_operator argument: (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (if_statement condition: (not_operator argument: (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (if_statement condition: (not_operator argument: (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) (return_statement (identifier)))))\n**\n",
        "text": " 6",
        "token_cnt": 501
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random\nfrom typing import Dict, List\n\nclass EtiquetteAnalyzer():\n    def __init__(self):\n        self._etiquette_data = {\n            'Sneeze': {'mouth': False, 'nose': True}, \n            'Cough': {'mouth': True, 'nose': True}\n        }\n\n    def analyze(self, action: str) -> Dict[str, float]:\n        \"\"\"Analyze whether someone has followed proper etiquette during \n        extreme sneezing or coughing by checking if their mouth and nose were covered.\"\"\"\n\n        \n        if action not in self._etiquette_data:\n            raise ValueError(f\"Invalid action '{action}'\")\n        \n        \n        mouth_covered, nose_covered = self._etiquette_data[action]['mouth'], self._etiquette_data[action]['nose']\n\n        \n        mu, sigma = 0.5, 0.2\n        noise = random.normalvariate(mu, sigma)\n        return {'MouthCovered': mouth_covered, 'NoseCovered': nose_covered, 'NoiseLevel': noise}\n\n\nanalyzer = EtiquetteAnalyzer()\nresult = analyzer.analyze('Sneeze')\nprint(\"Mouth was covered:\", result['MouthCovered'])\nprint(\"Nosie was covered:\", result['NoseCovered'])\nprint(\"Noise level:\", result['NoiseLevel'])",
            "id": 769
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier))) (class_definition name: (identifier) superclasses: (argument_list) body: (block (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (false)) (pair key: (string (string_start) (string_content) (string_end)) value: (true)))) (pair key: (string (string_start) (string_content) (string_end)) value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (true)) (pair key: (string (string_start) (string_content) (string_end)) value: (true))))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier)))) return_type: (type (generic_type (identifier) (type_parameter (type (identifier)) (type (identifier))))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (attribute object: (identifier) attribute: (identifier))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))) (expression_statement (assignment left: (pattern_list (identifier) (identifier)) right: (expression_list (subscript value: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) subscript: (string (string_start) (string_content) (string_end))) (subscript value: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) subscript: (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (pattern_list (identifier) (identifier)) right: (expression_list (float) (float)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) (return_statement (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))))\n**\n",
        "text": " 6",
        "token_cnt": 999
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "principal = float(input(\"Enter Principal Paid : \")) \ninterest_rate = float(input(\"Enter Interest Rate r : \")) /100 \nnumber_of_periods = int(input(\"Enter Number Of Periods n : \"))\npayment_schedule = input(\"Enter Payment Schedule Type [eop|bop] \") or \"endofperiod\"\n\n\ndef simple_interest():\n    \"\"\" \n    Calculates Simple Interest SI= P * r*t where t represents time interval between two consecutive payments \n    \"\"\"\n\n    si = principal * interest_rate * number_of_periods\n    \n    return f\"{si:.2f}\"\n\n\n\ndef compound_interest():\n    \"\"\" \n    Calculates Compound Interest CI=(1+r)^nt - 1 where ^ indicates exponentiation operator \n    \"\"\"\n\n    ci = ((1 + interest_rate)**number_of_periods)-1 \n\n    return f\"{ci:.2f}\"\n\n\nif payment_schedule == \"endofperiod\":\n    print(f\"\\nSimple Interest={simple_interest()}\")\n    print(f\"Compound Interest={compound_interest()}\\n\")\n    \nelif payment_schedule == \"beginningoftperiod\":\n    begining_balance = principal + (principal * interest_rate)\n    ending_balance = begining_balance + (principal * interest_rate * number_of_periods)\n\n    print(f\"\\nBeginning Balance={begining_balance:.2f}\")\n    print(f\"Ending Balance={ending_balance:.2f}\")\n    print(f\"Simple Interest={simple_interest()}\")\n    print(f\"Compound Interest={compound_interest()}\\n\")\n    \n\nelse:\n    print(\"\\nInvalid Payment Schedule entered\\n\")",
            "id": 773
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) right: (integer)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (boolean_operator left: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) right: (string (string_start) (string_content) (string_end))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (identifier) right: (identifier)) right: (identifier)))) (return_statement (string (string_start) (interpolation expression: (identifier) format_specifier: (format_specifier)) (string_end))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (parenthesized_expression (binary_operator left: (parenthesized_expression (binary_operator left: (integer) right: (identifier))) right: (identifier))) right: (integer)))) (return_statement (string (string_start) (interpolation expression: (identifier) format_specifier: (format_specifier)) (string_end))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (call function: (identifier) arguments: (argument_list))) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (call function: (identifier) arguments: (argument_list))) (string_content (escape_sequence)) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (parenthesized_expression (binary_operator left: (identifier) right: (identifier)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (parenthesized_expression (binary_operator left: (binary_operator left: (identifier) right: (identifier)) right: (identifier)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier) format_specifier: (format_specifier)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier) format_specifier: (format_specifier)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (call function: (identifier) arguments: (argument_list))) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (call function: (identifier) arguments: (argument_list))) (string_content (escape_sequence)) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)))))))))\n**\n",
        "text": " 4",
        "token_cnt": 1106
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def show_prevention():\n    print(\"Sneeze into your elbow or use a tissue.\") \n    print(\"Wash hands frequently with soap and water\") \n    print(\"Avoid close contact with people who are unwell \") \n    print(\"Stay home when feeling ill\") \n\n \nif __name__ == '__main__':    \n    choice = input(\"Do you want to know more about prevention ? (y/n): \")\n    \n    while(choice.lower() != 'n'):\n        if choice.lower()=='y':\n            show_prevention()    \n        else: \n            print(\"Invalid Input! Please try again.\") \n        choice=input(\"Do you want to know more about prevention? (y/n) \")",
            "id": 774
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (while_statement condition: (parenthesized_expression (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end)))) body: (block (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 474
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def display_high_handwashing(soap_water):\n    \n    print(\"Dry Run:\")\n    \n    if soap_water == \"Yes\":\n        print(\"Use soap and running water when available\")\n        \n    elif soap_water ==\"No\" : \n        print(\"Wash hands thoroughly with clean running water alone.\")\n        \n     else:\n        print(\"Invalid Input! Please enter 'yes' or 'no'. \")\n    \n    \nif __name__ == '__main__':\n    while True:    \n        try:\n            user_input=input(\"\\nPlease indicate whether soap and water are used during hand hygiene? (Enter 'y' or 'n'): \").lower()\n        \n            if user_input=='y':\n                soap_water='Yes'\n                \n            elif user_input=='n': \n                soap_water='No'\n                \n            else:\n                raise ValueError('Invalid entry')\n            \n            break\n        \n        except ValueError as e:\n            print(e)\n            \n    display_high_handwashing(soap_water)",
            "id": 775
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (while_statement condition: (true) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (break_statement)) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))))\n**\n",
        "text": " 6",
        "token_cnt": 635
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_extreme_nose(symptoms):\n    \"\"\"Checks whether someone has severe nasal congestion or not\n    \n    Args:\n        symptoms (dict): Dictionary containing details of person's symptoms\n\n    Returns:\n        str: Advice for managing allergy and congestion based on severity level \n    \"\"\"\n    \n    runny_nose = symptoms['runny_nose']\n    blocked_nose = symptoms['blocked_nose']\n    sneezing = symptoms['sneezing']\n\n    \n    if runny_nose and blocked_nose:\n        return \"Seek medical attention immediately! This could be a sign of COVID-19.\"\n    elif runny_nose or blocked_nose or sneezing:\n        return (\"Try over-the-counter decongestants and antihistamines as directed by the package instructions.\\n\"\n                + \"If these don't help after a few days, see a doctor.\")\n    else:\n        return \"No need to worry about excessive nose congestion. Try relaxation techniques like deep breathing exercises or meditation.\"",
            "id": 777
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (if_statement condition: (boolean_operator left: (identifier) right: (identifier)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (boolean_operator left: (boolean_operator left: (identifier) right: (identifier)) right: (identifier)) consequence: (block (return_statement (parenthesized_expression (binary_operator left: (string (string_start) (string_content (escape_sequence)) (string_end)) right: (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 354
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random\nfrom typing import List\n\nclass Item:\n    def __init__(self, name: str, safety_level: int):\n        self.name = name\n        self.safety_level = safety_level\n\n    def display(self) -> None:\n        print(f\"{self.name}: {['Low', 'Medium', 'High'][self.safety_level]}\")\n\ndef sanitize_items(high_handling_items: List[Item], low_risk_frequency: int=3, medium_risk_frequency: int=7, high_risk_frequency: int=14) -> None:\n    \n    sanitized_count = 0\n    \n    \n    for item in high_handling_items:\n        \n        freq = [low_risk_frequency, medium_risk_frequency, high_risk_frequency][item.safety_level]\n        \n        \n        if random.randint(1,freq) == freq:\n            \n            sanitized_count += 1\n            \n            \n            print(f\"Sanitized '{item.name}' due to high contact frequency.\")\n            \n    \n    print(f\"\\nSummary:\\n{sanitated_count} items were sanitized out of {len(high_handling_items)} items.\")\n    \nif __name__ == '__main__':    \n    \n    office_supplies = [\n        Item(\"Pencil\", 2), \n        Item(\"Stapler\", 2), \n        Item(\"Scissors\", 1)]\n        \n    kitchenware = [\n        Item(\"Knife\", 2), \n        Item(\"Fork\", 1), \n        Item(\"Spoon\", 1)]    \n    \n    \n    print(\"\\nOffice Supplies:\")\n    for item in office_supplies:\n        item.display()\n        \n    print(\"\\nKitchen Ware:\")\n    for item in kitchenware:\n        item.display()   \n    \n    \n    sanitize_items([*office_supplies, *kitchenware])",
            "id": 778
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (class_definition name: (identifier) body: (block (function_definition name: (identifier) parameters: (parameters (identifier) (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier)))) body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier)) return_type: (type (none)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (attribute object: (identifier) attribute: (identifier))) (string_content) (interpolation expression: (subscript value: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) subscript: (attribute object: (identifier) attribute: (identifier)))) (string_end))))))))) (function_definition name: (identifier) parameters: (parameters (typed_parameter (identifier) type: (type (generic_type (identifier) (type_parameter (type (identifier)))))) (typed_default_parameter name: (identifier) type: (type (identifier)) value: (integer)) (typed_default_parameter name: (identifier) type: (type (identifier)) value: (integer)) (typed_default_parameter name: (identifier) type: (type (identifier)) value: (integer))) return_type: (type (none)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (list (identifier) (identifier) (identifier)) subscript: (attribute object: (identifier) attribute: (identifier))))) (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (identifier))) (identifier)) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (integer))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (attribute object: (identifier) attribute: (identifier))) (string_content) (string_end))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (interpolation expression: (identifier)) (string_content) (interpolation expression: (call function: (identifier) arguments: (argument_list (identifier)))) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (integer))) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (integer))) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (integer)))))) (expression_statement (assignment left: (identifier) right: (list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (integer))) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (integer))) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (integer)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (expression_statement (call function: (identifier) arguments: (argument_list (list (list_splat (identifier)) (list_splat (identifier)))))))))\n**\n",
        "text": " 4",
        "token_cnt": 1223
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_low_fitness(privacy):\n    \"\"\"\n    This function takes privacy as input from the user \n    and returns appropriate message depending upon the value entered by the user\n\n    Args:\n        privacy (int) - The integer value provided by the user indicating their current privacy score\n    \n    Returns:\n        str - A string containing an advice regarding how to improve one's privacy score\n    \"\"\"\n    \n    if type(privacy) != int:\n        return \"Invalid Input! Please enter a valid number.\"\n\n    elif privacy < 50:\n        \n        return f\"Your privacy score ({privacy}) is very low. Here are some ways you can increase it:\\n\\\n        1. Use strong passwords for all online accounts.\\n\\\n        2. Limit personal information shared on social media.\\n\\\n        3. Be cautious about what websites you visit and avoid suspicious links.\\n\\\n        4. Enable two-factor authentication wherever available.\"\n\n    else:\n        \n        return f\"Great job! Your privacy score ({privacy}) is already high enough.\"\n\n\n\nif __name__ == '__main__':\n    while True:\n        print(\"Enter 'exit' to quit.\")\n\n        try:\n            privacy = int(input(\"\\nPlease enter your current privacy score [0-100]: \"))\n\n            result = check_low_fitness(privacy=privacy)\n            print(result)\n\n        except ValueError:\n            print(\"Invalid input\")",
            "id": 782
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (identifier)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence)) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (while_statement condition: (true) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))) (except_clause (identifier) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 515
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def dispose_tissue(sample):\n    \"\"\"Function to update 'Extreme Sneezing & Coughing Etiquette'.\"\"\"\n\n    \n    if \"virus\" in sample:\n        print(\"Potential contamination detected! Please wear PPE and follow standard biohazard procedures.\")\n        return\n    \n    \n    else:    \n        \n        resp = input(\"Do you want to test your own sample (y/n)? \")\n        \n        \n        if resp == \"y\":\n            \n            handwashing()\n            \n            \n            dispose_used_tissues()\n            \n        elif resp == \"n\":\n            \n            inform_about_disposal()\n                \n            \n            dispose_used_tissues()\n    \n        else:\n            print(\"Invalid option selected. Exiting...\")\n\n\n\ndef inform_about_disposal():    \n    print(\"Please place used tissues inside a plastic bag before disposing them into regular trash bins.\\n\")\n    \n\n\ndef handwashing():    \n    print(\"Washing your hands thoroughly for at least 20 seconds is crucial to prevent spread of germs and viruses.\\n\")\n    \n    \n\ndef dispose_used_tissues():    \n    print(\"Proceeding with disposal of used tissues...\\n\")",
            "id": 784
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement)) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))) (expression_statement (call function: (identifier) arguments: (argument_list)))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))) (expression_statement (call function: (identifier) arguments: (argument_list))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))))))\n**\n",
        "text": " 6",
        "token_cnt": 547
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_hygeine(trust):\n    \"\"\"\n    This function determines whether food handled by \n    engineer at professional level is safe based on trust value\n    \n    Parameters:\n        - trust (float): A number between 0 and 1 indicating \n            how much someone can be trusted\n        \n    Returns:\n        - result (str): \"unsafe\" if there is any doubt about\n            safety, otherwise returns \"safe\".\n            \n    Raises:\n        ValueError if input trust value is not within range [0, 1]    \n    \"\"\"\n    \n    if not isinstance(trust, float) or trust < 0 or trust > 1:\n        raise ValueError(\"Invalid input 'trust' value\")    \n\n    \n    if trust >= 0.9:\n        return \"safe\"\n    elif trust >= 0.75:\n        return \"cautionary\"\n    else:\n        return \"unsafe\"",
            "id": 789
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (boolean_operator left: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) right: (comparison_operator (identifier) (integer))) right: (comparison_operator (identifier) (integer))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 281
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def analyze_nasal_spray(instructions):\n    \"\"\"Analyze high nose spray instructions\n    \n    Args:\n        instructions (str): Instructions provided by manufacturer\n        \n    Returns:\n        dict: A dictionary containing analysis of instruction quality\n            including 'technique', 'side_effects' and 'overall' scores\n            \n    Raises:\n        ValueError: If input is not a string\n    \"\"\"    \n    \n    if isinstance(instructions, str) == False:\n        raise ValueError(\"Input must be a string\")    \n\n    \n    technique = 0\n    side_effects = 0\n    overall = 0\n\n    \n    criteria = [\n        (\"Proper use\", \"Techniques described\"),\n        (\"Potential side effects\", \"Side effects mentioned\"),\n        (\"Overall quality\", None),\n    ]\n\n    \n    for label, keyword in criteria:    \n        matches = re.findall(r\"\\b{}\\b\".format(keyword), instructions, flags=re.IGNORECASE)\n        if len(matches) > 0:\n            score = min(len(matches), 3)  \n            setattr(locals(), \"{}_score\".format(label.lower()), score)\n            overall += score\n\n    return {\n        \"technique\": technique_score,\n        \"side_effects\": side_effects_score,\n        \"overall\": overall_score\n    }",
            "id": 793
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (false)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (list (tuple (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (tuple (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (tuple (string (string_start) (string_content) (string_end)) (none))))) (for_statement left: (pattern_list (identifier) (identifier)) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier))) (identifier) (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier))))))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))) (integer))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list)) (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (identifier)))) (expression_statement (augmented_assignment left: (identifier) right: (identifier))))))) (return_statement (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)))))))\n**\n",
        "text": " 10",
        "token_cnt": 693
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import os\nfrom datetime import timedelta\n\n\ndef get_current_time():\n    current_date = str(datetime.now())\n    return current_date\n\n\ndef check_bathing_routine(bias):\n\n    \n    start_temp = 37\n    end_temp = 42\n    duration = timedelta(minutes=15)\n    time_stamps = []\n\n    \n    for i in range(int((duration / timedelta(minutes=1)).total_seconds())):\n        curr_time = (i * timedelta(minutes=1)) + timedelta(minutes=10)\n        time_stamps.append(curr_time)\n\n    \n    if ((start_temp - bias <= 6) & (end_temp + bias >= 6)):\n\n        print(\"The recommended bathing regime includes alternating between hot ({:.1f}°C) and cold ({:.1f}°C) water for {} minutes.\".format(\n            start_temp, end_temp, int(duration.total_seconds() // 60)))\n\n        \n        for j in range(len(time_stamps)):\n            print(\"{}: Start soaking your body in a tub filled with warm (~{}°C) water for about 1 minute\".format(\n                time_stamps[j], start_temp))\n\n            print(\"{}: Finish soaking and rinse off under cool (~{}°C) running water for another minute\".format(\n                time_stamps[(j+1)% len(time_stamps)], end_temp))\n\n    else:\n        print(\"Invalid input! Please try again.\")\n\n\nif __name__ == '__main__':\n    while True:\n        try:\n            user_input = float(input('Enter the desired degree Celsius difference from neutral point between hottest '\n                                     'and coldest part of the bathing cycle [e.g., enter 5 for 5 degrees]: '))\n            break\n        except ValueError:\n            print(\"Error: Invalid input\")\n\n    check_bathing_routine(user_input)",
            "id": 795
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (integer)))))) (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (call function: (attribute object: (parenthesized_expression (binary_operator left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (integer)))))) attribute: (identifier)) arguments: (argument_list)))))) body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (integer)))))) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (integer))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (if_statement condition: (parenthesized_expression (binary_operator left: (parenthesized_expression (comparison_operator (binary_operator left: (identifier) right: (identifier)) (integer))) right: (parenthesized_expression (comparison_operator (binary_operator left: (identifier) right: (identifier)) (integer))))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (call function: (identifier) arguments: (argument_list (binary_operator left: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) right: (integer))))))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (identifier)) (identifier)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (integer))) right: (call function: (identifier) arguments: (argument_list (identifier))))) (identifier))))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (while_statement condition: (true) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))))))) (break_statement)) (except_clause (identifier) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))))\n**\n",
        "text": " 6",
        "token_cnt": 1150
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_health(age):\n    \n    healthy = True\n    \n    \n    if age <=18:\n        print(\"Pediatrician Visit Recommended\")\n        \n    elif (age > 65) & (gender == \"Male\"): \n        print(\"Senior Male Health Screenings Suggested\")\n\n    else:    \n        print(\"General Practitioner Appointment Scheduled \")\n        \n     \n     if not healthy: \n         print(\"Please Reach Out For Immediate Attention.\")\n         \n\nupdate_health(32)",
            "id": 796
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (true))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (integer))) right: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end))))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (not_operator argument: (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (integer)))))\n**\n",
        "text": " 6",
        "token_cnt": 330
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom faker import Faker\n\n\nfake = Faker()\ndf = pd.DataFrame([{'id': i} for i in range(10)], columns=['id'])\n\ndef update_low_hygiene(row):\n    \n    if row['utensil_usage'] == \"No\":\n        return True\n    \n    \n    elif row['other_issues'].startswith(\"Low\"):\n        return True\n\n    else: \n        return False\n    \n\n\ndf.loc[df.apply(update_low_hygiene, axis=1), 'low_hygiene'] = 'Yes'\n\nprint('Dry Run:')\nprint(df)\n\n\ndf.to_csv('./data.csv', index=False)",
            "id": 802
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list_comprehension body: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier))) (for_in_clause left: (identifier) right: (call function: (identifier) arguments: (argument_list (integer))))) (keyword_argument name: (identifier) value: (list (string (string_start) (string_content) (string_end)))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (true))) alternative: (elif_clause condition: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (true)))) alternative: (else_clause body: (block (return_statement (false))))))) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (integer)))) subscript: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (false))))))\n**\n",
        "text": " 6",
        "token_cnt": 637
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_extreme_handwashing(reliable):\n    \"\"\"\n    This function calculates EWTT (Extreme Washing Technique) score \n    based upon reliable parameter passed as input\n    \n    Parameters:\n        reliable (bool): True if tap water was used; False otherwise\n        \n    Returns:\n        int: EWTT Score    \n    \"\"\"    \n\n    \n    ewtt = 0\n    \n    \n    if reliable == True:\n    \n        \n        ewtt += 1\n        \n        \n        \n        if num_of_soap >=3:\n            ewtt+=2\n        elif num_of_soap==2:\n            ewtt+=1\n            \n    \n    return ewtt",
            "id": 807
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (integer))) (if_statement condition: (comparison_operator (identifier) (true)) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (integer))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (integer)))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (integer)))))))) (return_statement (identifier)))))\n**\n",
        "text": " 6",
        "token_cnt": 206
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "raw_material = float(input(\"Enter Raw Material Score : \"))\npreparation = float(input(\"Enter Preperation Score : \"))\nstorage = float(input(\"Enter Storage Score : \"))\ntransport = float(input(\"Enter Transport Score : \"))\ndisplay = float(input(\"Enter Display Score : \"))\n\n\ndef calculate_score():\n    \n    total_points = raw_material + preparation + storage + transport + display\n\n    if (total_points >=0) & (total_points <=19):\n        print(\"Low Hygeine\")\n        return \"Low\"\n    \n    elif ((total_points > 19) & (total_points<=38)) : \n        print(\"Medium Hygeine\")\n        return \"Medium\"\n\n    else:\n        print(\"High Hygeine\")\n        return \"High\"\n\n\n\nif __name__ == '__main__':\n    result = calculate_score()\n    print(f'Food Safety Level : {result}')",
            "id": 809
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (identifier) right: (identifier)) right: (identifier)) right: (identifier)) right: (identifier)))) (if_statement condition: (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (integer))) right: (parenthesized_expression (comparison_operator (identifier) (integer)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (parenthesized_expression (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (integer))) right: (parenthesized_expression (comparison_operator (identifier) (integer))))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_end))))))))\n**\n",
        "text": " 4",
        "token_cnt": 781
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom sklearn import preprocessing\n\n\ndef preprocess_data(df):\n    \n    cols = ['cholesterol', 'gluc']\n    \n    \n    le = preprocessing.LabelEncoder()\n\n    \n    df['sex'] = le.fit_transform(df['sex'])\n    df['smoker'] = le.fit_transform(df['smoker'])\n    df['region'] = le.fit_transform(df['region'])\n\n    \n    dummies = pd.get_dummies(df[cols])\n\n    \n    df = df.drop(columns=cols)\n\n    return pd.concat([df, dummies], axis=1)\n\n\n\nif __name__ == '__main__':\n    \n    df = pd.read_csv('healthcare-dataset-stroke-data.csv')\n\n    \n    preprocessed_df = preprocess_data(df)\n\n    \n    print(preprocessed_df.head())",
            "id": 813
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)))))) (return_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (identifier) (identifier)) (keyword_argument name: (identifier) value: (integer))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))))))\n**\n",
        "text": " 5",
        "token_cnt": 754
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom sklearn import tree\n\ndf = pd.read_csv('footcare.csv')\n\nX = df[[\"Occupation\", \"Location\"]]\ny = df['WearComfyShoes']\n\nclf = tree.DecisionTreeClassifier()\n\nclf = clf.fit(X, y)\ndef dry_run(data):\n    \n    Occupation = data['occupation']\n    Location = data['location']\n    \n    prediction = clf.predict([[Occupation, Location]])\n    return {\"dryRun\": True, \"prediction\": prediction}",
            "id": 815
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (list (identifier) (identifier))))))) (return_statement (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (true)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)))))))\n**\n",
        "text": " 6",
        "token_cnt": 515
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def extreme_nailcare():\n    while True:\n        print(\"Welcome to Extreme Nail Care!\")\n        print(\"Please select one of the following options:\")\n        print(\"[1] File my nails\")\n        print(\"[2] Shape my nails\")\n        print(\"[3] Quit\")\n\n        choice = input(\"Enter your choice: \")\n        \n        \n        try:\n            choice_int = int(choice)\n\n            if not (1 <= choice_int <= 3):\n                raise ValueError()\n                \n            break\n        except ValueError:\n            continue\n\n    if choice_int == 1:\n        \n        pass\n    \n    elif choice_int == 2:\n        \n        pass\n        \n    else:\n        \n        return\n        \nif __name__ == \"__main__\":\n    extreme_nailcare()",
            "id": 816
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters) body: (block (while_statement condition: (true) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (not_operator argument: (parenthesized_expression (comparison_operator (integer) (identifier) (integer)))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list))))) (break_statement)) (except_clause (identifier) (block (continue_statement)))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (pass_statement)) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (pass_statement))) alternative: (else_clause body: (block (return_statement)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 10",
        "token_cnt": 502
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random \n\ndef get_temperature():\n    return round(random.uniform(-20,50),1)\n\ndef get_humidity(): \n    humidity = [30,40,60] \n    return random.choice(humidity)\n\ndef get_weather_data():\n    temperature = get_temperature()\n    humidity = get_humidity()\n\n    return {\n        \"temperature\": temperature, \n        \"humidity\": humidity\n    }\n\ndef analyze_weather_data(weather_data):\n    \"\"\"\n    Analyze the given weather data and determine whether or not it meets our criteria for 'high' weather (i.e., temperature > 27 degrees Celsius AND humidity < 80%)\n    \n    Returns True if the weather qualifies as 'High', False otherwise\n    \"\"\"\n    temp = weather_data['temperature']\n    humid = weather_data['humidity']\n\n    if temp >= 27 and humid <= 80:\n        print(\"The weather qualifies as HIGH!\")\n        return True\n    else:\n        print(\"The weather does NOT meet our criteria.\")\n        return False\n\nif __name__ == \"__main__\":\n    weather_data = get_weather_data()\n    analysis = analyze_weather_data(weather_data)",
            "id": 819
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters) body: (block (return_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (unary_operator argument: (integer)) (integer))) (integer)))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (list (integer) (integer) (integer)))) (return_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (return_statement (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (integer))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (true))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (false))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))))))\n**\n",
        "text": " 6",
        "token_cnt": 661
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_low_finance(df):\n    \"\"\"\n    This function takes in a pandas dataframe containing stock information \n    and transforms it into a format suitable for analysis by beginner investors\n\n    Parameters:\n        df (pandas DataFrame): The input dataframe containing stock information\n\n    Returns:\n        transformed_df (pandas DataFrame): A transformed version of the input dataframe\n    \n    Control Flow:\n    1) Check whether the 'Close' column exists - If not, raise a ValueError\n    2) Sort the dataframe by date in ascending order \n    3) Calculate daily returns by dividing each closing price by the previous day's close \n    4) Create a new column called \"Daily Return\" which contains the calculated daily returns\n    5) Filter out any rows where the market is closed (\"Status\" = \"Closed\")\n    6) Reset the index so that dates become row indexes\n    7) Check whether the user has given their consent to proceed - If not, prompt them to do so\n    8) Use an if statement to determine whether the user wants to see only winning trades (returns > 0) \n       or all trades (including losing ones). If they want to see just winnings, filter out any losses\n       from the dataframe\n    9) Use another if statement to check whether the user wants to sort the dataframe by highest return\n       or lowest return. If they choose highest return, reverse the ordering of the dataframe\n    10) Finally, use a print() statement to output a message indicating that the transformation is complete\n    \"\"\"\n\n    \n    if 'Close' not in df.columns:\n        raise ValueError('The input dataframe must contain a \"Close\" column')\n\n    \n    df = df.sort_values(['Date'], axis=0,ascending=[True])\n\n    \n    df['Daily Return'] = df['Close'].pct_change()\n\n    \n    df = df[df['Status']=='Open']\n\n    \n    df.reset_index(drop=True, inplace=True)\n\n    \n    \n    \n\n    while True:\n        consent = input(\"Do you give permission to analyze this dataset? [y/n]\")\n        \n        if consent == 'y':\n            break\n        elif consent == 'n':\n            exit()\n        else: \n            print(\"Invalid entry. Please enter y or n.\")\n            \n    \n    \n    \n\n    while True:    \n        show_winners = input(\"Would you like to see only winning trades (returns>0)? [y/n]\")\n\n        if show_winners == 'y':\n            filtered_df = df[df['Daily Return'] >= 0]\n            print(\"Winning trades:\")\n            print(filtered_df)\n            break\n        elif show_winners == 'n':\n            pass\n        else: \n            print(\"Invalid entry. Please enter y or n.\")\n\n\n    \n    \n    \n\n    while True:    \n        sort_by = input(\"Sort by highest return (descending) or lowest return (ascending)? [h/l]\")\n    \n        if sort_by == 'h':\n            sorted_df = filtered_df.sort_values(['Daily Return'],axis=0,ascending=[False])\n            print(\"Highest return trades:\")\n            print(sorted_df)\n            break\n        elif sort_by == 'l':\n            sorted_df = filtered_df.sort_values(['Daily Return'])\n            print(\"Lowest return trades:\")\n            print(sorted_df)\n            break\n        else: \n            print(\"Invalid entry. Please enter h or l.\")\n\n    \n    \n    \n\n    print(\"\\nData Transformation Complete!\")",
            "id": 820
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (list (true))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (true)) (keyword_argument name: (identifier) value: (true))))) (while_statement condition: (true) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (break_statement)) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (while_statement condition: (true) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (integer))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (break_statement)) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (pass_statement))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (while_statement condition: (true) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (list (false))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (break_statement)) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (break_statement))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))))))\n**\n",
        "text": " 6",
        "token_cnt": 1420
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_bathing_temperature(expert):\n    \"\"\"Determine water bathing temprature according to \n    specified expertise level.\"\"\"\n\n    \n    if (expert == 'beginner'):\n        return 37°C\n    \n    elif (expert == 'intermediate'):\n        return 42°C\n        \n    else: \n        return 50°C\n\n\n\nif __name__ == '__main__':    \n    print(\"Determining optimal bathing temperature\")\n    expert = input(\"Enter beginner, intermediate or advanced:\")\n    temp = determine_bathing_temperature(expert)\n    print(f\"Bathing temperature for {expert} is set at {temp} degrees Celsius.\")",
            "id": 822
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (ERROR (integer) (UNEXPECTED 176)) (identifier))) alternative: (elif_clause condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (ERROR (integer) (UNEXPECTED 176)) (identifier)))) alternative: (else_clause body: (block (return_statement (ERROR (integer) (UNEXPECTED 176)) (identifier))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))))\n**\n",
        "text": " 6",
        "token_cnt": 426
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import requests\nfrom bs4 import BeautifulSoup\n\n\ndef get_app_details(url):\n    \n    res = requests.get(url)\n\n    \n    soup = BeautifulSoup(res.content, 'html.parser')\n\n    \n    name = soup.find('h1', class_='title').text.strip()\n    description = soup.find('div', class_='desc').text.strip()\n    rating = soup.select_one('.c-rating__value')['aria-label']\n    price = soup.find('span', itemprop=\"price\").text.strip()\n    \n    return {\n        'name': name,\n        'description': description,\n        'rating': rating,\n        'price': price\n    }\n\n\ndef main():\n    url = 'https://www.producthunt.com/posts/expense-tracking-for-engineers'\n    app_details = get_app_details(url)\n\n    print(\"App Name:\", app_details['name'])\n    print(\"\\nDescription:\")\n    print(app_details['description'])\n    print(\"\\nRating:\", app_details['rating'])\n    print(\"\\nPrice:\", app_details['price'])\n\n    reliability_criteria = [\n        ('Number of reviews', lambda x: int(x) >= 50),\n        ('Positive ratings ratio', lambda x: float(x[:-1]) > 0.75)\n    ]\n\n    passed_reliability_checks = True\n    for criterion, checker in reliability_criteria:\n        value = app_details['rating'].split()[criterion].replace(',', '')\n        result = checker(value)\n\n        if not result:\n            print(f\"\\nFailed '{criterion}' check:\\n{checker.__doc__}\")\n            passed_reliability_checks = False\n\n    if passed_reliability_checks:\n        print(\"\\nPassed all reliability checks!\")\n\n\nif __name__ == '__main__':\n    main()",
            "id": 823
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (subscript value: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)))) (return_statement (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (list (tuple (string (string_start) (string_content) (string_end)) (lambda parameters: (lambda_parameters (identifier)) body: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (integer)))) (tuple (string (string_start) (string_content) (string_end)) (lambda parameters: (lambda_parameters (identifier)) body: (comparison_operator (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (slice (unary_operator argument: (integer)))))) (float))))))) (expression_statement (assignment left: (identifier) right: (true))) (for_statement left: (pattern_list (identifier) (identifier)) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (subscript value: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list)) subscript: (identifier)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (not_operator argument: (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content (escape_sequence)) (interpolation expression: (attribute object: (identifier) attribute: (identifier))) (string_end))))) (expression_statement (assignment left: (identifier) right: (false))))))) (if_statement condition: (identifier) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 1",
        "token_cnt": 1618
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_extreme_social_media(platform1, platform2):\n    \"\"\"\n    A function to determine the most popular social media platform from \n    a list of options\n    \n    Parameters:\n        platform1 (str): First option\n        platform2 (str): Second option\n        \n    Returns:\n        dict: Dictionary containing the results\n    \"\"\"\n    \n    results = {\"Platform\": None, \"Count\": 0, \"Explanation\": \"\"}\n\n    \n    if platform1 in [\"Facebook\", \"Instagram\"]:\n        results[\"Platform\"] = platform1\n        results[\"Count\"] += 1\n        results[\"Explanation\"] = f\"{results['Explanation']} {platform1} has high usage among professionals\"\n\n    \n    elif platform2 in [\"LinkedIn\", \"Twitter\"]:\n        results[\"Platform\"] = platform2\n        results[\"Count\"] += 1\n        results[\"Explanation\"] = f\"{results['Explanation']} {platform2} also has significant presence among proffesionals\"\n\n    \n    return results",
            "id": 826
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (none)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (expression_statement (augmented_assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (integer))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (string (string_start) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (expression_statement (augmented_assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (integer))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (string (string_start) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))) (return_statement (identifier)))))\n**\n",
        "text": " 6",
        "token_cnt": 663
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def display_low_clothing_cleanliness(reliability):\n    \"\"\"Displays low clothing cleaning methods based on reliability score\n\n    Args:\n        reliability (float): The reliability of the technique\n        \n    Returns:\n        str: A message indicating the recommended method for removing stains from \n        low quality fabrics based on their reliability scores \n    \"\"\"\n    \n    \n    techniques = {\n        0.8 : \"Use a professional dry cleaner\",\n        0.65 : \"Wash the garment in cold water with mild detergent\",\n        0.4 : \"Bleach the fabric if the label allows it\"\n    }\n    \n    \n    if reliability >= 0.8:\n        recommendation = f\"For highly reliable results, use a professional dry cleaner.\"\n    elif reliability >= 0.65:\n        recommendation = f\"If you can't take the item to a dry cleaner, washing it in cold water with mild detergent may do the trick.\"\n    else:\n        recommendation = f\"In extreme cases where all other options fail, bleaching the affected area might help remove stubborn stains. Check the care instructions beforehand though!\"\n    \n    return recommendation",
            "id": 827
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (float) value: (string (string_start) (string_content) (string_end))) (pair key: (float) value: (string (string_start) (string_content) (string_end))) (pair key: (float) value: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (float)) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))))) (return_statement (identifier)))))\n**\n",
        "text": " 6",
        "token_cnt": 306
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom sklearn import model_selection\nfrom imblearn.over_sampling import SMOTE\n\ndf = pd.read_csv('SMSSpamCollection', sep='\\t', names=['label','message'])\n \n\nimport re\ndef cleanText(text):\n    \n    text=re.sub(r'[^\\w\\s]', '', str(text).lower())\n    \n    return text\n    \n\ndf['message'] = df['message'].apply(cleanText)\n \n\nX = df['message']\ny = df['label']\n \n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.30, random_state=12345)\n \n\nsmote = SMOTE()\nX_train, y_train = smote.fit_resample(X_train, y_train)\n \n\nnbc = MultinomialNB().fit(X_train, y_train)\n \n\npredictions = nbc.predict(X_test)\n \n\nprint(\"Accuracy:\", metrics.accuracy_score(y_test, predictions))\n \n\nif (metrics.accuracy_score(y_test, predictions)>86): \n    print(\"The Model has good enough performance\")\nelif ((79<=metrics.accuracy_score(y_test, predictions)<86)):\n    print(\"Model can still improve by adding more features.\")\nelse:\n    print(\"Retraining the model may help improve its perfomance\")",
            "id": 828
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content (escape_sequence)) (string_end))) (keyword_argument name: (identifier) value: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))))) (import_statement name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_end)) (call function: (attribute object: (call function: (identifier) arguments: (argument_list (identifier))) attribute: (identifier)) arguments: (argument_list)))))) (return_statement (identifier)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (pattern_list (identifier) (identifier) (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (float)) (keyword_argument name: (identifier) value: (integer)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (identifier) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))) (if_statement condition: (parenthesized_expression (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))) (integer))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (parenthesized_expression (parenthesized_expression (comparison_operator (integer) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))) (integer)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 10",
        "token_cnt": 1090
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_high_handling_personal_items(ftis: List[object], user_consent: bool = False, simulate: bool = True) -> Union[List[object], None]:\n    \"\"\"\n    Calculates the number of days each object in the given 'frequently touched items' \n    list will need to be sanitized based upon its individual risk level and returns \n    the updated list after applying appropriate disinfection schedules.\n\n    Parameters:\n        ftis (list): A list of objects representing frequently touched items \n        user_consent (bool, optional): Indicates whether the user has provided explicit \n            consent to sanitize their frequently touched items or not. Defaults to False.\n        simulate (bool, optional): Specifies whether to perform a simulation run where no\n            actual modifications are made to the physical objects or simply return the \n            sanitized list without performing any changes. Defaults to True.\n\n    Returns:\n        Union[List[object], None]: If the 'simulate' parameter is set to True, then a copy \n            of the original 'ftis' list is returned without any modifications. Otherwise, \n            the modified list with new attributes added reflecting the disinfectant schedule \n            duration for each object is returned.\n    \n    Raises:\n        ValueError: If the 'user_consent' parameter is set to True but no valid action can \n            be taken due to missing information about specific cleaning procedures or lack \n            of authorization from relevant stakeholders.\n    \"\"\"    \n    \n    if len(ftis) == 0:\n        print(\"No frequently touched items found!\")\n        return None\n\n    \n    if simulate:    \n        sanitized_ftis = [copy.deepcopy(f) for f in ftis]    \n\n        \n        for i, fti in enumerate(sanitized_ftis):\n            fti.simulated_cleaning_date = datetime.now() + timedelta(days=random.randint(1,3))\n        \n        return sanitized_ftis\n\n    \n    elif user_consent:\n        pass    \n\n    else:\n        raise ValueError(\"Invalid combination of arguments! No valid operation could be performed.\")\n\n    \n    sanitized_ftis = []\n    for fti in ftis:\n        if isinstance(fti, LowRiskObject):\n            sanitized_ftis.append(LowRiskSanitizer().sanitize(fti))\n        elif isinstance(fti, MediumRiskObject):\n            sanitized_ftis.append(MediumRiskSanitizer().sanitize(fti))\n        elif isinstance(fti, HighRiskObject):\n            if user_consent:\n                sanitized_ftis.append(HighRiskSanitizer().sanitize(fti))\n            else:\n                raise ValueError(\"User did not provide consent to clean high-risk items!\")\n        else:\n            raise ValueError(f\"Unsupported object type '{type(fti)}' encountered while calculating disinfection schedules\")\n\n    return sanitized_ftis",
            "id": 829
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (typed_parameter (identifier) type: (type (generic_type (identifier) (type_parameter (type (identifier)))))) (typed_default_parameter name: (identifier) type: (type (identifier)) value: (false)) (typed_default_parameter name: (identifier) type: (type (identifier)) value: (true))) return_type: (type (generic_type (identifier) (type_parameter (type (generic_type (identifier) (type_parameter (type (identifier))))) (type (none))))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (none)))) (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (list_comprehension body: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))) (for_in_clause left: (identifier) right: (identifier))))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier))) body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (binary_operator left: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer))))))))))) (return_statement (identifier))) alternative: (elif_clause condition: (identifier) consequence: (block (pass_statement))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (call function: (identifier) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (identifier))))))) alternative: (elif_clause condition: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (call function: (identifier) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (identifier)))))))) alternative: (elif_clause condition: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) consequence: (block (if_statement condition: (identifier) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (call function: (identifier) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (identifier))))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (call function: (identifier) arguments: (argument_list (identifier)))) (string_content) (string_end)))))))))) (return_statement (identifier)))))\n**\n",
        "text": " 4",
        "token_cnt": 1001
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.metrics import mean_squared_error, r2_score\n\n\ndef determineLowOnlineShoppingDiscounts(df):\n    \n    df = cleanData(df)\n    \n    \n    x = df[[\"Discount\", \"Reviews\"]]\n    y = df['Price']\n\n    \n    x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.3, random_state=101)\n\n    \n    lr = LinearRegression()\n\n    \n    lr.fit(x_train, y_train)\n\n    \n    predictions = lr.predict(x_test)\n\n    \n    mse = mean_squared_error(predictions, y_test)\n\n    \n    r2 = r2_score(predictions, y_test)\n\n    print(\"Mean squared error:\", mse)\n    print(\"R^2 Score:\",r2)\n\n\n    \n\n    \n    if (mse > 5000):\n        return \"There may be some sort of high variance issue\"\n\n    elif ((lr.coef_[0]*x_test.iloc[:,0].values + lr.intercept_) < min(y_test)):\n        return \"The algorithm might be showing higher preference towards discount over number of reviews.\"\n\n    else: \n        return \"No issues found!\"\n\n\n\n\ndef cleanData(df):\n    \n    Q1 = df['Price'].quantile(0.25)\n    Q3 = df['Price'].quantile(0.75)\n    IQR = Q3 - Q1\n    df = df[(Q1 - 1.5 * IQR <= df['Price']) & (df['Price'] <= Q3 + 1.5 * IQR)]\n\n    \n    df = df.fillna(df.median())\n\n    return df\n\n\n\n\nif __name__ == '__main__':\n    \n    df = pd.read_csv('online_shopping.csv')\n\n    result = determineLowOnlineShoppingDiscounts(df)\n\n    print(\"\\n\\nResult:\")\n    print(result)",
            "id": 830
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (pattern_list (identifier) (identifier) (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (float)) (keyword_argument name: (identifier) value: (integer)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (integer))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (parenthesized_expression (comparison_operator (parenthesized_expression (binary_operator left: (binary_operator left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (integer)) right: (attribute object: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (slice) subscript: (integer)) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier)))) (call function: (identifier) arguments: (argument_list (identifier))))) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list (float))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list (float))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (binary_operator left: (parenthesized_expression (comparison_operator (binary_operator left: (identifier) right: (binary_operator left: (float) right: (identifier))) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) right: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (binary_operator left: (identifier) right: (binary_operator left: (float) right: (identifier))))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))) (return_statement (identifier)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))))\n**\n",
        "text": " 10",
        "token_cnt": 1445
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def display_extreme_toilet_hygiene(reliability):\n    \"\"\"Displays extreme cases of bad toilet cleaning based \n    upon reliability score provided\n    \n    Args:\n        reliability (int): A value between 0 and 100 indicating \n            how reliable the report is regarding cleanliness\n            scores being accurate\n        \n    Returns:\n        None\n    \n    Raises:\n        ValueError: If invalid input type is passed\"\"\"\n\n    \n    if isinstance(reliability, float) or isinstance(reliability, str):\n        raise ValueError(\"Invalid input type\")\n\n    \n    message_list = [\n        \"Toilets appear generally clean\", \n        \"Some areas of concern but overall good\", \n        \"Severe issues found; immediate action required\"]\n\n    \n    if reliability >= 95:\n        print(message_list[2])\n    elif reliability >=75:\n        print(message_list[1])\n    else:\n        print(message_list[0])",
            "id": 833
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (integer)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (integer))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (integer)))))))))))\n**\n",
        "text": " 10",
        "token_cnt": 363
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom sklearn import model_selection\nfrom imblearn.over_sampling import SMOTE\n\n\ndef transform_high_fitness(df):\n    \n    df = pd.read_csv(\"data.csv\")\n    \n    \n    x = df[[\"x1\", \"x2\"]]\n    y = df[\"target\"]\n\n    \n    smote = SMOTE()\n    x, y = smote.fit_resample(x,y)\n\n    \n    x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=0)\n\n    \n    rf = RandomForestClassifier()\n    rf.fit(x_train, y_train)\n\n    \n    predictions = rf.predict(x_test)\n\n    \n    acc = accuracy_score(predictions, y_test)\n\n    \n    print(\"Accuracy:\",acc*100,\"%\")\n\n    return acc\n\n\nif __name__ == '__main__':\n    transform_high_fitness(df)",
            "id": 834
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) (expression_statement (assignment left: (pattern_list (identifier) (identifier) (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (integer)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (binary_operator left: (identifier) right: (integer)) (string (string_start) (string_content) (string_end))))) (return_statement (identifier)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))))\n**\n",
        "text": " 6",
        "token_cnt": 676
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_low_toilet_hygiene(privacy):\n    \"\"\" \n    This function checks whether there is low toilet hygiene based on privacy level\n\n    Args:\n        privacy (int): The privacy setting of the toilet, can either be 1 (public) or 2 (private). \n\n    Returns:\n        str: A message indicating whether there is low toilet hygiene or not. If there is no problem, returns \"No issues found\". Otherwise, returns a warning message describing the issue.\n\n    Raises:\n        ValueError: If the input privacy value is not 1 or 2.\n    \n    \"\"\"\n    \n    PUBLIC = \"There may be poor toilet hygiene due to lack of cleaning.\"\n    PRIVATE = \"The person using this toilet might not be practicing proper handwashing techniques.\"\n\n    \n    try: \n        \n        if privacy == 1:\n            return f\"{PUBLIC}\\n\\n{PRIVATE}\"\n        elif privacy == 2: \n            return f\"{PRIVATE}\"\n        else:\n            raise ValueError(\"Invalid privacy value entered.\")\n            \n    except ValueError as e:\n        print(e)\n        return \"Error encountered\"",
            "id": 835
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (try_statement body: (block (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (interpolation expression: (identifier)) (string_content (escape_sequence) (escape_sequence)) (interpolation expression: (identifier)) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (interpolation expression: (identifier)) (string_end))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (return_statement (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 355
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom collections import Counter\n\n\ndef get_engagement(df):\n    \"\"\"Get overall engagement score by summing up all metrics.\"\"\"\n    return df['likes'].sum() + df['comments'].sum() - df['retweets'].sum()\n\n\ndef analyze_platforms(df):\n    \"\"\"Analyze platforms and display top three most engaging ones.\"\"\"\n\n    \n    engagements = df.groupby('platform').agg({'likes': 'mean', 'comments': 'mean',\n                                            'retweets': 'mean'}).reset_index()\n    \n    \n    engagements = engagements.sort_values(['likes'], ascending=False)\n\n    print(\"Top Three Most Engaged Platforms:\")\n\n    \n    for i, row in enumerate(engagements[:3]):\n        print(f\"{i+1}. {row['platform']} ({round(row['likes']*100,2)}%, \"\n              f\"{round(row['comments']*100,2)}%, \"\n              f\"{round(row['retweets']*100,2)}%)\")\n\n    \n    best_platform = max(engagements['likes'])\n    worst_platform = min(engagements['likes'])\n\n    \n    if best_platform == engagements['likes'][1]:\n        print(\"\\nConclusion:\\n\"\n              \"* There seems to be no clear winner among these platforms.\\n\"\n              \"* Each platform may appeal to a specific type of audience.\")\n    elif best_platform != engagements['likes'][1] and \\\n            worst_platform != engagements['likes'][0]:\n        print(f\"\\nConclusion:\\n\"\n              f\"* Based on our analysis, Instagram appears to have the highest level of engagement (average like rate: {best_platform * 100:.2f}%).\\n\"\n              f\"* However, this does not necessarily mean that it is the best choice for your brand.\"\n              f\"* Consider carefully what kind of content works well on each platform before deciding where to focus your efforts.\")\n    else:\n        print(f\"\\nConclusion:\\n\"\n              f\"* Based on our analysis, {engagements[engagements['likes']==worst_platform]['platform'].item()} appears to have the lowest level of engagement (average like rate: {worst_platform * 100:.2f}%).\\n\"\n              f\"* This might indicate that this platform is less suitable for promoting certain types of content.\\n\"\n              f\"* Try adjusting your posting strategy and consider focusing more effort on other platforms instead.\")\n\n\n\ndf = pd.read_csv('./data.csv')\ncols = ['post_id', 'user_id', 'message', 'timestamp', 'likes', 'retweets', \n        'replies', 'hashtags', 'mentions', 'links', 'platform']\ndf = df[cols]\n\n\nanalyze_platforms(df)",
            "id": 838
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (return_statement (binary_operator left: (binary_operator left: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list)) right: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list))) right: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list)))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))))) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (false)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (slice (integer))))) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (concatenated_string (string (string_start) (interpolation expression: (binary_operator left: (identifier) right: (integer))) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content) (interpolation expression: (call function: (identifier) arguments: (argument_list (binary_operator left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (integer)) (integer)))) (string_content) (string_end)) (string (string_start) (interpolation expression: (call function: (identifier) arguments: (argument_list (binary_operator left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (integer)) (integer)))) (string_content) (string_end)) (string (string_start) (interpolation expression: (call function: (identifier) arguments: (argument_list (binary_operator left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (integer)) (integer)))) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (integer))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (concatenated_string (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)) (string (string_start) (string_content (escape_sequence)) (string_end)) (string (string_start) (string_content) (string_end))))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (integer))) (line_continuation) right: (comparison_operator (identifier) (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (integer)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (concatenated_string (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)) (string (string_start) (string_content) (interpolation expression: (binary_operator left: (identifier) right: (integer)) format_specifier: (format_specifier)) (string_content (escape_sequence)) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (concatenated_string (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)) (string (string_start) (string_content) (interpolation expression: (call function: (attribute object: (subscript value: (subscript value: (identifier) subscript: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (identifier))) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list))) (string_content) (interpolation expression: (binary_operator left: (identifier) right: (integer)) format_specifier: (format_specifier)) (string_content (escape_sequence)) (string_end)) (string (string_start) (string_content (escape_sequence)) (string_end)) (string (string_start) (string_content) (string_end))))))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))\n**\n",
        "text": "",
        "token_cnt": 2095
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import requests\nfrom bs4 import BeautifulSoup\n\ndef check_extreme_travel(topic):\n    \n    url = f\"https://www.example.com/{topic}\"\n\n    \n    resp = requests.get(url)\n    \n    \n    soup = BeautifulSoup(resp.content, 'html.parser')\n\n    \n    cards = soup.find_all('div', class_='card')\n\n    \n    if len(cards) == 0:\n        return False\n    else:\n        \n        for card in cards:\n            \n            header = card.h2\n\n            \n            splitted_header = str(header).split()\n            travel_topic = \" \".join(splitted_header[1:])\n\n            \n            \n            if travel_topic == topic:\n                return True\n\n        \n        return False\n\n\nprint(check_extreme_travel(\"local-attractions-for-engineers\"))\nprint(check_extreme_travel(\"something-random\"))",
            "id": 841
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (integer)) consequence: (block (return_statement (false))) alternative: (else_clause body: (block (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (identifier))) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (slice (integer))))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (true)))))) (return_statement (false))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 10",
        "token_cnt": 637
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_access(reliability):\n    \n    if reliability == \"Low\":\n        return [\"Engineer\", \"Manager\"]\n    \n    elif reliability == \"Medium\":\n        return [\"Senior Engineer\", \"Engineer\", \"Manager\"]\n\n    else: \n        return [\"Director\", \"Vice President\", \"Senior Manager\", \"Manager\", \"Chief Executive Officer\"]\n\n\nprint(\"Access granted to:\", update_access(\"High\"))",
            "id": 843
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (return_statement (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 6",
        "token_cnt": 371
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def distance(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n\n\nif __name__ == '__main__':\n\n    \n    n = int(input(\"Enter no. of locations: \"))\n    levels = [\"low\", \"medium\", \"high\"]\n    print(\"Enter \",n,\"locations:\")\n    loc_list = []\n    for i in range(0, n):\n        loc = [float(input(\"Enter location %d X co-ordinate:\"%(i+1))), float(input(\"Enter location %d Y co-ordinate:\" %(i+1)))]\n        loc_list.append(loc)\n    \n    \n    dist_matrix = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i !=j:\n                dist_matrix[i][j] = distance(loc_list[i][0], loc_list[i][1], loc_list[j][0], loc_list[j][1])\n                \n    \n    min_cost = sys.maxsize\n    low_trust_dist = sum([dist_matrix[i][j] for i in range(n) for j in range(n) if levels[i]=='low'])\n    med_trust_dist = sum([dist_matrix[i][j] for i in range(n) for j in range(n) if levels[i]=='medium' and levels[j]!='low'])\n    max_trust_dist = sum([dist_matrix[i][j] for i in range(n) for j in range(n) if levels[i]=='high'])\n    tot_dist = low_trust_dist + med_trust_dist + max_trust_dist\n    avg_dist = tot_dist / len(levels)\n    print(\"\\nTotal Distance:\",tot_dist,\"\\nAverage Distance per Trip:\",avg_dist)\n    \n    \n    visited = set()\n    route = []\n    def backtrack(curr_index, curr_path=[]):\n        global min_cost\n        if len(route)>len(visited)+1:\n            return \n        elif len(route)==len(visited)+1:\n            temp_cost=sum([dist_matrix[r][c] for r, c in zip(route[:-1], route[1:])])\n            if temp_cost<min_cost:\n                min_cost =temp_cost \n                print(\"Minimum Cost:\",min_cost)\n                print(\"Route:\",route)\n        else:\n            visited.add(curr_index)\n            for next_index in range(n):\n                if next_index not in visited:\n                    route.append(next_index)\n                    backtrack(next_index, curr_path + [next_index])\n                    route.pop()\n                    \n    backtrack(0)",
            "id": 845
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier) (identifier)) body: (block (return_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (identifier))) right: (integer)) right: (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (identifier))) right: (integer)))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (integer) (identifier))) body: (block (expression_statement (assignment left: (identifier) right: (list (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (parenthesized_expression (binary_operator left: (identifier) right: (integer)))))))) (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (parenthesized_expression (binary_operator left: (identifier) right: (integer))))))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (list_comprehension body: (integer) (for_in_clause left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (for_in_clause left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))) body: (block (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))) body: (block (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (assignment left: (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (identifier)) right: (call function: (identifier) arguments: (argument_list (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (integer)) (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (integer)) (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (integer)) (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (integer)))))))))))) (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list_comprehension body: (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (identifier)) (for_in_clause left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier)))) (for_in_clause left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier)))) (if_clause (comparison_operator (subscript value: (identifier) subscript: (identifier)) (string (string_start) (string_content) (string_end))))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list_comprehension body: (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (identifier)) (for_in_clause left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier)))) (for_in_clause left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier)))) (if_clause (boolean_operator left: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (string (string_start) (string_content) (string_end))) right: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (string (string_start) (string_content) (string_end)))))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list_comprehension body: (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (identifier)) (for_in_clause left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier)))) (for_in_clause left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier)))) (if_clause (comparison_operator (subscript value: (identifier) subscript: (identifier)) (string (string_start) (string_content) (string_end))))))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (identifier) right: (identifier)) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)) (identifier) (string (string_start) (string_content (escape_sequence)) (string_end)) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (list))) (function_definition name: (identifier) parameters: (parameters (identifier) (default_parameter name: (identifier) value: (list))) body: (block (global_statement (identifier)) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (integer))) consequence: (block (return_statement)) alternative: (elif_clause condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (integer))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list_comprehension body: (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (identifier)) (for_in_clause left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (slice (unary_operator argument: (integer)))) (subscript value: (identifier) subscript: (slice (integer))))))))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (identifier))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))))))) alternative: (else_clause body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))) body: (block (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (binary_operator left: (identifier) right: (list (identifier)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (integer)))))))\n**\n",
        "text": "swers:\n4\n\nThe given AST representation is quite complex, but we can still calculate",
        "token_cnt": 2300
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_low_flossing(transparency):\n    \n    if (transparency < 0.2) & (frequency <=3):\n        return \"increase\"\n    \n    elif ((transparency >= 0.45) | (frequency > 18)): \n        return \"decrease\"\n\n    else:\n        return None",
            "id": 849
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (float))) right: (parenthesized_expression (comparison_operator (identifier) (integer)))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (parenthesized_expression (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (float))) right: (parenthesized_expression (comparison_operator (identifier) (integer))))) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (none))))))))\n**\n",
        "text": " 10",
        "token_cnt": 206
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_extreme_clothes_clean(fabric):\n    \"\"\"\n    This function takes input as Fabric Type \n    and returns appropriate extreme washing technique\n    \n    Args:\n        fabric (str) -> Input Fabric Type\n        \n    Returns:\n        str -> Appropriate Washing Technique\n    \"\"\"\n\n    \n    fabric_dict = {\n        \"Cotton\": \"Regular Wash\",\n        \"Synthetic\": \"Washing Machine\",\n        \"Silk\": \"Handwash\"\n    }\n\n    \n    if fabric in fabric_dict:\n        return fabric_dict[fabric]\n    else:\n        print(\"Invalid Fabric\")\n\n\n\nif __name__ == '__main__':\n    fabric1 = 'Cotton'\n    result1 = calculate_extreme_clothes_clean(fabric1)\n    print(\"{} requires {}\".format(fabric1,result1))\n\n    fabric2 = 'Synthetic'\n    result2 = calculate_extreme_clothes_clean(fabric2)\n    print(\"{} requires {}\".format(fabric2,result2))\n\n    fabric3 = 'Linen'\n    result3 = calculate_extreme_clothes_clean(fabric3)\n    print(\"{} requires {}\".format(fabric3,result3))",
            "id": 851
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (subscript value: (identifier) subscript: (identifier)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 676
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom sklearn import metrics\nimport numpy as np\n\ndef display_hygeine(reliability):\n    \n    df = pd.read_csv(\"data.csv\")\n    \n    \n    X = df[[\"WashedHands\", \"SneezedIntoElbow\"]].values\n    y = df[\"EyeInfection\"].values\n\n    \n    logreg = LogisticRegression()\n    logreg.fit(X,y)\n\n    \n    predicted_infections = logreg.predict(X)\n\n    \n    accuracy = metrics.accuracy_score(y, predicted_infections)\n\n    \n    if reliability == 'high':\n        print(\"Accuracy:\", round(accuracy*100,2), \"%\\n\")\n        print(\"Based on these factors, washing hands before touching eyes can reduce the risk of getting eye infections by \", end='')\n        print(round((1 - accuracy)*100,2),\"%.\\n\")\n        \n    else:    \n        print(\"Dry run completed.\")\n        \nif __name__ == '__main__':    \n    display_hygeine('low')   \n    display_hygeine('high')",
            "id": 852
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (attribute object: (subscript value: (identifier) subscript: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) attribute: (identifier)))) (expression_statement (assignment left: (identifier) right: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (integer)) (integer))) (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (binary_operator left: (parenthesized_expression (binary_operator left: (integer) right: (identifier))) right: (integer)) (integer))) (string (string_start) (string_content (escape_sequence)) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 6",
        "token_cnt": 845
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_low_cleanliness(clothes, temperature, humidity):\n    \"\"\"This function checks whether low level of \n    clothing cleaniness requires deodorization\n    \n    Args:\n        clothes (str): type of cloth\n        temperature (float): current room temprature \n        humidity (float): relative humidity\n\n    Returns:\n        str: message indicating whether deodorization \n            is required or not\n    \"\"\"    \n    \n    if temperature < 15:    \n        if humidity > 60:\n            return f\"Deo Required for {clothes} in cold weather ({temperature:.2f}°C) and high humidity ({humidity}%)\"\n        elif humidity <= 60:    \n            return f\"Deo Required for {clothes} in cold weather ({temperature:.2f}°C) and moderate humidity ({humidity}%)\"      \n    \n    elif temperature >= 15:    \n        if humidity > 60:        \n            return f\"Deo Required for {clothes} in warm weather ({temperature:.2f}°C) and high humidity ({humidity}%)\"\n        elif humidity <= 60:     \n            return f\"No Deo Required for {clothes} in warm weather ({temperature:.2f}°C) and moderate humidity ({humidity}%)\"   \n        \n    return \"Invalid Inputs!\"",
            "id": 855
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier) format_specifier: (format_specifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier) format_specifier: (format_specifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier) format_specifier: (format_specifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier) format_specifier: (format_specifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))))) (return_statement (string (string_start) (string_content) (string_end))))))\n**\n",
        "text": " 6",
        "token_cnt": 513
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_high_weather(humidity):\n    \"\"\"Transform high humidity readings into actionable insights.\"\"\"\n\n    \n    low_risk = 30\n    medium_risk = 65\n    high_risk = 80\n    \n    \n    if humidity < low_risk:\n        return \"Low Risk\", f\"No immediate actions required ({humidity}%RH)\"\n    elif humidity >= low_risk and humidity <= medium_risk:\n        return \"Medium Risk\", f\"Take precautions ({humidity}%RH)\"\n    else: \n        return \"High Risk\", f\"Immediate emergency measures needed ({humidity}%RH)\"\n\n\n\nprint(\"Humidity Level\\tAction Required\")\nprint(\"-------------\\t------------------\")\nfor i in range(10, 90, 10):\n    label, message = transform_high_weather(i)\n    print(f\"{label}\\t{message}\")\n\nOutput:\n\nHumidity Level\tAction Required\n-------------\t------------------\nLow Risk\tNo immediate actions required (XX%RH)\nMedium Risk\tTake precautions (40%RH)\nMedium Risk\tTake precautions (50%RH)\nMedium Risk\tTake precautions (60%RH)\nHigh Risk\tImmediate emergency measures needed (70%RH)\nHigh Risk\tImmediate emergency measures needed (80%RH)",
            "id": 857
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (expression_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (identifier)) right: (comparison_operator (identifier) (identifier))) consequence: (block (return_statement (expression_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))))) alternative: (else_clause body: (block (return_statement (expression_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (integer) (integer) (integer))) body: (block (expression_statement (assignment left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_end))))))) (expression_statement (assignment left: (identifier) (ERROR (identifier) (identifier) (identifier)) type: (type (identifier)))) (expression_statement (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator argument: (unary_operator (ERROR (identifier) (identifier) (identifier) (identifier) (identifier)) argument: (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (identifier)))))))))))))))))))))))))))))))))))) (ERROR (identifier) (identifier) (identifier)) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (integer) right: (identifier))))) (ERROR (identifier) (identifier) (identifier)) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (integer) right: (identifier))))) (ERROR (identifier) (identifier) (identifier)) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (integer) right: (identifier))))) (ERROR (identifier) (identifier) (identifier) (identifier) (identifier)) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (integer) right: (identifier))))) (ERROR (identifier) (identifier) (identifier) (identifier) (identifier)) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (integer) right: (identifier))))))\n**\n",
        "text": " 4",
        "token_cnt": 1089
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def has_permission(action):\n    \n    if (user_consent == \"yes\"):\n        return True\n    \n    \n    else:\n        print(\"Access denied! User did not provide proper consent.\")\n        return False\n    \n\nif __name__ == '__main__':    \n    action = input(\"Enter operation you wish to perform:\")\n\n    \n    if has_permission(action) == True:    \n        print(\"Permission granted!\")",
            "id": 860
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (true))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (false))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (true)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 282
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom sklearn.impute import SimpleImputer\nfrom scipy.stats import boxcox\n\n\ndef transform_extreme_flossing(df):\n    \"\"\"Transform extreme flossing data\n    \n    Args:\n        df (pd.DataFrame): Input DataFrame containing flossing frequency\n            and trust levels\n        \n    Returns:\n        pd.DataFrame: Transformed DataFrame with modified features\n    \"\"\"    \n    \n    bins = [0, 1, 3, 6]\n    labels = ['very low', 'low', 'medium', 'high']\n    df['frequency_binned'] = pd.cut(df['FlossingFrequency'],bins=bins,right=False,\n                                  include_lowest=True,labels=labels)\n\n    \n    imputer = SimpleImputer()\n    columns_to_impute = ['GumDiseaseHistory','ToothCount','MedicalInsurance']\n    df[columns_to_impute] = imputer.fit_transform(df[columns_to_impute])\n\n    \n    X = df[['GumDiseaseHistory','ToothCount','MedicalInsurance']]\n    y = df['frequency_binned']\n    lambdas = []\n    for i in range(X.shape[1]):    \n        lambda_, _ = boxcox(X[:,i])\n        lambdas.append(lambda_)\n    X_trans = np.zeros((len(y),X.shape[1]))\n    for i in range(X.shape[1]):    \n        X_trans[:,i] = X[:,i]**lambdas[i]    \n\n    \n    df_transformed = pd.concat([pd.DataFrame(data=X_trans,columns=['GumDiseaseHistory_t','ToothCount_t','MedicalInsurance_t']),\n                               df[['ID','gender','age','smoker','region']]],axis=1)\n    \n    return df_transformed",
            "id": 862
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (integer) (integer) (integer) (integer)))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (false)) (keyword_argument name: (identifier) value: (true)) (keyword_argument name: (identifier) value: (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (identifier)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (integer)))) body: (block (expression_statement (assignment left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (slice) subscript: (identifier)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (tuple (call function: (identifier) arguments: (argument_list (identifier))) (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (integer))))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (integer)))) body: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (slice) subscript: (identifier)) right: (binary_operator left: (subscript value: (identifier) subscript: (slice) subscript: (identifier)) right: (subscript value: (identifier) subscript: (identifier))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (subscript value: (identifier) subscript: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (keyword_argument name: (identifier) value: (integer)))))) (return_statement (identifier)))))\n**\n",
        "text": " 10",
        "token_cnt": 1295
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_low_clothing_cleanliness(ethic):\n    \"\"\"\n    This function checks whether low clothing items (e.g., underwear) \n    were washed properly according to given ethical standards\n    \n    Parameters:\n        - ethic (str): The name of the ethical standard used for washing \n            low clothes\n        \n    Returns:\n        A boolean value indicating whether the laundry met the specified \n        ethical requirements or not\n    \"\"\"\n\n    \n    accepted_standards = ['Organic', 'Eco-Friendly']\n    \n    \n    if ethic in accepted_standards:\n        \n        \n        return True if ethic == \"Organic\" else False\n    \n    else:\n        print(\"Invalid ethic option entered\")\n        return None\n    \n    \n\nprint(check_low_clothing_cleanliness('Organic'))    \nprint(check_low_clothing_cleanliness('Standard'))   \nprint(check_low_clothing_cleanliness('Biological'))",
            "id": 864
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (conditional_expression (true) (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) (false)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (none))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 10",
        "token_cnt": 361
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_extreme_clothing_cleaning(stains):\n    \"\"\"\n    This function takes input from user as stains present \n    on their cloths and decides which technique will work best \n    taking into account moral values\n    \n    Parameters:\n        stains (list) : List containing types of stains like food, ink etc\n        \n    Returns:\n        str: Name of suitable method for removing those stains\n\n    Raises:\n        ValueError: If no valid option provided by user\n    \"\"\"\n    \n    METHODS = [\"Washing Machine\", \"Hand Wash\"]\n    \n    \n    print(\"Enter all the stains present on your garment separated by comma:\")\n    stains_input = input()\n    stains = [s.strip() for s in stains_input.split(\",\")]\n    \n    \n    if not stains:\n        return \"No Stain Found\"\n    \n    \n    for stain in stains:\n        \n        \n        if stain == \"Food\":\n            return \"Soak in cold water mixed with dishwashing detergent for at least half an hour.\"\n        elif stain == \"Ink\":\n            return \"Apply alcohol directly onto the spot followed by soap and warm water.\"\n        \n        \n        else:\n            print(f\"{stain} stain detected\")\n        \n            \n            for i,method in enumerate(METHODS):\n                print(f\"\\t{i+1}. {method}: {technique[method]}\")\n                \n            \n            choice = int(input(\"\\nChoose the number corresponding to the desired method:\"))\n            \n            \n            if 0 < choice <= len(METHODS):\n                break\n            \n    \n    except ValueError:\n        raise ValueError(\"Invalid Choice Provided!\")\n    \n    \n    return METHODS[choice - 1]\n    \n    \n    \n\nif __name__ == '__main__':\n    while True:\n        try:\n            stains = input(\"Enter list of stains present on clothes separated by commas:\\n\").strip().split(\",\")\n            result = check_extreme_cleansing(stains=stains)\n            print(result)\n        except Exception as e:\n            print(e)\n            continue",
            "id": 866
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (for_in_clause left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (not_operator argument: (identifier)) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end))))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier))) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (binary_operator left: (identifier) right: (integer))) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (identifier))) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))))) (if_statement condition: (comparison_operator (integer) (identifier) (call function: (identifier) arguments: (argument_list (identifier)))) consequence: (block (break_statement)))))))) (ERROR (identifier)) (expression_statement (assignment left: (identifier) (ERROR (identifier)) type: (type (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (return_statement (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (while_statement condition: (true) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (continue_statement)))))))))\n**\n",
        "text": " 4",
        "token_cnt": 1099
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import argparse\nfrom pathlib import Path\n\n\ndef main(input_file, output_dir, ethic):\n    \n    df = pd.read_csv(input_file)\n    \n    \n    for index, row in df.iterrows():\n        if (ethic == \"US\") & (row[\"Usage\"] != \"As Prescribed\"):\n            transformed_usage = \"Overuse\"\n        elif ((ethic == \"JP\") | (ethic == \"EU\")) & (row[\"Usage\"] not in [\"As prescribed\", np.nan]):\n            transformed_usage = \"Underuse\"\n        else: \n            transformed_usage = row[\"Usage\"]\n        \n        print(\"Row {}, Usage: '{}' -> {}\".format(index+1, row['Usage'], transformed_usage))\n\n    \n    output_file = os.path.join(output_dir, os.path.basename(input_file))\n    df.to_csv(output_file, index=False)\n    \n    \nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"--input_file\", type=Path, required=True, help=\"Input CSV file containing patient information.\")\n    parser.add_argument(\"--output_dir\", type=Path, default=\"./transformed_data\", help=\"Directory to save transformed CSV files.\")\n    parser.add_argument(\"--ethic\", choices=[\"US\", \"JP\", \"EU\"], required=True, help=\"Ethical standard under which transformation needs to be performed.\")\n    args = parser.parse_args()\n    \n    main(args.input_file, args.output_dir, args.ethic)",
            "id": 870
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) body: (block (if_statement condition: (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) right: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end))))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (binary_operator left: (parenthesized_expression (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) right: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))))) right: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier)))))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (binary_operator left: (identifier) right: (integer)) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (identifier)))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier) (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (false))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (true)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) (keyword_argument name: (identifier) value: (true)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (attribute object: (identifier) attribute: (identifier)) (attribute object: (identifier) attribute: (identifier))))))))\n**\n",
        "text": " 6",
        "token_cnt": 1309
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_extreme_hygiene(privacy):\n    \"\"\"\n    This function checks whether extreme hygiene measures need \n    to be taken while sharing public space like office, metro etc\n    \n    Args:\n        privacy (str): The level of personal information disclosure required by user\n\n    Returns:\n        str: A message indicating whether extreme hygiene measures needed or not\n    \"\"\"\n\n    \n    if privacy == \"public\":\n        measure = \"wash hands regularly\"\n    elif privacy == \"semi-private\":\n        measure = \"wear mask properly\"\n    else:\n        measure = \"keep distance from others\"\n\n    return f\"\"\"Extreme hygiene measures must be followed as {measure} to prevent spread of COVID19.\"\"\"",
            "id": 873
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))))) (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))\n**\n",
        "text": " 6",
        "token_cnt": 267
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_low_oral_health(habits):\n    \"\"\"Transform low oral health habits by avoiding tobacco use.\"\"\"\n\n    \n    age = habits['age']\n    gender = habits['gender']\n    smoker = habits['smoker']\n    \n    \n    if (age >=18) & (gender == 'Male') & (smoker == True):\n        print(\"Recommendations:\")\n        print(\"- Discuss quitting smoking with doctor.\")\n        print(\"- Encourage daily brushing and flossing.\")\n        print(\"- Consider seeing dentist regularly\")\n        \n    elif ((age < 18) | (gender !='Male')) & (smoker==True):\n        print(\"Recommendations:\")\n        print(\"- Limit exposure to secondhand smoke.\")\n        print(\"- Encourage parents to model healthy behaviors.\")\n        print(\"- Educate children about proper oral care routines.\")\n        \n    else:    \n        print(\"No specific recommendations available at this time.\")\n        \n    \ntransform_low_oral_health({'age':25,'gender':'Female','smoker':False})",
            "id": 874
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (if_statement condition: (binary_operator left: (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (integer))) right: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end))))) right: (parenthesized_expression (comparison_operator (identifier) (true)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (binary_operator left: (parenthesized_expression (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (integer))) right: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))))) right: (parenthesized_expression (comparison_operator (identifier) (true)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (false)))))))\n**\n",
        "text": " 5",
        "token_cnt": 812
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import os \n\nclass XpoGoalTracker(object): \n    def __init__(self): \n        self._goal_file = \"xpo_goals.txt\" \n\n    def load_goals(self): \n        \"\"\"Load goals from file.\"\"\"\n        try: \n            with open(self._goal_file, 'r') as f: \n                goals = [line.strip() for line in f] \n\n        except FileNotFoundError: \n            return []\n\n        else: \n            return goals\n\n    def save_goals(self, goals): \n        \"\"\"Save goals to file.\"\"\"\n        with open(self._goal_file, 'w') as f: \n            f.write('\\n'.join(sorted(set(goals)))) \n\n    def add_goal(self, name): \n        \"\"\"Add new goal.\"\"\"\n        goals = self.load_goals() \n        if name not in goals: \n            goals.append(name)\n            self.save_goals(goals) \n            print(\"Added '{}' to list of goals.\".format(name)) \n\n        else: \n            print(\"{} already exists in the list of goals\".format(name)) \n \n    def remove_goal(self, name): \n        \"\"\"Remove existing goal.\"\"\"\n        goals = self.load_goals() \n        if name in goals: \n            goals.remove(name) \n            self.save_goals(goals) \n            print(\"Removed '{}' from list of goals.\".format(name)) \n\n        else: \n            print(\"{} does not exist in the list of goals\".format(name)) \n \n    def display_goals(self): \n        \"\"\"Display all goals.\"\"\"\n        goals = self.load_goals() \n        if goals: \n            print(\"\\nYour current goals:\") \n            for g in sorted(goals): \n                print(\"- {}\".format(g)) \n\n        else: \n            print(\"You do not currently have any goals.\") \n\n\nif __name__ == '__main__': \n    xpot = XpoGoalTracker() \n    while True: \n        user_input = input(\"\"\"\n[G]oals       - Manage your goals. \n[Q]uit        - Exit program. \nEnter choice: \"\"\")\n        \n        if user_input.lower().startswith('q'): \n            break \n\n        elif user_input.lower().startswith('g'): \n            options = {\n                'a': xpot.add_goal, \n                'd': xpot.display_goals, \n                'r': xpot.remove_goal}\n\n            prompt = \"\\nChoose an option:\\na) Add goal\\nd) Display goals\\nr) Remove goal\\nq) Quit\\n>\"\n            while True: \n                opt = input(prompt).lower()\n\n                if opt in options: \n                    func = options[opt]\n                    break \n\n                else: \n                    print(\"Invalid option. Please choose again.\") \n            \n            func() \n\n        else: \n            print(\"Invalid command. Try again.\")",
            "id": 875
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (class_definition name: (identifier) superclasses: (argument_list (identifier)) body: (block (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (try_statement body: (block (with_statement (with_clause (with_item value: (as_pattern (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end)))) alias: (as_pattern_target (identifier))))) body: (block (expression_statement (assignment left: (identifier) right: (list_comprehension body: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (for_in_clause left: (identifier) right: (identifier)))))))) (except_clause (identifier) (block (return_statement (list)))) (else_clause body: (block (return_statement (identifier))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (with_statement (with_clause (with_item value: (as_pattern (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end)))) alias: (as_pattern_target (identifier))))) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content (escape_sequence)) (string_end)) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier)))))))))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier))))))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier))))))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (identifier) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier))))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (while_statement condition: (true) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) consequence: (block (break_statement)) alternative: (elif_clause condition: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (attribute object: (identifier) attribute: (identifier))) (pair key: (string (string_start) (string_content) (string_end)) value: (attribute object: (identifier) attribute: (identifier))) (pair key: (string (string_start) (string_content) (string_end)) value: (attribute object: (identifier) attribute: (identifier)))))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence)) (string_end)))) (while_statement condition: (true) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (identifier))) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))) (break_statement)) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))))\n**\n",
        "text": "ername: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement",
        "token_cnt": 2069
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\n\n\ndef calculate_handwash(df):\n    \"\"\"\n    Calculate the handwashing technique score using soap and water\n    \n    Parameters:\n        df (pandas dataframe): Dataframe containing input variables\n        \n    Returns:\n        float: Calculated handwashing technique score \n    \"\"\"\n\n    \n    WASHING_FREQUENCY = \"WashingFrequency\"\n    HANDWASH_WITH_SOAP_AND_WATER = \"HandwashWithSoapAndWater\"\n    CONSENT_GIVEN = True\n    NO_CONSENT_GIVEN = False\n\n    \n    X = df[[\"Age\", \"Sex\", \"Education\", \"Region\", \n            \"EmploymentStatus\", \"MaritalStatus\",\n            \"ResidenceType\", \"BuildingType\"]].copy()\n    y = df[HANDWASH_WITH_SOAP_AND_WATER]\n\n    \n    X_train, X_test, y_train, y_test = train_test_split(X, y)\n\n    \n    acc_noconsent = sum((y_pred == NO_CONSENT_GIVEN) & (y_true == NO_CONSENT_GIVEN)) / len(y_pred)\n    acc_consent = sum((y_pred == CONSENT_GIVEN) & (y_true == CONSENT_GIVEN)) / len(y_pred)\n    f1_score = 2 * ((acc_consent * acc_noconsent) / (acc_consent + acc_noconsent))\n\n    \n    if X_train.isna().sum().any():\n        raise ValueError(\"There are missing values in the dataset\")\n\n    \n    model = LogisticRegression()\n    model.fit(X_train, y_train)\n\n    \n    y_pred = model.predict(X_test)\n\n    \n    print(f\"\\nAccuracy when {HANDWASH_WITH_SOAP_AND_WATER} is No:\")\n    print(f\"{round(acc_noconsent*100, 2)}%\")\n    print(f\"\\nAccuracy when {HANDWASH_WITH_SOAP_AND_WATER} is Yes:\")\n    print(f\"{round(acc_consent*100, 2)}%\\n\")\n    print(f\"F1 Score:\")\n    print(f\"{round(f1_score*100, 2)}%\\n\\n\")\n\n    return round(f1_score, 4)\n\n\n\n\ndf = pd.read_csv(\"data.csv\")\n\n\nseed = 39\nnp.random.seed(seed)\n\n\ndry_run = True\n\n\ntry:\n    f1_score = calculate_handwash(df)\n\n    \n    if not dry_run:    \n        with open(\"output.txt\", 'w') as f:\n            f.write(str(f1_score))\nexcept Exception as e:\n    print(e)",
            "id": 876
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (true))) (expression_statement (assignment left: (identifier) right: (false))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (subscript value: (identifier) subscript: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))) (expression_statement (assignment left: (pattern_list (identifier) (identifier) (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (identifier))) right: (parenthesized_expression (comparison_operator (identifier) (identifier)))))) right: (call function: (identifier) arguments: (argument_list (identifier)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (identifier))) right: (parenthesized_expression (comparison_operator (identifier) (identifier)))))) right: (call function: (identifier) arguments: (argument_list (identifier)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (integer) right: (parenthesized_expression (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (identifier))) right: (parenthesized_expression (binary_operator left: (identifier) right: (identifier)))))))) (if_statement condition: (call function: (attribute object: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (integer)) (integer)))) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (integer)) (integer)))) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (integer)) (integer)))) (string_content (escape_sequence) (escape_sequence)) (string_end))))) (return_statement (call function: (identifier) arguments: (argument_list (identifier) (integer)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (true))) (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (not_operator argument: (identifier)) consequence: (block (with_statement (with_clause (with_item value: (as_pattern (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) alias: (as_pattern_target (identifier))))) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))))))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))))))\n**\n",
        "text": " 6",
        "token_cnt": 1687
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_score(status):\n    score = {\"good\":0,\"fair\":1,\"poor\":2} \n    if status[\"urine\"] == \"yes\" and status[\"faeces\"] == \"no\":\n        return score['good']\n    elif (status[\"urine\"] != \"yes\") and (status[\"waste\"]) == \"no\":\n        return score['good']\n    else: \n        return score['poor']\n\n\n\nuser_input = {'urine': 'yes', 'waste':'no','faeces' : 'maybe'}\ntoilet_hygiene_score = calculate_score(user_input)\nprint(\"Toilet Hygiene Score:\",toilet_hygiene_score )\nif toilet_hygiene_score==0:\n    print(\"The toilet has good level of cleanliness.\")\nelif toilet_hygiene_score==1:\n    print(\"The toilet has fair level of cleanliness.\")\nelse:\n    print(\"The toilet has poor level of cleanliness.\")",
            "id": 877
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer))))) (if_statement condition: (boolean_operator left: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end))) right: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (boolean_operator left: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end)))) right: (comparison_operator (parenthesized_expression (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (return_statement (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 854
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_extreme_handwashing(decision):\n    \"\"\"This function updates the user about their recent \n    decision regarding whether they want to use hand sanitizer\n    \n    Args:\n        decision (str): The users choice of 'y' or 'n'. Indicates \n            wether they consent to using hand sanitizer or not.\n            \n    Returns:\n        str: A message indicating what action will be taken next.\"\"\"\n\n    \n    \n    if decision == \"y\":\n        return f\"Great! From now onwards you may use hand sanitizer \"\\\n               f\"as part of our updated hygiene policy.\"\n        \n    \n    \n    elif decision == \"n\":\n        return f\"I'm sorry to hear that. However, as this is currently \"\\\n               f\"the standard procedure within our organization,\"\\\n               f\"you'll need to follow these steps until further notice.\"\n        \n     \n    else:    \n        raise ValueError(\"Invalid Input\")\n\n\n\nif __name__ == '__main__':\n    while True:\n        try:\n            print(\"Welcome to the new Extreme Hand Washing Policy!\")\n            print(\"Please indicate whether you wish to use hand sanitizer.\")\n            print(\"(Enter y for Yes or n for No)\")\n            \n            decision = input()\n                \n            result = update_extreme_handwashing(decision)\n        \n            print(result)\n        \n        except Exception as e:    \n            print(e)\n            break",
            "id": 879
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (while_statement condition: (true) body: (block (try_statement body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (break_statement)))))))))\n**\n",
        "text": " 10",
        "token_cnt": 573
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_low_nailcare(trust):\n    \"\"\"This function checks whether user has taken proper low nail care by analyzing their trust score\n    \n    Args:\n        trust (float): A value between [0,1] indicating level of confidence in prediction\n\n    Returns:\n        str: Indicates status of nails - \"Good\", \"Fair\" or \"Poor\". \n    \"\"\"    \n    \n    if trust >= 0.85:    \n        return \"Good\"\n    elif trust >= 0.6:    \n        return \"Fair\"\n    else:    \n        return \"Poor\"",
            "id": 881
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 173
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import os\nfrom cryptography.fernet import Fernet\n\n\ndef determine_security(choice):\n    \n    if choice == \"AES\":\n        key = Fernet.generate_key()\n    \n    elif choice == \"RSA\":\n        key = rsa.generate_private_key(public_exponent=65537, key_size=2048)\n\n    else:\n        key = twofish.KEY_SIZE\n        \n    return key\n    \n    \nif __name__ == '__main__':\n    print(\"Choose your desired encryption method:\")\n    choices = [\"AES\", \"RSA\", \"Twofish\"]\n    for index, choice in enumerate(choices):\n        print(f\"{index+1}. {choice}\")\n\n    choice = int(input(\"\\nEnter your choice: \"))\n    try:    \n        selected_cipher = choices[int(choice)-1]\n        key = determine_security(selected_cipher)\n        \n        \n        f = open('master_key', 'wb')\n        f.write(key)\n        f.close()\n\n        print(f\"\\nMaster Key has been successfully created.\\n\")\n        print(\"*\" * 50)\n        print(f\"Your master key is:\\n{key}\\n\")\n        print(\"*\" * 50)\n\n    except Exception as e:\n        print(f\"Error occurred while selecting cipher: {str(e)}\")",
            "id": 884
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (integer)))))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier))))))) (return_statement (identifier)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier))) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (binary_operator left: (identifier) right: (integer))) (string_content) (interpolation expression: (identifier)) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))))) (try_statement body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (integer))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (integer))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (integer)))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (call function: (identifier) arguments: (argument_list (identifier)))) (string_end)))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 1084
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "sources = [\n    {\n        'name': 'Source A', \n        'url': 'https://examplesourcea.com/', \n        'reliability': ['mostly true'] \n    },\n    {\n        'name': 'Source B', \n        'url': 'https://examplesourceb.com/', \n        'reliability': ['unreliable', 'completely made up'] \n    }\n]\n\n\ndef calculate_low_finance(sources):\n    \n    total_score = 0\n\n    \n    for source in sources:\n\n        \n        if source['reliability'][0] == 'mostly true':\n            print(f\"Using highly trustworthy source '{source['name']}'. Score += 5.\")\n            total_score += 5\n        \n        elif source['reliability'][0] == 'half true':\n            print(f\"Using somewhat dubious source '{source['name']}'. Score += 3.\")\n            total_score += 3\n        \n        else:\n            print(f\"Discarding nonsensical source '{source['name']}'.\")\n    \n    return total_score\n\n\n\nprint(\"Low Finance Scores:\")\ntotal_score = calculate_low_finance(sources)\nprint(f\"\\tTotal score: {total_score}\")",
            "id": 885
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (list (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end))))) (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (integer)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content) (string_end))))) (expression_statement (augmented_assignment left: (identifier) right: (integer)))) alternative: (elif_clause condition: (comparison_operator (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (integer)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content) (string_end))))) (expression_statement (augmented_assignment left: (identifier) right: (integer))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content) (string_end)))))))))) (return_statement (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_end))))))\n**\n",
        "text": " 6",
        "token_cnt": 891
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "hand_hygeine = \"low\" \nsafety = True \n\ndef transform(hand_hygeine):\n    \"\"\"Transform hand hygiene level.\"\"\"\n    \n    if safety == False:\n        return 'high' \n    elif hand_hygine == 'low': \n        return 'medium'\n    else :\n        return hand_hygeine\n    \n\nprint(\"Dry Run:\")   \ntransformed_value = transform(hand_hygeine)  \nprint(f\"{hand_hygeine} transformed to {transformed_value}\")   \n\n\nif safety == False:    \n    print(\"Safety condition met - high hand hygiene enforced\")   \n    transformed_value = 'high'     \nelif hand_hygine == 'low':      \n    print(\"Low hand hygiene detected - medium hand hygiene recommended\")  \n    transformed_value = 'medium'       \nelse:          \n    print(\"No change required as other values were not low.\")  \n\nprint(f\"\\nFinal result: {hand_hygeine} transformed to {transformed_value}\\n\")    \n\n\nprint(\"Explanation:\")    \nif safety == False:    \n    print(\"Since safety condition was met, we enforced high hand hygiene regardless of the original input value.\\nThis ensures maximum protection against potential health risks associated with poor hand hygiene practices\\n\")    \nelif hand_hygine == 'low':        \n    print(\"We checked whether the incoming value was already set to low. If so, we simply reommended keeping it at medium instead since there was no need to raise the standard further.\\nThis helps strike a balance between ensuring sufficient levels of cleanliness while also minimizing any disruption to regular routines.\\n\")        \nelse:           \n    print(\"The incoming value wasn't low, which meant we didn't need to make any changes. This means staff can continue following their existing protocols without interference from our system.\\nThis allows us to maintain flexibility while still promoting best practice wherever possible.\\n\")",
            "id": 888
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (true))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (false)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (identifier))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_end))))) (if_statement condition: (comparison_operator (identifier) (false)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (false)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)))))))))\n**\n",
        "text": " 10",
        "token_cnt": 887
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "dataset = [\n    {'name': 'Jumping rope', 'rating': 4}, \n    {'name': 'Walking fast', 'rating': 3}, \n    {'name': 'Swimming laps', 'rating': 2}, \n    {'name': 'Cycling fast', 'rating': 4}\n]\n\n\ndef get_user_input():\n    \"\"\"Asks the user to enter his name and rating for each exercise\"\"\"\n\n    \n    print(\"Welcome! Please enter your name:\")\n    name = input()\n    \n    print(f\"Hello {name}! Now please rate each activity from 1 (very low) to 4 (high):\")\n\n    activities = []\n    while True:\n        activity = {\"name\": \"\", \"rating\": \"\"}\n\n        activity[\"name\"] = input(\"\\tActivity Name: \")\n        activity[\"rating\"] = input(f\"\\tRating [{activity['name']}]: \")\n        \n        try:\n            float(activity[\"rating\"])\n            break\n        except ValueError as e:\n            print(e)\n            continue\n        \n    return name, activities\n\n\ndef calculate_fitness_score(activities):\n    \"\"\"Calculates the fitness score based on the average rating given by the user for all exercises.\"\"\"\n\n    total_points = sum([float(a[\"rating\"]) for a in activities])\n    num_exercises = len(activities)\n\n    return round((total_points / num_exercises), 2)\n    \n\ndef display_results(name, activities, fitness_score):\n    \"\"\"Displays the results to the user after calculating the overall fitness score.\"\"\"\n\n    print(f\"{name}'s Overall Fitness Score: {fitness_score}/5\\n\")\n\n    for i, activity in enumerate(sorted(activities, key=lambda x: x['name'])):\n        print(f\"{i+1}. {activity['name']}: {activity['rating']}\")\n    \n    \ndef main():\n    name, activities = get_user_input()\n    fitness_score = calculate_fitness_score(activities)\n    display_results(name, activities, fitness_score)\n\n    \nif __name__ == \"__main__\":\n    main()",
            "id": 889
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (list (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (integer))) (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (integer))) (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (integer))) (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list))) (while_statement condition: (true) body: (block (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_end)))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content) (string_end)))))) (try_statement body: (block (expression_statement (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (break_statement)) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (continue_statement)))))) (return_statement (expression_list (identifier) (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list_comprehension body: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (for_in_clause left: (identifier) right: (identifier))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (return_statement (call function: (identifier) arguments: (argument_list (parenthesized_expression (binary_operator left: (identifier) right: (identifier))) (integer)))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content (escape_sequence)) (string_end))))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (lambda parameters: (lambda_parameters (identifier)) body: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))))) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (binary_operator left: (identifier) right: (integer))) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_end))))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 4",
        "token_cnt": 1596
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import os\nfrom pathlib import Path\n\ndef display_extreme_handling(transparency):\n    \"\"\"Displays extreme handling instructions for specific personal hygiene \n    products depending on their transparency level.\"\"\"\n\n    \n    filepath = r\"C:\\Users\\exampleuser\\Documents\\PersonalHygieneProducts.csv\"\n    filenames = [\n        \"FaceWash.jpg\", \n        \"Toothpaste.png\", \n        \"Deodorant.jpeg\", \n        \"Razors.mp4\"]\n    \n    \n    with open(filepath) as csvfile:\n        reader = csv.DictReader(csvfile)\n        products = [{colname: row[colname] for colname in reader.fieldnames} \n                    for row in reader]\n        \n    \n    if transparency == 'Opaque':\n        imgpath = os.path.join(os.getcwd(), filenames[0])\n    elif transparency == 'SemiTransparent':\n        imgpath = os.path.join(os.getcwd(), filenames[1])\n    else:\n        imgpath = os.path.join(os.getcwd(), filenames[2])    \n    \n    \n    img = mpimg.imread(imgpath)\n    plt.figure()\n    ax = plt.subplot(1, 1, 1)\n    ax.imshow(img)\n    ax.set_title(\"Product Name: {}\".format(products[transparency]['Name']))\n    ax.text(\n        0, \n        75, \n        \"Extreme Handling Instructions:\", \n        fontsize=16, \n        color='blue')\n    ax.text(\n        0, \n        50, \n        products[transparency][\"Instructions\"], \n        wrap=True, \n        fontsize=12, \n        color='\n    \n\nwhile True:\n    try:    \n        transparency = input(\"Enter transparency (Opaque, SemiTransparent, or Translucent):\\n\")\n        break\n    except ValueError:\n        print(\"Invalid entry - please try again.\")        \n      \ndisplay_extreme_handling(transparency)",
            "id": 891
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (ERROR (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (with_statement (with_clause (with_item value: (as_pattern (call function: (identifier) arguments: (argument_list (identifier))) alias: (as_pattern_target (identifier))))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (dictionary_comprehension body: (pair key: (identifier) value: (subscript value: (identifier) subscript: (identifier))) (for_in_clause left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))) (for_in_clause left: (identifier) right: (identifier))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (subscript value: (identifier) subscript: (integer))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (subscript value: (identifier) subscript: (integer)))))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (subscript value: (identifier) subscript: (integer))))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer) (integer))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (string (string_start) (string_content) (string_end)))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer) (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (ERROR (attribute object: (identifier) attribute: (identifier)) (integer) (integer) (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (true)) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) (ERROR (string_start) (identifier) (true) (identifier)) (ERROR (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))) (identifier) (identifier) (identifier)) value: (call function: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (ERROR (identifier)) arguments: (argument_list (identifier)))))))))\n**\n",
        "text": " 5",
        "token_cnt": 1280
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_high_hygiene_area(area_name: str, disinfection_required: bool):\n    \"\"\"\n    This function simulates a high hygiene transformation process \n    involving cleaning and disinfection of common areas such as halls, \n    staircases, lifts, washrooms etc.\n\n    Parameters:\n        area_name (str): Name of the area being cleaned\n        disinfection_required (bool): Indicates whether disinfection is required or not\n    \n    Returns:\n        None\n        \n    Raises:\n        ValueError: If invalid argument type is passed\n    \"\"\"    \n    \n    if isinstance(area_name, str) != True:\n        raise ValueError(\"Invalid argument 'area_name' type\")\n    elif isinstance(disinfection_required, bool) != True:\n        raise ValueError(\"Invalid argument 'disinfection_required' type\")    \n\n    print(f\"Transforming {area_name} area:\")\n\n    \n    clean_area()\n\n    \n    wait_for_x_mins(30)\n\n    \n    if disinfection_required == True:\n\n        \n        disinfect_area()\n    \n        \n        wait_for_x_hours(1)\n\n    else:\n        print(f\"\\tNo need to disinfect {area_name} area.\")\n\n    \n    print(f\"\\nTransformation of {area_name} area completed!\")\n\n\n\ndef clean_area():\n    pass\n\ndef disinfect_area():\n    pass\n    \ndef wait_for_x_minutes(min_time):\n    pass    \n\ndef wait_for_x_hours(hour_count):\n    pass",
            "id": 894
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (typed_parameter (identifier) type: (type (identifier))) (typed_parameter (identifier) type: (type (identifier)))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (true)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (true)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list))) (expression_statement (call function: (identifier) arguments: (argument_list (integer)))) (if_statement condition: (comparison_operator (identifier) (true)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))) (expression_statement (call function: (identifier) arguments: (argument_list (integer))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content) (string_end)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (pass_statement))) (function_definition name: (identifier) parameters: (parameters) body: (block (pass_statement))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (pass_statement))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (pass_statement))))\n**\n",
        "text": " 10",
        "token_cnt": 585
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_extreme_hygiene(\n    covid_vax_status: str = \"unverified\", \n    allow_non_vaxxed_staff: bool = False) -> str:\n\n    \n    recommendation = \"standard\"\n    \n    \n    if covid_vax_status == \"unverified\":\n        print(\"User has not provided sufficient evidence of vaccination\")\n        \n        \n        if allow_non_vaxxed_staff:\n            recommendation = \"enhanced\"\n        else: \n            raise ValueError(\"Unverified users must explicitly opt into allowing non-vaccinated staff entry.\")\n            \n    elif covid_vax_status == \"fully_vaccinated\":\n        print(\"User has verified full vaccination status\")\n        recommendation = \"standard\"\n        \n    elif covid_vax_status == \"partially_vaccinated\":\n        print(\"User has verified partial vaccination status\")\n        \n        \n        if allow_non_vaxxed_staff:\n            recommendation = \"enhanced\"\n        else:\n            raise ValueError(\"Partially vaccinated individuals cannot access restricted areas unless explicit permission given\")    \n    \n    return f\"Recommended cleaning protocol: {recommendation}\"\n\n\n\nprint(calculate_extreme_hygiene())\nprint(calculate_extreme_hygiene(covid_vax_status=\"fully_vaccinated\"))\nprint(calculate_extreme_hygiene(allow_non_vaxxed_staff=True))\ntry:    \n    print(calculate_extreme_hygiene(covid_vax_status=\"not_a_valid_option\"))\nexcept ValueError as e:\n    print(f\"{e}\")\n    \ntry:    \n    print(calculate_extreme_hygiene(allow_non_vaxxed_staff=False, covid_vax_status=\"partially_vaccinated\"))\nexcept ValueError as e:\n    print(f\"{e}\")",
            "id": 895
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (typed_default_parameter name: (identifier) type: (type (identifier)) value: (string (string_start) (string_content) (string_end))) (typed_default_parameter name: (identifier) type: (type (identifier)) value: (false))) return_type: (type (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))))) (return_statement (string (string_start) (string_content) (interpolation expression: (identifier)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (true))))))) (try_statement body: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_end)))))))) (try_statement body: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (false)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_end)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 1007
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random\ndef update_extreme_eye_hygiene():\n    print(\"Wash Your Hand Before Touching Your Eyes\")\n\n    \n    option = random.randint(1,3)\n    \n    if (option == 1):\n        print(\"Option Selected:\", \"Yes\")\n        return True\n    elif (option ==2):\n        print(\"Option Selected:\", \"No\")\n        return False\n    else: \n        print(\"Invalid Option Selected! Try Again.\")\n        return update_extreme_eye_hygiene()\n\n\n\nupdate_extreme_eye_hygiene()",
            "id": 897
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer))))) (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (integer))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (return_statement (true))) alternative: (elif_clause condition: (parenthesized_expression (comparison_operator (identifier) (integer))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (return_statement (false)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (call function: (identifier) arguments: (argument_list)))))))) (expression_statement (call function: (identifier) arguments: (argument_list))))\n**\n",
        "text": " 6",
        "token_cnt": 378
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_low_food_hygiene(consent):\n    \"\"\"Transform low food hygiene into safe handling decisions\n    \n    Args:\n        consent (str): The type of consent given by customer\n        \n    Returns:\n        str: A message indicating whether the order can proceed \n    \"\"\"\n\n    \n    if consent == \"verbal\":    \n        decision = \"Order will not be processed\"    \n        reason = (\"Verbal consent cannot be used as legal proof,\"\n                  + \"order will not be processed\")    \n            \n    elif consent == \"digital\":    \n        decision = \"Order may proceed subject to verification\"    \n        reason = (\"Digital signature provides valid evidence,\"\n                  + \"order may proceed after verification\")    \n            \n    else:    \n        raise ValueError(\"Invalid input value provided for 'Consent'\")    \n        \n     \n    return f\"{decision} ({reason})\"   \n    \n    \nif __name__ == \"__main__\":    \n    print(transform_low_food_hygiene('verbal'))    \n    print(transform_low_food_hygiene('digital'))",
            "id": 899
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (parenthesized_expression (binary_operator left: (string (string_start) (string_content) (string_end)) right: (string (string_start) (string_content) (string_end))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (parenthesized_expression (binary_operator left: (string (string_start) (string_content) (string_end)) right: (string (string_start) (string_content) (string_end)))))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (return_statement (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 535
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random \n\ndef calculate_extreme_sneeze(reliable):\n    \"\"\" \n    Calculates appropriate action (tissue vs elbow) based on reliability score\n\n    Args:\n        reliable (float): A value between [0,1] indicating level of confidence \n\n    Returns:\n        str: 'TISSUE' or 'ELBOW', depending upon calculated decision \n    \"\"\"\n    \n    if reliable >= .95: \n        return \"TISSUE\" \n    elif reliable > .7: \n        return \"ELBOW\" \n    else: \n        return \"ERROR\" \n\n\n\nprint(\"Should I use a tissue? \", calculate_extreme_sneeze(.8)) \nprint(\"How about now?\", calculate_extreme_sneeze(.92)) \nprint(\"I'm feeling unusually confident today...\", \n      calculate_extreme_sneeze(.99))",
            "id": 900
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (float)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (float)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (float)))))))\n**\n",
        "text": " 10",
        "token_cnt": 339
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import re\ndef transform_high_handling_personal_items(df):\n    \"\"\"\n    This function transforms the high handling personal items dataset \n    by cleaning up the Item column, extracting the model number and \n    warranty length from the Manufacturer column, and adding new columns \n    Cleaned_item, Model Number, and Warranty Length\n    \n    Parameters:\n        df (pandas DataFrame): Input dataframe containing \n            columns 'Item', 'Manufacturer', and 'Reliability'\n        \n    Returns:\n        pandas DataFrame: Transformed dataframe with added columns\n    \"\"\"\n\n    \n    regex_model = r\"\\b(\\w+)(?: \\d{3})\\b|\\b\\d{5}\\b\"\n    regex_warranty = r\"(?:\\s|^)([0-9]+) year(?:s)?(?:\\s|$)\"\n\n    \n    def clean_item(x):\n        return x.strip().replace(' ', '_').translate({ord(c):None for c in string.punctuation})\n\n    df['cleaned_item'] = df['Item'].apply(clean_item)\n\n    \n    def parse_model_num(manufacturer_col):\n        matches = re.findall(regex_model, manufacturer_col)\n        if len(matches) == 0:\n            return np.nan\n        elif len(matches) > 1:\n            raise ValueError(\"Found multiple model numbers in '{}'\".format(manufacturer_col))\n        else:\n            return matches[0]\n\n    def parse_warranty_len(manufacturer_col):\n        matches = re.search(regex_warranty, manufacturer_col)\n        if not matches:\n            return None\n        else:\n            return int(matches.group(1))\n\n    df['model_number'] = df['Manufacturer'].apply(parse_model_num)\n    df['warranty_length'] = df['Manufacturer'].apply(parse_warranty_len)\n\n    \n    df['warranty_length'] = df['warranty_length'].fillna(value=None)\n\n    \n    df['manufacturer_no_warranty'] = df['Manufacturer'].str.split(' ').str[0]\n    df['product_type'] = df['Item'].str.extract('(?P<product_type>[A-Za-z ]+)').astype(object)\n\n    \n    return df",
            "id": 904
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (return_statement (call function: (attribute object: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list (dictionary_comprehension body: (pair key: (call function: (identifier) arguments: (argument_list (identifier))) value: (none)) (for_in_clause left: (identifier) right: (attribute object: (identifier) attribute: (identifier))))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (integer)) consequence: (block (return_statement (attribute object: (identifier) attribute: (identifier)))) alternative: (elif_clause condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (integer)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))))))) alternative: (else_clause body: (block (return_statement (subscript value: (identifier) subscript: (integer)))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) (if_statement condition: (not_operator argument: (identifier)) consequence: (block (return_statement (none))) alternative: (else_clause body: (block (return_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer))))))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (none)))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (subscript value: (attribute object: (call function: (attribute object: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) subscript: (integer)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (call function: (attribute object: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list (identifier))))) (return_statement (identifier)))))\n**\n",
        "text": " 10",
        "token_cnt": 1335
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random \nfrom faker import Faker \n\n \nfake = Faker() \n \ndef display_message(): \n    \"\"\"Displays appropriate message depending upon reliability score\"\"\"\n    reliability_score = random.randint(1, 5) \n  \n    if reliability_score == 1: \n        print(\"Wash your hand thoroughly before proceeding\") \n    elif reliability_score == 2: \n        print(\"Wash your hands properly but not necessarily before every task.\") \n    else: \n       print(\"It is generally recommended to wash your hands after using the bathroom \") \n       print(\"and before handling food especially raw meat products.\\n\\n\" \n             \"However this may vary according to personal preference and workplace policies.\" ) \n    \nif __name__ == '__main__': \n    while True: \n     \n        \n        name = fake.name() \n        department = fake.word() \n          \n        \n        display_message() \n\n        \n        time.sleep(3)",
            "id": 906
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (concatenated_string (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)) (string (string_start) (string_content) (string_end))))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (while_statement condition: (true) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (identifier) arguments: (argument_list))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer)))))))))\n**\n",
        "text": " 10",
        "token_cnt": 563
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_low_hygiene(responsibility):\n    \"\"\"Transforms low hygiene in shared space by implementing respectful guidelines\n    \n    Args:\n        responsibility (str): The person responsible for maintaining cleanliness\n\n    Returns:\n        str: A markdown string containing detailed instructions about how to improve hygiene \n    \"\"\"    \n    \n    md = \"\"\n    if responsibility == \"tenant\":\n        md += f\"\n        \n    elif responsibility == \"landlord\":    \n        md +=f\"\n            \n    else: \n        raise ValueError(\"Invalid input\")   \n         \n    return md",
            "id": 907
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (augmented_assignment left: (identifier) (ERROR (string_start) (identifier) (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) right: (augmented_assignment left: (identifier) (ERROR (string_start)) right: (assignment left: (identifier) (ERROR (identifier)) type: (type (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))))) (return_statement (identifier)))))\n**\n",
        "text": " 6",
        "token_cnt": 243
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_investment(risk_tolerance, time_horizon):\n    \"\"\" Calculate investment amount based on risk tolerance and time horizon\n    \n    Args:\n        risk_tolerance (int): Risk tolerance score between 1 and 10\n        time_horizon (str): Time horizon ('short', 'medium', or 'long')\n        \n    Returns:\n        int: Annual investment required based on specified risk tolerance and time horizon \n    Raises:\n        ValueError: If risk_tolerance is not within range [1, 10] or \n            if time_horizon is not one of ['short', 'medium', 'long']\n            \n    \"\"\"    \n    \n    if not isinstance(risk_tolerance, int) or \\\n       not 1 <= risk_olerance <= 10:\n        raise ValueError(\"Risk tolerance must be an integer value \"\n                         \"between 1 and 10\")\n\n    if time_horizon not in ['short', 'medium', 'long']:\n        raise ValueError(\"Time horizon must be 'short', 'medium' or 'long'\")    \n    \n    \n    asset_allocation = {\n        1: .5,   \n        2: .75,  \n        3: 1.,    \n        4: 1.25, \n        5: 1.5,   \n        6: 2.,    \n        7: 2.5,   \n        8: 3.,    \n        9: 5.,    \n        10: 10.   \n    }\n    \n    \n    if time_horizon == 'short':\n        multiplier = 1.2\n    elif time_horizon == 'medium':\n        multiplier = 1.\n    else:\n        multiplier = 0.8\n    return round(asset_allocation[risk_tolerance] * multiplier)\n\n\n\nprint(calculate_investment(5, 'medium'))\n>>> 50000",
            "id": 908
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) (line_continuation) right: (not_operator argument: (comparison_operator (integer) (identifier) (integer)))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (integer) value: (float)) (pair key: (integer) value: (float)) (pair key: (integer) value: (float)) (pair key: (integer) value: (float)) (pair key: (integer) value: (float)) (pair key: (integer) value: (float)) (pair key: (integer) value: (float)) (pair key: (integer) value: (float)) (pair key: (integer) value: (float)) (pair key: (integer) value: (float))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (float)))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (float))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (float)))))) (return_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (subscript value: (identifier) subscript: (identifier)) right: (identifier))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (integer) (string (string_start) (string_content) (string_end))))))) (ERROR) (expression_statement (integer)))\n**\n",
        "text": " 6",
        "token_cnt": 666
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def main():\n    \n    space_type = input(\"Enter 'office' or 'school': \")\n\n    \n    if space_type == \"office\":\n        print(\"Checking office for proper ventilation, lighting, temperature & humidity levels...\")\n\n        \n        if ...:\n            print(\"Office does not meet minimum ventilation standards.\")\n            ask_expert()\n        \n        else:\n            print(\"Proceeding to next check\")\n\n            \n            if ...:\n                print(\"Lighting insufficient in some areas.\")\n                ask_expert()\n                \n            else:\n                print(\"Proceeding to next check\")\n\n                \n                if ...:\n                    print(\"Temperature or humidity too low in some areas.\")\n                    ask_expert()\n                    \n                else:\n                    print(\"All office parameters within acceptable limits!\")\n                    make_recommendations()\n                    \n    elif space_type == \"school\":\n        print(\"Checking school for proper cleaning schedule, handwashing facilities & social distancing measures...\")\n\n        \n        if ...:\n            print(\"Cleaning schedule not followed properly.\")\n            ask_expert()\n            \n        else:\n            print(\"Proceeding to next check\")\n\n            \n            if ...:\n                print(\"Insufficient number of handwashing facilities available.\")\n                ask_expert()\n                \n            else:\n                print(\"Proceeding to next check\")\n\n                \n                if ...:\n                    print(\"Not enough social distancing being observed.\")\n                    ask_expert()\n                    \n                else:\n                    print(\"All school parameters within acceptable limits!\")\n                    make_recommendations()\n    \n    else:\n        print(\"Invalid Input! Please try again.\")\n\n\ndef ask_expert():\n    \n    answer = input(\"Do you wish to override this recommendation? [y/n]: \")\n\n    if answer.lower() == \"y\":\n        \n        pass\n        \n    elif answer.lower() == \"n\":\n        \n        alt_solution = input(\"Please provide an alternative solution: \")\n        print(f\"Expert recommends implementing {alt_solution}.\")\n        main()\n        \n\ndef make_recommendations():\n    \n    print(\"Recommendations:\")\n    print(\"- Encourage employees to wash their hands regularly with soap and water for at least 20 seconds.\")\n    print(\"- Provide additional hand sanitizer stations throughout the workspace.\")\n    print(\"- Increase air circulation and use natural light where possible.\")\n    print(\"- Implement a strict cleaning schedule and ensure all surfaces are disinfected daily.\")\n    print(\"- Remind students and staff to maintain safe distances between themselves and others while inside the building.\")\n    \n\nmain()",
            "id": 909
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (if_statement condition: (ellipsis) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (if_statement condition: (ellipsis) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (if_statement condition: (ellipsis) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list))))))))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (if_statement condition: (ellipsis) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (if_statement condition: (ellipsis) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (if_statement condition: (ellipsis) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list)))))))))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (pass_statement)) alternative: (elif_clause condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list)))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list))))\n**\n",
        "text": " 10",
        "token_cnt": 1529
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_hygiene(cleaning_frequency, disinfection_frequency):\n    \n    overall_score = (disinfection_frequency + cleaning_frequency) /2\n    \n    if overall_score >=0.75 :\n        return \"Very Good\"\n    elif overall_score>=0.6:\n        return \"Good\"\n    else: \n        return \"Poor\"\n    \n\nprint(\"Hygiene Level:\",calculate_hygiene(3,4))",
            "id": 910
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (identifier))) right: (integer)))) (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (integer) (integer)))))))\n**\n",
        "text": " 10",
        "token_cnt": 253
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_high_hygiene(trust):\n    \"\"\"Transform high hygiene in shared space.\"\"\"\n\n    \n    print(\"Dry Run:\")\n    \n    \n    if isinstance(trust, str) == False:\n        raise ValueError(\"Invalid Input Type\")\n        \n    \n    elif (trust).lower() == 'professional':\n        \n        \n        print(\"Professional Scenario:\")\n        print(\"*Providing hand sanitizer before touching any object.\")\n        print(\"*Using disposable gloves while cleaning and maintaining objects.\")\n        print(\"*Wearing face mask at all times when moving around unfamiliar areas.\")\n        print(\"*Avoiding contact with sick people and washing hands frequently.\")\n        print(\"*Sanitizing commonly used surfaces like doorknobs, light switches etc regularly.\")\n        print(\"*Requesting others to maintain personal hygiene properly.\")\n        print(\"*Disinfecting shared tools after each usage such as scissors, keyboards etc.\")\n        print(\"*Maintaining social distancing norms at all times during meetings and discussions.\")\n        \n    else :\n        raise ValueError(\"Invalid Value Entered\")\n        \n\ntransform_high_hygiene('PROFESSIONAL')\ntransform_high_hygiene(10)\ntransform_high_hygiene([5,6])\ntransform_high_hygiene({'a':'b'})",
            "id": 913
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (false)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (call function: (attribute object: (parenthesized_expression (identifier)) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (integer)))) (expression_statement (call function: (identifier) arguments: (argument_list (list (integer) (integer))))) (expression_statement (call function: (identifier) arguments: (argument_list (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 5",
        "token_cnt": 725
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom sklearn.metrics import accuracy_score\n\n\ndef analyze_experts(df):\n    \n    cols = [\"Method\", \"Conclusion\", \"Evidence\"]\n    \n    \n    methods = []\n    conclusions = []\n    evidences = []\n\n    \n    for i in range(len(df)):\n        row = df.iloc[i]\n        \n        methods.append(row[\"Method\"])\n        conclusions.append(row[\"Conclusion\"])\n        evidences.append(row[\"Evidence\"])\n        \n    \n    results = pd.DataFrame({\n        \"Method\":methods, \n        \"Conclusion\":conclusions, \n        \"Evidence\":evidences\n    })\n    \n    return results\n    \n    \n\ndf = pd.read_csv(\"ear_hygiene_data.csv\")\ndf = df.dropna()\n\n\nresults = analyze_experts(df)\nscores = [0]*len(results)\nfor i in range(len(results)):\n    method = results.loc[i,\"Method\"]\n    conclusion = results.loc[i,\"Conclusion\"]\n    evidence = results.loc[i,\"Evidence\"]\n    \n    if (method == \"\" or conclusion==\"\" or evidence==\"\"):\n        print(\"Please fill out missing information for expert:\", i+1)\n        answers = input(\"Enter Method, Conclusion, and Evidence separated by commas:\\n\").split(\",\")\n        results.at[i,\"Method\"]=answers[0]\n        results.at[i,\"Conclusion\"]=answers[1]\n        results.at[i,\"Evidence\"]=answers[2]\n    else:    \n        scores[i] = len([x for x in evidence.split(\"; \") if \"dry\" not in x])\n        \n\navg_score = sum(scores)/len(scores)\n    \nprint(\"\\n\\nResults:\")\nprint(results)\nprint(\"\\nAverage Recommendation Score:\", avg_score)",
            "id": 914
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list))) (expression_statement (assignment left: (identifier) right: (list))) (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier))))))) (return_statement (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (list (integer)) right: (call function: (identifier) arguments: (argument_list (identifier)))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (if_statement condition: (parenthesized_expression (boolean_operator left: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_end)))) right: (comparison_operator (identifier) (string (string_start) (string_end))))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (binary_operator left: (identifier) right: (integer))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (subscript value: (identifier) subscript: (integer)))) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (subscript value: (identifier) subscript: (integer)))) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (subscript value: (identifier) subscript: (integer))))) alternative: (else_clause body: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (call function: (identifier) arguments: (argument_list (list_comprehension body: (identifier) (for_in_clause left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (if_clause (comparison_operator (string (string_start) (string_content) (string_end)) (identifier))))))))))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (call function: (identifier) arguments: (argument_list (identifier)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)) (identifier)))))\n**\n",
        "text": " 10",
        "token_cnt": 1703
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\nfrom xgboost import XGBRegressor\n\n\ndef preprocess(df):\n    \n    df = df.fillna(-999)\n    \n    \n    cat_cols = ['gender', 'country']\n    le = preprocessing.LabelEncoder()\n    for col in cat_cols:\n        df[col] = le.fit_transform(df[col])\n        \n    return df\n    \n\nif __name__ == '__main__':    \n    \n    df = pd.read_csv('toilets_handwash.csv')\n    \n    \n    df = preprocess(df)\n\n    \n    y = df['hygiene'].values\n    X = df.drop(['hygiene'], axis=1).values\n    \n    \n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=.25, random_state=42)\n    \n    \n    reg = XGBRegressor(n_estimators=1000, learning_rate=0.1, max_depth=6, min_child_weight=3, gamma=0, subsample=.8, colsample_bytree=.7, seed=42)\n    reg.fit(X_train,y_train)\n    \n    \n    preds = reg.predict(X_test)\n    \n    \n    mae = mean_absolute_error(preds, y_test)\n    rmse = np.sqrt(mean_squared_error(preds, y_test))\n    r2 = r2_score(preds, y_test)\n    \n    print(\"MAE:\", round(mae, 2), \"\\t RMSE:\", round(rmse, 2), \"\\t R^2:\", round(r2, 4))",
            "id": 916
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (unary_operator argument: (integer)))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (identifier)))))))) (return_statement (identifier)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)))) (expression_statement (assignment left: (identifier) right: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (integer)))) attribute: (identifier)))) (expression_statement (assignment left: (pattern_list (identifier) (identifier) (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (float)) (keyword_argument name: (identifier) value: (integer)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (float)) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (float)) (keyword_argument name: (identifier) value: (float)) (keyword_argument name: (identifier) value: (integer)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier) (identifier))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (identifier) (integer))) (string (string_start) (string_content (escape_sequence)) (string_end)) (call function: (identifier) arguments: (argument_list (identifier) (integer))) (string (string_start) (string_content (escape_sequence)) (string_end)) (call function: (identifier) arguments: (argument_list (identifier) (integer)))))))))\n**\n",
        "text": " 10",
        "token_cnt": 1160
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random\nfrom datetime import timedelta\n\n\ndef get_consent():\n    consent = input(\"Do you give permission to collect samples? (y/n): \")\n\n    while True:\n        if consent == \"y\":\n            return True\n        elif consent == \"n\":\n            return False\n        else:\n            print(f\"Invalid answer '{consent}'. Please try again.\")\n            consent = input(\"Do you give permission to collect samples? (y/n): \")\n\n\ndef main():\n    \n    consent = get_consent()\n    \n    \n    if consent:    \n        wipe_count = int(input(\"How many handwash / sanitizer wipes did you use today?: \"))\n        time_outside = timedelta(hours=random.randint(1,6))\n\n        \n        analyze_sample(wipe_count)\n        \n        \n        wait_time_message(time_outside)\n        \n    else:\n        inform_user_about_refusal()\n    \n    \n    \ndef analyze_sample(wipe_count):    \n    if wipe_count > 5:\n        print(f\"{wipe_count} washes! That seems like too much hand cleaning.\\n\")\n    elif wipe_count < 2:\n        print(f\"{wipe_count} washes?! Are you sure you went somewhere where they provided soap?\\n\")\n    else:\n        print(f\"{wipe_count} looks good!\\n\")\n\n    \ndef wait_time_message(wait_time):\n    print(f\"\\nPlease wait {wait_time}. We will now let you know whether there were any pathogens present on your hands during this time period...\\n\\n\")\n    \n\ndef inform_user_about_refusal():\n    print(\"\\nWe hope you learned something from participating in our study!\")\n    print(\"If you change your mind at any point feel free to contact us.\")\n    \n    \nif __name__ == \"__main__\":\n    main()",
            "id": 918
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (while_statement condition: (true) body: (block (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (true))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (false)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list)))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content (escape_sequence)) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content (escape_sequence)) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content (escape_sequence)) (string_end)))))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content (escape_sequence) (escape_sequence)) (string_end))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 6",
        "token_cnt": 1026
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def calculate_mhr(age):\n    \n    mhr = 206 - (0.7 * age)\n\n    return mhr\n\n\n\nwhile True:\n    try:\n        age = int(input(\"Enter Your Age : \"))\n        break\n    except ValueError as e:\n        print(\"Invalid Input! Please enter a numeric value\")\ngender = input(\"Are you male [y/n]? \")\n\n\n\n\nif gender == \"y\" or gender == \"Y\":\n    tahr_male = 50 + (0.81 * age)\nelif gender == \"n\" or gender == \"N\":\n    tahr_female = 49 + (0.73 * age)\nelse:\n    raise ValueError(\"Invalid Gender Input!\")\n\n\n\nrhr = age + 1\nprint(f\"\\nYour Max Heart Rate Is {calculate_mhr(age)} BPM\\n\")\nprint(f\"For A {gender} Adult Of Age {age}, \\nTheir Targert Heart Rate Should Be Between {tahr_male} To {tahr_female} BPM.\\n\")\n\n\nheart_rate = []\nwhile rhr > tahr_male // 2 and len(heart_rate) < 3:\n    hr = float(input(\"\\nPlease Take Your Pulse : \"))\n    heart_rate.append(hr)\n    \n    if max(heart_rate) >= tahr_male:\n        print(\n            f\"\\nWARNING ! Your Heart Rate ({max(heart_rate)}) Is Very High!\\nSlow Down And Try Again.\"\n        )\n        continue\n        \n    elif min(heart_rate) <= tahr_female // 2:\n        print(\n            \"\\nWARNING ! Your Heart Rate (%s) Is VERY LOW!\" % min(heart_rate), \n            \"Try To Get More Exercise Today.\", sep='\\n'\n        )\n        time.sleep(5)\n        heart_rate = []\n        \n    \n\navg_hr = sum(heart_rate)/len(heart_rate)\nprint(f\"\\nAverage Heart Rate Was {round(avg_hr,2)}\\n\")",
            "id": 920
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (integer) right: (parenthesized_expression (binary_operator left: (float) right: (identifier)))))) (return_statement (identifier)))) (while_statement condition: (true) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (break_statement)) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (integer) right: (parenthesized_expression (binary_operator left: (float) right: (identifier))))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (integer) right: (parenthesized_expression (binary_operator left: (float) right: (identifier)))))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (integer)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (call function: (identifier) arguments: (argument_list (identifier)))) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content (escape_sequence)) (string_end))))) (expression_statement (assignment left: (identifier) right: (list))) (while_statement condition: (boolean_operator left: (comparison_operator (identifier) (binary_operator left: (identifier) right: (integer))) right: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (integer))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (call function: (identifier) arguments: (argument_list (identifier)))) (string_content (escape_sequence)) (string_end))))) (continue_statement)) alternative: (elif_clause condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (binary_operator left: (identifier) right: (integer))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content (escape_sequence)) (string_end)) right: (call function: (identifier) arguments: (argument_list (identifier)))) (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content (escape_sequence)) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer)))) (expression_statement (assignment left: (identifier) right: (list)))))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (call function: (identifier) arguments: (argument_list (identifier)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (call function: (identifier) arguments: (argument_list (identifier) (integer)))) (string_content (escape_sequence)) (string_end))))))\n**\n",
        "text": " 10",
        "token_cnt": 1363
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import os\nfrom getpass import getuser\n\n\ndef display_low_ear_hygiene():\n    print(\"Low Ear Hygiene:\")\n\n    \n    directory = f\"C:/Users/{getuser()}/Documents/\"\n    file_path = \"data.txt\"\n    if os.path.exists(directory + file_path):\n        answer = input(\n            f\"{file_path} exists. Do you want to delete all contents? (y/n) \")\n\n        while True:\n            if answer == 'y':\n                try:\n                    with open(directory+file_path, 'w') as file_object:\n                        pass\n                    break\n\n                except Exception as error:\n                    print(f'Error occurred: {error}')\n\n            elif answer == 'n':\n                print('Data remains unchanged.')\n                return\n                \n            else:\n                answer = input(\"Invalid option. Please enter y or n: \")\n                \n    \n    \n    print(\"\\nQ-tips may cause more harm than good when trying to clean your ears.\\n\")\n    print(\"Instead, use soft cotton swabs gently inserted into the outer ear.\")\n    \n    \n    \nif __name__ == \"__main__\":\n    display_low_ear_hygiene()",
            "id": 921
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (call function: (identifier) arguments: (argument_list))) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (if_statement condition: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (binary_operator left: (identifier) right: (identifier)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end)))))) (while_statement condition: (true) body: (block (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (try_statement body: (block (with_statement (with_clause (with_item value: (as_pattern (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (identifier)) (string (string_start) (string_content) (string_end)))) alias: (as_pattern_target (identifier))))) body: (block (pass_statement))) (break_statement)) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_end))))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 6",
        "token_cnt": 785
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import json\nfrom math import exp\n\n\nmodel = {}\nwith open(\"high_security_fraud_detection_model.json\", \"r\") as f:\n    model = json.load(f)\n    \ndef predict_probability(features):\n    \n    score = sum([x*y for x, y in zip(features, model[\"weights\"])])\n    \n    \n    return 1 / (1 + exp(-score))   \n\ndef detect_fraud(data):\n    \n    ip = data['ip']\n    device_id = data['device_id']\n    amount = data['amount']\n    time = data['time']\n\n    \n    features = [\n        model[\"ip_weight\"] * ip, \n        model[\"device_id_weight\"] * device_id, \n        model[\"amount_weight\"] * amount, \n        model[\"time_weight\"] * time]\n        \n    \n    prob = predict_probability(features)\n    \n    \n    if prob > model[\"threshold\"]:\n        result = {'is_fraud': 1}\n    else:\n        result = {'is_fraud': 0}    \n    \n    \n    result['prob'] = prob   \n    \n    return result    \n\nif __name__ == '__main__':\n    \n    data = {\n        'ip': '8.8.8.8',\n        'device_id': 'abcde12345',\n        'amount': 99.99,\n        'time': '2023-02-17 16:00:00'}\n    \n    \n    print(\"Dry Run:\")\n    prediction = detect_fraud(data)\n    print(prediction)\n    \n    \n    dry_run = True\n    \n    \n    if not dry_run:    \n        prediction = detect_fraud(data)\n        print(\"\\nActual Prediction:\")\n        print(prediction)",
            "id": 923
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (expression_statement (assignment left: (identifier) right: (dictionary))) (with_statement (with_clause (with_item value: (as_pattern (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) alias: (as_pattern_target (identifier))))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list_comprehension body: (binary_operator left: (identifier) right: (identifier)) (for_in_clause left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))))))) (return_statement (binary_operator left: (integer) right: (parenthesized_expression (binary_operator left: (integer) right: (call function: (identifier) arguments: (argument_list (unary_operator argument: (identifier)))))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list (binary_operator left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier)) (binary_operator left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier)) (binary_operator left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier)) (binary_operator left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (comparison_operator (identifier) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (return_statement (identifier)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (float)) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (true))) (if_statement condition: (not_operator argument: (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))))))\n**\n",
        "text": " 10",
        "token_cnt": 1385
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "products = {\n    \"apple\": {\"price\": 10}, \n    \"banana\": {\"price\": 5}\n}\n\n\ndef calculate_discount(reliability):\n    \"\"\"\n    Calculates discount percentage based upon reliability score\n    \n    Args:\n        reliability (int): A value between 0 and 100 indicating customer satisfaction\n        \n    Returns:\n        float: Discount percentage applicable to purchase price\n    \"\"\"\n    \n    if reliability >= 90:\n        return 0.20\n\n    elif reliability >= 80:\n        return 0.15\n\n    else:\n        return 0.10\n\n\ndef apply_discount(product_name, customer_satisfaction):\n    \"\"\"\n    Applies discount to product price based upon provided customer satisfaction rating\n    \n    Args:\n        product_name (str): Name of product being purchased\n        customer_satisfaction (int): Customer satisfaction score out of 100\n        \n    Returns:\n        dict: Dictionary containing product name, price after discount, and total amount paid\n    \"\"\"\n    \n    product_info = products[product_name]\n    price = product_info[\"price\"]\n    \n    \n    discount_percent = calculate_discount(customer_satisfaction)\n    discount = price * discount_percent\n    \n    \n    new_price = price - discount\n    \n    \n    return {\n        \"product_name\": product_name, \n        \"price\": new_price, \n        \"total_amount\": new_price + price\n    }\n    \n    \nif __name__ == \"__main__\":\n    \n    product_name = input(\"Enter product name: \")\n    customer_satisfaction = int(input(\"Enter customer satisfaction score [0-100]: \"))\n    \n    \n    result = apply_discount(product_name, customer_satisfaction)\n    print(f\"Product Name: {result['product_name']}\")\n    print(f\"Price: ${result['price']} ({result['price'] - round((result['price']*result['discount']),2)} off)\")\n    print(f\"Total Amount Paid: ${result['total_amount']}\\n\")",
            "id": 924
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)))) (pair key: (string (string_start) (string_content) (string_end)) value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (float))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (float)))) alternative: (else_clause body: (block (return_statement (float))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (identifier)))) (return_statement (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (binary_operator left: (identifier) right: (identifier))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content) (interpolation expression: (binary_operator left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (identifier) arguments: (argument_list (parenthesized_expression (binary_operator left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (integer))))) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content (escape_sequence)) (string_end))))))))\n**\n",
        "text": " 10",
        "token_cnt": 1074
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_low_nailcare(input):\n    \"\"\"\n    This function takes input from user about their nail condition \n    (e.g., dry cuticles) and returns a personalized regimen based on \n    current research evidence.\n\n    Args:\n        input (str): The low level nail problem reported by the user. Can \n            include terms like 'dry', 'rough', etc.\n        \n    Returns:\n        str: A personalized recommendation for improving the users' \n        nails given their specific symptoms.\n    \n    Raises:\n        ValueError: If the input value is not recognized as a valid option.\n    \"\"\"\n    \n    treatment_options = {\n        \"Dry\": [\"Apply oil regularly\", \"Use gloves when washing dishes\"],\n        \"Rough\": [\n            \"Exfoliate nails weekly\",\n            \"Moisturize cuticles daily\",\n            \"Avoid biting fingers\"\n        ],\n        \"Brittle\": [\"Eat a balanced diet\", \"Take vitamin supplements\"]\n    }\n\n    \n    if input in treatment_options:\n        \n        recommendations = []\n        for rec in treatment_options[input]:\n            recommendations.append(\" - \" + rec)\n        \n        return \"\\n\".join([\"**Recommendations:**\"] + recommendations)\n    else:\n        raise ValueError(\"Invalid input\")",
            "id": 925
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (identifier) right: (subscript value: (identifier) subscript: (identifier)) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier))))))) (return_statement (call function: (attribute object: (string (string_start) (string_content (escape_sequence)) (string_end)) attribute: (identifier)) arguments: (argument_list (binary_operator left: (list (string (string_start) (string_content) (string_end))) right: (identifier)))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 506
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom sklearn import linear_model\nfrom scipy import stats\n\ndef update_low_handling(df):\n    \n    x = df[['Age', 'Gender', 'Marital Status']]\n    y = df['Low Handling']\n\n    \n    lm = linear_model.LinearRegression()\n    \n    \n    lm.fit(x,y)\n\n    \n    r_squared = round(lm.score(x,y),4)\n\n    \n    print(\"Coefficients:\", lm.coef_)\n    print(\"R squared:\",r_squared)\n\n    \n    predictions = lm.predict(x)\n\n    \n    df['Predicted Probability'] = predictions\n\n    \n    sorted_df = df.sort_values('Predicted Probability', ascending=False)\n\n    \n    bin_edges = [0,.15,.3,.45,.6]\n    group_names = ['Very Likely','Likely','Somewhat Likely','Somewhat Unlikely','Very Unlikely']\n\n    \n    def get_prob_category(row):\n        for i in range(len(bin_edges)-1):\n            if row['Predicted Probability'] >= bin_edges[i] and row['Predicted Probability'] < bin_edges[i+1]:\n                return group_names[i]\n    df[\"Probability Category\"] = df.apply(get_prob_category, axis=1)\n\n    \n    plt.hist(sorted_df['Predicted Probability'],bins=bin_edges,color='\n    plt.xlabel('Predicted Probability')\n    plt.ylabel('Frequency')\n    plt.title('Distribution of Predictions')\n    plt.show()\n\n    \n    return df",
            "id": 926
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))) (integer))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (false)))))) (expression_statement (assignment left: (identifier) right: (list (integer) (float) (float) (float) (float)))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (integer)))) body: (block (if_statement condition: (boolean_operator left: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (subscript value: (identifier) subscript: (identifier))) right: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))))) consequence: (block (return_statement (subscript value: (identifier) subscript: (identifier))))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (integer)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (ERROR (identifier) (identifier) (string_start))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (return_statement (identifier)))))\n**\n",
        "text": " 10",
        "token_cnt": 1260
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import os\n\ndef choose_tissue():\n    print(\"Do you prefer Single Ply or MultiPly Tissue Paper?\")\n    choice = input(\"Enter 's' for Single Ply or Enter 'm' for MultiPly \")\n\n    \n    while(choice not in ['s', 'S', 'm', 'M']):\n        print(\"Invalid Input! Please try again\")\n        choice = input(\"Enter 's' for Single Ply or Enter 'm' for MultiPly \")\n    \n    return choice\n\n\n\nif __name__ == '__main__':\n    \n    choice = choose_tissue()\n\n    \n    if choice == 's':\n        dispose_single_use_tissue()\n    elif choice == 'm':\n        dispose_multi_use_tissue()\n    else:\n        print(\"Something went wrong!\")\n\n    \n\ndef dispose_single_use_tissue():    \n    \n    bin_type = input(\"Where do you wish to throw away this piece of tissue?\\n\"\n                    \"1 - Bin\\n2 - Hand Washroom \\n3 - Mouth \\nChoose one option by typing its number:\")\n                    \n    \n    while True:    \n        if bin_type == '1' or bin_type == '2' or bin_type == '3':\n            break\n        else:        \n            print('Invalid Choice !')\n            bin_type = input(\"Please Choose Again:\\n1 - Bin\\n2 - Hand washroom\\n3 - Mouth\\nChoice (1/2/3): \")\n            \n    \n    if int(bin_type) == 1:        \n        print(\"Throw Away This Piece Of Tissue Into The Trash Can.\")\n        \n    elif int(bin_type) == 2:\n        print(\"Wipe Your Nose With It And Throw Away In The Bin Afterwards.\")\n        \n    elif int(bin_type) == 3:\n        print(\"Put It Back In Its Place And Continue Eating Or Drinking As Usual.\\nDon't Touch Anything Else Until You've Cleaned Your Hands.\")\n        \n    \n\ndef dispose_multi_use_tissue():    \n    \n    another_sheet = input(\"Would you like another sheet of hand towel [y/N]: \").lower()\n    \n    \n    if another_sheet[0] == 'y':\n        print(\"Place Used Towels In The Laundry Basket For Now.\")\n        print(\"Remember To Wash Your Hands Before Using Next Time.\")\n        dispose_multi_use_tissue()\n        \n    else:\n        print(\"Thankyou For Using Our Facilities. Have A Nice Day :)\")",
            "id": 927
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (while_statement condition: (parenthesized_expression (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (return_statement (identifier)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list)))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (concatenated_string (string (string_start) (string_content (escape_sequence)) (string_end)) (string (string_start) (string_content (escape_sequence) (escape_sequence) (escape_sequence)) (string_end))))))) (while_statement condition: (true) body: (block (if_statement condition: (boolean_operator left: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (break_statement)) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence)) (string_end))))))))))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (elif_clause condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (integer)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 1340
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random\n\ndef display_low_eye_hygiene():\n    user_input = input(\"Enter 'yes' if you want me to guide you through \"\n                      \"the steps of cleaning eyelids properly.\\n\"\n                      \"Otherwise enter 'no': \")\n\n    if (user_input == 'yes'):\n        print(\"\\nLet us begin!\\n\")\n\n        \n        handwashing()\n        \n        \n        use_separate_cotton_pads()\n    \n        \n        avoid_touching_eyes_directly()\n    \n        \n        do_not_share_makeup_applicators()\n    \n        \n        remove_contact_lenses_before_bedtime()\n    \n        \n        rinse_off_makeup_gently()\n    \n        \n        steam_open_eyes()\n    \n        \n        moisturize_under_eyes()\n    \n        \n        refrain_from_rubbing_eyes_vigorously()\n    \n        \n    \n    else:\n        print(\"Understood! I will just remind you about proper eye care.\")\n\n\n\ndef handwashing():\n    print(\"Wash your hands thoroughly with soap and water for at least 20 seconds before proceeding further.\")\n\n\n\ndef use_separate_cotton_pads():\n    print(\"Use separate cotton pads for each eye when removing makeup, applying medicated ointments etc.\")\n    \n\n\ndef avoid_touching_eyes_directly():\n    print(\"Avoid touching your eyes directly with unwashed hands especially during cold & flu season.\")\n    \n    \n\ndef do_not_share_makeup_applicators():\n    print(\"Do not share makeup brushes, sponges, puffs etc. among family members or friends.\")\n\n    \n\ndef remove_contact_lenses_before_bedtime():\n    print(\"Remove contact lenses before going to bed and clean them according to manufacturer instructions.\")\n    \n\n\ndef rinse_off_makeup_gently():\n    print(\"Rinse off all traces of makeup including mascara carefully with an oil-free facial cleanser.\")\n    \n\n\ndef steam_open_eyes():\n    print(\"Steam your eyes by boiling hot water in a bowl for 5 mins and covering your head with a towel for 10 mins twice daily.\")\n    \n\n\ndef moisturize_under_eyes():\n    print(\"Moisturize the delicate skin around your eyes every morning and night with a rich yet lightweight eye cream.\")\n    \n\n\ndef refrain_from_rubbing_eyes_vigorously():\n    print(\"Refrain from rubbing your eyes too roughly or pulling out your lower lid repeatedly while blinking excessively.\")\n    \n\n\ndef replace_old_cosmetics():\n    print(\"Replace any outdated or expiring skincare, haircare or makeup items immediately to maintain product integrity.\")\n\n\ndisplay_low_eye_hygiene()",
            "id": 928
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content (escape_sequence)) (string_end)) (string (string_start) (string_content) (string_end))))))) (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list))) (expression_statement (call function: (identifier) arguments: (argument_list))) (expression_statement (call function: (identifier) arguments: (argument_list))) (expression_statement (call function: (identifier) arguments: (argument_list))) (expression_statement (call function: (identifier) arguments: (argument_list))) (expression_statement (call function: (identifier) arguments: (argument_list))) (expression_statement (call function: (identifier) arguments: (argument_list))) (expression_statement (call function: (identifier) arguments: (argument_list))) (expression_statement (call function: (identifier) arguments: (argument_list)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list))))\n**\n",
        "text": " 10",
        "token_cnt": 974
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def validateConsent(consent):\n    \n    return True\n\ndef allowDecisions(role, privilege):\n    \n    pass\n\nuserConsent = input(\"Enter your consent [Y/N]: \")\nif userConsent == 'Y' or 'y':\n    isValidConsent = validateConsent(userConsent)\n    if isValidConsent:\n        print(\"Welcome\", end=\" \")\n        userRole = input(\"What is your role? \")\n        userPrivilege = input(\"What is your privilege level? \")\n        allowedToMakeDecisions = allowDecisions(userRole, userPrivilege)\n        if allowedToMakeDecisions:\n            print(\"You can now make decisions\")\n        else:\n            print(\"Sorry, you do not have permission to make decisions.\")\n    else:\n        print(\"Invalid consent entered. Please try again.\")\nelse:\n    print(\"Access denied. Invalid consent provided.\")",
            "id": 930
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (return_statement (true)))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (pass_statement))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (identifier) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (if_statement condition: (identifier) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 590
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "privacy_status = \"\" \nrecord = [] \n\n\ndef display_menu():\n    print(\"Welcome to Medical Record Management System\")\n    print(\"1. Add New Patient Information\")\n    print(\"2. Display All Patients' Information\")\n    print(\"3. Update Patient Information\")\n    print(\"4. Delete Patient Information\")\n    print(\"5. Exit Program\")\n    \n\ndef add_patient_info():\n    global record\n    \n    patient_id = int(input(\"\\nEnter Patient ID: \"))\n    name = input(\"Enter Name: \")\n    gender = input(\"Enter Gender (M/F): \")\n    dob = input(\"Enter Date of Birth (YYYY-MM-DD): \")\n    phone_number = input(\"Enter Phone Number: \")\n    address = input(\"Enter Address: \")\n\n    entry = {\n        \"ID\": patient_id, \n        \"Name\": name, \n        \"Gender\": gender, \n        \"DOB\": dob, \n        \"Phone Number\": phone_number, \n        \"Address\": address \n    }\n\n    record.append(entry)\n\n    print(f\"\\nNew Entry Added:\\n{entry}\")\n\n    \ndef view_all_patients():\n    if len(record) == 0:\n        print(\"\\nNo Entries Found!\")\n    else:    \n        print(\"\\nPatient ID\\tName\\tGender\\tDate of Birth\\tPhone Number\\tAddress\")\n\n        for i in range(len(record)):\n            entry = record[i]\n\n            print(\n                f\"{entry['ID']}\\t{entry['Name']}\\t{entry['Gender']}\\t\" + \n                f\"{entry['DOB']}\\t{entry['Phone Number']}\\t{entry['Address']}\"\n            )\n\n            \ndef update_patient_details():\n    global record\n    \n    try:\n        patient_id = int(input(\"\\nEnter Patient ID: \"))\n        \n        for i in range(len(record)):\n            if record[i][\"ID\"] == patient_id:\n                break\n    \n        old_values = dict(record[i])\n    \n        new_name = input(f\"\\nUpdate Name [{old_values['Name']}]: \") or old_values[\"Name\"]\n        new_gender = input(f\"Update Gender [{old_values['Gender']}]: \") or old_values[\"Gender\"]\n        new_dob = input(f\"Update DOB [{old_values['DOB']}]: \") or old_values[\"DOB\"]\n        new_phone_number = input(f\"Update Phone Number [{old_values['Phone Number']}]: \") or old_values[\"Phone Number\"]\n        new_address = input(f\"Update Address [{old_values['Address']}]: \") or old_values[\"Address\"]\n    \n        updated_entry = {\n            \"ID\": patient_id, \n            \"Name\": new_name, \n            \"Gender\": new_gender, \n            \"DOB\": new_dob, \n            \"Phone Number\": new_phone_number, \n            \"Address\": new_address \n        }\n    \n        del record[i]\n        record.insert(i, updated_entry)\n    \n        print(f\"\\nEntry Updated:\")\n        print(updated_entry)\n        \n    except ValueError:\n        print(\"Invalid Input! Please enter a valid integer value.\")\n    \n    \n    \ndef delete_patient_info():    \n    try:\n        patient_id = int(input(\"\\nEnter Patient ID: \"))\n    \n        for i in range(len(record)):\n            if record[i][\"ID\"] == patient_id:\n                break\n    \n        del record[i]\n    \n        print(f\"\\nEntry Deleted!\\nID:{patient_id} has been removed from database.\")    \n                \n    except ValueError:\n        print(\"Invalid Input! Please enter a valid integer value.\")\n        \n            \ndef main():\n    display_menu()\n    \n    choice = None\n    \n    while choice != 5:\n        choice = int(input(\"\\nPlease make your selection: \"))\n        \n        if choice == 1:\n            add_patient_info()\n            \n        elif choice == 2:\n            view_all_patients()\n            \n        elif choice == 3:\n            update_patient_details()\n            \n        elif choice == 4:\n            delete_patient_info()\n            \n        else:\n            print(\"Invalid Selection!\")\n            \n            \nif __name__ == \"__main__\":\n    main()",
            "id": 932
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (expression_statement (assignment left: (identifier) right: (list))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (global_statement (identifier)) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (interpolation expression: (identifier)) (string_end))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence)) (string_end))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content (escape_sequence)) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content (escape_sequence)) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content (escape_sequence)) (string_end)) right: (string (string_start) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content (escape_sequence)) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content (escape_sequence)) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_end))))))))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (global_statement (identifier)) (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (if_statement condition: (comparison_operator (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (string (string_start) (string_content) (string_end))) (identifier)) consequence: (block (break_statement))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (identifier)))))) (expression_statement (assignment left: (identifier) right: (boolean_operator left: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content) (string_end)))) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (boolean_operator left: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content) (string_end)))) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (boolean_operator left: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content) (string_end)))) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (boolean_operator left: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content) (string_end)))) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (boolean_operator left: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (string_content) (string_end)))) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier))))) (delete_statement (subscript value: (identifier) subscript: (identifier))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))) (except_clause (identifier) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (if_statement condition: (comparison_operator (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (string (string_start) (string_content) (string_end))) (identifier)) consequence: (block (break_statement))))) (delete_statement (subscript value: (identifier) subscript: (identifier))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (interpolation expression: (identifier)) (string_content) (string_end)))))) (except_clause (identifier) (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list))) (expression_statement (assignment left: (identifier) right: (none))) (while_statement condition: (comparison_operator (identifier) (integer)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list)))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": "",
        "token_cnt": 3289
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_high_risk(age, gender):\n    \"\"\"This function takes age and gender as input \n    and returns whether there is a high probability of developing nail problems\"\"\"\n\n    \n    if age >=65 and gender == 'FEMALE':\n        return True, \"High risk due to aging and female gender\"\n    \n    elif age <18 and gender !='MALE':\n        return True,\"Very high risk due to young age and non male gender\"\n        \n    else:\n        return False, \"Low risk\"",
            "id": 933
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (expression_list (true) (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (expression_list (true) (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (return_statement (expression_list (false) (string (string_start) (string_content) (string_end))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 264
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_high_hygiene(responsibility):\n    \"\"\"Determine whether high hygiene standards were maintained based on responsibility.\"\"\"\n\n    \n    if responsibility == \"visitor\":\n        return False   \n    \n    elif responsibility == \"resident\":\n        return True    \n    \n    else:\n        raise ValueError(\"Invalid responsibility\")\n    \n    \n    \n\nprint(determine_high_hygiene(\"visitor\"))       \nprint(determine_high_hygiene(\"resident\"))      \ntry: \n    print(determine_high_hygiene(\"staff\"))     \nexcept ValueError as e:\n    print(e)",
            "id": 936
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (false))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (true)))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (try_statement body: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))))))\n**\n",
        "text": " 10",
        "token_cnt": 383
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def main():\n    \n    ethicalDilemma = \"\"\n    currentStep = 0\n\n    print(\"Welcome to our Extreme Foot Care Program!\")\n    print(\"This program aims at analyzing your attitude towards\")\n    print(\"maintaining proper foot hygiene.\")\n    print(\"\")\n    print(\"In order to analyze your responses, we need some basic information regarding yourself:\")\n    print(\"* Your name (for record keeping purposes)\")\n    print(\"* Whether you believe in following extreme foot care practices or not?\")\n    print(\"\")\n    \n    while True:\n        if currentStep == 0:\n            \n            name = input(\"Please enter your full name: \")\n\n            \n            if len(name) > 1:\n                currentStep += 1\n\n        elif currentStep == 1:\n            \n            ethicalDilemma = input(\"Do you follow extreme foot care routines? [Yes/No/Maybe]: \").lower()\n            \n            \n            if ethicalDilemma in [\"yes\",\"y\"]:\n                result = \"Strongly Agree\"\n            elif ethicalDilemma in [\"no\",\"n\"]:\n                result = \"Neutral\"\n            else:\n                result = \"Agree\"\n                \n            print(f\"\\nBased on your answer, {result} that extreme foot care provides added value.\\n\")\n        \n            break\n        \n        else:\n            print(\"\\nThank you for participating in our study!\\n\")\n            exit(0)\n    \n    \nif __name__ == \"__main__\":\n    main()",
            "id": 940
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_end))))) (while_statement condition: (true) body: (block (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (integer)) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (integer)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (interpolation expression: (identifier)) (string_content (escape_sequence)) (string_end))))) (break_statement))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (integer))))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 6",
        "token_cnt": 975
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import datetime as dt\nfrom typing import List\n\n\ndef get_day_of_week(date) -> str:\n    return date.strftime(\"%A\")\n\n\ndef schedule_check(appointments: List[dt.datetime], days_to_check: int = 7):\n\n    \n    \n    nth_day = 1\n    \n    messages = []\n\n    for i in range(days_to_check):\n        current_day = (dt.datetime.now() + dt.timedelta(i)).weekday()\n\n        \n        filtered_appts = [a for a in appointments if a.weekday() == current_day]\n        \n        \n        filtered_appts.sort(key=lambda x: x.time())\n\n        prev_end_time = None\n        num_conflicts = 0\n        for appointment in filtered_appts:\n            if prev_end_time is not None and prev_end_time >= appointment.start:\n                num_conflicts += 1\n\n            prev_end_time = max(appointment.end, prev_end_time)\n\n        if num_conflicts > 2:\n            messages.append(f\"On {get_day_of_week((filtered_appts)[0])}, \"\n                           f\"{num_conflicts} conflicts were detected!\")\n        else:\n            messages.append(\"No conflict was detected on this day.\")\n\n    return \"\\n\".join(messages)\n\n\n\nmock_data = [(dt.datetime(2023, 4, 8, 9, 30), \n              dt.datetime(2023, 4, 8, 11, 30)), \n             (dt.datetime(2023, 4, 9, 15, 0),\n              dt.datetime(2023, 4, 9, 16, 30))]\n\nprint(\"*\"*50)\nprint(\"Dry Run:\")\nprint(\"*\"*50)\nprint(schedule_check(mock_data))\n\n\nactual_appointments = [(dt.datetime(2023, 4, 10, 10, 0),\n                       dt.datetime(2023, 4, 10, 11, 30)),\n                      (dt.datetime(2023, 4, 11, 15, 0),\n                       dt.datetime(2023, 4, 11, 16, 30)),\n                      (dt.datetime(2023, 4, 12, 9, 30),\n                       dt.datetime(2023, 4, 12, 11, 30)), \n                      (dt.datetime(2023, 4, 13, 15, 0),\n                       dt.datetime(2023, 4, 13, 16, 30))]\n\nprint(\"\\n\"*2)\nprint(\"Actual Appointments:\")\nprint(\"*\"*50)\nprint(schedule_check(actual_appointments))",
            "id": 946
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) return_type: (type (identifier)) body: (block (return_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters (typed_parameter (identifier) type: (type (generic_type (identifier) (type_parameter (type (attribute object: (identifier) attribute: (identifier))))))) (typed_default_parameter name: (identifier) type: (type (identifier)) value: (integer))) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (parenthesized_expression (binary_operator left: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (identifier) (for_in_clause left: (identifier) right: (identifier)) (if_clause (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (identifier)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (lambda parameters: (lambda_parameters (identifier)) body: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))))) (expression_statement (assignment left: (identifier) right: (none))) (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (none)) right: (comparison_operator (identifier) (attribute object: (identifier) attribute: (identifier)))) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (integer))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (identifier))))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (concatenated_string (string (string_start) (string_content) (interpolation expression: (call function: (identifier) arguments: (argument_list (subscript value: (parenthesized_expression (identifier)) subscript: (integer))))) (string_content) (string_end)) (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (return_statement (call function: (attribute object: (string (string_start) (string_content (escape_sequence)) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))))) (expression_statement (assignment left: (identifier) right: (list (tuple (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer) (integer) (integer) (integer))) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer) (integer) (integer) (integer)))) (tuple (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer) (integer) (integer) (integer))) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer) (integer) (integer) (integer))))))) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (integer))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (integer))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier)))))) (expression_statement (assignment left: (identifier) right: (list (tuple (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer) (integer) (integer) (integer))) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer) (integer) (integer) (integer)))) (tuple (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer) (integer) (integer) (integer))) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer) (integer) (integer) (integer)))) (tuple (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer) (integer) (integer) (integer))) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer) (integer) (integer) (integer)))) (tuple (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer) (integer) (integer) (integer))) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer) (integer) (integer) (integer))))))) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content (escape_sequence)) (string_end)) right: (integer))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (integer))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier)))))))\n**\n",
        "text": " 4",
        "token_cnt": 1770
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import os\nfrom rich import print\n\ndef clear_nose():\n    \n    print(\"[bold magenta]DRY RUN:[/bold magenta]\")\n\n    \n    safety = input(\"Enter your safety level (safe, medium, or danger): \")\n    \n    \n    if safety == \"safe\":\n        print(f\"Nose cleared at [green]{safety}[/green] level.\")\n        return True\n    elif safety == \"medium\":\n        print(f\"[yellow]Warning![/yellow]: Nose not fully cleared at {safety} level.\\nProceed with caution!\")\n        return False\n    else:\n        print(f\"[red]Error![/red]: Invalid safety level entered ({safety}).\")\n        exit()\n\n\n\nif __name__ == \"__main__\":    \n    success = clear_nose()\n\n    \n    if success:    \n        print(\"\\n[bold green]Analysis can now begin.[/bold green]\\n\")\n\n        \n        input(\"Press Enter to close window...\")\n    else:\n        print(\"\\n[bold red]Analysis cannot proceed until nose is properly cleared!\\nTry again or consult a medical professional.[/bold red]\")",
            "id": 949
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))) (return_statement (true))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content (escape_sequence)) (string_end))))) (return_statement (false)))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list)))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (if_statement condition: (identifier) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end)))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 629
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def display_high_handwashing(expert):\n    \n    print(\"Dry Run:\")\n    \n    \n    if expert == \"normal\":\n        print(\"Wet hands with running water\")\n        time.sleep(20)\n        print(\"Apply soap\")\n        time.sleep(5)\n        print(\"Lather vigorously for at least 20 seconds\")\n        time.sleep(20)\n        print(\"Rinse thoroughly under clean, running water\")\n        time.sleep(10)\n        print(\"Dry hands using single use paper towel\")\n        \n    \n    elif expert == \"enhanced\":\n        print(\"Wet hands with running water\")\n        time.sleep(20)\n        print(\"Apply soap\")\n        time.sleep(5)\n        print(\"Lather vigorously for at least 40 seconds\")\n        time.sleep(30)\n        print(\"Use friction from scrubbing bar to remove germs\")\n        time.sleep(5)\n        print(\"Rinse thoroughly under clean, running water\")\n        time.sleep(10)\n        print(\"Dry hands using single use paper towel\")\n\n    else:\n        raise ValueError(\"Invalid input for 'expert' argument.\")\n        \nif __name__ == '__main__':    \n    display_high_handwashing('normal')\n    display_high_handwashing('enhanced')",
            "id": 950
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 6",
        "token_cnt": 936
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\n\n\ndef update_df(input_text, df):\n    \"\"\"\n    Update the given DataFrame with the provided input text\n\n    Args:\n        input_text (str): Text from user review\n        df (DataFrame): Dataframe containing customer reviews and metadata\n    \n    Returns:\n        updated_df (DataFrame): Updated dataframe with new review \n    \"\"\"\n\n    \n    if \"positive\" in input_text.lower():\n        df[\"sentiment\"] = \"Positive\"\n        \n    \n    elif \"negative\" in input_text.lower():\n        df[\"sentiment\"] = \"Negative\"\n        \n    \n    else:\n        df[\"sentiment\"] = \"Neutral\"\n\n    return df",
            "id": 955
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (string (string_start) (string_content) (string_end)) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (string (string_start) (string_content) (string_end)) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end))))))) (return_statement (identifier)))))\n**\n",
        "text": " 6",
        "token_cnt": 383
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_extreme_handling(item):\n    \"\"\"\n    This function checks whether an item requires extreme handling during cleaning accessories \n    for analysis by beginners. It implements an if/elif ladder to determine which condition applies.\n\n    Parameters:\n        item (str): The name of the item being checked\n    \n    Returns:\n        bool: A boolean indicating whether the item requires extreme handling or not\n        \n    Raises:\n        ValueError: If the input 'item' is not a string\n    \"\"\"    \n    \n    if isinstance(item, str) == False:\n        raise ValueError(\"The input 'item' must be a string\")    \n\n    \n    extreme_items = [\"glass\", \"ceramic\"]\n\n    \n    if item in extreme_items:    \n        return True\n    else:    \n        return False",
            "id": 956
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (false)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (true))) alternative: (else_clause body: (block (return_statement (false))))))))\n**\n",
        "text": " 6",
        "token_cnt": 221
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_low_education(df):\n    \"\"\"\n    This function takes a pandas dataframe as input and transforms \n    the 'CourseEnroll' column based on the value of the 'Education' column\n    \n    If the education level is less than high school then the value will be set to 0\n    Else if the education level is between highschool and some college but not associate degree then the value will be set to 1\n    else if the education level is Associate Degree then the value will be set to 2\n    else if the education level is Bachelor's degree then the value will be set to 3\n    else if the education level is Graduate degree then the value will be set to 4\n\n    Parameters:\n        df (pandas DataFrame): Input dataset containing the 'Education' and 'CourseEnroll' columns\n        \n    Returns:\n        pandas DataFrame: Transformed dataset with the new 'LowEducatonCourseEnrollment' column added\n    \"\"\"\n    \n    transformed_df = df.copy()\n    \n    \n    ed_to_course_enroll = {\n        '<=HS': 0, \n        'HSDiploma': 1,\n        'SomeCollegeNoAssocDeg': 1,\n        'AssociateDegree': 2,\n        'BachelorsDegree': 3,\n        'GraduatesDegreer': 4\n    }\n    \n    \n    transformed_df['LowEducationCourseEnrollment'] = transformed_df['Education'].apply(lambda x: ed_to_course_enroll[x])\n    \n    return transformed_df",
            "id": 960
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list (lambda parameters: (lambda_parameters (identifier)) body: (subscript value: (identifier) subscript: (identifier))))))) (return_statement (identifier)))))\n**\n",
        "text": " 6",
        "token_cnt": 383
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom sklearn import tree\n\ndf = pd.read_csv('data.csv')\n\nX = df[['cleaning', 'disinfection']]\ny = df['reliable']\n\nclf = tree.DecisionTreeClassifier()\n\nmodel = clf.fit(X, y)\ndef determineLowHygiene(cleaning, disinfection):\n    \n    X_input = [cleaning, disinfection]\n    \n    prediction = model.predict([X_input])\n    return prediction[0]",
            "id": 961
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (list (identifier) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (identifier)))))) (return_statement (subscript value: (identifier) subscript: (integer))))))\n**\n",
        "text": " 6",
        "token_cnt": 409
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_low_foot_care(expert):\n    \n    if (expert == 'beginner'):\n        return \"Wearing proper footwear can help prevent injuries such as sprains, strains, and other foot problems.\"\n\n    elif (expert == 'intermediate'):\n        return \"For intermediate experts, additional steps may need to be taken beyond simply wearing comfortable shoes.\\n\" + \\\n               \"These could include exercises to strengthen specific muscles around the feet and legs,\\n\" +\\\n                \"or adjustments made to workstations and equipment to reduce risk of injury.\"\n    \n    else: \n        return \"Expert Engineers know that good foot health requires more than just wearing comfortable shoes.\\n\"+\\\n            \"They make sure their workspace is set up properly to avoid fatigue and strain while working.\\n\"+\\\n            \"In addition they do regular exercise to keep their leg and foot muscles strong and flexible.\"\n\n\n\nprint(\"Beginner:\",transform_low_foot_care('beginner'))\nprint(\"Intermediate:\",transform_low_foot_care('intermediate'))\nprint(\"Expert:\",transform_low_foot_care('expert'))",
            "id": 962
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (parenthesized_expression (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (return_statement (binary_operator left: (binary_operator left: (string (string_start) (string_content (escape_sequence)) (string_end)) right: (string (string_start) (string_content (escape_sequence)) (string_end))) right: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (return_statement (binary_operator left: (binary_operator left: (string (string_start) (string_content (escape_sequence)) (string_end)) right: (string (string_start) (string_content (escape_sequence)) (string_end))) right: (string (string_start) (string_content) (string_end))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))\n**\n",
        "text": " 6",
        "token_cnt": 503
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def updating_extreme_food_hygiene(condition):\n    \"\"\"\n    This function updates the extreme food hygiene score \n    depending upon whether user wants to clean their fruit and veg before analysis\n    \n    Args:\n        condition (bool): True if user want to clean fruit and veg before analysis\n        \n    Returns:\n        str: updated message regarding extreme food hygine\n    \"\"\"\n    \n    msg = \"\"\n\n    \n    if condition == True:\n        \n        msg += \"It is recommended to wash all fresh produce under running water prior to preparing or consuming them.\\n\"\n        msg += \"This will help remove any dirt, bacteria, pesticides, and other contaminants from the surface of the produce.\"\n    elif condition == False:\n        \n        msg += \"If you choose not to wash your produce first, make sure to thoroughly rinse off any visible debris such as dust or leaves.\\n\"\n        msg += \"However, some experts recommend scrubbing firm produce like potatoes or squashes under cold running water because they can absorb more residue than softer fruits and vegetables.\"\n\n    return msg\n\n\nprint(updating_extreme_food_hygiene(True))",
            "id": 965
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (if_statement condition: (comparison_operator (identifier) (true)) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (string (string_start) (string_content (escape_sequence)) (string_end)))) (expression_statement (augmented_assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (identifier) (false)) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (string (string_start) (string_content (escape_sequence)) (string_end)))) (expression_statement (augmented_assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))))) (return_statement (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (true)))))))\n**\n",
        "text": " 10",
        "token_cnt": 313
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import os\nfrom dotenv import load_dotenv\nfrom fastapi import FastAPI, Depends\nfrom fastapi.responses import JSONResponse\nfrom fastapi.security import OAuth2PasswordRequestForm\nfrom jose import jwt\nfrom datetime import timedelta\nfrom tweepy.errors import HTTPError\nfrom models import TokenData, User\nfrom utils import get_db\n\n\nload_dotenv()\n\nSECRET_KEY = os.getenv(\"SECRET_KEY\")\nALGORITHM = \"HS256\"\nACCESS_TOKEN = os.getenv(\"ACCESS_TOKEN\")\nACCESS_TOKEN_SECRET = os.getenv(\"ACCESS_TOKEN_SECRET\")\nCONSUMER_KEY = os.getenv(\"TWITTER_CLIENT_ID\")\nCONSUMER_SECRET = os.getenv(\"TWITTER_CLIENT_SECRET\")\nOAUTH_URL = f\"https://api.twitter.com/oauth2/token\"\n\n\napp = FastAPI(\n    title=\"Social Media Analytics\", \n    description=\"An application to analyze Twitter profiles.\", version='1.0'\n)\n\n\n\n@app.post(\"/login/\", response_model=TokenData)\nasync def login_for_access_token(form_data: OAuth2PasswordRequestForm = Depends()):\n    username = form_data.username\n    password = <PASSWORD>\n\n    \n    try:\n        user = authenticate_user(username=username, password=password)\n    except Exception as e:\n        raise HTTPException(status_code=HTTP_401_UNAUTHORIZED, detail=str(e))\n\n    access_token_expires = timedelta(minutes=30)\n    access_token = create_access_token(\n        data={\"sub\": str(user.id)}, expires_delta=access_token_expires\n    )\n\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\n\n\n\n\ndef authenticate_user(username: str, password: str):\n    \"\"\"Authenticate a user\"\"\"\n    db = get_db()\n    user = db.query(User).filter(User.username == username).first()\n\n    if not user or not verify_password(password, user.hashed_password):\n        raise ValueError(\"Incorrect email or password\")\n\n    return user\n\n\n\n\n\ndef verify_password(plain_text_password, hashed_password):\n    \"\"\"Verify a stored password against a given plain-text one.\"\"\"\n    return pwd_context.verify(plain_text_password, hashed_password)\n\n\n\n\n\ndef get_password_hash(password: str):\n    \"\"\"Get a secure hash for storing a password.\"\"\"\n    return pwd_context.hash(password)\n\n\n\n\n\n\ndef create_access_token(data: dict, expires_delta: timedelta = None):\n    to_encode = data.copy()\n    if expires_delta:\n        expire = datetime.utcnow() + expires_delta\n    else:\n        expire = datetime.utcnow() + timedelta(minutes=15)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt",
            "id": 967
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (ERROR (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (expression_statement (call function: (identifier) arguments: (argument_list))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))))) (decorated_definition (decorator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (identifier))))) definition: (function_definition name: (identifier) parameters: (parameters (typed_default_parameter name: (identifier) type: (type (identifier)) value: (call function: (identifier) arguments: (argument_list)))) (ERROR (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))) (expression_statement (assignment left: (identifier) (ERROR (ERROR) (comparison_operator (identifier) (identifier))) type: (type (identifier)) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (identifier)))))) (ERROR (identifier)) (as_pattern (identifier) alias: (as_pattern_target (identifier)))) body: (block (raise_statement (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (identifier)))))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (integer)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier))))))) (keyword_argument name: (identifier) value: (identifier)))))) (return_statement (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))))) (ERROR (call function: (identifier) arguments: (argument_list (identifier) (ERROR (identifier)) (identifier) (ERROR (identifier))))) (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))) attribute: (identifier)) arguments: (argument_list (comparison_operator (attribute object: (identifier) attribute: (identifier)) (identifier)))) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (boolean_operator left: (not_operator argument: (identifier)) right: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (attribute object: (identifier) attribute: (identifier)))))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (return_statement (identifier)) (ERROR (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) (expression_statement (string (string_start) (string_content) (string_end))) (return_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (ERROR (call function: (identifier) arguments: (argument_list (identifier) (ERROR (identifier))))) (expression_statement (string (string_start) (string_content) (string_end))) (return_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (ERROR (call function: (identifier) arguments: (argument_list (ERROR (identifier)) (identifier) (keyword_argument name: (identifier) (ERROR (identifier)) value: (none))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) right: (identifier))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (integer)))))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (identifier)))))) (return_statement (identifier))))\n**\n",
        "text": "swers:\n\n- [Explanation]: The cyclomatic complexity of the given AST",
        "token_cnt": 2071
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_health_data(df):\n    \n    cols = [\"cholesterol\", \"gluc\"]\n    \n    \n    transformed_cols = []\n    \n    \n    for col in df.columns:\n        \n        if col in cols:\n            \n            transformed_cols.append(\"high_\" + col)\n        else:\n            \n            transformed_cols.append(col)\n            \n    \n    transformed_df = pd.DataFrame(index=df.index)\n    transformed_df[transformed_cols] = df[cols].copy()\n    \n    return transformed_df",
            "id": 968
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (identifier) right: (attribute object: (identifier) attribute: (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)))))) alternative: (else_clause body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (call function: (attribute object: (subscript value: (identifier) subscript: (identifier)) attribute: (identifier)) arguments: (argument_list)))) (return_statement (identifier)))))\n**\n",
        "text": " 10",
        "token_cnt": 370
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "name = input(\"What is your name? \")\ndepartment = input(\"What is your department? \")\n\n\nwas_hand_sanitized = input(f\"{name}, {department}: Did you use any hand sanitizer today? (y/n) \").lower() == \"y\"\n\n\nif department == \"Marketing\":\n    \n    print(f\"{name} from marketing did not need to sanitize their hands.\")\nelif department == \"IT\":\n    \n    if not was_hand_sanitized and datetime.now().hour < 12:\n        print(f\"{name} from IT must wait till after noon before starting work unless they sanitized their hands first\")\n    else:\n        print(f\"{name} from IT can continue working since either didn't need to sanitize or already did so earlier\")\nelif department == \"Sales\":\n    \n    if target_met():\n        print(f\"{name} from sales met their daily goals!\")\n    elif not was_hand_sanitized:\n        print(f\"{name} from sales needs to sanitize their hands then try again tomorrow\")\n    else:\n        print(f\"{name} from sales failed to reach goal but had sanitized hands - talk to manager about potential bonuses\")\nelse:\n    \n    if not was_hand_sanitized:\n        print(f\"{name} from unknown department must sanitize their hands before continuing\")\n\ndef target_met():\n    return random.random() > .75",
            "id": 969
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (comparison_operator (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (boolean_operator left: (not_operator argument: (identifier)) right: (comparison_operator (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) (integer))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end)))))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (call function: (identifier) arguments: (argument_list)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end)))))) alternative: (elif_clause condition: (not_operator argument: (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end)))))))))) alternative: (else_clause body: (block (if_statement condition: (not_operator argument: (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (interpolation expression: (identifier)) (string_content) (string_end)))))))))) (function_definition name: (identifier) parameters: (parameters) body: (block (return_statement (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (float))))))\n**\n",
        "text": " 4",
        "token_cnt": 851
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import pandas as pd\nfrom sklearn import tree\n\n\ndef main():\n    \n    df = pd.read_csv(\"input.csv\")\n    \n    \n    X = df[[\"Hair\", \"Skin\"]]\n    y = df['Privacy']\n\n    \n    clf = tree.DecisionTreeClassifier()\n\n    \n    clf.fit(X,y)\n\n    \n    prediction = clf.predict([[1,0]])\n\n    print(\"Predicted result:\",prediction)\n    \n\nif __name__ == '__main__':\n    main()",
            "id": 970
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (list (integer) (integer))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list))))))\n**\n",
        "text": " 6",
        "token_cnt": 449
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def display_high_oral_health(trust):\n    \"\"\"Displays high oral health habits depending upon trust score.\"\"\"\n\n    \n    poor = (0,5)\n    fair = (6,12)\n    good = (13,18)\n    excellent = (19,)\n    \n    \n    if trust >= excellent[0]:\n        print(\"Congratulations! The patient has achieved an exceptionally high degree of oral health.\")\n        print(\"* Brush teeth twice daily\")\n        print(\"* Floss once per day\")\n        print(\"* Attend regular dental appointments\")\n        print(\"* Eat a balanced diet rich in fruits and vegetables\")\n        print(\"* Limit intake of sugary foods and drinks\")\n        print(\"\")\n        print(\"This combination of healthy behaviors can help prevent cavities, gum disease, and other common oral health problems.\")\n        \n    elif trust >= good[0] and trust < excellent[0]:\n        print(\"The patient has attained a very good level of oral health but could still improve some areas:\")\n        print(\"* Brush teeth twice daily\")\n        print(\"* Floss once per day\")\n        print(\"* Attend regular dental exams and cleanings as needed\")\n        print(\"\")\n        print(\"By making these simple changes, they can continue to maintain their current level of oral health or even improve it further.\")\n        \n    elif trust >=fair[0] and trust<good[0]:\n        print(\"While there are no major concerns regarding the patients' oral health at this time, \")\n        print(\"they may want to consider improving certain aspects of their routine:\")\n        print(\"* Brush teeth twice daily\")\n        print(\"* Floss once per day\")\n        print(\"\")\n        print(\"Regular visits to the dentist can also help ensure ongoing good oral health.\")\n        \n    else: \n        print(\"Based on available information, we advise that the patient take immediate action to improve their oral health.\")\n        print(\"* Brush teeth twice daily\")\n        print(\"* Floss once per day\")\n        print(\"* Avoid smoking and excessive alcohol consumption\")\n        print(\"* Visit the dentist regularly for professional cleaning and examination\")\n        print(\"* Consider incorporating more nutritious foods into their diet such as fruits and vegetables\")\n        print(\"\")\n        print(\"Failure to do so could lead to serious complications down the road including tooth loss and other severe issues related to poor oral hygiene.\")",
            "id": 973
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (tuple (integer) (integer)))) (expression_statement (assignment left: (identifier) right: (tuple (integer) (integer)))) (expression_statement (assignment left: (identifier) right: (tuple (integer) (integer)))) (expression_statement (assignment left: (identifier) right: (tuple (integer)))) (if_statement condition: (comparison_operator (identifier) (subscript value: (identifier) subscript: (integer))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (subscript value: (identifier) subscript: (integer))) right: (comparison_operator (identifier) (subscript value: (identifier) subscript: (integer)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (subscript value: (identifier) subscript: (integer))) right: (comparison_operator (identifier) (subscript value: (identifier) subscript: (integer)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))\n**\n",
        "text": " 5",
        "token_cnt": 1270
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def transform_low_handwashing(trust):\n        \"\"\"Transform low hand washing technique into soap and water analysis\n        \n        Args:\n            trust (int): level of confidence from 0 -100 indicating how much \n                someone can be trusted\n    \n        Returns:\n            str: transformed result depending upon the input value of `trust`    \n        \"\"\"\n        \n        transformations = {\n            0: \"Wash Hands Immediately\", \n            65: \"Use Alcohol Based Handrub when no soap available\", \n            85: \"Soap and Water Required\"\n        }\n    \n        \n        if not isinstance(trust, int) or trust < 0 or trust > 100:\n            raise ValueError(\"Invalid Input\")\n        elif trust in transformations:\n            return transformations[trust]\n        else:\n            \n            return \"Uncertain Transformation\"",
            "id": 974
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (integer) value: (string (string_start) (string_content) (string_end))) (pair key: (integer) value: (string (string_start) (string_content) (string_end))) (pair key: (integer) value: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (boolean_operator left: (boolean_operator left: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) right: (comparison_operator (identifier) (integer))) right: (comparison_operator (identifier) (integer))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (subscript value: (identifier) subscript: (identifier))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 331
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_extreme_nailcare(problem):\n    \"\"\"\n    This function updates extreme nail care based on \n    the given problem\n\n    Parameters\n    ----------\n    problem : str\n        The type of problem encountered by the customer\n        \n    Returns\n    -------\n    updated_policy : dict\n        A dictionary containing the updated policy for \n        extreme nail care\n    \n    Raises\n    ------\n    ValueError\n        If the inputted `problem` is not recognized as a valid problem\n    \"\"\"\n    \n    PROBLEM_TO_POLICY = {\n        \"Brittle nails\": {\"Cuticle oil\", \"Moisturizer\"},\n        \"Yellow nails\": {\"Nail polish remover\", \"Base coat\", \"Top coat\"},\n        \"Thickened nails\": {\"Trimming\", \"Nutritional supplements\"}\n    }\n    \n    \n    if problem not in PROBLEM_TO_POLICY:\n        raise ValueError(\"Invalid Problem\")\n    \n    \n    current_policy = PROBLEM_TO_POLICY[problem]\n    \n    \n    if \"Oil\" in current_policy:\n        new_products = [\"Cuticle cream\"]\n    else:\n        new_products = []\n    \n    \n    updated_policy = set(current_policy).union(new_products)\n    \n    return updated_policy",
            "id": 976
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (set (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (set (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) (pair key: (string (string_start) (string_content) (string_end)) value: (set (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))) (if_statement condition: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (list)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (identifier))) attribute: (identifier)) arguments: (argument_list (identifier))))) (return_statement (identifier)))))\n**\n",
        "text": " 6",
        "token_cnt": 505
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def analyze_toothbrushing(data):\n    \"\"\"Analyzes provided dataset of teeth cleaning records\n    \n    Args:\n        data (list[dict]): A list of dictionaries containing information about each \n            individual record including 'time', 'duration', and 'method'\n        \n    Returns:\n        tuple: A tuple containing two elements:\n            1. The number of good brushings (where duration was >=2min) \n            2. The total count of brushings\n\n    Raises:\n        ValueError: If input data format is incorrect    \n    \n    \"\"\"    \n    \n    VALID_METHODS = ['manual', 'electric']\n    if any([m not in VALID_METHODS for m in data['method'].tolist()]):\n        raise ValueError(\"Invalid method found in input data\")   \n    \n    \n    num_good_brushes = sum((d['duration']>=2*60) for d in data if d['method']=='manual')\n    tot_num_brushes = len(data)  \n    \n    return num_good_brushes, tot_num_brushes",
            "id": 981
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (if_statement condition: (call function: (identifier) arguments: (argument_list (list_comprehension body: (comparison_operator (identifier) (identifier)) (for_in_clause left: (identifier) right: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list)))))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (generator_expression body: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (binary_operator left: (integer) right: (integer)))) (for_in_clause left: (identifier) right: (identifier)) (if_clause (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (return_statement (expression_list (identifier) (identifier))))))\n**\n",
        "text": " 6",
        "token_cnt": 444
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def high_hygiene(reliability):\n    if reliability >= 0.95:\n        return \"High\"\n    elif reliability >= 0.8:\n        return \"Medium - High\"\n    else:\n        return \"Low - Medium\"\n\n\nprint(\"Reliability:\", 0.95, \"->\", high_hygiene(0.95))\nprint(\"Reliability:\", 0.75, \"->\", high_hygiene(0.75))\nprint(\"Reliability:\", 0.25, \"->\", high_hygiene(0.25))",
            "id": 982
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (float)) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (float) (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (float)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (float) (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (float)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (float) (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (float)))))))\n**\n",
        "text": " 10",
        "token_cnt": 364
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def determine_extreme_cloth_cleaning(responsibility):\n    \"\"\" \n    This function takes input from user as their role (engineer) and returns appropriate methodology to prevent odor & mildew from cloths\n    \n    Args:\n        - responsibility (str): Role of person who will perform clothe cleaning task\n        \n    Returns:    \n        str: Methodology to follow for effective prevention of odour and mildew from clothings based on given responsibility    \n\n    Raises: \n        ValueError: If invalid value passed for 'role' parameter    \n    \"\"\"   \n    \n    \n    RESPONSIBILITY = {\n        \"Engineering Manager\": \"Wash clothes at high temperatures\",\n        \"Senior Software Developer\": \"Use commercial detergents\",\n        \"Junior Data Scientist\": \"Soak clothes overnight\"\n    }  \n    \n    \n    \n    if responsibility not in RESPONSIBILITY:\n        raise ValueError(\"Invalid Value Passed\")\n        \n    \n    return RESPONSIBILITY[responsibility]\n    \n    \n    \nif __name__ == '__main__':\n    print(determine_extreme_cloth_cleaning('Engineering manager'))\n    print(determine_extreme_cloth_cleaning('senior software developer'))\n    print(determine_extreme_cloth_cleaning('junior data scientist'))",
            "id": 983
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (return_statement (subscript value: (identifier) subscript: (identifier))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))))\n**\n",
        "text": " 6",
        "token_cnt": 443
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "import random\n\n\ndef calculate_extreme_hygiene(dry_run=False):\n    \n    task_list = [\n        (\"Mopping Floors\", 5), \n        (\"Vacuuming Carpets\", 3), \n        (\"Wiping Washroom Surfaces\", 2), \n        (\"Disinfecting Elevator Buttons\", 10)\n    ]\n\n    total_score = 0\n    \n    \n    for task, points in task_list:\n        if dry_run == False:\n            print(\"Performing Task:\", task)\n        \n        if random.randint(1, 6) <= 4: \n            if dry_run == False:\n                print(\"\\tTask Successful!\")\n                \n            total_score += points\n        else:\n            if dry_run == False: \n                print(\"\\tTask Failed\")\n                \n    return total_score\n    \n    \n\nif __name__ == '__main__':    \n    \n    while True:    \n        choice = input(\"Do you want to run dry-run (y/n)? \")\n    \n        if choice.lower() == \"y\":\n            dry_run =True\n            break\n        elif choice.lower() == \"n\":\n            dry_run = False\n            break\n        else:\n            print(\"Invalid Input! Please try again.\")\n            \n    \n    result = calculate_extreme_hygiene(dry_run)\n    print(\"Total Points:\",result)",
            "id": 984
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (import_statement name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (default_parameter name: (identifier) value: (false))) body: (block (expression_statement (assignment left: (identifier) right: (list (tuple (string (string_start) (string_content) (string_end)) (integer)) (tuple (string (string_start) (string_content) (string_end)) (integer)) (tuple (string (string_start) (string_content) (string_end)) (integer)) (tuple (string (string_start) (string_content) (string_end)) (integer))))) (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (pattern_list (identifier) (identifier)) right: (identifier) body: (block (if_statement condition: (comparison_operator (identifier) (false)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))))) (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (integer))) (integer)) consequence: (block (if_statement condition: (comparison_operator (identifier) (false)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))))) (expression_statement (augmented_assignment left: (identifier) right: (identifier)))) alternative: (else_clause body: (block (if_statement condition: (comparison_operator (identifier) (false)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end)))))))))))) (return_statement (identifier)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (while_statement condition: (true) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (true))) (break_statement)) alternative: (elif_clause condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (false))) (break_statement))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))))))\n**\n",
        "text": " 5",
        "token_cnt": 833
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def check_extreme_bathing(dry):\n    \n    if (dry) {\n        print(\"Drying skin thoroughly\")\n        return \"Thoroughly dried\"\n    \n    // Else if dry = False \n    else if (!dry){ \n        print(\"Bathe again until water runs clear.\")\n        return \"Again bathed.\"\n\n    } \n\n    // Else statement \n    default: \n       print(\"Invalid input! Please enter either 'True' or 'False'. \")\n       return \"Invalid Input!\"\n}\n\n\n\nif __name__ == '__main__': \n   userInput = input(\"Do you need extreme bathing? Enter 'Yes' or 'No': \").lower()\n   result = check_extreme_bathing(userInput)\n\n   print(\"Result:\",result)",
            "id": 985
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) (ERROR (ERROR (parenthesized_expression (identifier))) (dictionary (ERROR (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (identifier)) (pair key: (conditional_expression (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) (ERROR (identifier)) (false) (ERROR (call function: (identifier) arguments: (argument_list (ERROR (type_conversion)) (identifier)))) (binary_operator left: (set (ERROR (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (identifier)) (string (string_start) (string_content) (string_end))) (ERROR (identifier) (identifier)) right: (identifier))) (ERROR (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (identifier)) value: (string (string_start) (string_content) (string_end))))) body: (block)) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))))))\n**\n",
        "text": " 5",
        "token_cnt": 448
    },
    {
        "code_snippet": {
            "language": "python",
            "text": "def update_hygiene(symptoms):\n    \"\"\"Update hygiene based on symptoms\n\n    Args:\n        symptoms (list[str]): A list containing any current symptoms experienced by the user\n    \n    Returns:\n        str: The updated level of personal hygiene recommended\n        \n    Raises:\n        ValueError: If the input 'symptoms' parameter does not contain at least one element\n    \n    \"\"\"\n    \n    if len(symptoms) == 0:\n        raise ValueError(\"The 'symptoms' parameter must contain at least one value\")\n    \n    \n    if \"fever\" in symptoms:\n        return \"increased\"\n    elif \"cough\" in symptoms:\n        return \"regular\"\n    else:\n        return \"decreased\"",
            "id": 986
        },
        "system_msg": "\nCan you calculate cyclomatic complexity for Python code using only AST representation for code and write only number?\nAfter the first pair of ‘**’ characters the AST representation will start, after the second pair of ‘**’ characters the AST representation will end.\nThe AST tree represented in S-expression format.\n\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))))\n**\n%%%%2",
        "user_msg": "\n**\n(module (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (integer)) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) consequence: (block (return_statement (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))))\n**\n",
        "text": " 6",
        "token_cnt": 270
    }
]